From 1147c79c913ad47ee21a39e6c90da04a5dfa0d75 Mon Sep 17 00:00:00 2001
From: James Deng <james.deng@spacemit.com>
Date: Thu, 14 Nov 2024 16:49:56 +0800
Subject: [PATCH 08/16] Update for v2.0.2

---
 arch/riscv/boot/dts/spacemit/Makefile         |    3 +-
 .../boot/dts/spacemit/k1-x-camera-sdk.dtsi    |   38 +-
 arch/riscv/boot/dts/spacemit/k1-x.dtsi        |  112 +-
 .../boot/dts/spacemit/k1-x_FusionOne.dts      |   16 -
 .../boot/dts/spacemit/k1-x_MUSE-Book.dts      |    6 +-
 .../dts/spacemit/k1-x_MUSE-Paper-mini-4g.dts  |   25 +-
 .../boot/dts/spacemit/k1-x_MUSE-Paper.dts     |   34 +-
 arch/riscv/boot/dts/spacemit/k1-x_ZT001H.dts  |  973 ++++
 .../boot/dts/spacemit/k1-x_orangepi-rv2.dts   | 1084 ++++
 .../riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi |   12 +-
 arch/riscv/boot/dts/spacemit/k1-x_uav.dts     | 1179 ++++
 .../dts/spacemit/lcd/lcd_ili9881c_mipi.dtsi   |  260 +
 arch/riscv/configs/k1_defconfig               |   15 +-
 arch/riscv/configs/k1_rt_defconfig            | 1317 +++++
 arch/riscv/include/asm/pci.h                  |    4 +
 arch/riscv/kernel/stacktrace.c                |    2 +-
 arch/riscv/kernel/sys_riscv.c                 |    3 +-
 drivers/base/power/wakeirq.c                  |   60 +
 drivers/clk/spacemit/ccu-spacemit-k1x.c       |   71 +-
 drivers/crypto/spacemit/spacemit-ce-glue.c    |    4 +-
 drivers/crypto/spacemit/spacemit_ce_engine.c  |    5 +
 drivers/gpu/drm/img-rogue/module_common.c     |    2 +-
 drivers/gpu/drm/radeon/radeon_device.c        |    2 +-
 drivers/gpu/drm/radeon/radeon_irq_kms.c       |    5 +
 drivers/gpu/drm/radeon/radeon_ttm.c           |    2 +-
 drivers/gpu/drm/spacemit/spacemit_dmmu.c      |    4 +-
 drivers/gpu/drm/ttm/ttm_module.c              |    3 +-
 drivers/input/misc/spacemit-pwrkey.c          |    6 +
 drivers/input/touchscreen/Kconfig             |    7 +
 drivers/input/touchscreen/Makefile            |    1 +
 .../input/touchscreen/chipone-tddi/cts_core.c |   54 +-
 drivers/input/touchscreen/chsc5xxx/Kconfig    |   51 +
 drivers/input/touchscreen/chsc5xxx/Makefile   |   13 +
 .../input/touchscreen/chsc5xxx/basic_util.c   |   39 +
 .../input/touchscreen/chsc5xxx/fw_code_bin.h  |  672 +++
 .../touchscreen/chsc5xxx/fw_update_packet.h   | 5122 +++++++++++++++++
 drivers/input/touchscreen/chsc5xxx/head_def.h |  323 ++
 .../touchscreen/chsc5xxx/i2c_communication.c  |  139 +
 .../input/touchscreen/chsc5xxx/idmx_core.c    |  444 ++
 drivers/input/touchscreen/chsc5xxx/platform.h |  112 +
 .../touchscreen/chsc5xxx/semi_touch_apk.c     |  391 ++
 .../touchscreen/chsc5xxx/semi_touch_custom.c  |  748 +++
 .../touchscreen/chsc5xxx/semi_touch_device.c  |  412 ++
 .../chsc5xxx/semi_touch_function.c            |  538 ++
 .../chsc5xxx/semi_touch_interface.h           |   93 +
 .../touchscreen/chsc5xxx/semi_touch_upgrade.c |  622 ++
 .../touchscreen/chsc5xxx/st.code-workspace    |   19 +
 .../media/platform/spacemit/camera/Makefile   |    1 +
 .../spacemit/camera/cam_ccic/ccic_drv.c       |  491 +-
 .../spacemit/camera/cam_ccic/ccic_drv.h       |   41 +-
 .../spacemit/camera/cam_ccic/ccic_hwreg.c     |   52 +-
 .../spacemit/camera/cam_ccic/ccic_hwreg.h     |   27 +-
 .../spacemit/camera/cam_ccic/ccic_vdev.c      | 1407 +++++
 .../spacemit/camera/cam_ccic/ccic_vdev.h      |  174 +
 .../spacemit/camera/cam_cpp/cpp_iommu.c       |    1 +
 .../spacemit/camera/cam_isp/k1x_isp_drv.c     |    1 +
 .../spacemit/camera/cam_plat/cam_plat.c       |    2 +
 .../spacemit/camera/vi/k1xvi/fe_isp.c         |    4 +-
 .../platform/spacemit/vpu_k1x/if/mvx_mmu.c    |    2 +
 .../spacemit/vpu_k1x/if/v4l2/mvx_v4l2_fops.c  |    4 +-
 drivers/mmc/host/sdhci-of-k1x.c               |   20 +-
 .../wireless/aic8800/aic8800_fdrv/rwnx_main.c |    4 +-
 .../realtek/rtl8852be/os_dep/linux/rtw_proc.c |    2 +-
 drivers/pinctrl/pinctrl-single.c              |   57 +-
 drivers/power/supply/cw2015_fuel_gauge.c      |    2 +-
 drivers/reset/reset-spacemit-k1x.c            |   24 +-
 drivers/soc/spacemit/Kconfig                  |    6 +
 drivers/soc/spacemit/Makefile                 |    1 +
 drivers/soc/spacemit/ddr-bw/Makefile          |    1 +
 drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.c  | 1214 ++++
 drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.h  |  363 ++
 drivers/soc/spacemit/spacemit_lid.c           |   26 +-
 drivers/tty/serial/pxa_k1x.c                  |   10 +-
 drivers/usb/typec/husb239.c                   |    1 +
 drivers/watchdog/k1x_wdt.c                    |   18 +
 .../dt-bindings/clock/spacemit-k1x-clock.h    |   45 +-
 .../dt-bindings/reset/spacemit-k1x-reset.h    |   23 +-
 include/linux/pm_wakeirq.h                    |   10 +
 include/uapi/media/k1x/k1x_ccic_uapi.h        |   37 +
 sound/soc/codecs/Kconfig                      |    5 +
 sound/soc/codecs/Makefile                     |    2 +
 sound/soc/codecs/es8323.c                     |  957 +++
 sound/soc/codecs/es8323.h                     |  155 +
 sound/soc/codecs/es8326.c                     |    8 -
 84 files changed, 20005 insertions(+), 240 deletions(-)
 create mode 100644 arch/riscv/boot/dts/spacemit/k1-x_ZT001H.dts
 create mode 100644 arch/riscv/boot/dts/spacemit/k1-x_orangepi-rv2.dts
 create mode 100644 arch/riscv/boot/dts/spacemit/k1-x_uav.dts
 create mode 100644 arch/riscv/boot/dts/spacemit/lcd/lcd_ili9881c_mipi.dtsi
 create mode 100644 arch/riscv/configs/k1_rt_defconfig
 create mode 100755 drivers/input/touchscreen/chsc5xxx/Kconfig
 create mode 100755 drivers/input/touchscreen/chsc5xxx/Makefile
 create mode 100644 drivers/input/touchscreen/chsc5xxx/basic_util.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/fw_code_bin.h
 create mode 100644 drivers/input/touchscreen/chsc5xxx/fw_update_packet.h
 create mode 100644 drivers/input/touchscreen/chsc5xxx/head_def.h
 create mode 100644 drivers/input/touchscreen/chsc5xxx/i2c_communication.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/idmx_core.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/platform.h
 create mode 100644 drivers/input/touchscreen/chsc5xxx/semi_touch_apk.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/semi_touch_custom.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/semi_touch_device.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/semi_touch_function.c
 create mode 100644 drivers/input/touchscreen/chsc5xxx/semi_touch_interface.h
 create mode 100644 drivers/input/touchscreen/chsc5xxx/semi_touch_upgrade.c
 create mode 100755 drivers/input/touchscreen/chsc5xxx/st.code-workspace
 create mode 100644 drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c
 create mode 100644 drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.h
 create mode 100644 drivers/soc/spacemit/ddr-bw/Makefile
 create mode 100644 drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.c
 create mode 100644 drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.h
 create mode 100644 include/uapi/media/k1x/k1x_ccic_uapi.h
 create mode 100644 sound/soc/codecs/es8323.c
 create mode 100644 sound/soc/codecs/es8323.h

diff --git a/arch/riscv/boot/dts/spacemit/Makefile b/arch/riscv/boot/dts/spacemit/Makefile
index 9d30aad78dd8..8a961041d6ee 100644
--- a/arch/riscv/boot/dts/spacemit/Makefile
+++ b/arch/riscv/boot/dts/spacemit/Makefile
@@ -3,5 +3,6 @@ dtb-$(CONFIG_SOC_SPACEMIT_K1X) += k1-x_evb.dtb k1-x_deb2.dtb k1-x_deb1.dtb k1-x_
 				  k1-x_MUSE-Pi.dtb k1-x_milkv-jupiter.dtb m1-x_milkv-jupiter.dtb \
 				  k1-x_MUSE-Book.dtb k1-x_lpi3a.dtb k1-x_MUSE-Card.dtb \
 				  k1-x_MUSE-Paper.dtb k1-x_MUSE-Paper-mini-4g.dtb \
-				  k1-x_baton-camera.dtb k1-x_FusionOne.dtb
+				  k1-x_baton-camera.dtb k1-x_FusionOne.dtb k1-x_orangepi-rv2.dtb \
+				  k1-x_ZT001H.dtb k1-x_uav.dtb
 obj-$(CONFIG_BUILTIN_DTB) += $(addsuffix .o, $(dtb-y))
diff --git a/arch/riscv/boot/dts/spacemit/k1-x-camera-sdk.dtsi b/arch/riscv/boot/dts/spacemit/k1-x-camera-sdk.dtsi
index 2680b7ee92c3..81a35b491131 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x-camera-sdk.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x-camera-sdk.dtsi
@@ -69,12 +69,14 @@ ccic0: ccic@d420a000 {
 		interrupt-names = "ipe-irq";
 		clocks = <&ccu CLK_CSI>,
 				<&ccu CLK_CCIC_4X>,
-				<&ccu CLK_ISP_BUS>;
-		clock-names = "csi_func", "ccic_func", "isp_axi";
+				<&ccu CLK_ISP_BUS>,
+				<&ccu CLK_DPU_MCLK>;
+		clock-names = "csi_func", "ccic_func", "isp_axi", "dpu_mclk";
 		resets = <&reset RESET_ISP_AHB>, <&reset RESET_CSI>,
-				<&reset RESET_CCIC_4X>, <&reset RESET_ISP_CI>;
+				<&reset RESET_CCIC_4X>, <&reset RESET_ISP_CI>,
+				<&reset RESET_LCD_MCLK>;
 		reset-names = "isp_ahb_reset", "csi_reset",
-				"ccic_4x_reset", "isp_ci_reset";
+				"ccic_4x_reset", "isp_ci_reset", "mclk_reset";
 		interconnects = <&dram_range3>;
 		interconnect-names = "dma-mem";
 		status = "okay";
@@ -89,14 +91,16 @@ ccic1: ccic@d420a800 {
 		interrupt-parent = <&intc>;
 		interrupts = <82>;
 		interrupt-names = "ipe-irq";
-		clocks = <&ccu CLK_CSI>, <&ccu CLK_CCIC_4X>,
-				<&ccu CLK_ISP_BUS>;
-		clock-names = "csi_func", "ccic_func",
-				"isp_axi";
+		clocks = <&ccu CLK_CSI>,
+				<&ccu CLK_CCIC_4X>,
+				<&ccu CLK_ISP_BUS>,
+				<&ccu CLK_DPU_MCLK>;
+		clock-names = "csi_func", "ccic_func", "isp_axi", "dpu_mclk";
 		resets = <&reset RESET_ISP_AHB>, <&reset RESET_CSI>,
-				<&reset RESET_CCIC_4X>, <&reset RESET_ISP_CI>;
+				<&reset RESET_CCIC_4X>, <&reset RESET_ISP_CI>,
+				<&reset RESET_LCD_MCLK>;
 		reset-names = "isp_ahb_reset", "csi_reset",
-				"ccic_4x_reset", "isp_ci_reset";
+				"ccic_4x_reset", "isp_ci_reset", "mclk_reset";
 		interconnects = <&dram_range3>;
 		interconnect-names = "dma-mem";
 		status = "okay";
@@ -111,14 +115,16 @@ ccic2: ccic@d4206000 {
 		interrupt-parent = <&intc>;
 		interrupts = <83>;
 		interrupt-names = "ipe-irq";
-		clocks = <&ccu CLK_CSI>, <&ccu CLK_CCIC_4X>,
-				<&ccu CLK_ISP_BUS>;
-		clock-names = "csi_func", "ccic_func",
-				"isp_axi";
+		clocks = <&ccu CLK_CSI>,
+				<&ccu CLK_CCIC_4X>,
+				<&ccu CLK_ISP_BUS>,
+				<&ccu CLK_DPU_MCLK>;
+		clock-names = "csi_func", "ccic_func", "isp_axi", "dpu_mclk";
 		resets = <&reset RESET_ISP_AHB>, <&reset RESET_CSI>,
-				<&reset RESET_CCIC_4X>, <&reset RESET_ISP_CI>;
+				<&reset RESET_CCIC_4X>, <&reset RESET_ISP_CI>,
+				<&reset RESET_LCD_MCLK>;
 		reset-names = "isp_ahb_reset", "csi_reset",
-				"ccic_4x_reset", "isp_ci_reset";
+				"ccic_4x_reset", "isp_ci_reset", "mclk_reset";
 		interconnects = <&dram_range3>;
 		interconnect-names = "dma-mem";
 		status = "okay";
diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index bfdaa7862995..30976f24dd80 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -1615,12 +1615,111 @@ pwm19: pwm@d4022c00 {
 			status = "disabled";
 		};
 
+		rpwm0: pwm@c0888100 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888100 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM0>;
+			resets = <&reset RESET_RCPU2_PWM0>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm1: pwm@c0888200 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888200 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM1>;
+			resets = <&reset RESET_RCPU2_PWM1>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
 		rpwm2: pwm@c0888300 {
 			compatible = "spacemit,k1x-pwm";
 			reg = <0x0 0xc0888300 0x0 0x10>;
 			#pwm-cells = <1>;
-			clocks = <&ccu CLK_RCPU2_PWM>;
-			resets = <&reset RESET_RCPU2_PWM>;
+			clocks = <&ccu CLK_RCPU2_PWM2>;
+			resets = <&reset RESET_RCPU2_PWM2>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm3: pwm@c0888400 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888400 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM3>;
+			resets = <&reset RESET_RCPU2_PWM3>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm4: pwm@c0888500 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888500 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM4>;
+			resets = <&reset RESET_RCPU2_PWM4>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm5: pwm@c0888600 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888600 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM5>;
+			resets = <&reset RESET_RCPU2_PWM5>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm6: pwm@c0888700 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888700 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM6>;
+			resets = <&reset RESET_RCPU2_PWM6>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm7: pwm@c0888800 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888800 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM7>;
+			resets = <&reset RESET_RCPU2_PWM7>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm8: pwm@c0888900 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888900 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM8>;
+			resets = <&reset RESET_RCPU2_PWM8>;
+			k1x,pwm-disable-fd;
+			rcpu-pwm;
+			status = "disabled";
+		};
+
+		rpwm9: pwm@c0888a00 {
+			compatible = "spacemit,k1x-pwm";
+			reg = <0x0 0xc0888a00 0x0 0x10>;
+			#pwm-cells = <1>;
+			clocks = <&ccu CLK_RCPU2_PWM9>;
+			resets = <&reset RESET_RCPU2_PWM9>;
 			k1x,pwm-disable-fd;
 			rcpu-pwm;
 			status = "disabled";
@@ -1647,6 +1746,12 @@ r_ircrx: irc-rx@c088e000 {
 			status = "disabled";
 		};
 
+		ddraxi_mon: ddraxi_mon@c0058500 {
+			compatible = "spacemit,ddraxi-mon";
+			reg = <0 0xc0058500 0 0x80>;
+			status = "ok";
+		};
+
 		timer0: timer@d4014000 {
 			compatible = "spacemit,soc-timer";
 			reg = <0x0 0xd4014000 0x0 0xc8>;
@@ -2192,7 +2297,8 @@ pcie2_rc: pcie@ca800000 {
 			#address-cells = <3>;
 			#size-cells = <2>;
 			ranges = <0x01000000 0x0 0xb7002000 0 0xb7002000 0x0 0x100000>,
-				 <0x02000000 0x0 0xa0000000 0 0xa0000000 0x0 0x17000000>;
+				 <0x42000000 0x0 0xa0000000 0 0xa0000000 0x0 0x10000000>,
+				 <0x02000000 0x0 0xb0000000 0 0xb0000000 0x0 0x7000000>;
 			interconnects = <&dram_range2>;
 			interconnect-names = "dma-mem";
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_FusionOne.dts b/arch/riscv/boot/dts/spacemit/k1-x_FusionOne.dts
index bb026a56b180..0874359a491f 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_FusionOne.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_FusionOne.dts
@@ -185,12 +185,6 @@ dwc3_con_ep: endpoint {
 					remote-endpoint = <&con_u3_ep>;
 				};
 			};
-			port@1 {
-				reg = <0x1>;
-				dwc3_ep: endpoint {
-					remote-endpoint = <&dwc3_role_switch>;
-				};
-			};
 		};
 	};
 
@@ -809,16 +803,6 @@ dwc3@c0a00000 {
 
 		usb-role-switch;
 		role-switch-default-mode = "peripheral";
-		ports {
-			#address-cells = <1>;
-			#size-cells = <0>;
-			port@0 {
-				reg = <0x0>;
-				dwc3_role_switch: endpoint {
-					remote-endpoint = <&dwc3_ep>;
-				};
-			};
-		};
 	};
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
index d6c702328628..85e70e676e9a 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
@@ -140,11 +140,11 @@ vcc4v0_baseboard: vcc4v0-baseboard {
 
 	spacemit_lid:spacemit_lid {
 		compatible = "spacemit,k1x-lid";
-		lid-gpios = <&gpio 74 0>;
 		pinctrl-names = "default";
 		pinctrl-0 = <&pinctrl_hall_wakeup>;
-		interrupt-parent = <&pinctrl>;
-		interrupts = <300>;
+		lid-gpios = <&gpio 74 0>;
+		interrupts-extended = <&gpio 74 1
+				&pinctrl 300>;
 	};
 
 	rf_pwrseq: rf-pwrseq {
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper-mini-4g.dts b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper-mini-4g.dts
index 9c595b3170f1..9d1a954053c2 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper-mini-4g.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper-mini-4g.dts
@@ -301,6 +301,14 @@ &i2c1 {
 	pinctrl-0 = <&pinctrl_i2c1>;
 	spacemit,i2c-fast-mode;
 	status = "okay";
+
+	smtouch@2e {
+		compatible = "chipsemi,chsc_cap_touch";
+		reg = <0x2e>;
+		chipsemi,int-gpio = <&gpio 29 0>;
+		chipsemi,rst-gpio = <&gpio 32 0>;
+		pwr-gpios  = <&gpio 33 0>;
+	};
 };
 
 &i2c2 {
@@ -632,7 +640,7 @@ ext_adc: adc {
 	};
 
 	sgm4154x: sgm4154x@1a {
-		status = "disabled";
+		status = "okay";
 		compatible = "sgm,sgm41515";
 		reg = <0x1a>;
 		interrupt-parent = <&gpio>;
@@ -704,6 +712,18 @@ pinctrl_wlan_wakeup: wlan_wakeup_grp {
 			K1X_PADCONF(GPIO_66, MUX_MODE0, (EDGE_FALL | PULL_DOWN | PAD_3V_DS2))   /* wifi edge detect */
 		>;
 	};
+
+	pinctrl_mmc1_debug: mmc1_debug_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(MMC1_DAT3, MUX_MODE3, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* uart0_txd */
+			K1X_PADCONF(MMC1_DAT2, MUX_MODE3, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* uart0_rxd */
+			K1X_PADCONF(MMC1_DAT1, MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_d1 */
+			K1X_PADCONF(MMC1_DAT0, MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_d0 */
+			K1X_PADCONF(MMC1_CMD,  MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_cmd */
+			K1X_PADCONF(MMC1_CLK,  MUX_MODE0, (EDGE_NONE | PULL_DOWN | PAD_3V_DS4))	/* mmc1_clk */
+		>;
+	};
+
 };
 
 &gpio{
@@ -729,9 +749,10 @@ &pinctrl 123 GPIO_123 5
 
 /* SD */
 &sdhci0 {
-	pinctrl-names = "default","fast";
+	pinctrl-names = "default","fast","debug";
 	pinctrl-0 = <&pinctrl_mmc1>;
 	pinctrl-1 = <&pinctrl_mmc1_fast>;
+	pinctrl-2 = <&pinctrl_mmc1_debug>;
 	bus-width = <4>;
 	cd-gpios = <&gpio 80 0>;
 	vmmc-supply = <&dcdc_4>;
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts
index 584c0f718450..f5319848a118 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts
@@ -363,14 +363,14 @@ cw2015: cw2015@62 {
 		compatible = "cellwise,cw2015";
 		reg = <0x62>;
 		cellwise,battery-profile = /bits/ 8 <
-			0x17 0x67 0x66 0x6C 0x6A 0x69 0x64 0x5E
-			0x65 0x6B 0x4E 0x52 0x4F 0x4F 0x46 0x3C
-			0x35 0x2B 0x24 0x20 0x21 0x2F 0x42 0x4C
-			0x24 0x4A 0x0B 0x85 0x31 0x51 0x57 0x6D
-			0x77 0x6B 0x6A 0x6F 0x40 0x1C 0x7C 0x42
-			0x0F 0x31 0x1E 0x50 0x86 0x95 0x97 0x27
-			0x57 0x73 0x95 0xC3 0x80 0xD8 0xFF 0xCB
-			0x2F 0x7D 0x72 0xA5 0xB5 0xC1 0x73 0x09
+			0x17 0x67 0x73 0x69 0x68 0x65 0x64 0x55
+			0x75 0x60 0x4A 0x57 0x57 0x4E 0x42 0x3A
+			0x30 0x28 0x23 0x1E 0x23 0x35 0x46 0x4D
+			0x14 0x86 0x06 0x66 0x25 0x45 0x51 0x63
+			0x72 0x69 0x66 0x6B 0x3F 0x1B 0x78 0x39
+			0x0A 0x2F 0x1A 0x46 0x88 0x94 0x9B 0x12
+			0x3B 0x5F 0x9A 0xB6 0x80 0x57 0x7F 0xCB
+			0x2F 0x00 0x64 0xA5 0xB5 0xC1 0x46 0xAE
 		>;
 		status = "okay";
 	};
@@ -808,6 +808,18 @@ pinctrl_wlan_wakeup: wlan_wakeup_grp {
 			K1X_PADCONF(GPIO_66, MUX_MODE0, (EDGE_FALL | PULL_DOWN | PAD_3V_DS2))   /* wifi edge detect */
 		>;
 	};
+
+	pinctrl_mmc1_debug: mmc1_debug_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(MMC1_DAT3, MUX_MODE3, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* uart0_txd */
+			K1X_PADCONF(MMC1_DAT2, MUX_MODE3, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* uart0_rxd */
+			K1X_PADCONF(MMC1_DAT1, MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_d1 */
+			K1X_PADCONF(MMC1_DAT0, MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_d0 */
+			K1X_PADCONF(MMC1_CMD,  MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_cmd */
+			K1X_PADCONF(MMC1_CLK,  MUX_MODE0, (EDGE_NONE | PULL_DOWN | PAD_3V_DS4))	/* mmc1_clk */
+		>;
+	};
+
 };
 
 &gpio{
@@ -833,9 +845,10 @@ &pinctrl 123 GPIO_123 5
 
 /* SD */
 &sdhci0 {
-	pinctrl-names = "default","fast";
+	pinctrl-names = "default","fast","debug";
 	pinctrl-0 = <&pinctrl_mmc1>;
 	pinctrl-1 = <&pinctrl_mmc1_fast>;
+	pinctrl-2 = <&pinctrl_mmc1_debug>;
 	bus-width = <4>;
 	cd-gpios = <&gpio 80 0>;
 	vmmc-supply = <&dcdc_4>;
@@ -861,7 +874,7 @@ SDHCI_QUIRK2_SET_AIB_MMC
 	spacemit,apbc_assar_reg = <0xD4015054>;
 	spacemit,rx_dline_reg = <0x0>;
 	spacemit,tx_dline_reg = <0x0>;
-	spacemit,tx_delaycode = <0xaf>;
+	spacemit,tx_delaycode = <0x7f>;
 	spacemit,rx_tuning_limit = <50>;
 	spacemit,sdh-freq = <204800000>;
 	status = "okay";
@@ -892,6 +905,7 @@ SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
 			SDHCI_QUIRK2_BROKEN_PHY_MODULE
 			)>;
 	spacemit,rx_dline_reg = <0x0>;
+	spacemit,tx_delaycode = <0xaf>;
 	spacemit,rx_tuning_limit = <50>;
 	spacemit,sdh-freq = <375000000>;
 	status = "okay";
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_ZT001H.dts b/arch/riscv/boot/dts/spacemit/k1-x_ZT001H.dts
new file mode 100644
index 000000000000..b45155f56113
--- /dev/null
+++ b/arch/riscv/boot/dts/spacemit/k1-x_ZT001H.dts
@@ -0,0 +1,973 @@
+// SPDX-License-Identifier: (GPL-2.0 OR MIT)
+/* Copyright (c) 2023 Spacemit, Inc */
+
+/dts-v1/;
+
+#include "k1-x.dtsi"
+#include "k1-x-efuse.dtsi"
+#include "k1-x_pinctrl.dtsi"
+#include "lcd/lcd_icnl9951r_mipi.dtsi"
+#include "k1-x-lcd.dtsi"
+#include "k1-x-hdmi.dtsi"
+#include "k1-x_opp_table.dtsi"
+#include "k1-x_thermal_cooling.dtsi"
+#include "k1-x-camera-sdk.dtsi"
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/input/input.h>
+#include <dt-bindings/usb/pd.h>
+
+/ {
+	model = "ZT001H";
+
+	cpus: cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		timebase-frequency = <24000000>;
+
+		cpu_0: cpu@0 {
+			cpu-ai = "true";
+		};
+
+		cpu_1: cpu@1 {
+			cpu-ai = "true";
+		};
+
+		cpu_2: cpu@2 {
+			reg = <2>;
+			cpu-ai = "true";
+		};
+
+		cpu_3: cpu@3 {
+			reg = <3>;
+			cpu-ai = "true";
+		};
+
+		cpu-map {
+			cluster0 {
+				core0 {
+					cpu = <&cpu_0>;
+				};
+
+				core1 {
+					cpu = <&cpu_1>;
+				};
+
+				core2 {
+					cpu = <&cpu_2>;
+				};
+
+				core3 {
+					cpu = <&cpu_3>;
+				};
+			};
+
+			cluster1 {
+				core0 {
+					cpu = <&cpu_4>;
+				};
+
+				core1 {
+					cpu = <&cpu_5>;
+				};
+
+				core2 {
+					cpu = <&cpu_6>;
+				};
+
+				core3 {
+					cpu = <&cpu_7>;
+				};
+			};
+		};
+	};
+
+	memory@0 {
+		device_type = "memory";
+		reg = <0x0 0x00000000 0x0 0x80000000>;
+	};
+
+	memory@100000000 {
+		device_type = "memory";
+		reg = <0x1 0x00000000 0x0 0x80000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		linux,cma {
+			compatible = "shared-dma-pool";
+			/* alloc memory from 0x40000000~0x80000000 */
+			alloc-ranges = <0 0x40000000 0 0x40000000>;
+			/* size of cma buffer is 384MByte */
+			size = <0 0x18000000>;
+			/* start address is 1Mbyte aligned */
+			alignment = <0x0 0x100000>;
+			linux,cma-default;
+			/* besides hardware, dma for ex. buffer can be used by memory management */
+			reusable;
+		};
+
+		/* reserved 384K for dpu, including mmu table(256K) and cmdlist(128K) */
+		dpu_resv: dpu_reserved@2ff40000 {
+			compatible = "shared-dma-pool";
+			reg = <0x0 0x2ff40000 0x0 0x000C0000>;
+			no-map;
+		};
+	};
+
+	chosen {
+		bootargs = "earlycon=sbi console=ttyS0,115200n8 debug loglevel=8 swiotlb=65536 rdinit=/init";
+		stdout-path = "serial0:115200n8";
+	};
+
+	dc_12v: dc-12v {
+		compatible = "regulator-fixed";
+		regulator-name = "dc_12v";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <12000000>;
+		regulator-max-microvolt = <12000000>;
+	};
+
+	vcc4v0_baseboard: vcc4v0-baseboard {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc4v0_baseboard";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <4000000>;
+		regulator-max-microvolt = <4000000>;
+		vin-supply = <&dc_12v>;
+	};
+
+/*
+	rf_pwrseq: rf-pwrseq {
+		compatible = "spacemit,rf-pwrseq";
+		//vdd-supply = <&ldo_7>;
+		//vdd_voltage = <3300000>;
+		io-supply = <&dcdc_3>;
+		io_voltage = <1800000>;
+		pwr-gpios  = <&gpio 67 0>,
+			     <&gpio 03 0>;
+		status = "okay";
+
+		wlan_pwrseq: wlan-pwrseq {
+			compatible = "spacemit,wlan-pwrseq";
+			regon-gpios = <&gpio 116 0>;
+			interrupt-parent = <&pinctrl>;
+			interrupts = <268>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&pinctrl_wlan_wakeup>;
+		};
+
+		bt_pwrseq: bt-pwrseq {
+			compatible = "spacemit,bt-pwrseq";
+			reset-gpios     = <&gpio 63 0>;
+		};
+	};
+*/
+
+	gpio_keys: gpio_keys {
+		compatible = "gpio-keys";
+
+		key0: volumeup {
+			label = "KEY0";
+			linux,code = <KEY_VOLUMEUP>;
+			gpios = <&gpio 70 GPIO_ACTIVE_LOW>;
+		};
+
+		key1: volumedown {
+			label = "KEY1";
+			linux,code = <KEY_VOLUMEDOWN>;
+			gpios = <&gpio 71 GPIO_ACTIVE_LOW>;
+		};
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart0_2>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2>;
+	status = "okay";
+};
+
+&pwm14 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm14_1>;
+	status = "okay";
+};
+
+/*
+&dpu_online2_dsi {
+	memory-region = <&dpu_resv>;
+	spacemit-dpu-bitclk = <1000000000>;
+	spacemit-dpu-escclk = <76800000>;
+	dsi_1v2-supply = <&ldo_5>;
+	dsi_1v8-supply = <&ldo_11>;
+	vin-supply-names = "dsi_1v2", "dsi_1v8";
+	status = "okay";
+};
+
+&dsi2 {
+	status = "okay";
+
+	panel2: panel2@0 {
+		status = "ok";
+		compatible = "spacemit,mipi-panel2";
+		reg = <0>;
+
+		gpios-reset = <30>;
+		gpios-dc = <34 42>;
+		gpios-avdd = <35 36>;
+		gpios-bl = <31>;
+		id = <2>;
+		delay-after-reset = <10>;
+		force-attached = "lcd_icnl9951r_mipi";
+	};
+};
+
+&lcds {
+	status = "okay";
+};
+*/
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c0>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+};
+&i2c1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c1>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+};
+
+&i2c2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c2_0>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+
+	eeprom@50{
+		compatible = "atmel,24c02";
+		reg = <0x50>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		power-domains = <&power K1X_PMU_DUMMY_PWR_DOMAIN>;
+		status = "okay";
+
+		mac_address0: mac_address0@0 {
+			reg = <0x0 6>;
+		};
+
+		mac_address1: mac_address1@6 {
+			reg = <0x6 6>;
+		};
+	};
+
+	es8326: es8326@19{
+		compatible = "everest,es8326";
+		reg = <0x19>;
+		#sound-dai-cells = <0>;
+		interrupt-parent = <&gpio>;
+		interrupts = <126 1>;
+		spk-ctl-gpio = <&gpio 127 0>;
+		everest,jack-detect-inverted;
+		everest,mic1-src = [44];
+		everest,mic2-src = [66];
+		status = "okay";
+	};
+};
+
+&i2c4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c4_2>;
+	status = "disabled";
+};
+
+&i2c5 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c5_0>;
+	status = "okay";
+};
+
+
+&i2c6 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c6_0>;
+	clock-frequency = <100000>;
+	status = "disabled";
+};
+
+&i2c8 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c8>;
+	status = "okay";
+
+	spm8821@41 {
+		compatible = "spacemit,spm8821";
+		reg = <0x41>;
+		interrupt-parent = <&intc>;
+		interrupts = <64>;
+		status = "okay";
+
+		vcc_sys-supply = <&vcc4v0_baseboard>;
+		dcdc5-supply = <&dcdc_5>;
+
+		regulators {
+			compatible = "pmic,regulator,spm8821";
+
+			/* buck */
+			dcdc_1: DCDC_REG1 {
+				regulator-name = "dcdc1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <650000>;
+				};
+			};
+
+			dcdc_2: DCDC_REG2 {
+				regulator-name = "dcdc2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_3: DCDC_REG3 {
+				regulator-name = "dcdc3";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_4: DCDC_REG4 {
+				regulator-name = "dcdc4";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <3300000>;
+				};
+			};
+
+			dcdc_5: DCDC_REG5 {
+				regulator-name = "dcdc5";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_6: DCDC_REG6 {
+				regulator-name = "dcdc6";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			/* aldo */
+			ldo_1: LDO_REG1 {
+				regulator-name = "ldo1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_2: LDO_REG2 {
+				regulator-name = "ldo2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_3: LDO_REG3 {
+				regulator-name = "ldo3";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_4: LDO_REG4 {
+				regulator-name = "ldo4";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			/* dldo */
+			ldo_5: LDO_REG5 {
+				regulator-name = "ldo5";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_6: LDO_REG6 {
+				regulator-name = "ldo6";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_7: LDO_REG7 {
+				regulator-name = "ldo7";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_8: LDO_REG8 {
+				regulator-name = "ldo8";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-always-on;
+			};
+
+			ldo_9: LDO_REG9 {
+				regulator-name = "ldo9";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+			};
+
+			ldo_10: LDO_REG10 {
+				regulator-name = "ldo10";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-always-on;
+			};
+
+			ldo_11: LDO_REG11 {
+				regulator-name = "ldo11";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+			};
+
+			sw_1: SWITCH_REG1 {
+				regulator-name = "switch1";
+			};
+		};
+
+		pmic_pinctrl: pinctrl {
+			compatible = "pmic,pinctrl,spm8821";
+			gpio-controller;
+			#gpio-cells = <2>;
+			spacemit,npins = <6>;
+/**
+ *			led_pins: led-pins {
+ *				pins = "PIN3";
+ *				function = "sleep";
+ *				bias-disable = <0>;
+ *				drive-open-drain = <0x1>;
+ *			};
+ */
+		};
+
+		pwr_key: key {
+			compatible = "pmic,pwrkey,spm8821";
+		};
+
+		ext_rtc: rtc {
+			compatible = "pmic,rtc,spm8821";
+		};
+
+		ext_adc: adc {
+			compatible = "pmic,adc,spm8821";
+		};
+	};
+
+	sgm4154x: sgm4154x@1a {
+		status = "okay";
+		compatible = "sgm,sgm41515";
+		reg = <0x1a>;
+		primary-charger;
+		interrupt-parent = <&gpio>;
+		interrupts = <5 0>;            //irq num base on hardware design
+		sgm,irq-gpio = <&gpio 5 0>;     //irq num base on hardware design
+		sgm,chg-en-gpio = <&gpio 117 0>;   //charger enable gpio num base on hardware design
+		nqon-gpios = <&gpio 115 0>;
+		/* sw jeita  parameter customer defined*/
+		enable_sw_jeita;
+		jeita_temp_above_t4_cv = <0>;
+		jeita_temp_t3_to_t4_cv = <4100000>;
+		jeita_temp_t2_to_t3_cv = <4350000>;
+		jeita_temp_t1_to_t2_cv = <4350000>;
+		jeita_temp_t0_to_t1_cv = <0>;
+		jeita_temp_below_t0_cv = <0>;
+
+		jeita_temp_above_t4_cc_current = <0>;
+		jeita_temp_t3_to_t4_cc_current = <1000000>;
+		jeita_temp_t2_to_t3_cc_current = <1250000>;
+		jeita_temp_t1_to_t2_cc_current = <1000000>;
+		jeita_temp_below_t0_cc_current = <0>;
+
+		temp_t4_thres = <50>;
+		temp_t4_thres_minus_x_degree = <48>;
+		temp_t3_thres = <45>;
+		temp_t3_thres_minus_x_degree = <45>;
+		temp_t2_thres = <20>;
+		temp_t2_thres_plus_x_degree = <15>;
+		temp_t1_thres = <0>;
+		temp_t1_thres_plus_x_degree = <0>;
+		temp_t0_thres = <0>;
+		temp_t0_thres_plus_x_degree = <2>;
+		temp_neg_10_thres = <0>;
+
+		sgm415xx-vchrg-uV = <4350000>;
+	};
+
+	cw2015: cw2015@62 {
+		compatible = "cellwise,cw2015";
+		reg = <0x62>;
+/*		cellwise,battery-profile = /bits/ 8 <
+			0x17 0x67 0x73 0x69 0x68 0x65 0x64 0x55
+			0x75 0x60 0x4A 0x57 0x57 0x4E 0x42 0x3A
+			0x30 0x28 0x23 0x1E 0x23 0x35 0x46 0x4D
+			0x14 0x86 0x06 0x66 0x25 0x45 0x51 0x63
+			0x72 0x69 0x66 0x6B 0x3F 0x1B 0x78 0x39
+			0x0A 0x2F 0x1A 0x46 0x88 0x94 0x9B 0x12
+			0x3B 0x5F 0x9A 0xB6 0x80 0x57 0x7F 0xCB
+			0x2F 0x00 0x64 0xA5 0xB5 0xC1 0x46 0xAE
+		>;
+*/		status = "okay";
+	};
+};
+
+&pinctrl {
+	pinctrl-single,gpio-range = <
+		&range GPIO_01  4 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_06  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_13  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_48  1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_3V_DS4)
+		&range GPIO_49  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range GPIO_58  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_63  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_65  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_66  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range PRI_TDI  2 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range PRI_TCK  1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range PRI_TDO  1 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_74  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_76  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range GPIO_78  3 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range GPIO_81  3 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_86  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_89  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_90  1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_91  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range DVL0     2 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_110 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_114 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_115 2 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_123 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_124 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_125 3 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+	>;
+
+	pinctrl_rcpu: pinctrl_rcpu_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(GPIO_47,   MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_tx */
+			K1X_PADCONF(GPIO_48,   MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_rx */
+		>;
+	};
+
+	pinctrl_wlan_wakeup: wlan_wakeup_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_66, MUX_MODE0, (EDGE_FALL | PULL_DOWN | PAD_3V_DS2))   /* wifi edge detect */
+		>;
+	};
+
+	pinctrl_mmc1_debug: mmc1_debug_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(MMC1_DAT3, MUX_MODE3, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* uart0_txd */
+			K1X_PADCONF(MMC1_DAT2, MUX_MODE3, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* uart0_rxd */
+			K1X_PADCONF(MMC1_DAT1, MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_d1 */
+			K1X_PADCONF(MMC1_DAT0, MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_d0 */
+			K1X_PADCONF(MMC1_CMD,  MUX_MODE0, (EDGE_NONE | PULL_UP   | PAD_3V_DS4))	/* mmc1_cmd */
+			K1X_PADCONF(MMC1_CLK,  MUX_MODE0, (EDGE_NONE | PULL_DOWN | PAD_3V_DS4))	/* mmc1_clk */
+		>;
+	};
+
+};
+
+&gpio{
+	gpio-ranges = <
+		&pinctrl 01  GPIO_01  4
+		&pinctrl 06  GPIO_06  1
+		&pinctrl 13  GPIO_13  2
+		&pinctrl 48  GPIO_48  3
+		&pinctrl 58  GPIO_58  1
+		&pinctrl 63  GPIO_63  5
+		&pinctrl 70  PRI_TDI  4
+		&pinctrl 74  GPIO_74  1
+		&pinctrl 76  GPIO_76  1
+		&pinctrl 78  GPIO_78  6
+		&pinctrl 86  GPIO_86  1
+		&pinctrl 89  GPIO_89  4
+		&pinctrl 96  DVL0     2
+		&pinctrl 110 GPIO_110 1
+		&pinctrl 114 GPIO_114 3
+		&pinctrl 123 GPIO_123 5
+	>;
+};
+
+/* SDIO */
+&sdhci1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_mmc2>;
+	bus-width = <4>;
+	non-removable;
+	vqmmc-supply = <&dcdc_3>;
+	no-mmc;
+	no-sd;
+	keep-power-in-suspend;
+	/* bcmdhd use private oob solution rather than dat1/standard wakeup */
+	/delete-property/ enable-sdio-wakeup;
+	spacemit,sdh-host-caps-disable = <(
+			MMC_CAP_UHS_DDR50 |
+			MMC_CAP_NEEDS_POLL
+			)>;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
+			SDHCI_QUIRK2_BROKEN_PHY_MODULE
+			)>;
+	spacemit,rx_dline_reg = <0x0>;
+	spacemit,rx_tuning_limit = <50>;
+	spacemit,sdh-freq = <375000000>;
+	status = "okay";
+};
+
+/* eMMC */
+&sdhci2 {
+	bus-width = <8>;
+	non-removable;
+	mmc-hs400-1_8v;
+	mmc-hs400-enhanced-strobe;
+	no-sd;
+	no-sdio;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN
+			)>;
+	spacemit,sdh-freq = <375000000>;
+	status = "okay";
+};
+
+&usbphy {
+	status = "okay";
+};
+
+&ehci {
+	spacemit,reset-on-resume;
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	status = "okay";
+};
+
+&udc {
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	status = "okay";
+};
+
+/*
+&otg {
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	usb-role-switch;
+	role-switch-user-control;
+	spacemit,reset-on-resume;
+	status = "okay";
+
+	usb-role-switch;
+	role-switch-default-mode = "peripheral";
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		port@0 {
+			reg = <0x0>;
+			otg_role_switch: endpoint {
+				remote-endpoint = <&otg_ep>;
+			};
+		};
+	};
+};
+*/
+
+&usbphy1 {
+	status = "okay";
+};
+
+&udc1 {
+	/*spacemit,udc-mode = <MV_USB_MODE_UDC>;*/
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	status = "disabled";
+};
+
+&ehci1 {
+	spacemit,reset-on-resume;
+	status = "okay";
+};
+
+&otg1 {
+	usb-role-switch;
+	role-switch-user-control;
+	spacemit,reset-on-resume;
+	role-switch-default-mode = "host";
+	vbus-gpios = <&gpio 123 0>;
+	status = "disabled";
+};
+
+&usb2phy {
+	status = "okay";
+};
+
+&combphy {
+	status = "okay";
+};
+
+/*
+&usbdrd3 {
+	status = "okay";
+	reset-on-resume;
+	dwc3@c0a00000 {
+		dr_mode = "otg";
+		phy_type = "utmi";
+		snps,hsphy_interface = "utmi";
+		snps,dis_enblslpm_quirk;
+		snps,dis_u2_susphy_quirk;
+		snps,dis_u3_susphy_quirk;
+		snps,dis-del-phy-power-chg-quirk;
+		snps,dis-tx-ipgap-linecheck-quirk;
+		snps,parkmode-disable-ss-quirk;
+
+		usb-role-switch;
+		role-switch-default-mode = "peripheral";
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			port@0 {
+				reg = <0x0>;
+				dwc3_role_switch: endpoint {
+					remote-endpoint = <&dwc3_ep>;
+				};
+			};
+		};
+	};
+};
+*/
+
+&imggpu {
+	status = "okay";
+};
+
+&qspi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi>;
+	status = "disabled";
+
+	flash@0 {
+		compatible = "jedec,spi-nor";
+		reg = <0>;
+		spi-max-frequency = <26500000>;
+		m25p,fast-read;
+		broken-flash-reset;
+		status = "okay";
+	};
+};
+
+&pwm_bl {
+	pwms = <&pwm14 2000>;
+	brightness-levels = <
+		0   20  20  20  21  21  21  22  22  22  23  23  23  24  24  24
+		25  25  25  26  26  26  27  27  27  28  28  29  29  30  30  31
+		32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47
+		48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
+		64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79
+		80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
+		96  97  98  99  100 101 102 103 104 105 106 107 108 109 110 111
+		112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
+		128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
+		144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
+		160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175
+		176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
+		192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207
+		208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
+		224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239
+		240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255
+	>;
+	default-brightness-level = <100>;
+
+	status = "okay";
+};
+
+/* MIPI CSI1, clk lane1, Fixme: frontsensor gc08a8 */
+/*
+&backsensor {
+	af_2v8-supply = <&ldo_3>;
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+	dvdd_1v2-supply = <&ldo_6>;
+
+	pwdn-gpios = <&gpio 113 0>;
+	reset-gpios = <&gpio 111 0>;
+
+	twsi-index = <0>;
+
+	status = "okay";
+};
+*/
+/* MIPI CSI3 data line2,3 clk lane2 */
+/*
+&backsensor_aux {
+	//af_2v8-supply = <&ldo_3>;
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+	//dvdd_1v2-supply = <&ldo_6>;
+
+	pwdn-gpios = <&gpio 114 0>;
+	reset-gpios = <&gpio 112 0>;
+
+	twsi-index = <1>;
+
+	status = "disabled";
+};
+*/
+
+/* MIPI CSI3 data line0,1 clk lane3, Fixme: backsensor gc13a0 */
+/*
+&frontsensor {
+	af_2v8-supply = <&ldo_3>;
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+	dvdd_1v2-supply = <&ldo_6>;
+
+	clocks = <&ccu CLK_CAMM1>;
+	clock-names = "cam_mclk1";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_camera1>;
+
+	pwdn-gpios = <&gpio 114 0>;
+	reset-gpios = <&gpio 112 0>;
+
+	twsi-index = <1>;
+
+	status = "okay";
+};
+&csiphy0 {
+
+	status = "okay";
+};
+&csiphy1 {
+
+	status = "disabled";
+};
+&csiphy2 {
+
+	status = "okay";
+};
+
+&ccic0 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&ccic1 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&ccic2 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&isp {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&cpp {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&vi {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+*/
+
+&rcpu {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_rcpu>;
+	mboxes = <&mailbox 0>, <&mailbox 1>;
+	mbox-names = "vq0", "vq1";
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
+	status = "okay";
+};
+
+&i2s0 {
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_sspa0_0>;
+        status = "disabled";
+};
+
+&sound_codec {
+	status = "disabled";
+	simple-audio-card,name = "snd-es8326";
+	spacemit,mclk-fs = <64>;
+	simple-audio-card,codec {
+		sound-dai = <&es8326>;
+	};
+};
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_orangepi-rv2.dts b/arch/riscv/boot/dts/spacemit/k1-x_orangepi-rv2.dts
new file mode 100644
index 000000000000..ba7901464c35
--- /dev/null
+++ b/arch/riscv/boot/dts/spacemit/k1-x_orangepi-rv2.dts
@@ -0,0 +1,1084 @@
+// SPDX-License-Identifier: (GPL-2.0 OR MIT)
+/* Copyright (c) 2023 Spacemit, Inc */
+
+/dts-v1/;
+
+#include "k1-x.dtsi"
+#include "k1-x-efuse.dtsi"
+#include "k1-x_pinctrl.dtsi"
+#include "lcd/lcd_ili9881c_mipi.dtsi"
+#include "k1-x-hdmi.dtsi"
+#include "k1-x-lcd.dtsi"
+#include "k1-x-camera-sdk.dtsi"
+#include "k1-x_opp_table.dtsi"
+#include "k1-x_thermal_cooling.dtsi"
+
+/ {
+	model = "spacemit k1-x orangepi-rv2 board";
+	modules_usrload = "8852bs";
+
+	cpus: cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		timebase-frequency = <24000000>;
+
+		cpu_0: cpu@0 {
+			cpu-ai = "true";
+		};
+
+		cpu_1: cpu@1 {
+			cpu-ai = "true";
+		};
+
+		cpu_2: cpu@2 {
+			reg = <2>;
+			cpu-ai = "true";
+		};
+
+		cpu_3: cpu@3 {
+			reg = <3>;
+			cpu-ai = "true";
+		};
+
+		cpu-map {
+			cluster0 {
+				core0 {
+					cpu = <&cpu_0>;
+				};
+
+				core1 {
+					cpu = <&cpu_1>;
+				};
+
+				core2 {
+					cpu = <&cpu_2>;
+				};
+
+				core3 {
+					cpu = <&cpu_3>;
+				};
+			};
+
+			cluster1 {
+				core0 {
+					cpu = <&cpu_4>;
+				};
+
+				core1 {
+					cpu = <&cpu_5>;
+				};
+
+				core2 {
+					cpu = <&cpu_6>;
+				};
+
+				core3 {
+					cpu = <&cpu_7>;
+				};
+			};
+		};
+	};
+
+	memory@0 {
+		device_type = "memory";
+		reg = <0x0 0x00000000 0x0 0x80000000>;
+	};
+
+	memory@100000000 {
+		device_type = "memory";
+		reg = <0x1 0x00000000 0x0 0x80000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		linux,cma {
+			compatible = "shared-dma-pool";
+			/* alloc memory from 0x40000000~0x80000000 */
+			alloc-ranges = <0 0x40000000 0 0x40000000>;
+			/* size of cma buffer is 384MByte */
+			size = <0 0x18000000>;
+			/* start address is 1Mbyte aligned */
+			alignment = <0x0 0x100000>;
+			linux,cma-default;
+			/* besides hardware, dma for ex. buffer can be used by memory management */
+			reusable;
+		};
+
+		/* reserved 384K for dpu, including mmu table(256K) and cmdlist(128K) */
+		dpu_resv: dpu_reserved@2ff40000 {
+			compatible = "shared-dma-pool";
+			reg = <0x0 0x2ff40000 0x0 0x000C0000>;
+			no-map;
+		};
+	};
+
+	chosen {
+		bootargs = "earlycon=sbi console=ttyS0,115200n8 debug loglevel=8 swiotlb=65536 rdinit=/init";
+		stdout-path = "serial0:115200n8";
+	};
+
+	dc_12v: dc-12v {
+		compatible = "regulator-fixed";
+		regulator-name = "dc_12v";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <12000000>;
+		regulator-max-microvolt = <12000000>;
+	};
+
+	vcc4v0_baseboard: vcc4v0-baseboard {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc4v0_baseboard";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <4000000>;
+		regulator-max-microvolt = <4000000>;
+		vin-supply = <&dc_12v>;
+	};
+
+	rf_pwrseq: rf-pwrseq {
+		compatible = "spacemit,rf-pwrseq";
+		//vdd-supply = <&ldo_7>;
+		//vdd_voltage = <3300000>;
+		io-supply = <&dcdc_3>;
+		io_voltage = <1800000>;
+		pwr-gpios  = <&gpio 67 0>;
+		status = "okay";
+
+		wlan_pwrseq: wlan-pwrseq {
+			compatible = "spacemit,wlan-pwrseq";
+			regon-gpios = <&gpio 116 0>;
+			interrupt-parent = <&pinctrl>;
+			interrupts = <268>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&pinctrl_wlan_wakeup>;
+		};
+
+		bt_pwrseq: bt-pwrseq {
+			compatible = "spacemit,bt-pwrseq";
+			reset-gpios     = <&gpio 63 0>;
+		};
+	};
+
+	leds {
+		compatible = "gpio-leds";
+
+		led1 {
+			label = "sys-led";
+			gpios = <&gpio 96 0>;
+			linux,default-trigger = "heartbeat";
+			default-state = "on";
+			status = "okay";
+		};
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart0_2>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2>;
+	status = "okay";
+};
+
+&pwm14 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm14_1>;
+	status = "okay";
+};
+
+&dpu_online2_dsi {
+	memory-region = <&dpu_resv>;
+	spacemit-dpu-bitclk = <424000000>;
+	/* spacemit-dpu-escclk = <76800000>; */
+	dsi_1v2-supply = <&ldo_5>;
+	vin-supply-names = "dsi_1v2";
+	status = "okay";
+};
+
+&dsi2 {
+	status = "okay";
+
+	panel2: panel2@0 {
+		status = "ok";
+		compatible = "spacemit,mipi-panel2";
+		reg = <0>;
+
+		gpios-reset = <81>;
+		gpios-dc = <82 83>;
+		id = <2>;
+		delay-after-reset = <10>;
+		force-attached = "lcd_ili9881c_mipi";
+	};
+};
+
+&lcds {
+	status = "okay";
+};
+
+&dpu_online2_hdmi {
+	memory-region = <&dpu_resv>;
+	status = "okay";
+};
+
+&hdmi{
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hdmi_0>;
+	status = "okay";
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c0>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+};
+
+&i2c1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c1>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+};
+
+&i2c2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c2_0>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+
+	eeprom@50{
+		compatible = "atmel,24c02";
+		reg = <0x50>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		power-domains = <&power K1X_PMU_DUMMY_PWR_DOMAIN>;
+		status = "disabled";
+
+		mac_address0: mac_address0@0 {
+			reg = <0x0 6>;
+		};
+
+		mac_address1: mac_address1@6 {
+			reg = <0x6 6>;
+		};
+	};
+
+	es8323: es8323@11 {
+		status = "okay";
+		#sound-dai-cells = <0>;
+		compatible = "everest,es8323";
+		reg = <0x11>;
+		earphone-sw-gpio = <&gpio 79 0>;
+        };
+};
+
+&i2c3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c3_2>;
+	status = "disabled";
+};
+
+&i2c4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c4_2>;
+	status = "disabled";
+};
+
+&i2c6 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c6_2>;
+	status = "disabled";
+
+	gt9xx@5d {
+		compatible = "goodix,gt9xx";
+		reg = <0x5d>;
+
+		reset-gpios = <&gpio 114 GPIO_ACTIVE_HIGH>;
+		irq-gpios = <&gpio 58 GPIO_ACTIVE_HIGH>;
+		irq-flags = <2>;
+
+		touchscreen-max-id = <11>;
+		touchscreen-size-x = <1200>;
+		touchscreen-size-y = <1920>;
+		touchscreen-max-w = <512>;
+		touchscreen-max-p = <512>;
+
+		goodix,int-sync = <1>;
+		status = "disabled";
+	};
+
+};
+
+&i2c7 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c7>;
+	status = "disabled";
+};
+
+&i2c8 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c8>;
+	status = "okay";
+
+	spm8821@41 {
+		compatible = "spacemit,spm8821";
+		reg = <0x41>;
+		interrupt-parent = <&intc>;
+		interrupts = <64>;
+		status = "okay";
+
+		vcc_sys-supply = <&vcc4v0_baseboard>;
+		dcdc5-supply = <&dcdc_5>;
+
+		regulators {
+			compatible = "pmic,regulator,spm8821";
+
+			/* buck */
+			dcdc_1: DCDC_REG1 {
+				regulator-name = "dcdc1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <650000>;
+				};
+			};
+
+			dcdc_2: DCDC_REG2 {
+				regulator-name = "dcdc2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_3: DCDC_REG3 {
+				regulator-name = "dcdc3";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_4: DCDC_REG4 {
+				regulator-name = "dcdc4";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <3300000>;
+				};
+			};
+
+			dcdc_5: DCDC_REG5 {
+				regulator-name = "dcdc5";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_6: DCDC_REG6 {
+				regulator-name = "dcdc6";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			/* aldo */
+			ldo_1: LDO_REG1 {
+				regulator-name = "ldo1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+
+				/* set the min voltage means will disable this vol in suspend for ldo */
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_2: LDO_REG2 {
+				regulator-name = "ldo2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_3: LDO_REG3 {
+				regulator-name = "ldo3";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_4: LDO_REG4 {
+				regulator-name = "ldo4";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			/* dldo */
+			ldo_5: LDO_REG5 {
+				regulator-name = "ldo5";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_6: LDO_REG6 {
+				regulator-name = "ldo6";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_7: LDO_REG7 {
+				regulator-name = "ldo7";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_8: LDO_REG8 {
+				regulator-name = "ldo8";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-always-on;
+			};
+
+			ldo_9: LDO_REG9 {
+				regulator-name = "ldo9";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+			};
+
+			ldo_10: LDO_REG10 {
+				regulator-name = "ldo10";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-always-on;
+			};
+
+			ldo_11: LDO_REG11 {
+				regulator-name = "ldo11";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+			};
+
+			sw_1: SWITCH_REG1 {
+				regulator-name = "switch1";
+			};
+		};
+
+		pmic_pinctrl: pinctrl {
+			compatible = "pmic,pinctrl,spm8821";
+			gpio-controller;
+			#gpio-cells = <2>;
+			spacemit,npins = <6>;
+/**
+ *			led_pins: led-pins {
+ *				pins = "PIN3";
+ *				function = "sleep";
+ *				bias-disable = <0>;
+ *				drive-open-drain = <0x1>;
+ *			};
+ */
+		};
+
+		pwr_key: key {
+			compatible = "pmic,pwrkey,spm8821";
+		};
+
+		ext_rtc: rtc {
+			compatible = "pmic,rtc,spm8821";
+		};
+
+		ext_adc: adc {
+			compatible = "pmic,adc,spm8821";
+		};
+	};
+};
+
+&pinctrl {
+	pinctrl-single,gpio-range = <
+		&range GPIO_49  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range GPIO_58  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_63  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_64  1 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_65  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_67  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range PRI_TDI  2 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range PRI_TCK  1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range PRI_TDO  1 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_74  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_79  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_80  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range GPIO_81  3 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_90  1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_91  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range DVL0     1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range DVL1     1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS0)
+		&range GPIO_110 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_111 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_113 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_114 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_115 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_116 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_118 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_123 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS0)
+		&range GPIO_124 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_125 3 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+	>;
+
+	pinctrl_rcpu: pinctrl_rcpu_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(GPIO_47, MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_tx */
+			K1X_PADCONF(GPIO_48, MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_rx */
+		>;
+	};
+
+	pinctrl_gmac0: gmac0_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_00, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_rxdv */
+			K1X_PADCONF(GPIO_01, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_rx_d0 */
+			K1X_PADCONF(GPIO_02, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_rx_d1 */
+			K1X_PADCONF(GPIO_03, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_rx_clk */
+			K1X_PADCONF(GPIO_04, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_rx_d2 */
+			K1X_PADCONF(GPIO_05, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_rx_d3 */
+			K1X_PADCONF(GPIO_06, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_tx_d0 */
+			K1X_PADCONF(GPIO_07, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_tx_d1 */
+			K1X_PADCONF(GPIO_08, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_tx */
+			K1X_PADCONF(GPIO_09, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_tx_d2 */
+			K1X_PADCONF(GPIO_10, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_tx_d3 */
+			K1X_PADCONF(GPIO_11, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_tx_en */
+			K1X_PADCONF(GPIO_12, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac0_mdc */
+			K1X_PADCONF(GPIO_13, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac0_mdio */
+			K1X_PADCONF(GPIO_14, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_int_n */
+			K1X_PADCONF(GPIO_45, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac0_clk_ref */
+		>;
+	};
+
+	pinctrl_gmac1: gmac1_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_29, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_rxdv */
+			K1X_PADCONF(GPIO_30, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_rx_d0 */
+			K1X_PADCONF(GPIO_31, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_rx_d1 */
+			K1X_PADCONF(GPIO_32, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_rx_clk */
+			K1X_PADCONF(GPIO_33, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_rx_d2 */
+			K1X_PADCONF(GPIO_34, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_rx_d3 */
+			K1X_PADCONF(GPIO_35, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_tx_d0 */
+			K1X_PADCONF(GPIO_36, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_tx_d1 */
+			K1X_PADCONF(GPIO_37, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_tx */
+			K1X_PADCONF(GPIO_38, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_tx_d2 */
+			K1X_PADCONF(GPIO_39, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_tx_d3 */
+			K1X_PADCONF(GPIO_40, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_tx_en */
+			K1X_PADCONF(GPIO_41, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_mdc */
+			K1X_PADCONF(GPIO_42, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))	/* gmac1_mdio */
+			K1X_PADCONF(GPIO_43, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_int_n */
+			K1X_PADCONF(GPIO_46, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_clk_ref */
+		>;
+	};
+
+	pinctrl_wlan_wakeup: wlan_wakeup_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_66, MUX_MODE0, (EDGE_FALL | PULL_DOWN | PAD_3V_DS2))   /* wifi edge detect */
+		>;
+	};
+};
+
+&gpio{
+	gpio-ranges = <
+		&pinctrl 49  GPIO_49  2
+		&pinctrl 58  GPIO_58  1
+		&pinctrl 63  GPIO_63  1
+		&pinctrl 65  GPIO_65  1
+		&pinctrl 67  GPIO_67  1
+		&pinctrl 70  PRI_TDI  4
+		&pinctrl 74  GPIO_74  1
+		&pinctrl 79  GPIO_79  1
+		&pinctrl 80  GPIO_80  4
+		&pinctrl 90  GPIO_90  3
+		&pinctrl 96  DVL0     2
+		&pinctrl 110 GPIO_110 1
+		&pinctrl 111 GPIO_111 1
+		&pinctrl 113 GPIO_113 1
+		&pinctrl 114 GPIO_114 3
+		&pinctrl 118 GPIO_118 1
+		&pinctrl 123 GPIO_123 5
+	>;
+};
+
+/* SD */
+&sdhci0 {
+	pinctrl-names = "default","fast";
+	pinctrl-0 = <&pinctrl_mmc1>;
+	pinctrl-1 = <&pinctrl_mmc1_fast>;
+	bus-width = <4>;
+	cd-gpios = <&gpio 80 0>;
+	cd-inverted;
+	vmmc-supply = <&dcdc_4>;
+	vqmmc-supply = <&ldo_1>;
+	no-mmc;
+	no-sdio;
+	spacemit,sdh-host-caps-disable = <(
+			MMC_CAP_UHS_SDR12 |
+			MMC_CAP_UHS_SDR25
+			)>;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_INVERTED_WRITE_PROTECT |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
+			SDHCI_QUIRK2_BROKEN_PHY_MODULE |
+			SDHCI_QUIRK2_SET_AIB_MMC
+			)>;
+	spacemit,aib_mmc1_io_reg = <0xD401E81C>;
+	spacemit,apbc_asfar_reg = <0xD4015050>;
+	spacemit,apbc_assar_reg = <0xD4015054>;
+	spacemit,rx_dline_reg = <0x0>;
+	spacemit,tx_dline_reg = <0x0>;
+	spacemit,tx_delaycode = <0x9f>;
+	spacemit,rx_tuning_limit = <50>;
+	spacemit,sdh-freq = <204800000>;
+	status = "okay";
+};
+
+/* SDIO */
+&sdhci1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_mmc2>;
+	bus-width = <4>;
+	non-removable;
+	vqmmc-supply = <&dcdc_3>;
+	no-mmc;
+	no-sd;
+	keep-power-in-suspend;
+	/* bcmdhd use private oob solution rather than dat1/standard wakeup */
+	/delete-property/ enable-sdio-wakeup;
+	spacemit,sdh-host-caps-disable = <(
+			MMC_CAP_UHS_DDR50 |
+			MMC_CAP_NEEDS_POLL
+			)>;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
+			SDHCI_QUIRK2_BROKEN_PHY_MODULE
+			)>;
+	spacemit,rx_dline_reg = <0x0>;
+	spacemit,tx_delaycode = <0x9f>;
+	spacemit,rx_tuning_limit = <50>;
+	spacemit,sdh-freq = <375000000>;
+	status = "okay";
+};
+
+/* eMMC */
+&sdhci2 {
+	bus-width = <8>;
+	non-removable;
+	mmc-hs400-1_8v;
+	mmc-hs400-enhanced-strobe;
+	no-sd;
+	no-sdio;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN
+			)>;
+	spacemit,sdh-freq = <375000000>;
+	status = "okay";
+};
+
+&eth0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gmac0>;
+
+	emac,reset-gpio = <&gpio 110 0>;
+	emac,reset-active-low;
+	emac,reset-delays-us = <0 10000 100000>;
+
+	/* store forward mode */
+	tx-threshold = <1518>;
+	rx-threshold = <12>;
+	tx-ring-num = <1024>;
+	rx-ring-num = <1024>;
+	dma-burst-len = <5>;
+
+	ref-clock-from-phy;
+
+	clk-tuning-enable;
+	clk-tuning-by-delayline;
+	tx-phase = <60>;
+	rx-phase = <73>;
+
+	nvmem-cells = <&mac_address0>;
+	nvmem-cell-names = "mac-address";
+
+	phy-handle = <&rgmii0>;
+
+	status = "okay";
+
+	mdio-bus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+		rgmii0: phy@0 {
+			compatible = "ethernet-phy-id001c.c916";
+			device_type = "ethernet-phy";
+			reg = <0x1>;
+			phy-mode = "rgmii";
+		};
+	};
+};
+
+&eth1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gmac1>;
+
+	emac,reset-gpio = <&gpio 115 0>;
+	emac,reset-active-low;
+	emac,reset-delays-us = <0 10000 100000>;
+
+        /* store forward mode */
+	tx-threshold = <1518>;
+	rx-threshold = <12>;
+	tx-ring-num = <1024>;
+	rx-ring-num = <1024>;
+	dma-burst-len = <5>;
+
+	ref-clock-from-phy;
+
+	clk-tuning-enable;
+	clk-tuning-by-delayline;
+	tx-phase = <90>;
+	rx-phase = <73>;
+	nvmem-cells = <&mac_address1>;
+	nvmem-cell-names = "mac-address";
+
+	phy-handle = <&rgmii1>;
+
+	status = "okay";
+
+	mdio-bus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+		rgmii1: phy@1 {
+			compatible = "ethernet-phy-id001c.c916";
+			device_type = "ethernet-phy";
+			reg = <0x1>;
+			phy-mode = "rgmii";
+		};
+	};
+};
+
+&usbphy {
+	status = "okay";
+};
+
+&udc {
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	status = "okay";
+};
+
+&ehci {
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	spacemit,reset-on-resume;
+	status = "okay";
+};
+&otg {
+	usb-role-switch;
+	role-switch-user-control;
+	spacemit,reset-on-resume;
+	role-switch-default-mode = "host";
+	vbus-gpios = <&gpio 126 0>;
+	status = "okay";
+};
+
+
+&usbphy1 {
+	status = "okay";
+};
+
+&udc1 {
+	spacemit,udc-mode = <MV_USB_MODE_UDC>;
+	status = "disabled";
+};
+
+&ehci1 {
+	spacemit,udc-mode = <MV_USB_MODE_HOST>;
+	spacemit,reset-on-resume;
+	status = "okay";
+};
+
+&otg1 {
+	usb-role-switch;
+	role-switch-user-control;
+	spacemit,reset-on-resume;
+	role-switch-default-mode = "host";
+	vbus-gpios = <&gpio 123 0>;
+	status = "disabled";
+};
+
+&usb2phy {
+	status = "okay";
+};
+
+&combphy {
+	status = "okay";
+};
+
+&usb3hub {
+	vbus-gpios = <&gpio 123 0>;	/* gpio_123 for usb3 hub pwr and output vbus */
+	status = "okay";
+};
+
+&usbdrd3 {
+	status = "okay";
+	reset-on-resume;
+	dwc3@c0a00000 {
+		dr_mode = "otg";
+		phy_type = "utmi";
+		snps,hsphy_interface = "utmi";
+		snps,dis_enblslpm_quirk;
+		snps,dis_u2_susphy_quirk;
+		snps,dis_u3_susphy_quirk;
+		snps,dis-del-phy-power-chg-quirk;
+		snps,dis-tx-ipgap-linecheck-quirk;
+		snps,parkmode-disable-ss-quirk;
+		usb-role-switch;
+		role-switch-default-mode = "host";
+	};
+};
+
+&pcie1_rc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pcie1_3>;
+	status = "okay";
+};
+
+&pcie2_rc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pcie2_4>;
+	status = "okay";
+};
+
+&imggpu {
+	status = "okay";
+};
+
+&qspi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi>;
+	status = "okay";
+
+	flash@0 {
+		compatible = "jedec,spi-nor";
+		reg = <0>;
+		spi-max-frequency = <26500000>;
+		m25p,fast-read;
+		broken-flash-reset;
+		status = "okay";
+	};
+};
+
+&spi3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ssp3_0>;
+	status = "disabled";
+};
+
+&pwm_bl {
+	pwms = <&pwm14 2000>;
+	brightness-levels = <
+		0   40  40  40  40  40  40  40  40  40  40  40  40  40  40  40
+		40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40
+		40  40  40  40  40  40  40  40  40  41  42  43  44  45  46  47
+		48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
+		64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79
+		80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
+		96  97  98  99  100 101 102 103 104 105 106 107 108 109 110 111
+		112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
+		128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
+		144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
+		160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175
+		176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
+		192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207
+		208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
+		224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239
+		240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255
+	>;
+	default-brightness-level = <100>;
+
+	status = "okay";
+};
+
+/* MIPI CSI1, clk lane1 */
+&backsensor {
+	//af_2v8-supply = <&ldo_3>;
+	//avdd_2v8-supply = <&ldo_2>;
+	//dovdd_1v8-supply = <&ldo_7>;
+	//dvdd_1v2-supply = <&ldo_6>;
+
+	pwdn-gpios = <&gpio 113 0>;
+	reset-gpios = <&gpio 111 0>;
+
+	status = "okay";
+};
+
+/* MIPI CSI3 data line2,3 clk lane2 */
+&backsensor_aux {
+	af_2v8-supply = <&ldo_3>;
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+	dvdd_1v2-supply = <&ldo_6>;
+
+	pwdn-gpios = <&gpio 124 0>;
+	reset-gpios = <&gpio 97 0>;
+
+	twsi-index = <0>;
+	clocks = <&ccu CLK_CAMM0>;
+	clock-names = "cam_mclk0";
+
+	status = "disabled";
+};
+
+/* MIPI CSI3 data line0,1 clk lane3 */
+&frontsensor {
+	//af_2v8-supply = <&ldo_3>;
+	//avdd_2v8-supply = <&ldo_2>;
+	//dovdd_1v8-supply = <&ldo_7>;
+	//dvdd_1v2-supply = <&ldo_6>;
+
+	pwdn-gpios = <&gpio 114 0>;
+	reset-gpios = <&gpio 97 0>;
+
+	twsi-index = <1>;
+	clocks = <&ccu CLK_CAMM1>;
+	clock-names = "cam_mclk1";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_camera1>;
+
+	status = "okay";
+};
+&csiphy0 {
+
+	status = "okay";
+};
+&csiphy1 {
+
+	status = "disabled";
+};
+&csiphy2 {
+	status = "okay";
+};
+
+&ccic0 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&ccic1 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&ccic2 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&isp {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&cpp {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&vi {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&rcpu {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_rcpu>;
+	mboxes = <&mailbox 0>, <&mailbox 1>;
+	mbox-names = "vq0", "vq1";
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
+	status = "okay";
+};
+
+&i2s0 {
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_sspa0_0>;
+        status = "okay";
+};
+
+&hdmiaudio {
+	status = "okay";
+};
+
+&sound_hdmi {
+	status = "okay";
+	simple-audio-card,cpu {
+		sound-dai = <&hdmiaudio>;
+	};
+};
+
+&sound_codec {
+	status = "okay";
+	simple-audio-card,name = "snd-es8323";
+	spacemit,mclk-fs = <256>;
+	simple-audio-card,codec {
+		sound-dai = <&es8323>;
+	};
+};
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi b/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi
index 04fc08d016fd..9e59aed0f7d5 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi
@@ -553,12 +553,6 @@ K1X_PADCONF(GPIO_39, MUX_MODE4, (EDGE_NONE | PULL_UP | PAD_1V8_DS2))	/* pwm9 */
 		>;
 	};
 
-	pinctrl_pwm9_2: pwm9_2_grp {
-		pinctrl-single,pins =<
-			K1X_PADCONF(GPIO_74, MUX_MODE2, (EDGE_NONE | PULL_UP | PAD_1V8_DS2))	/* pwm9 */
-		>;
-	};
-
 	pinctrl_pwm10_0: pwm10_0_grp {
 		pinctrl-single,pins =<
 			K1X_PADCONF(GPIO_02, MUX_MODE3, (EDGE_NONE | PULL_UP | PAD_1V8_DS2))	/* pwm10 */
@@ -685,6 +679,12 @@ K1X_PADCONF(GPIO_79, MUX_MODE2, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* rcpu_pwm2
 		>;
 	};
 
+	pinctrl_rpwm9_0: rpwm9_0_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_74, MUX_MODE2, (EDGE_NONE | PULL_UP | PAD_1V8_DS2))	/* rcpu_pwm9 */
+		>;
+	};
+
 	pinctrl_sspa0_0: sspa0_0_grp {
 		pinctrl-single,pins =<
 			K1X_PADCONF(GPIO_118, MUX_MODE3, (EDGE_NONE | PULL_UP | PAD_1V8_DS0))	/* sspa0_clk */
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_uav.dts b/arch/riscv/boot/dts/spacemit/k1-x_uav.dts
new file mode 100644
index 000000000000..5189dd9000e3
--- /dev/null
+++ b/arch/riscv/boot/dts/spacemit/k1-x_uav.dts
@@ -0,0 +1,1179 @@
+// SPDX-License-Identifier: (GPL-2.0 OR MIT)
+/* Copyright (c) 2023 Spacemit, Inc */
+
+/dts-v1/;
+
+#include "k1-x.dtsi"
+#include "k1-x-efuse.dtsi"
+#include "k1-x_pinctrl.dtsi"
+#include "k1-x-hdmi.dtsi"
+#include "k1-x-lcd.dtsi"
+#include "k1-x-camera-sdk.dtsi"
+#include "k1-x_opp_table.dtsi"
+#include "k1-x_thermal_cooling.dtsi"
+
+/ {
+	model = "FH UAC Board";
+	modules_usrload = "aic8800_bsp,aic8800_fdrv,aic8800_btlpm";
+
+	cpus: cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		timebase-frequency = <24000000>;
+
+		cpu_0: cpu@0 {
+			cpu-ai = "true";
+		};
+
+		cpu_1: cpu@1 {
+			cpu-ai = "true";
+		};
+
+		cpu_2: cpu@2 {
+			reg = <2>;
+			cpu-ai = "true";
+		};
+
+		cpu_3: cpu@3 {
+			reg = <3>;
+			cpu-ai = "true";
+		};
+
+		cpu-map {
+			cluster0 {
+				core0 {
+					cpu = <&cpu_0>;
+				};
+
+				core1 {
+					cpu = <&cpu_1>;
+				};
+
+				core2 {
+					cpu = <&cpu_2>;
+				};
+
+				core3 {
+					cpu = <&cpu_3>;
+				};
+			};
+
+			cluster1 {
+				core0 {
+					cpu = <&cpu_4>;
+				};
+
+				core1 {
+					cpu = <&cpu_5>;
+				};
+
+				core2 {
+					cpu = <&cpu_6>;
+				};
+
+				core3 {
+					cpu = <&cpu_7>;
+				};
+			};
+		};
+	};
+
+	memory@0 {
+		device_type = "memory";
+		reg = <0x0 0x00000000 0x0 0x80000000>;
+	};
+
+	memory@100000000 {
+		device_type = "memory";
+		reg = <0x1 0x00000000 0x0 0x80000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		linux,cma {
+			compatible = "shared-dma-pool";
+			/* alloc memory from 0x40000000~0x80000000 */
+			alloc-ranges = <0 0x40000000 0 0x40000000>;
+			/* size of cma buffer is 384MByte */
+			size = <0 0x18000000>;
+			/* start address is 1Mbyte aligned */
+			alignment = <0x0 0x100000>;
+			linux,cma-default;
+			/* besides hardware, dma for ex. buffer can be used by memory management */
+			reusable;
+		};
+
+		/* reserved 384K for dpu, including mmu table(256K) and cmdlist(128K) */
+		dpu_resv: dpu_reserved@2ff40000 {
+			compatible = "shared-dma-pool";
+			reg = <0x0 0x2ff40000 0x0 0x000C0000>;
+			no-map;
+		};
+	};
+
+	chosen {
+		bootargs = "earlycon=sbi console=ttyS0,115200n8 debug loglevel=8 swiotlb=65536 rdinit=/init";
+		stdout-path = "serial0:115200n8";
+	};
+
+	dc_12v: dc-12v {
+		compatible = "regulator-fixed";
+		regulator-name = "dc_12v";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <12000000>;
+		regulator-max-microvolt = <12000000>;
+	};
+
+	vcc4v0_baseboard: vcc4v0-baseboard {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc4v0_baseboard";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <4000000>;
+		regulator-max-microvolt = <4000000>;
+		vin-supply = <&dc_12v>;
+	};
+
+	rf_pwrseq: rf-pwrseq {
+		compatible = "spacemit,rf-pwrseq";
+		//vdd-supply = <&ldo_7>;
+		//vdd_voltage = <3300000>;
+		io-supply = <&dcdc_3>;
+		io_voltage = <1800000>;
+		pwr-gpios  = <&gpio 67 0>;
+		status = "okay";
+
+		wlan_pwrseq: wlan-pwrseq {
+			compatible = "spacemit,wlan-pwrseq";
+			regon-gpios = <&gpio 116 0>;
+			interrupt-parent = <&pinctrl>;
+			interrupts = <268>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&pinctrl_wlan_wakeup>;
+		};
+
+		bt_pwrseq: bt-pwrseq {
+			compatible = "spacemit,bt-pwrseq";
+			reset-gpios     = <&gpio 63 0>;
+	};
+	};
+
+	leds {
+		compatible = "gpio-leds";
+
+		led1 {
+			label = "sys-led";
+			gpios = <&gpio 96 0>;
+			linux,default-trigger = "heartbeat";
+			default-state = "on";
+			status = "disabled";
+		};
+	};
+
+	fan: pwm-fan {
+		compatible = "pwm-fan";
+		pwms = <&rpwm2 10000>;
+		#cooling-cells = <2>;
+		cooling-levels = <0 64 128 192 255>;
+		status = "okay";
+	};
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart0_2>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2>;
+	status = "okay";
+};
+
+&r_uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_r_uart1>;
+	status = "okay";
+};
+
+&uart5 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart5_0>;
+	status = "okay";
+};
+
+&uart8 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart8_2>;
+	status = "okay";
+};
+
+&pwm14 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm14_1>;
+	status = "okay";
+};
+
+&dpu_online2_dsi {
+	memory-region = <&dpu_resv>;
+	spacemit-dpu-bitclk = <1000000000>;
+	spacemit-dpu-escclk = <76800000>;
+	dsi_1v2-supply = <&ldo_5>;
+	vin-supply-names = "dsi_1v2";
+	status = "disabled";
+};
+
+&dsi2 {
+	status = "disabled";
+
+	panel2: panel2@0 {
+		status = "disabled";
+		compatible = "spacemit,mipi-panel2";
+		reg = <0>;
+
+		gpios-reset = <503>;
+		gpios-dc = <502 501>;
+		id = <2>;
+		delay-after-reset = <10>;
+		//force-attached = "lcd_jd9365da_mipi_1280x800";
+	};
+};
+/*
+&lcds {
+	status = "disabled";
+};
+*/
+&dpu_online2_hdmi {
+	memory-region = <&dpu_resv>;
+	status = "disabled";
+};
+
+&hdmi{
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hdmi_0>;
+	status = "disabled";
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c0>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+};
+
+&i2c1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c1>;
+	spacemit,i2c-fast-mode;
+	status = "disable";
+
+};
+
+&i2c2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c2_0>;
+	spacemit,i2c-fast-mode;
+	status = "okay";
+
+	eeprom@50{
+		compatible = "atmel,24c02";
+		reg = <0x50>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		power-domains = <&power K1X_PMU_DUMMY_PWR_DOMAIN>;
+		status = "disabled";
+
+		mac_address0: mac_address0@0 {
+			reg = <0x0 6>;
+		};
+
+		mac_address1: mac_address1@6 {
+			reg = <0x6 6>;
+		};
+	};
+
+	es8326: es8326@19{
+		compatible = "everest,es8326";
+		reg = <0x19>;
+		#sound-dai-cells = <0>;
+		interrupt-parent = <&gpio>;
+		interrupts = <126 1>;
+		spk-ctl-gpio = <&gpio 127 0>;
+		everest,mic1-src = [44];
+		everest,mic2-src = [66];
+		status = "disabled";
+	};
+};
+
+&i2c3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c3_2>;
+	status = "disabled";
+};
+
+&i2c4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c4_2>;
+	status = "disabled";
+};
+
+&i2c6 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c6_2>;
+	status = "disabled";
+
+	gt9xx@5d {
+		compatible = "goodix,gt9xx";
+		reg = <0x5d>;
+
+		reset-gpios = <&gpio 114 GPIO_ACTIVE_HIGH>;
+		irq-gpios = <&gpio 58 GPIO_ACTIVE_HIGH>;
+		irq-flags = <2>;
+
+		touchscreen-max-id = <11>;
+		touchscreen-size-x = <800>;
+		touchscreen-size-y = <1280>;
+		touchscreen-max-w = <512>;
+		touchscreen-max-p = <512>;
+
+		goodix,int-sync = <1>;
+		status = "disabled";
+        };
+
+};
+
+&i2c7 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c7>;
+	status = "disabled";
+};
+
+&i2c8 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c8>;
+	status = "okay";
+
+	spm8821@41 {
+		compatible = "spacemit,spm8821";
+		reg = <0x41>;
+		interrupt-parent = <&intc>;
+		interrupts = <64>;
+		status = "okay";
+
+		vcc_sys-supply = <&vcc4v0_baseboard>;
+		dcdc5-supply = <&dcdc_5>;
+
+		regulators {
+			compatible = "pmic,regulator,spm8821";
+
+			/* buck */
+			dcdc_1: DCDC_REG1 {
+				regulator-name = "dcdc1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <650000>;
+				};
+			};
+
+			dcdc_2: DCDC_REG2 {
+				regulator-name = "dcdc2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_3: DCDC_REG3 {
+				regulator-name = "dcdc3";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_4: DCDC_REG4 {
+				regulator-name = "dcdc4";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <3300000>;
+				};
+			};
+
+			dcdc_5: DCDC_REG5 {
+				regulator-name = "dcdc5";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			dcdc_6: DCDC_REG6 {
+				regulator-name = "dcdc6";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3450000>;
+				regulator-ramp-delay = <5000>;
+				regulator-always-on;
+			};
+
+			/* aldo */
+			ldo_1: LDO_REG1 {
+				regulator-name = "ldo1";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+
+				/* set the min voltage means will disable this vol in suspend for ldo */
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_2: LDO_REG2 {
+				regulator-name = "ldo2";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_3: LDO_REG3 {
+				regulator-name = "ldo3";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_4: LDO_REG4 {
+				regulator-name = "ldo4";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			/* dldo */
+			ldo_5: LDO_REG5 {
+				regulator-name = "ldo5";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_6: LDO_REG6 {
+				regulator-name = "ldo6";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_7: LDO_REG7 {
+				regulator-name = "ldo7";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+
+				regulator-state-mem {
+					regulator-off-in-suspend;
+					regulator-suspend-microvolt = <500000>;
+				};
+			};
+
+			ldo_8: LDO_REG8 {
+				regulator-name = "ldo8";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-always-on;
+			};
+
+			ldo_9: LDO_REG9 {
+				regulator-name = "ldo9";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+			};
+
+			ldo_10: LDO_REG10 {
+				regulator-name = "ldo10";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-always-on;
+			};
+
+			ldo_11: LDO_REG11 {
+				regulator-name = "ldo11";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <3400000>;
+			};
+
+			sw_1: SWITCH_REG1 {
+				regulator-name = "switch1";
+			};
+		};
+
+		pmic_pinctrl: pinctrl {
+			compatible = "pmic,pinctrl,spm8821";
+			gpio-controller;
+			#gpio-cells = <2>;
+			spacemit,npins = <6>;
+/**
+ *			led_pins: led-pins {
+ *				pins = "PIN3";
+ *				function = "sleep";
+ *				bias-disable = <0>;
+ *				drive-open-drain = <0x1>;
+ *			};
+ */
+		};
+
+		pwr_key: key {
+			compatible = "pmic,pwrkey,spm8821";
+		};
+
+		ext_rtc: rtc {
+			compatible = "pmic,rtc,spm8821";
+		};
+
+		ext_adc: adc {
+			compatible = "pmic,adc,spm8821";
+		};
+	};
+};
+
+&pinctrl {
+	pinctrl-single,gpio-range = <
+		&range GPIO_49  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range GPIO_58  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_63  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_65  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_67  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
+		&range PRI_TDI  2 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range PRI_TCK  1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range PRI_TDO  1 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_74  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_80  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_81  3 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_90  1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_91  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range DVL0     1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range DVL1     1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS0)
+		&range GPIO_110 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_111 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_113 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_114 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_115 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+		&range GPIO_116 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_118 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_123 1 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS0)
+		&range GPIO_124 1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
+		&range GPIO_125 3 (MUX_MODE0 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
+	>;
+
+	pinctrl_rcpu: pinctrl_rcpu_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(GPIO_47,   MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_tx */
+			K1X_PADCONF(GPIO_48,   MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_rx */
+		>;
+	};
+
+	pinctrl_gmac0: gmac0_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_00,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_rxdv */
+			K1X_PADCONF(GPIO_01,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_rx_d0 */
+			K1X_PADCONF(GPIO_02,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_rx_d1 */
+			K1X_PADCONF(GPIO_03,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_rx_clk */
+			K1X_PADCONF(GPIO_04,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_rx_d2 */
+			K1X_PADCONF(GPIO_05,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_rx_d3 */
+			K1X_PADCONF(GPIO_06,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_tx_d0 */
+			K1X_PADCONF(GPIO_07,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_tx_d1 */
+			K1X_PADCONF(GPIO_08,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_tx */
+			K1X_PADCONF(GPIO_09,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_tx_d2 */
+			K1X_PADCONF(GPIO_10,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_tx_d3 */
+			K1X_PADCONF(GPIO_11,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_tx_en */
+			K1X_PADCONF(GPIO_12,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac0_mdc */
+			K1X_PADCONF(GPIO_13,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac0_mdio */
+			K1X_PADCONF(GPIO_14,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_int_n */
+			K1X_PADCONF(GPIO_45,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac0_clk_ref */
+		>;
+	};
+
+	pinctrl_gmac1: gmac1_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_29,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_rxdv */
+			K1X_PADCONF(GPIO_30,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_rx_d0 */
+			K1X_PADCONF(GPIO_31,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_rx_d1 */
+			K1X_PADCONF(GPIO_32,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_rx_clk */
+			K1X_PADCONF(GPIO_33,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_rx_d2 */
+			K1X_PADCONF(GPIO_34,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_rx_d3 */
+			K1X_PADCONF(GPIO_35,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_tx_d0 */
+			K1X_PADCONF(GPIO_36,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_tx_d1 */
+			K1X_PADCONF(GPIO_37,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_tx */
+			K1X_PADCONF(GPIO_38,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_tx_d2 */
+			K1X_PADCONF(GPIO_39,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_tx_d3 */
+			K1X_PADCONF(GPIO_40,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_tx_en */
+			K1X_PADCONF(GPIO_41,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_mdc */
+			K1X_PADCONF(GPIO_42,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS0))   /* gmac1_mdio */
+			K1X_PADCONF(GPIO_43,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_int_n */
+			K1X_PADCONF(GPIO_46,    MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))   /* gmac1_clk_ref */
+		>;
+	};
+
+	pinctrl_wlan_wakeup: wlan_wakeup_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_66, MUX_MODE0, (EDGE_FALL | PULL_DOWN | PAD_3V_DS2))   /* wifi edge detect */
+		>;
+	};
+};
+
+&gpio{
+	gpio-ranges = <
+		&pinctrl 49  GPIO_49  2
+		&pinctrl 58  GPIO_58  1
+		&pinctrl 63  GPIO_63  3
+		&pinctrl 67  GPIO_67  1
+		&pinctrl 70  PRI_TDI  4
+		&pinctrl 74  GPIO_74  1
+		&pinctrl 80  GPIO_80  4
+		&pinctrl 90  GPIO_90  3
+		&pinctrl 96  DVL0     2
+		&pinctrl 110 GPIO_110 1
+		&pinctrl 111 GPIO_111 1
+		&pinctrl 113 GPIO_113 1
+		&pinctrl 114 GPIO_114 3
+		&pinctrl 118 GPIO_118 1
+		&pinctrl 123 GPIO_123 5
+	>;
+};
+
+/* SD */
+&sdhci0 {
+	pinctrl-names = "default","fast";
+	pinctrl-0 = <&pinctrl_mmc1>;
+	pinctrl-1 = <&pinctrl_mmc1_fast>;
+	bus-width = <4>;
+	cd-gpios = <&gpio 80 0>;
+	cd-inverted;
+	vmmc-supply = <&dcdc_4>;
+	vqmmc-supply = <&ldo_1>;
+	no-mmc;
+	no-sdio;
+	spacemit,sdh-host-caps-disable = <(
+			MMC_CAP_UHS_SDR12 |
+			MMC_CAP_UHS_SDR25
+			)>;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_INVERTED_WRITE_PROTECT |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
+			SDHCI_QUIRK2_BROKEN_PHY_MODULE |
+			SDHCI_QUIRK2_SET_AIB_MMC
+			)>;
+	spacemit,aib_mmc1_io_reg = <0xD401E81C>;
+	spacemit,apbc_asfar_reg = <0xD4015050>;
+	spacemit,apbc_assar_reg = <0xD4015054>;
+	spacemit,rx_dline_reg = <0x0>;
+	spacemit,tx_dline_reg = <0x0>;
+	spacemit,tx_delaycode = <0x7f>;
+	spacemit,rx_tuning_limit = <50>;
+	spacemit,sdh-freq = <204800000>;
+	status = "disabled";
+};
+
+/* SDIO */
+&sdhci1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_mmc2>;
+	bus-width = <4>;
+	non-removable;
+	vqmmc-supply = <&dcdc_3>;
+	no-mmc;
+	no-sd;
+	keep-power-in-suspend;
+	/* bcmdhd use private oob solution rather than dat1/standard wakeup */
+	/delete-property/ enable-sdio-wakeup;
+	spacemit,sdh-host-caps-disable = <(
+			MMC_CAP_UHS_DDR50 |
+			MMC_CAP_NEEDS_POLL
+			)>;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
+			SDHCI_QUIRK2_BROKEN_PHY_MODULE
+			)>;
+	spacemit,rx_dline_reg = <0x0>;
+	spacemit,tx_delaycode = <0x8f>;
+	spacemit,rx_tuning_limit = <50>;
+	spacemit,sdh-freq = <375000000>;
+	status = "okay";
+};
+
+/* eMMC */
+&sdhci2 {
+	bus-width = <8>;
+	non-removable;
+	mmc-hs400-1_8v;
+	mmc-hs400-enhanced-strobe;
+	no-sd;
+	no-sdio;
+	spacemit,sdh-quirks = <(
+			SDHCI_QUIRK_BROKEN_CARD_DETECTION |
+			SDHCI_QUIRK_BROKEN_TIMEOUT_VAL
+			)>;
+	spacemit,sdh-quirks2 = <(
+			SDHCI_QUIRK2_PRESET_VALUE_BROKEN
+			)>;
+	spacemit,sdh-freq = <375000000>;
+	status = "okay";
+};
+
+&eth0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gmac0>;
+
+	emac,reset-gpio = <&gpio 110 0>;
+	emac,reset-active-low;
+	emac,reset-delays-us = <0 10000 100000>;
+
+	/* store forward mode */
+	tx-threshold = <1518>;
+	rx-threshold = <12>;
+	tx-ring-num = <1024>;
+	rx-ring-num = <1024>;
+	dma-burst-len = <5>;
+
+	ref-clock-from-phy;
+
+	clk-tuning-enable;
+	clk-tuning-by-delayline;
+	tx-phase = <60>;
+	rx-phase = <73>;
+
+	nvmem-cells = <&mac_address0>;
+	nvmem-cell-names = "mac-address";
+
+	phy-handle = <&rgmii0>;
+
+	status = "okay";
+
+	mdio-bus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+		rgmii0: phy@0 {
+			compatible = "ethernet-phy-id001c.c916";
+			device_type = "ethernet-phy";
+			reg = <0x1>;
+			phy-mode = "rgmii";
+		};
+	};
+};
+
+&eth1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gmac1>;
+
+	emac,reset-gpio = <&gpio 115 0>;
+	emac,reset-active-low;
+	emac,reset-delays-us = <0 10000 100000>;
+
+        /* store forward mode */
+	tx-threshold = <1518>;
+	rx-threshold = <12>;
+	tx-ring-num = <1024>;
+	rx-ring-num = <1024>;
+	dma-burst-len = <5>;
+
+	ref-clock-from-phy;
+
+	clk-tuning-enable;
+	clk-tuning-by-delayline;
+	tx-phase = <90>;
+	rx-phase = <73>;
+	nvmem-cells = <&mac_address1>;
+	nvmem-cell-names = "mac-address";
+
+	phy-handle = <&rgmii1>;
+
+	status = "okay";
+
+	mdio-bus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+		rgmii1: phy@1 {
+			compatible = "ethernet-phy-id001c.c916";
+			device_type = "ethernet-phy";
+			reg = <0x1>;
+			phy-mode = "rgmii";
+		};
+	};
+};
+
+&usbphy {
+	status = "okay";
+};
+
+&udc {
+	/*spacemit,udc-mode = <MV_USB_MODE_OTG>;*/
+	spacemit,udc-mode = <MV_USB_MODE_UDC>;
+	status = "okay";
+};
+
+&ehci {
+	spacemit,reset-on-resume;
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	status = "disabled";
+};
+
+&otg {
+	usb-role-switch;
+	role-switch-user-control;
+	spacemit,reset-on-resume;
+	role-switch-default-mode = "peripheral";
+	vbus-gpios = <&gpio 123 0>;
+	status = "disabled";
+};
+
+&usbphy1 {
+	status = "okay";
+};
+
+&udc1 {
+	/*spacemit,udc-mode = <MV_USB_MODE_UDC>;*/
+	spacemit,udc-mode = <MV_USB_MODE_OTG>;
+	status = "disabled";
+};
+
+&ehci1 {
+	/*spacemit,udc-mode = <MV_USB_MODE_OTG>;*/
+	spacemit,reset-on-resume;
+	status = "okay";
+};
+
+&otg1 {
+	usb-role-switch;
+	role-switch-user-control;
+	spacemit,reset-on-resume;
+	role-switch-default-mode = "host";
+	vbus-gpios = <&gpio 123 0>;
+	status = "disabled";
+};
+
+&usb2phy {
+	status = "okay";
+};
+
+&combphy {
+	status = "okay";
+};
+
+&usb3hub {
+	hub-gpios = <
+		/*&gpio 92 0*/
+		&gpio 123 0	/* usb3 hub en */
+		&gpio 124 0>;	/* usb3 hub rst*/
+	vbus-gpios = <&gpio 97 0>;	/* gpio_97 for usb3 hub output vbus */
+	status = "disabled";
+};
+
+&usbdrd3 {
+	status = "okay";
+	reset-on-resume;
+	dwc3@c0a00000 {
+		dr_mode = "host";
+		phy_type = "utmi";
+		snps,hsphy_interface = "utmi";
+		snps,dis_enblslpm_quirk;
+		snps,dis_u2_susphy_quirk;
+		snps,dis_u3_susphy_quirk;
+		snps,dis-del-phy-power-chg-quirk;
+		snps,dis-tx-ipgap-linecheck-quirk;
+		snps,parkmode-disable-ss-quirk;
+	};
+};
+
+&pcie1_rc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pcie1_3>;
+	status = "disabled";
+};
+
+&pcie2_rc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pcie2_4>;
+	status = "disabled";
+};
+
+&imggpu {
+	status = "okay";
+};
+
+&qspi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi>;
+	status = "okay";
+
+	flash@0 {
+		compatible = "jedec,spi-nor";
+		reg = <0>;
+		spi-max-frequency = <26500000>;
+		m25p,fast-read;
+		broken-flash-reset;
+		status = "okay";
+	};
+};
+
+&pwm_bl {
+	pwms = <&pwm14 2000>;
+	brightness-levels = <
+		0   40  40  40  40  40  40  40  40  40  40  40  40  40  40  40
+		40  40  40  40  40  40  40  40  40  40  40  40  40  40  40  40
+		40  40  40  40  40  40  40  40  40  41  42  43  44  45  46  47
+		48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
+		64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79
+		80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
+		96  97  98  99  100 101 102 103 104 105 106 107 108 109 110 111
+		112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
+		128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
+		144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
+		160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175
+		176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191
+		192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207
+		208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
+		224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239
+		240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255
+	>;
+	default-brightness-level = <100>;
+
+	status = "disabled";
+};
+
+/* ov16a10 */
+&backsensor {
+	af_2v8-supply = <&ldo_3>;
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+	dvdd_1v2-supply = <&ldo_6>;
+
+	pwdn-gpios = <&gpio 113 0>;
+	reset-gpios = <&gpio 111 0>;
+
+	status = "okay";
+};
+
+&backsensor_aux {
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+
+	status = "disabled";
+};
+
+&frontsensor {
+	af_2v8-supply = <&ldo_3>;
+	avdd_2v8-supply = <&ldo_2>;
+	dovdd_1v8-supply = <&ldo_7>;
+	dvdd_1v2-supply = <&ldo_6>;
+
+	clocks = <&ccu CLK_CAMM1>;
+	clock-names = "cam_mclk1";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_camera1>;
+
+	pwdn-gpios = <&gpio 114 0>;
+	reset-gpios = <&gpio 112 0>;
+
+	status = "disabled";
+};
+&csiphy0 {
+
+	status = "okay";
+};
+&csiphy1 {
+
+	status = "disabled";
+};
+&csiphy2 {
+	spacemit,bifmode-enable;
+
+	status = "okay";
+};
+
+&ccic0 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&ccic1 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&ccic2 {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+
+	status = "okay";
+};
+&isp {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&cpp {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&vi {
+	power-domains = <&power K1X_PMU_ISP_PWR_DOMAIN>;
+};
+
+&rcpu {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_rcpu>;
+	mboxes = <&mailbox 0>, <&mailbox 1>;
+	mbox-names = "vq0", "vq1";
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
+	status = "okay";
+};
+
+&thermal {
+	sensor_range = <0x1 0x4>;
+};
+
+&thermal_zones {
+	top_thermal {
+		polling-delay = <0>;
+		polling-delay-passive = <0>;
+		thermal-sensors = <&thermal 1>;
+
+		trips {
+			top_trip0: top-trip0 {
+				temperature = <40000>;
+				hysteresis = <5000>;
+				type = "passive";
+			};
+
+			top_trip1: top-trip1 {
+				temperature = <55000>;
+				hysteresis = <5000>;
+				type = "passive";
+			};
+
+			top_trip2: top-trip2 {
+				temperature = <70000>;
+				hysteresis = <5000>;
+				type = "passive";
+			};
+
+			top_trip3: top-trip3 {
+				temperature = <85000>;
+				hysteresis = <5000>;
+				type = "passive";
+			};
+		};
+
+		cooling-maps {
+			map0 {
+				trip = <&top_trip0>;
+				cooling-device = <&fan 0 1>;
+			};
+
+			map1 {
+				trip = <&top_trip1>;
+				cooling-device = <&fan 1 2>;
+			};
+
+			map2 {
+				trip = <&top_trip2>;
+				cooling-device = <&fan 2 3>;
+			};
+
+			map3 {
+				trip = <&top_trip3>;
+				cooling-device = <&fan 3 4>;
+			};
+		};
+	};
+
+	gpu_thermal {
+		polling-delay = <0>;
+		polling-delay-passive = <0>;
+		thermal-sensors = <&thermal 2>;
+
+		/* Just a placeholder */
+		trips {
+			gpu_trip0: gpu-trip0 {
+				temperature = <40000>;
+				hysteresis = <5000>;
+				type = "passive";
+			};
+		};
+	};
+};
+
+&i2s0 {
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_sspa0_0>;
+        status = "disabled";
+};
+
+&hdmiaudio {
+	status = "disabled";
+};
+
+&sound_hdmi {
+	status = "disabled";
+	simple-audio-card,cpu {
+		sound-dai = <&hdmiaudio>;
+	};
+};
+
+&sound_codec {
+	status = "disabled";
+	simple-audio-card,name = "snd-es8326";
+	spacemit,mclk-fs = <64>;
+	simple-audio-card,codec {
+		sound-dai = <&es8326>;
+	};
+};
+
+&rpwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_rpwm2_0>;
+	status = "okay";
+};
diff --git a/arch/riscv/boot/dts/spacemit/lcd/lcd_ili9881c_mipi.dtsi b/arch/riscv/boot/dts/spacemit/lcd/lcd_ili9881c_mipi.dtsi
new file mode 100644
index 000000000000..701058694d2e
--- /dev/null
+++ b/arch/riscv/boot/dts/spacemit/lcd/lcd_ili9881c_mipi.dtsi
@@ -0,0 +1,260 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/ { lcds: lcds {
+	lcd_ili9881c_mipi: lcd_ili9881c_mipi {
+		dsi-work-mode = <1>; /* video burst mode*/
+		dsi-lane-number = <4>;
+		dsi-color-format = "rgb888";
+		width-mm = <108>;
+		height-mm = <172>;
+		use-dcs-write;
+
+		/*mipi info*/
+		height = <1280>;
+		width = <800>;
+		hfp = <40>;
+		hbp = <20>;
+		hsync = <20>;
+		vfp = <30>;
+		vbp = <12>;
+		vsync = <4>;
+		fps = <30>;
+		work-mode = <0>;
+		rgb-mode = <3>;
+		lane-number = <4>;
+		phy-bit-clock = <500000000>;
+		//phy-esc-clock = <76800000>;
+		split-enable = <0>;
+		eotp-enable = <0>;
+		burst-mode = <0>;
+		esd-check-enable = <0>;
+
+		/* DSI_CMD, DSI_MODE, timeout, len, cmd */
+		initial-command = [
+			39 01 10 04 FF 98 81 03
+			39 01 10 02 01 00
+			39 01 10 02 02 00
+			39 01 10 02 03 53
+			39 01 10 02 04 D3
+			39 01 10 02 05 00
+			39 01 10 02 06 0D
+			39 01 10 02 07 08
+			39 01 10 02 08 00
+			39 01 10 02 09 00
+			39 01 10 02 0a 00
+			39 01 10 02 0b 00
+			39 01 10 02 0c 00
+			39 01 10 02 0d 00
+			39 01 10 02 0e 00
+			39 01 10 02 0f 28
+			39 01 10 02 10 28
+			39 01 10 02 11 00
+			39 01 10 02 12 00
+			39 01 10 02 13 00
+			39 01 10 02 14 00
+			39 01 10 02 15 00
+			39 01 10 02 16 00
+			39 01 10 02 17 00
+			39 01 10 02 18 00
+			39 01 10 02 19 00
+			39 01 10 02 1a 00
+			39 01 10 02 1b 00
+			39 01 10 02 1c 00
+			39 01 10 02 1d 00
+			39 01 10 02 1e 40
+			39 01 10 02 1f 80
+			39 01 10 02 20 06
+			39 01 10 02 21 01
+			39 01 10 02 22 00
+			39 01 10 02 23 00
+			39 01 10 02 24 00
+			39 01 10 02 25 00
+			39 01 10 02 26 00
+			39 01 10 02 27 00
+			39 01 10 02 28 33
+			39 01 10 02 29 33
+			39 01 10 02 2a 00
+			39 01 10 02 2b 00
+			39 01 10 02 2c 00
+			39 01 10 02 2d 00
+			39 01 10 02 2e 00
+			39 01 10 02 2f 00
+			39 01 10 02 30 00
+			39 01 10 02 31 00
+			39 01 10 02 32 00
+			39 01 10 02 33 00
+			39 01 10 02 34 03
+			39 01 10 02 35 00
+			39 01 10 02 36 00
+			39 01 10 02 37 00
+			39 01 10 02 38 96
+			39 01 10 02 39 00
+			39 01 10 02 3a 00
+			39 01 10 02 3b 00
+			39 01 10 02 3c 00
+			39 01 10 02 3d 00
+			39 01 10 02 3e 00
+			39 01 10 02 3f 00
+			39 01 10 02 40 00
+			39 01 10 02 41 00
+			39 01 10 02 42 00
+			39 01 10 02 43 00
+			39 01 10 02 44 00
+			39 01 10 02 50 00
+			39 01 10 02 51 23
+			39 01 10 02 52 45
+			39 01 10 02 53 67
+			39 01 10 02 54 89
+			39 01 10 02 55 AB
+			39 01 10 02 56 01
+			39 01 10 02 57 23
+			39 01 10 02 58 45
+			39 01 10 02 59 67
+			39 01 10 02 5a 89
+			39 01 10 02 5b AB
+			39 01 10 02 5c CD
+			39 01 10 02 5d EF
+			39 01 10 02 5e 00
+			39 01 10 02 5f 08
+			39 01 10 02 60 08
+			39 01 10 02 61 06
+			39 01 10 02 62 06
+			39 01 10 02 63 01
+			39 01 10 02 64 01
+			39 01 10 02 65 00
+			39 01 10 02 66 00
+			39 01 10 02 67 02
+			39 01 10 02 68 15
+			39 01 10 02 69 15
+			39 01 10 02 6a 14
+			39 01 10 02 6b 14
+			39 01 10 02 6c 0D
+			39 01 10 02 6d 0D
+			39 01 10 02 6e 0C
+			39 01 10 02 6f 0C
+			39 01 10 02 70 0F
+			39 01 10 02 71 0F
+			39 01 10 02 72 0E
+			39 01 10 02 73 0E
+			39 01 10 02 74 02
+			39 01 10 02 75 08
+			39 01 10 02 76 08
+			39 01 10 02 77 06
+			39 01 10 02 78 06
+			39 01 10 02 79 01
+			39 01 10 02 7a 01
+			39 01 10 02 7b 00
+			39 01 10 02 7c 00
+			39 01 10 02 7d 02
+			39 01 10 02 7e 15
+			39 01 10 02 7f 15
+			39 01 10 02 80 14
+			39 01 10 02 81 14
+			39 01 10 02 82 0D
+			39 01 10 02 83 0D
+			39 01 10 02 84 0C
+			39 01 10 02 85 0C
+			39 01 10 02 86 0F
+			39 01 10 02 87 0F
+			39 01 10 02 88 0E
+			39 01 10 02 89 0E
+			39 01 10 02 8A 02
+			39 01 10 04 FF 98 81 04
+			39 01 10 02 6E 2B
+			39 01 10 02 6F 37
+			39 01 10 02 3A A4
+			39 01 10 02 8D 1A
+			39 01 10 02 87 BA
+			39 01 10 02 B2 D1
+			39 01 10 02 88 0B
+			39 01 10 02 38 01
+			39 01 10 02 39 00
+			39 01 10 02 B5 07
+			39 01 10 02 31 75
+			39 01 10 02 3B 98
+			//39 01 10 02 2F 01
+			39 01 10 04 FF 98 81 01
+			39 01 10 02 43 33
+			39 01 10 02 22 0A
+			39 01 10 02 31 00
+			39 01 10 02 53 48
+			39 01 10 02 55 48
+			39 01 10 02 50 99
+			39 01 10 02 51 94
+			39 01 10 02 60 10
+			39 01 10 02 62 20
+			39 01 10 02 A0 00
+			39 01 10 02 A1 00
+			39 01 10 02 A2 15
+			39 01 10 02 A3 14
+			39 01 10 02 A4 1B
+			39 01 10 02 A5 2F
+			39 01 10 02 A6 25
+			39 01 10 02 A7 24
+			39 01 10 02 A8 80
+			39 01 10 02 A9 1F
+			39 01 10 02 AA 2C
+			39 01 10 02 AB 6C
+			39 01 10 02 AC 16
+			39 01 10 02 AD 14
+			39 01 10 02 AE 4D
+			39 01 10 02 AF 20
+			39 01 10 02 B0 29
+			39 01 10 02 B1 4F
+			39 01 10 02 B2 5F
+			39 01 10 02 B3 23
+			39 01 10 02 C0 00
+			39 01 10 02 C1 2E
+			39 01 10 02 C2 3B
+			39 01 10 02 C3 15
+			39 01 10 02 C4 16
+			39 01 10 02 C5 28
+			39 01 10 02 C6 1A
+			39 01 10 02 C7 1C
+			39 01 10 02 C8 A7
+			39 01 10 02 C9 1B
+			39 01 10 02 CA 28
+			39 01 10 02 CB 92
+			39 01 10 02 CC 1F
+			39 01 10 02 CD 1C
+			39 01 10 02 CE 4B
+			39 01 10 02 CF 1F
+			39 01 10 02 D0 28
+			39 01 10 02 D1 4E
+			39 01 10 02 D2 5C
+			39 01 10 02 D3 23
+			39 01 10 04 FF 98 81 00
+			39 01 10 02 11 00
+			39 01 78 02 29 00
+			39 01 10 02 35 00
+		];
+		sleep-in-command = [
+			39 01 78 01 28
+			39 01 78 01 10
+		];
+		sleep-out-command = [
+			39 01 96 01 11
+			39 01 32 01 29
+		];
+		read-id-command = [
+			37 01 00 01 05
+			14 01 00 05 fb fc fd fe ff
+		];
+
+		display-timings {
+			timing0 {
+				clock-frequency = <70000000>;
+				hback-porch = <20>;
+				hactive = <800>;
+				hfront-porch = <40>;
+				hsync-len = <20>;
+				vback-porch = <12>;
+				vactive = <1280>;
+				vfront-porch = <30>;
+				vsync-len = <4>;
+				vsync-active = <1>;
+				hsync-active = <1>;
+			};
+		};
+	};
+};};
diff --git a/arch/riscv/configs/k1_defconfig b/arch/riscv/configs/k1_defconfig
index 4d872e73f71d..8d94582bfd0f 100644
--- a/arch/riscv/configs/k1_defconfig
+++ b/arch/riscv/configs/k1_defconfig
@@ -41,9 +41,9 @@ CONFIG_RELAY=y
 # CONFIG_RD_XZ is not set
 # CONFIG_RD_LZO is not set
 # CONFIG_RD_LZ4 is not set
-# CONFIG_RD_ZSTD is not set
 CONFIG_BOOT_CONFIG=y
 CONFIG_EXPERT=y
+CONFIG_KALLSYMS_ALL=y
 CONFIG_PROFILING=y
 CONFIG_SOC_SPACEMIT=y
 CONFIG_SOC_SPACEMIT_K1X=y
@@ -496,6 +496,8 @@ CONFIG_PCIEPORTBUS=y
 CONFIG_PCIEAER=y
 CONFIG_DEVTMPFS=y
 CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_FW_LOADER_COMPRESS=y
+CONFIG_FW_LOADER_COMPRESS_ZSTD=y
 # CONFIG_ARM_SCMI_POWER_DOMAIN is not set
 # CONFIG_ARM_SCPI_POWER_DOMAIN is not set
 CONFIG_MTD=y
@@ -676,6 +678,8 @@ CONFIG_INPUT_TOUCHSCREEN=y
 CONFIG_TOUCHSCREEN_GT9XX=y
 CONFIG_TOUCHSCREEN_GOODIX=y
 CONFIG_TOUCHSCREEN_CHIPONE_TDDI=y
+CONFIG_TOUCHSCREEN_CHSC5XXX=y
+CONFIG_SEMI_TOUCH_AUTO_UPDATE_EN=y
 CONFIG_INPUT_MISC=y
 CONFIG_INPUT_UINPUT=y
 CONFIG_INPUT_SPACEMIT_POWERKEY=y
@@ -878,7 +882,8 @@ CONFIG_SPACEMIT_K1X_SENSOR_V2=y
 # CONFIG_DVB_DRX39XYJ is not set
 # CONFIG_DVB_CXD2099 is not set
 # CONFIG_DVB_SP2 is not set
-# CONFIG_DRM_DEBUG_MODESET_LOCK is not set
+CONFIG_DRM_RADEON=m
+CONFIG_DRM_RADEON_USERPTR=y
 CONFIG_DRM_SPACEMIT=y
 CONFIG_SPACEMIT_MIPI_PANEL=y
 CONFIG_SPACEMIT_HDMI=y
@@ -898,6 +903,7 @@ CONFIG_SPACEMIT_HDMIAUDIO=y
 CONFIG_SPACEMIT_DUMMYCODEC=y
 CONFIG_SND_SOC_ES7210=y
 CONFIG_SND_SOC_ES8156=y
+CONFIG_SND_SOC_ES8323=y
 CONFIG_SND_SOC_ES8326=y
 CONFIG_SND_SIMPLE_CARD=y
 CONFIG_UHID=y
@@ -1036,6 +1042,7 @@ CONFIG_SPACEMIT_REBOOT_CONTROL=y
 CONFIG_SPACEMIT_LID_CONTROL=y
 CONFIG_SPACEMI_K1X_DMA_RANGE=y
 CONFIG_SPACEMI_SOCINFO=y
+CONFIG_SPACEMIT_DDRBW=y
 CONFIG_CHIP_MEDIA_JPU=y
 CONFIG_SPACEMIT_V2D=y
 CONFIG_SPACEMIT_RFKILL=y
@@ -1295,7 +1302,6 @@ CONFIG_CRYPTO_USER_API_AEAD=m
 CONFIG_SPACEMIT_REE_ENGINE=y
 CONFIG_SPACEMIT_REE_AES=y
 CONFIG_CORDIC=m
-CONFIG_XZ_DEC=y
 CONFIG_DMA_CMA=y
 CONFIG_IRQ_POLL=y
 CONFIG_PRINTK_TIME=y
@@ -1308,9 +1314,6 @@ CONFIG_DEBUG_WX=y
 CONFIG_SCHED_STACK_END_CHECK=y
 CONFIG_KFENCE=y
 CONFIG_DETECT_HUNG_TASK=y
-CONFIG_LOCK_STAT=y
-CONFIG_DEBUG_WW_MUTEX_SLOWPATH=y
-CONFIG_DEBUG_RWSEMS=y
 CONFIG_DEBUG_ATOMIC_SLEEP=y
 # CONFIG_RCU_TRACE is not set
 # CONFIG_RUNTIME_TESTING_MENU is not set
diff --git a/arch/riscv/configs/k1_rt_defconfig b/arch/riscv/configs/k1_rt_defconfig
new file mode 100644
index 000000000000..e214683ef063
--- /dev/null
+++ b/arch/riscv/configs/k1_rt_defconfig
@@ -0,0 +1,1317 @@
+CONFIG_COMPILE_TEST=y
+# CONFIG_WERROR is not set
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_WATCH_QUEUE=y
+CONFIG_NO_HZ_IDLE=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BPF_JIT=y
+CONFIG_BPF_JIT_ALWAYS_ON=y
+CONFIG_PREEMPT_RT=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_PSI=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_MEMCG=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CFS_BANDWIDTH=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_RDMA=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_HUGETLB=y
+CONFIG_CPUSETS=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_CGROUP_BPF=y
+CONFIG_CGROUP_MISC=y
+CONFIG_NAMESPACES=y
+CONFIG_USER_NS=y
+CONFIG_CHECKPOINT_RESTORE=y
+CONFIG_SCHED_AUTOGROUP=y
+CONFIG_RELAY=y
+CONFIG_INITRAMFS_SOURCE="rootfs.cpio.gz"
+# CONFIG_RD_BZIP2 is not set
+# CONFIG_RD_LZMA is not set
+# CONFIG_RD_XZ is not set
+# CONFIG_RD_LZO is not set
+# CONFIG_RD_LZ4 is not set
+# CONFIG_RD_ZSTD is not set
+CONFIG_BOOT_CONFIG=y
+CONFIG_EXPERT=y
+CONFIG_PROFILING=y
+CONFIG_SOC_SPACEMIT=y
+CONFIG_SOC_SPACEMIT_K1X=y
+CONFIG_SMP=y
+CONFIG_NR_CPUS=8
+CONFIG_RISCV_SBI_V01=y
+# CONFIG_RISCV_BOOT_SPINWAIT is not set
+CONFIG_SUSPEND_SKIP_SYNC=y
+CONFIG_CPU_IDLE=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
+# CONFIG_ARM_BRCMSTB_AVS_CPUFREQ is not set
+# CONFIG_ARM_MEDIATEK_CPUFREQ_HW is not set
+CONFIG_SPACEMIT_K1X_CPUFREQ=y
+CONFIG_JUMP_LABEL=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+# CONFIG_MODULE_SIG_ALL is not set
+CONFIG_BLK_DEV_THROTTLING=y
+CONFIG_BINFMT_MISC=m
+CONFIG_PAGE_REPORTING=y
+CONFIG_CMA=y
+CONFIG_CMA_DEBUGFS=y
+CONFIG_CMA_SYSFS=y
+CONFIG_IDLE_PAGE_TRACKING=y
+CONFIG_ANON_VMA_NAME=y
+CONFIG_USERFAULTFD=y
+CONFIG_LRU_GEN=y
+CONFIG_LRU_GEN_ENABLED=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=m
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=m
+CONFIG_TLS=m
+CONFIG_TLS_DEVICE=y
+CONFIG_XFRM_USER=m
+CONFIG_XFRM_INTERFACE=m
+CONFIG_XFRM_STATISTICS=y
+CONFIG_NET_KEY=m
+CONFIG_XDP_SOCKETS=y
+CONFIG_XDP_SOCKETS_DIAG=m
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_FIB_TRIE_STATS=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_ROUTE_MULTIPATH=y
+CONFIG_IP_ROUTE_VERBOSE=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IP_PNP_RARP=y
+CONFIG_NET_IPIP=m
+CONFIG_NET_IPGRE_DEMUX=m
+CONFIG_NET_IPGRE=m
+CONFIG_NET_IPGRE_BROADCAST=y
+CONFIG_IP_MROUTE=y
+CONFIG_IP_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_NET_IPVTI=m
+CONFIG_NET_FOU_IP_TUNNELS=y
+CONFIG_INET_AH=m
+CONFIG_INET_ESP=m
+CONFIG_INET_ESP_OFFLOAD=m
+CONFIG_INET_ESPINTCP=y
+CONFIG_INET_IPCOMP=m
+CONFIG_INET_DIAG=m
+CONFIG_INET_UDP_DIAG=m
+CONFIG_INET_RAW_DIAG=m
+CONFIG_INET_DIAG_DESTROY=y
+CONFIG_TCP_CONG_ADVANCED=y
+CONFIG_TCP_MD5SIG=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_ESP_OFFLOAD=m
+CONFIG_INET6_ESPINTCP=y
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_MIP6=m
+CONFIG_IPV6_ILA=m
+CONFIG_IPV6_VTI=m
+CONFIG_IPV6_SIT=m
+CONFIG_IPV6_SIT_6RD=y
+CONFIG_IPV6_GRE=m
+CONFIG_IPV6_SUBTREES=y
+CONFIG_IPV6_MROUTE=y
+CONFIG_IPV6_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IPV6_PIMSM_V2=y
+CONFIG_IPV6_SEG6_LWTUNNEL=y
+CONFIG_IPV6_SEG6_HMAC=y
+CONFIG_IPV6_IOAM6_LWTUNNEL=y
+CONFIG_MPTCP=y
+CONFIG_NETWORK_SECMARK=y
+CONFIG_NETWORK_PHY_TIMESTAMPING=y
+CONFIG_NETFILTER=y
+CONFIG_BRIDGE_NETFILTER=m
+# CONFIG_NETFILTER_INGRESS is not set
+CONFIG_NETFILTER_NETLINK_HOOK=m
+CONFIG_NF_CONNTRACK=m
+CONFIG_NF_CONNTRACK_SECMARK=y
+CONFIG_NF_CONNTRACK_ZONES=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CONNTRACK_TIMEOUT=y
+CONFIG_NF_CONNTRACK_TIMESTAMP=y
+CONFIG_NF_CONNTRACK_AMANDA=m
+CONFIG_NF_CONNTRACK_FTP=m
+CONFIG_NF_CONNTRACK_H323=m
+CONFIG_NF_CONNTRACK_IRC=m
+CONFIG_NF_CONNTRACK_NETBIOS_NS=m
+CONFIG_NF_CONNTRACK_SNMP=m
+CONFIG_NF_CONNTRACK_PPTP=m
+CONFIG_NF_CONNTRACK_SANE=m
+CONFIG_NF_CONNTRACK_SIP=m
+CONFIG_NF_CONNTRACK_TFTP=m
+CONFIG_NF_CT_NETLINK=m
+CONFIG_NF_CT_NETLINK_TIMEOUT=m
+CONFIG_NF_CT_NETLINK_HELPER=m
+CONFIG_NETFILTER_NETLINK_GLUE_CT=y
+CONFIG_NF_TABLES=m
+CONFIG_NF_TABLES_INET=y
+CONFIG_NF_TABLES_NETDEV=y
+CONFIG_NFT_NUMGEN=m
+CONFIG_NFT_CT=m
+CONFIG_NFT_CONNLIMIT=m
+CONFIG_NFT_LOG=m
+CONFIG_NFT_LIMIT=m
+CONFIG_NFT_MASQ=m
+CONFIG_NFT_REDIR=m
+CONFIG_NFT_NAT=m
+CONFIG_NFT_TUNNEL=m
+CONFIG_NFT_QUEUE=m
+CONFIG_NFT_QUOTA=m
+CONFIG_NFT_REJECT=m
+CONFIG_NFT_COMPAT=m
+CONFIG_NFT_HASH=m
+CONFIG_NFT_XFRM=m
+CONFIG_NFT_SOCKET=m
+CONFIG_NFT_OSF=m
+CONFIG_NFT_TPROXY=m
+CONFIG_NFT_SYNPROXY=m
+CONFIG_NFT_DUP_NETDEV=m
+CONFIG_NFT_FWD_NETDEV=m
+CONFIG_NFT_REJECT_NETDEV=m
+CONFIG_NETFILTER_XTABLES=y
+CONFIG_NETFILTER_XT_MARK=y
+CONFIG_NETFILTER_XT_SET=y
+CONFIG_NETFILTER_XT_TARGET_AUDIT=m
+CONFIG_NETFILTER_XT_TARGET_CHECKSUM=m
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=m
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=m
+CONFIG_NETFILTER_XT_TARGET_CONNSECMARK=m
+CONFIG_NETFILTER_XT_TARGET_DSCP=m
+CONFIG_NETFILTER_XT_TARGET_HMARK=m
+CONFIG_NETFILTER_XT_TARGET_IDLETIMER=y
+CONFIG_NETFILTER_XT_TARGET_LED=m
+CONFIG_NETFILTER_XT_TARGET_LOG=m
+CONFIG_NETFILTER_XT_TARGET_MARK=m
+CONFIG_NETFILTER_XT_TARGET_NFLOG=m
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=m
+CONFIG_NETFILTER_XT_TARGET_RATEEST=y
+CONFIG_NETFILTER_XT_TARGET_TEE=m
+CONFIG_NETFILTER_XT_TARGET_TPROXY=m
+CONFIG_NETFILTER_XT_TARGET_SECMARK=m
+CONFIG_NETFILTER_XT_TARGET_TCPMSS=m
+CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP=m
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
+CONFIG_NETFILTER_XT_MATCH_BPF=m
+CONFIG_NETFILTER_XT_MATCH_CGROUP=m
+CONFIG_NETFILTER_XT_MATCH_CLUSTER=m
+CONFIG_NETFILTER_XT_MATCH_COMMENT=m
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=m
+CONFIG_NETFILTER_XT_MATCH_CONNLABEL=m
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=m
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=m
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
+CONFIG_NETFILTER_XT_MATCH_CPU=m
+CONFIG_NETFILTER_XT_MATCH_DEVGROUP=m
+CONFIG_NETFILTER_XT_MATCH_DSCP=m
+CONFIG_NETFILTER_XT_MATCH_ESP=m
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=m
+CONFIG_NETFILTER_XT_MATCH_HELPER=m
+CONFIG_NETFILTER_XT_MATCH_HL=y
+CONFIG_NETFILTER_XT_MATCH_IPCOMP=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+CONFIG_NETFILTER_XT_MATCH_LENGTH=m
+CONFIG_NETFILTER_XT_MATCH_LIMIT=m
+CONFIG_NETFILTER_XT_MATCH_MAC=m
+CONFIG_NETFILTER_XT_MATCH_MARK=m
+CONFIG_NETFILTER_XT_MATCH_MULTIPORT=m
+CONFIG_NETFILTER_XT_MATCH_NFACCT=m
+CONFIG_NETFILTER_XT_MATCH_OSF=m
+CONFIG_NETFILTER_XT_MATCH_OWNER=m
+CONFIG_NETFILTER_XT_MATCH_POLICY=m
+CONFIG_NETFILTER_XT_MATCH_PHYSDEV=m
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=m
+CONFIG_NETFILTER_XT_MATCH_QUOTA=m
+CONFIG_NETFILTER_XT_MATCH_RATEEST=m
+CONFIG_NETFILTER_XT_MATCH_REALM=m
+CONFIG_NETFILTER_XT_MATCH_RECENT=m
+CONFIG_NETFILTER_XT_MATCH_SOCKET=m
+CONFIG_NETFILTER_XT_MATCH_STATE=m
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=m
+CONFIG_NETFILTER_XT_MATCH_STRING=m
+CONFIG_NETFILTER_XT_MATCH_TCPMSS=m
+CONFIG_NETFILTER_XT_MATCH_TIME=m
+CONFIG_NETFILTER_XT_MATCH_U32=m
+CONFIG_IP_SET=y
+CONFIG_IP_SET_BITMAP_IP=m
+CONFIG_IP_SET_BITMAP_IPMAC=m
+CONFIG_IP_SET_BITMAP_PORT=m
+CONFIG_IP_SET_HASH_IP=m
+CONFIG_IP_SET_HASH_IPMARK=m
+CONFIG_IP_SET_HASH_IPPORT=m
+CONFIG_IP_SET_HASH_IPPORTIP=m
+CONFIG_IP_SET_HASH_IPPORTNET=m
+CONFIG_IP_SET_HASH_IPMAC=m
+CONFIG_IP_SET_HASH_MAC=m
+CONFIG_IP_SET_HASH_NETPORTNET=m
+CONFIG_IP_SET_HASH_NET=m
+CONFIG_IP_SET_HASH_NETNET=m
+CONFIG_IP_SET_HASH_NETPORT=m
+CONFIG_IP_SET_HASH_NETIFACE=m
+CONFIG_IP_SET_LIST_SET=m
+CONFIG_IP_VS=m
+CONFIG_IP_VS_IPV6=y
+CONFIG_IP_VS_PROTO_TCP=y
+CONFIG_IP_VS_PROTO_UDP=y
+CONFIG_IP_VS_PROTO_ESP=y
+CONFIG_IP_VS_PROTO_AH=y
+CONFIG_IP_VS_PROTO_SCTP=y
+CONFIG_IP_VS_RR=m
+CONFIG_IP_VS_WRR=m
+CONFIG_IP_VS_LC=m
+CONFIG_IP_VS_WLC=m
+CONFIG_IP_VS_FO=m
+CONFIG_IP_VS_OVF=m
+CONFIG_IP_VS_LBLC=m
+CONFIG_IP_VS_LBLCR=m
+CONFIG_IP_VS_DH=m
+CONFIG_IP_VS_SH=m
+CONFIG_IP_VS_MH=m
+CONFIG_IP_VS_SED=m
+CONFIG_IP_VS_NQ=m
+CONFIG_IP_VS_TWOS=m
+CONFIG_IP_VS_FTP=m
+CONFIG_IP_VS_PE_SIP=m
+CONFIG_NFT_DUP_IPV4=m
+CONFIG_NFT_FIB_IPV4=m
+CONFIG_NF_TABLES_ARP=y
+CONFIG_NF_LOG_ARP=m
+CONFIG_NF_LOG_IPV4=m
+CONFIG_IP_NF_IPTABLES=m
+CONFIG_IP_NF_MATCH_AH=m
+CONFIG_IP_NF_MATCH_ECN=m
+CONFIG_IP_NF_MATCH_RPFILTER=m
+CONFIG_IP_NF_MATCH_TTL=m
+CONFIG_IP_NF_FILTER=m
+CONFIG_IP_NF_TARGET_REJECT=m
+CONFIG_IP_NF_TARGET_SYNPROXY=m
+CONFIG_IP_NF_NAT=m
+CONFIG_IP_NF_TARGET_MASQUERADE=m
+CONFIG_IP_NF_TARGET_NETMAP=m
+CONFIG_IP_NF_TARGET_REDIRECT=m
+CONFIG_IP_NF_MANGLE=m
+CONFIG_IP_NF_TARGET_ECN=m
+CONFIG_IP_NF_TARGET_TTL=m
+CONFIG_IP_NF_RAW=m
+CONFIG_IP_NF_ARPTABLES=m
+CONFIG_IP_NF_ARPFILTER=m
+CONFIG_IP_NF_ARP_MANGLE=m
+CONFIG_NFT_DUP_IPV6=m
+CONFIG_NFT_FIB_IPV6=m
+CONFIG_IP6_NF_IPTABLES=m
+CONFIG_IP6_NF_MATCH_AH=m
+CONFIG_IP6_NF_MATCH_EUI64=m
+CONFIG_IP6_NF_MATCH_FRAG=m
+CONFIG_IP6_NF_MATCH_OPTS=m
+CONFIG_IP6_NF_MATCH_HL=m
+CONFIG_IP6_NF_MATCH_IPV6HEADER=m
+CONFIG_IP6_NF_MATCH_MH=m
+CONFIG_IP6_NF_MATCH_RPFILTER=m
+CONFIG_IP6_NF_MATCH_RT=m
+CONFIG_IP6_NF_MATCH_SRH=m
+CONFIG_IP6_NF_TARGET_HL=m
+CONFIG_IP6_NF_FILTER=m
+CONFIG_IP6_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_TARGET_SYNPROXY=m
+CONFIG_IP6_NF_MANGLE=m
+CONFIG_IP6_NF_RAW=m
+CONFIG_IP6_NF_NAT=m
+CONFIG_IP6_NF_TARGET_MASQUERADE=m
+CONFIG_IP6_NF_TARGET_NPT=m
+CONFIG_NF_TABLES_BRIDGE=m
+CONFIG_NFT_BRIDGE_META=m
+CONFIG_NFT_BRIDGE_REJECT=m
+CONFIG_NF_CONNTRACK_BRIDGE=m
+CONFIG_BRIDGE_NF_EBTABLES=m
+CONFIG_BRIDGE_EBT_BROUTE=m
+CONFIG_BRIDGE_EBT_T_FILTER=m
+CONFIG_BRIDGE_EBT_T_NAT=m
+CONFIG_BRIDGE_EBT_802_3=m
+CONFIG_BRIDGE_EBT_AMONG=m
+CONFIG_BRIDGE_EBT_ARP=m
+CONFIG_BRIDGE_EBT_IP=m
+CONFIG_BRIDGE_EBT_IP6=m
+CONFIG_BRIDGE_EBT_LIMIT=m
+CONFIG_BRIDGE_EBT_MARK=m
+CONFIG_BRIDGE_EBT_PKTTYPE=m
+CONFIG_BRIDGE_EBT_STP=m
+CONFIG_BRIDGE_EBT_VLAN=m
+CONFIG_BRIDGE_EBT_ARPREPLY=m
+CONFIG_BRIDGE_EBT_DNAT=m
+CONFIG_BRIDGE_EBT_MARK_T=m
+CONFIG_BRIDGE_EBT_REDIRECT=m
+CONFIG_BRIDGE_EBT_SNAT=m
+CONFIG_BRIDGE_EBT_LOG=m
+CONFIG_BRIDGE_EBT_NFLOG=m
+CONFIG_BPFILTER=y
+CONFIG_IP_DCCP=m
+# CONFIG_IP_DCCP_CCID3 is not set
+CONFIG_RDS=m
+CONFIG_RDS_TCP=m
+CONFIG_TIPC=m
+CONFIG_ATM=m
+CONFIG_ATM_CLIP=m
+CONFIG_ATM_LANE=m
+CONFIG_ATM_MPOA=m
+CONFIG_ATM_BR2684=m
+CONFIG_L2TP=m
+CONFIG_BRIDGE=m
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_BRIDGE_MRP=y
+CONFIG_BRIDGE_CFM=y
+CONFIG_VLAN_8021Q=m
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_VLAN_8021Q_MVRP=y
+CONFIG_LLC2=m
+CONFIG_ATALK=m
+CONFIG_X25=m
+CONFIG_LAPB=m
+CONFIG_PHONET=m
+CONFIG_6LOWPAN=m
+CONFIG_IEEE802154=m
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=m
+CONFIG_NET_SCH_HFSC=m
+CONFIG_NET_SCH_PRIO=m
+CONFIG_NET_SCH_MULTIQ=m
+CONFIG_NET_SCH_RED=m
+CONFIG_NET_SCH_SFB=m
+CONFIG_NET_SCH_SFQ=m
+CONFIG_NET_SCH_TEQL=m
+CONFIG_NET_SCH_TBF=m
+CONFIG_NET_SCH_CBS=m
+CONFIG_NET_SCH_ETF=m
+CONFIG_NET_SCH_TAPRIO=m
+CONFIG_NET_SCH_GRED=m
+CONFIG_NET_SCH_NETEM=m
+CONFIG_NET_SCH_DRR=m
+CONFIG_NET_SCH_MQPRIO=m
+CONFIG_NET_SCH_SKBPRIO=m
+CONFIG_NET_SCH_CHOKE=m
+CONFIG_NET_SCH_QFQ=m
+CONFIG_NET_SCH_CODEL=m
+CONFIG_NET_SCH_FQ_CODEL=m
+CONFIG_NET_SCH_CAKE=m
+CONFIG_NET_SCH_FQ=m
+CONFIG_NET_SCH_HHF=m
+CONFIG_NET_SCH_PIE=m
+CONFIG_NET_SCH_FQ_PIE=m
+CONFIG_NET_SCH_PLUG=m
+CONFIG_NET_SCH_ETS=m
+CONFIG_NET_CLS_BASIC=m
+CONFIG_NET_CLS_ROUTE4=m
+CONFIG_NET_CLS_FW=m
+CONFIG_NET_CLS_U32=m
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_FLOW=m
+CONFIG_NET_CLS_CGROUP=m
+CONFIG_NET_CLS_BPF=m
+CONFIG_NET_CLS_FLOWER=m
+CONFIG_NET_CLS_MATCHALL=m
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_CMP=m
+CONFIG_NET_EMATCH_NBYTE=m
+CONFIG_NET_EMATCH_U32=m
+CONFIG_NET_EMATCH_META=m
+CONFIG_NET_EMATCH_TEXT=m
+CONFIG_NET_EMATCH_CANID=m
+CONFIG_NET_EMATCH_IPSET=m
+CONFIG_NET_EMATCH_IPT=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=m
+CONFIG_NET_ACT_GACT=m
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=m
+CONFIG_NET_ACT_SAMPLE=m
+CONFIG_NET_ACT_IPT=m
+CONFIG_NET_ACT_NAT=m
+CONFIG_NET_ACT_PEDIT=m
+CONFIG_NET_ACT_SIMP=m
+CONFIG_NET_ACT_SKBEDIT=m
+CONFIG_NET_ACT_CSUM=m
+CONFIG_NET_ACT_MPLS=m
+CONFIG_NET_ACT_VLAN=m
+CONFIG_NET_ACT_BPF=m
+CONFIG_NET_ACT_CONNMARK=m
+CONFIG_NET_ACT_CTINFO=m
+CONFIG_NET_ACT_SKBMOD=m
+CONFIG_NET_ACT_TUNNEL_KEY=m
+CONFIG_NET_ACT_GATE=m
+CONFIG_NET_TC_SKB_EXT=y
+CONFIG_BATMAN_ADV=m
+# CONFIG_BATMAN_ADV_BATMAN_V is not set
+CONFIG_BATMAN_ADV_NC=y
+CONFIG_NETLINK_DIAG=y
+CONFIG_CGROUP_NET_PRIO=y
+CONFIG_BPF_STREAM_PARSER=y
+CONFIG_CAN=y
+CONFIG_BT=y
+CONFIG_BT_RFCOMM=y
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=y
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=y
+CONFIG_BT_6LOWPAN=m
+CONFIG_BT_LEDS=y
+CONFIG_BT_HCIBTUSB=m
+CONFIG_BT_HCIUART=y
+CONFIG_BT_HCIUART_H4=y
+CONFIG_BT_HCIUART_RTL=y
+CONFIG_AF_KCM=m
+CONFIG_MCTP=y
+CONFIG_CFG80211=y
+CONFIG_RFKILL=y
+CONFIG_NET_IFE=m
+CONFIG_PCI=y
+CONFIG_PCIEPORTBUS=y
+CONFIG_PCIEAER=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+# CONFIG_ARM_SCMI_POWER_DOMAIN is not set
+# CONFIG_ARM_SCPI_POWER_DOMAIN is not set
+# CONFIG_EFI_DISABLE_RUNTIME is not set
+CONFIG_MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
+# CONFIG_MTD_OF_PARTS is not set
+CONFIG_MTD_BLOCK=y
+# CONFIG_MTD_SPEAR_SMI is not set
+CONFIG_MTD_SPI_NAND=y
+CONFIG_MTD_SPI_NOR=y
+CONFIG_MTD_UBI=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_VIRTIO_BLK=y
+CONFIG_BLK_DEV_NVME=y
+CONFIG_NVME_VERBOSE_ERRORS=y
+CONFIG_SRAM=y
+CONFIG_EEPROM_AT24=y
+CONFIG_BLK_DEV_SD=y
+# CONFIG_BLK_DEV_BSG is not set
+# CONFIG_SCSI_LOWLEVEL is not set
+CONFIG_ATA=y
+CONFIG_SATA_AHCI=y
+CONFIG_MD=y
+CONFIG_MD_LINEAR=y
+CONFIG_BCACHE=y
+CONFIG_BLK_DEV_DM=y
+CONFIG_DM_UNSTRIPED=y
+CONFIG_DM_CRYPT=y
+CONFIG_DM_SNAPSHOT=y
+CONFIG_DM_THIN_PROVISIONING=y
+CONFIG_DM_CACHE=y
+CONFIG_DM_WRITECACHE=y
+CONFIG_DM_MIRROR=y
+CONFIG_DM_RAID=y
+CONFIG_DM_ZERO=y
+CONFIG_DM_MULTIPATH=y
+CONFIG_DM_MULTIPATH_QL=y
+CONFIG_DM_MULTIPATH_ST=y
+CONFIG_DM_MULTIPATH_HST=y
+CONFIG_DM_MULTIPATH_IOA=y
+CONFIG_DM_DELAY=y
+CONFIG_DM_DUST=y
+CONFIG_DM_INIT=y
+CONFIG_DM_UEVENT=y
+CONFIG_DM_FLAKEY=y
+CONFIG_DM_VERITY=y
+CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG=y
+CONFIG_DM_VERITY_FEC=y
+CONFIG_DM_SWITCH=y
+CONFIG_DM_LOG_WRITES=y
+CONFIG_DM_INTEGRITY=y
+CONFIG_TARGET_CORE=y
+CONFIG_TCM_IBLOCK=y
+CONFIG_TCM_FILEIO=y
+CONFIG_NETDEVICES=y
+CONFIG_BONDING=m
+CONFIG_DUMMY=m
+CONFIG_WIREGUARD=m
+CONFIG_EQUALIZER=m
+CONFIG_IFB=m
+CONFIG_NET_TEAM=m
+CONFIG_MACVLAN=m
+CONFIG_MACVTAP=m
+CONFIG_IPVLAN=m
+CONFIG_IPVTAP=m
+CONFIG_VXLAN=m
+CONFIG_GENEVE=m
+CONFIG_BAREUDP=m
+CONFIG_GTP=m
+CONFIG_AMT=m
+CONFIG_MACSEC=m
+CONFIG_NETCONSOLE=m
+CONFIG_NETCONSOLE_DYNAMIC=y
+CONFIG_TUN=y
+CONFIG_VETH=m
+CONFIG_VIRTIO_NET=y
+CONFIG_NLMON=m
+CONFIG_NET_VRF=m
+# CONFIG_NET_VENDOR_ALACRITECH is not set
+# CONFIG_NET_VENDOR_AMAZON is not set
+# CONFIG_NET_VENDOR_AQUANTIA is not set
+# CONFIG_NET_VENDOR_ARC is not set
+# CONFIG_NET_VENDOR_ASIX is not set
+# CONFIG_NET_VENDOR_BROADCOM is not set
+# CONFIG_NET_VENDOR_CADENCE is not set
+# CONFIG_NET_VENDOR_CAVIUM is not set
+# CONFIG_NET_VENDOR_CIRRUS is not set
+# CONFIG_NET_VENDOR_CORTINA is not set
+# CONFIG_NET_VENDOR_DAVICOM is not set
+# CONFIG_NET_VENDOR_ENGLEDER is not set
+# CONFIG_NET_VENDOR_EZCHIP is not set
+# CONFIG_NET_VENDOR_FARADAY is not set
+# CONFIG_NET_VENDOR_FREESCALE is not set
+# CONFIG_NET_VENDOR_FUNGIBLE is not set
+# CONFIG_NET_VENDOR_GOOGLE is not set
+# CONFIG_NET_VENDOR_HISILICON is not set
+# CONFIG_NET_VENDOR_HUAWEI is not set
+# CONFIG_NET_VENDOR_INTEL is not set
+# CONFIG_NET_VENDOR_LITEX is not set
+# CONFIG_NET_VENDOR_MARVELL is not set
+# CONFIG_NET_VENDOR_MICREL is not set
+# CONFIG_NET_VENDOR_MICROCHIP is not set
+# CONFIG_NET_VENDOR_MICROSEMI is not set
+# CONFIG_NET_VENDOR_MICROSOFT is not set
+# CONFIG_NET_VENDOR_NI is not set
+# CONFIG_NET_VENDOR_NATSEMI is not set
+# CONFIG_NET_VENDOR_NETRONOME is not set
+# CONFIG_NET_VENDOR_PENSANDO is not set
+# CONFIG_NET_VENDOR_QUALCOMM is not set
+# CONFIG_NET_VENDOR_RENESAS is not set
+# CONFIG_NET_VENDOR_ROCKER is not set
+# CONFIG_NET_VENDOR_SAMSUNG is not set
+# CONFIG_NET_VENDOR_SEEQ is not set
+# CONFIG_NET_VENDOR_SOLARFLARE is not set
+# CONFIG_NET_VENDOR_SMSC is not set
+# CONFIG_NET_VENDOR_SOCIONEXT is not set
+CONFIG_K1X_EMAC=y
+# CONFIG_NET_VENDOR_STMICRO is not set
+# CONFIG_NET_VENDOR_SUNPLUS is not set
+# CONFIG_NET_VENDOR_SYNOPSYS is not set
+# CONFIG_NET_VENDOR_VERTEXCOM is not set
+# CONFIG_NET_VENDOR_VIA is not set
+# CONFIG_NET_VENDOR_WANGXUN is not set
+# CONFIG_NET_VENDOR_WIZNET is not set
+# CONFIG_NET_VENDOR_XILINX is not set
+CONFIG_REALTEK_PHY=y
+CONFIG_CAN_FLEXCAN=y
+CONFIG_PPP=y
+CONFIG_PPP_BSDCOMP=m
+CONFIG_PPP_DEFLATE=m
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=m
+CONFIG_PPP_MULTILINK=y
+CONFIG_PPPOATM=m
+CONFIG_PPPOE=m
+CONFIG_PPTP=m
+CONFIG_PPPOL2TP=m
+CONFIG_PPP_ASYNC=m
+CONFIG_PPP_SYNC_TTY=m
+CONFIG_SLIP=m
+CONFIG_SLIP_COMPRESSED=y
+CONFIG_SLIP_SMART=y
+CONFIG_SLIP_MODE_SLIP6=y
+CONFIG_USB_RTL8152=m
+CONFIG_USB_USBNET=y
+# CONFIG_USB_NET_AX8817X is not set
+# CONFIG_USB_NET_AX88179_178A is not set
+CONFIG_USB_NET_CDC_NCM=m
+# CONFIG_USB_NET_NET1080 is not set
+CONFIG_USB_NET_QMI_WWAN_F=m
+CONFIG_USB_NET_QMI_WWAN=m
+CONFIG_USB_NET_ASIX=m
+# CONFIG_WLAN_VENDOR_ADMTEK is not set
+# CONFIG_WLAN_VENDOR_ATH is not set
+# CONFIG_WLAN_VENDOR_ATMEL is not set
+# CONFIG_WLAN_VENDOR_BROADCOM is not set
+# CONFIG_WLAN_VENDOR_CISCO is not set
+# CONFIG_WLAN_VENDOR_INTEL is not set
+# CONFIG_WLAN_VENDOR_INTERSIL is not set
+# CONFIG_WLAN_VENDOR_MARVELL is not set
+# CONFIG_WLAN_VENDOR_MEDIATEK is not set
+# CONFIG_WLAN_VENDOR_MICROCHIP is not set
+# CONFIG_WLAN_VENDOR_PURELIFI is not set
+# CONFIG_WLAN_VENDOR_RALINK is not set
+CONFIG_RTL8852BS=m
+CONFIG_RTL8852BE=m
+# CONFIG_WLAN_VENDOR_RSI is not set
+# CONFIG_WLAN_VENDOR_SILABS is not set
+# CONFIG_WLAN_VENDOR_ST is not set
+# CONFIG_WLAN_VENDOR_TI is not set
+# CONFIG_WLAN_VENDOR_ZYDAS is not set
+# CONFIG_WLAN_VENDOR_QUANTENNA is not set
+CONFIG_AIC_WLAN_SUPPORT=y
+CONFIG_AIC8800_WLAN_SUPPORT=m
+CONFIG_INPUT_EVDEV=y
+CONFIG_KEYBOARD_GPIO=y
+# CONFIG_INPUT_MOUSE is not set
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_GT9XX=y
+CONFIG_TOUCHSCREEN_GOODIX=y
+CONFIG_TOUCHSCREEN_CHIPONE_TDDI=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_UINPUT=y
+CONFIG_INPUT_SPACEMIT_POWERKEY=y
+CONFIG_HALL_SENSOR_AS1911=y
+CONFIG_SERIAL_EARLYCON_RISCV_SBI=y
+CONFIG_SERIAL_PXA=y
+CONFIG_SERIAL_PXA_SPACEMIT_K1X=y
+CONFIG_SERIAL_PXA_CONSOLE=y
+CONFIG_SERIAL_DEV_BUS=y
+CONFIG_VIRTIO_CONSOLE=y
+# CONFIG_HW_RANDOM is not set
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_SPACEMIT_K1X=y
+# CONFIG_I2C_BRCMSTB is not set
+CONFIG_I2C_SLAVE=y
+CONFIG_I2C_SLAVE_EEPROM=y
+CONFIG_SPI=y
+CONFIG_SPI_K1X=y
+CONFIG_SPI_K1X_QSPI=y
+CONFIG_PTP_1588_CLOCK_IDTCM=y
+CONFIG_PINCTRL=y
+CONFIG_PINCTRL_SPACEMIT_PMIC=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_GPIO_K1X=y
+CONFIG_SPACEMIT_BATTERY_CW2015=y
+CONFIG_BATTERY_SBS=y
+CONFIG_CHARGER_SBS_VIRTUAL=y
+CONFIG_CHARGER_SGM415XX=y
+CONFIG_SENSORS_PWM_FAN=y
+CONFIG_THERMAL=y
+CONFIG_CPU_THERMAL=y
+# CONFIG_HISI_THERMAL is not set
+CONFIG_K1X_THERMAL=y
+CONFIG_WATCHDOG=y
+CONFIG_SPACEMIT_WATCHDOG=y
+CONFIG_MFD_SPACEMIT_PMIC=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_SPACEMIT=y
+CONFIG_RC_CORE=y
+CONFIG_RC_DEVICES=y
+CONFIG_IR_SPACEMIT=y
+# CONFIG_MEDIA_CEC_SUPPORT is not set
+CONFIG_MEDIA_SUPPORT=y
+# CONFIG_DVB_NET is not set
+# CONFIG_DVB_DYNAMIC_MINORS is not set
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=y
+# CONFIG_RADIO_ADAPTERS is not set
+CONFIG_VIDEO_LINLON_K1X=y
+CONFIG_SPACEMIT_K1X_CAMERA_V2=y
+CONFIG_SPACEMIT_K1X_VI_V2=y
+CONFIG_SPACEMIT_K1X_VI_IOMMU=y
+CONFIG_SPACEMIT_K1X_ISP_V2=y
+CONFIG_SPACEMIT_K1X_CPP_V2=y
+CONFIG_SPACEMIT_K1X_SENSOR_V2=y
+# CONFIG_CXD2880_SPI_DRV is not set
+# CONFIG_MEDIA_TUNER_E4000 is not set
+# CONFIG_MEDIA_TUNER_FC0011 is not set
+# CONFIG_MEDIA_TUNER_FC0012 is not set
+# CONFIG_MEDIA_TUNER_FC0013 is not set
+# CONFIG_MEDIA_TUNER_FC2580 is not set
+# CONFIG_MEDIA_TUNER_IT913X is not set
+# CONFIG_MEDIA_TUNER_M88RS6000T is not set
+# CONFIG_MEDIA_TUNER_MAX2165 is not set
+# CONFIG_MEDIA_TUNER_MC44S803 is not set
+# CONFIG_MEDIA_TUNER_MSI001 is not set
+# CONFIG_MEDIA_TUNER_MT2060 is not set
+# CONFIG_MEDIA_TUNER_MT2063 is not set
+# CONFIG_MEDIA_TUNER_MT20XX is not set
+# CONFIG_MEDIA_TUNER_MT2131 is not set
+# CONFIG_MEDIA_TUNER_MT2266 is not set
+# CONFIG_MEDIA_TUNER_MXL301RF is not set
+# CONFIG_MEDIA_TUNER_MXL5005S is not set
+# CONFIG_MEDIA_TUNER_MXL5007T is not set
+# CONFIG_MEDIA_TUNER_QM1D1B0004 is not set
+# CONFIG_MEDIA_TUNER_QM1D1C0042 is not set
+# CONFIG_MEDIA_TUNER_QT1010 is not set
+# CONFIG_MEDIA_TUNER_R820T is not set
+# CONFIG_MEDIA_TUNER_SI2157 is not set
+# CONFIG_MEDIA_TUNER_SIMPLE is not set
+# CONFIG_MEDIA_TUNER_TDA18212 is not set
+# CONFIG_MEDIA_TUNER_TDA18218 is not set
+# CONFIG_MEDIA_TUNER_TDA18250 is not set
+# CONFIG_MEDIA_TUNER_TDA18271 is not set
+# CONFIG_MEDIA_TUNER_TDA827X is not set
+# CONFIG_MEDIA_TUNER_TDA8290 is not set
+# CONFIG_MEDIA_TUNER_TDA9887 is not set
+# CONFIG_MEDIA_TUNER_TEA5761 is not set
+# CONFIG_MEDIA_TUNER_TEA5767 is not set
+# CONFIG_MEDIA_TUNER_TUA9001 is not set
+# CONFIG_MEDIA_TUNER_XC2028 is not set
+# CONFIG_MEDIA_TUNER_XC4000 is not set
+# CONFIG_MEDIA_TUNER_XC5000 is not set
+# CONFIG_DVB_MXL5XX is not set
+# CONFIG_DVB_STB0899 is not set
+# CONFIG_DVB_STB6100 is not set
+# CONFIG_DVB_STV090x is not set
+# CONFIG_DVB_STV0910 is not set
+# CONFIG_DVB_STV6110x is not set
+# CONFIG_DVB_STV6111 is not set
+# CONFIG_DVB_DRXK is not set
+# CONFIG_DVB_MN88472 is not set
+# CONFIG_DVB_MN88473 is not set
+# CONFIG_DVB_SI2165 is not set
+# CONFIG_DVB_TDA18271C2DD is not set
+# CONFIG_DVB_CX24110 is not set
+# CONFIG_DVB_CX24116 is not set
+# CONFIG_DVB_CX24117 is not set
+# CONFIG_DVB_CX24120 is not set
+# CONFIG_DVB_CX24123 is not set
+# CONFIG_DVB_DS3000 is not set
+# CONFIG_DVB_MB86A16 is not set
+# CONFIG_DVB_MT312 is not set
+# CONFIG_DVB_S5H1420 is not set
+# CONFIG_DVB_SI21XX is not set
+# CONFIG_DVB_STB6000 is not set
+# CONFIG_DVB_STV0288 is not set
+# CONFIG_DVB_STV0299 is not set
+# CONFIG_DVB_STV0900 is not set
+# CONFIG_DVB_STV6110 is not set
+# CONFIG_DVB_TDA10071 is not set
+# CONFIG_DVB_TDA10086 is not set
+# CONFIG_DVB_TDA8083 is not set
+# CONFIG_DVB_TDA8261 is not set
+# CONFIG_DVB_TDA826X is not set
+# CONFIG_DVB_TS2020 is not set
+# CONFIG_DVB_TUA6100 is not set
+# CONFIG_DVB_TUNER_CX24113 is not set
+# CONFIG_DVB_TUNER_ITD1000 is not set
+# CONFIG_DVB_VES1X93 is not set
+# CONFIG_DVB_ZL10036 is not set
+# CONFIG_DVB_ZL10039 is not set
+# CONFIG_DVB_CX22700 is not set
+# CONFIG_DVB_CX22702 is not set
+# CONFIG_DVB_CXD2820R is not set
+# CONFIG_DVB_CXD2841ER is not set
+# CONFIG_DVB_DIB3000MB is not set
+# CONFIG_DVB_DIB3000MC is not set
+# CONFIG_DVB_DIB7000M is not set
+# CONFIG_DVB_DIB7000P is not set
+# CONFIG_DVB_DIB9000 is not set
+# CONFIG_DVB_DRXD is not set
+# CONFIG_DVB_EC100 is not set
+# CONFIG_DVB_L64781 is not set
+# CONFIG_DVB_MT352 is not set
+# CONFIG_DVB_NXT6000 is not set
+# CONFIG_DVB_S5H1432 is not set
+# CONFIG_DVB_SP887X is not set
+# CONFIG_DVB_STV0367 is not set
+# CONFIG_DVB_TDA10048 is not set
+# CONFIG_DVB_TDA1004X is not set
+# CONFIG_DVB_ZD1301_DEMOD is not set
+# CONFIG_DVB_ZL10353 is not set
+# CONFIG_DVB_CXD2880 is not set
+# CONFIG_DVB_STV0297 is not set
+# CONFIG_DVB_TDA10021 is not set
+# CONFIG_DVB_TDA10023 is not set
+# CONFIG_DVB_VES1820 is not set
+# CONFIG_DVB_AU8522_DTV is not set
+# CONFIG_DVB_AU8522_V4L is not set
+# CONFIG_DVB_BCM3510 is not set
+# CONFIG_DVB_LG2160 is not set
+# CONFIG_DVB_LGDT3305 is not set
+# CONFIG_DVB_LGDT330X is not set
+# CONFIG_DVB_MXL692 is not set
+# CONFIG_DVB_NXT200X is not set
+# CONFIG_DVB_OR51132 is not set
+# CONFIG_DVB_OR51211 is not set
+# CONFIG_DVB_S5H1409 is not set
+# CONFIG_DVB_S5H1411 is not set
+# CONFIG_DVB_DIB8000 is not set
+# CONFIG_DVB_MB86A20S is not set
+# CONFIG_DVB_S921 is not set
+# CONFIG_DVB_MN88443X is not set
+# CONFIG_DVB_TC90522 is not set
+# CONFIG_DVB_PLL is not set
+# CONFIG_DVB_TUNER_DIB0070 is not set
+# CONFIG_DVB_TUNER_DIB0090 is not set
+# CONFIG_DVB_A8293 is not set
+# CONFIG_DVB_AF9033 is not set
+# CONFIG_DVB_ASCOT2E is not set
+# CONFIG_DVB_ATBM8830 is not set
+# CONFIG_DVB_HELENE is not set
+# CONFIG_DVB_HORUS3A is not set
+# CONFIG_DVB_ISL6405 is not set
+# CONFIG_DVB_ISL6421 is not set
+# CONFIG_DVB_ISL6423 is not set
+# CONFIG_DVB_IX2505V is not set
+# CONFIG_DVB_LGS8GL5 is not set
+# CONFIG_DVB_LGS8GXX is not set
+# CONFIG_DVB_LNBH25 is not set
+# CONFIG_DVB_LNBH29 is not set
+# CONFIG_DVB_LNBP21 is not set
+# CONFIG_DVB_LNBP22 is not set
+# CONFIG_DVB_M88RS2000 is not set
+# CONFIG_DVB_TDA665x is not set
+# CONFIG_DVB_DRX39XYJ is not set
+# CONFIG_DVB_CXD2099 is not set
+# CONFIG_DVB_SP2 is not set
+# CONFIG_DRM_DEBUG_MODESET_LOCK is not set
+CONFIG_DRM_SPACEMIT=y
+CONFIG_SPACEMIT_MIPI_PANEL=y
+CONFIG_SPACEMIT_HDMI=y
+CONFIG_POWERVR_ROGUE=y
+CONFIG_FB=y
+CONFIG_BACKLIGHT_PWM=y
+# CONFIG_VGA_CONSOLE is not set
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_SOC=y
+# CONFIG_SND_SOC_INTEL_SST_TOPLEVEL is not set
+CONFIG_SND_SOC_SPACEMIT=y
+CONFIG_SPACEMIT_CARD=y
+CONFIG_SPACEMIT_PCM=y
+CONFIG_SPACEMIT_I2S=y
+CONFIG_SPACEMIT_HDMIAUDIO=y
+CONFIG_SPACEMIT_DUMMYCODEC=y
+CONFIG_SND_SOC_ES7210=y
+CONFIG_SND_SOC_ES8156=y
+CONFIG_SND_SOC_ES8323=y
+CONFIG_SND_SOC_ES8326=y
+CONFIG_SND_SIMPLE_CARD=y
+CONFIG_UHID=y
+CONFIG_HID_MULTITOUCH=y
+CONFIG_USB_HIDDEV=y
+CONFIG_I2C_HID_OF=y
+CONFIG_USB_CONN_GPIO=y
+CONFIG_USB=y
+CONFIG_USB_OTG=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_K1X=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_UAS=y
+CONFIG_USB_DWC3=y
+# CONFIG_USB_DWC3_OMAP is not set
+# CONFIG_USB_DWC3_EXYNOS is not set
+# CONFIG_USB_DWC3_KEYSTONE is not set
+# CONFIG_USB_DWC3_MESON_G12A is not set
+# CONFIG_USB_DWC3_OF_SIMPLE is not set
+# CONFIG_USB_DWC3_ST is not set
+# CONFIG_USB_DWC3_QCOM is not set
+# CONFIG_USB_DWC3_IMX8MP is not set
+# CONFIG_USB_DWC3_AM62 is not set
+CONFIG_USB_SERIAL=m
+CONFIG_USB_SERIAL_GENERIC=y
+CONFIG_USB_SERIAL_SIMPLE=m
+CONFIG_USB_SERIAL_AIRCABLE=m
+CONFIG_USB_SERIAL_ARK3116=m
+CONFIG_USB_SERIAL_BELKIN=m
+CONFIG_USB_SERIAL_CH341=m
+CONFIG_USB_SERIAL_WHITEHEAT=m
+CONFIG_USB_SERIAL_DIGI_ACCELEPORT=m
+CONFIG_USB_SERIAL_CP210X=m
+CONFIG_USB_SERIAL_CYPRESS_M8=m
+CONFIG_USB_SERIAL_EMPEG=m
+CONFIG_USB_SERIAL_FTDI_SIO=m
+CONFIG_USB_SERIAL_VISOR=m
+CONFIG_USB_SERIAL_IPAQ=m
+CONFIG_USB_SERIAL_IR=m
+CONFIG_USB_SERIAL_EDGEPORT=m
+CONFIG_USB_SERIAL_EDGEPORT_TI=m
+CONFIG_USB_SERIAL_F81232=m
+CONFIG_USB_SERIAL_F8153X=m
+CONFIG_USB_SERIAL_GARMIN=m
+CONFIG_USB_SERIAL_IPW=m
+CONFIG_USB_SERIAL_IUU=m
+CONFIG_USB_SERIAL_KEYSPAN_PDA=m
+CONFIG_USB_SERIAL_KEYSPAN=m
+CONFIG_USB_SERIAL_KLSI=m
+CONFIG_USB_SERIAL_KOBIL_SCT=m
+CONFIG_USB_SERIAL_MCT_U232=m
+CONFIG_USB_SERIAL_METRO=m
+CONFIG_USB_SERIAL_MOS7720=m
+CONFIG_USB_SERIAL_MOS7840=m
+CONFIG_USB_SERIAL_MXUPORT=m
+CONFIG_USB_SERIAL_NAVMAN=m
+CONFIG_USB_SERIAL_PL2303=m
+CONFIG_USB_SERIAL_OTI6858=m
+CONFIG_USB_SERIAL_QCAUX=m
+CONFIG_USB_SERIAL_QUALCOMM=m
+CONFIG_USB_SERIAL_SPCP8X5=m
+CONFIG_USB_SERIAL_SAFE=m
+CONFIG_USB_SERIAL_SAFE_PADDED=y
+CONFIG_USB_SERIAL_SIERRAWIRELESS=m
+CONFIG_USB_SERIAL_SYMBOL=m
+CONFIG_USB_SERIAL_TI=m
+CONFIG_USB_SERIAL_CYBERJACK=m
+CONFIG_USB_SERIAL_OPTION=m
+CONFIG_USB_SERIAL_OMNINET=m
+CONFIG_USB_SERIAL_OPTICON=m
+CONFIG_USB_SERIAL_XSENS_MT=m
+CONFIG_USB_SERIAL_WISHBONE=m
+CONFIG_USB_SERIAL_SSU100=m
+CONFIG_USB_SERIAL_QT2=m
+CONFIG_USB_SERIAL_UPD78F0730=m
+CONFIG_USB_SERIAL_XR=m
+CONFIG_USB_SERIAL_DEBUG=m
+CONFIG_USB_K1XCI_OTG=y
+CONFIG_K1XCI_USB2_PHY=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_K1X_UDC=y
+CONFIG_USB_CONFIGFS=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_MASS_STORAGE=y
+CONFIG_USB_CONFIGFS_F_FS=y
+CONFIG_USB_CONFIGFS_F_UAC1=y
+CONFIG_USB_CONFIGFS_F_UAC2=y
+CONFIG_USB_CONFIGFS_F_UVC=y
+CONFIG_USB_CONFIGFS_F_TCM=y
+CONFIG_TYPEC=m
+CONFIG_TYPEC_HUSB239=m
+CONFIG_MMC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_SDHCI_OF_K1X=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+# CONFIG_LEDS_NS2 is not set
+# CONFIG_LEDS_NETXBIG is not set
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_BACKLIGHT=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_SPT_PMIC=y
+CONFIG_RTC_DRV_SA1100=y
+CONFIG_DMADEVICES=y
+CONFIG_MMP_PDMA_DRIVER=y
+CONFIG_MMP_PDMA_SPACEMIT_K1X=y
+CONFIG_ADMA_SPACEMIT_K1X=y
+CONFIG_USERSPACE_DMA=y
+# CONFIG_SH_DMAE_BASE is not set
+# CONFIG_TI_EDMA is not set
+# CONFIG_DMA_OMAP is not set
+CONFIG_SW_SYNC=y
+CONFIG_UDMABUF=y
+CONFIG_DMABUF_HEAPS=y
+CONFIG_DMABUF_HEAPS_SYSTEM=y
+CONFIG_DMABUF_HEAPS_CMA=y
+# CONFIG_VIRTIO_MENU is not set
+# CONFIG_VHOST_MENU is not set
+# CONFIG_SURFACE_PLATFORMS is not set
+CONFIG_SPACEMIT_K1X_CCU=y
+CONFIG_MAILBOX=y
+CONFIG_SPACEMIT_MAILBOX=y
+CONFIG_K1X_MAILBOX=y
+# CONFIG_IOMMU_SUPPORT is not set
+CONFIG_REMOTEPROC=y
+CONFIG_K1X_REMOTEPROC=y
+CONFIG_RPMSG_VIRTIO=y
+# CONFIG_DPAA2_CONSOLE is not set
+CONFIG_SPACEMIT_PM_DOMAINS=y
+CONFIG_SPACEMIT_REBOOT_CONTROL=y
+CONFIG_SPACEMIT_LID_CONTROL=y
+CONFIG_SPACEMI_K1X_DMA_RANGE=y
+CONFIG_SPACEMI_SOCINFO=y
+CONFIG_SPACEMIT_DDRBW=y
+CONFIG_CHIP_MEDIA_JPU=y
+CONFIG_SPACEMIT_V2D=y
+CONFIG_SPACEMIT_RFKILL=y
+CONFIG_EXTCON_USB_K1XCI=y
+CONFIG_EXTCON_USB_GPIO=y
+CONFIG_IIO=y
+CONFIG_MXC4005=y
+CONFIG_SPACEMIT_P1_ADC=y
+CONFIG_STK3310=y
+CONFIG_PWM=y
+CONFIG_PWM_PXA=y
+CONFIG_RESET_CONTROLLER=y
+# CONFIG_RESET_RASPBERRYPI is not set
+CONFIG_RESET_K1X_SPACEMIT=y
+# CONFIG_RESET_K1MATRIX_SPACEMIT is not set
+# CONFIG_PHY_MVEBU_A3700_UTMI is not set
+CONFIG_NVMEM_SPACEMIT_EFUSE=y
+CONFIG_VALIDATE_FS_PARSER=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_JFS_FS=m
+CONFIG_JFS_POSIX_ACL=y
+CONFIG_JFS_SECURITY=y
+CONFIG_JFS_STATISTICS=y
+CONFIG_XFS_FS=m
+CONFIG_XFS_QUOTA=y
+CONFIG_XFS_POSIX_ACL=y
+CONFIG_XFS_RT=y
+CONFIG_GFS2_FS=m
+CONFIG_OCFS2_FS=m
+CONFIG_BTRFS_FS=m
+CONFIG_BTRFS_FS_POSIX_ACL=y
+CONFIG_NILFS2_FS=m
+CONFIG_F2FS_FS=m
+CONFIG_F2FS_FS_SECURITY=y
+CONFIG_F2FS_FS_COMPRESSION=y
+# CONFIG_F2FS_IOSTAT is not set
+CONFIG_F2FS_UNFAIR_RWSEM=y
+CONFIG_FS_ENCRYPTION=y
+CONFIG_FS_VERITY=y
+CONFIG_FS_VERITY_BUILTIN_SIGNATURES=y
+CONFIG_FANOTIFY=y
+CONFIG_QUOTA_NETLINK_INTERFACE=y
+CONFIG_QFMT_V1=m
+CONFIG_QFMT_V2=m
+CONFIG_AUTOFS_FS=m
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=m
+CONFIG_VIRTIO_FS=m
+CONFIG_OVERLAY_FS=m
+CONFIG_OVERLAY_FS_XINO_AUTO=y
+CONFIG_FSCACHE=m
+CONFIG_FSCACHE_STATS=y
+CONFIG_CACHEFILES=m
+CONFIG_CACHEFILES_ERROR_INJECTION=y
+CONFIG_ISO9660_FS=m
+CONFIG_JOLIET=y
+CONFIG_ZISOFS=y
+CONFIG_UDF_FS=m
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_FAT_DEFAULT_UTF8=y
+CONFIG_EXFAT_FS=y
+CONFIG_NTFS_FS=y
+CONFIG_NTFS_RW=y
+CONFIG_NTFS3_FS=y
+CONFIG_NTFS3_LZX_XPRESS=y
+CONFIG_NTFS3_FS_POSIX_ACL=y
+CONFIG_PROC_KCORE=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_HUGETLBFS=y
+# CONFIG_EFIVAR_FS is not set
+CONFIG_ORANGEFS_FS=m
+CONFIG_ADFS_FS=m
+CONFIG_AFFS_FS=m
+CONFIG_ECRYPT_FS=y
+CONFIG_ECRYPT_FS_MESSAGING=y
+CONFIG_HFS_FS=m
+CONFIG_HFSPLUS_FS=m
+CONFIG_BEFS_FS=m
+CONFIG_BFS_FS=m
+CONFIG_EFS_FS=m
+CONFIG_JFFS2_FS=m
+CONFIG_JFFS2_FS_WBUF_VERIFY=y
+CONFIG_JFFS2_SUMMARY=y
+CONFIG_JFFS2_FS_XATTR=y
+CONFIG_JFFS2_COMPRESSION_OPTIONS=y
+CONFIG_JFFS2_LZO=y
+CONFIG_JFFS2_RUBIN=y
+CONFIG_JFFS2_CMODE_NONE=y
+CONFIG_UBIFS_FS=m
+CONFIG_UBIFS_FS_AUTHENTICATION=y
+CONFIG_CRAMFS=m
+CONFIG_CRAMFS_MTD=y
+CONFIG_SQUASHFS=m
+CONFIG_SQUASHFS_FILE_DIRECT=y
+CONFIG_SQUASHFS_CHOICE_DECOMP_BY_MOUNT=y
+CONFIG_SQUASHFS_XATTR=y
+CONFIG_SQUASHFS_LZ4=y
+CONFIG_SQUASHFS_LZO=y
+CONFIG_SQUASHFS_XZ=y
+CONFIG_SQUASHFS_ZSTD=y
+CONFIG_VXFS_FS=m
+CONFIG_MINIX_FS=m
+CONFIG_OMFS_FS=m
+CONFIG_HPFS_FS=m
+CONFIG_QNX4FS_FS=m
+CONFIG_QNX6FS_FS=m
+CONFIG_ROMFS_FS=m
+CONFIG_SYSV_FS=m
+CONFIG_UFS_FS=m
+CONFIG_EROFS_FS=m
+CONFIG_EROFS_FS_PCPU_KTHREAD=y
+# CONFIG_EROFS_FS_PCPU_KTHREAD_HIPRI is not set
+CONFIG_NFS_FS=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_ROOT_NFS=y
+CONFIG_NFSD=y
+CONFIG_NFSD_V3_ACL=y
+CONFIG_NFSD_V4=y
+CONFIG_NFSD_BLOCKLAYOUT=y
+CONFIG_NFSD_SCSILAYOUT=y
+CONFIG_NFSD_FLEXFILELAYOUT=y
+CONFIG_NFSD_V4_2_INTER_SSC=y
+CONFIG_SUNRPC_DEBUG=y
+CONFIG_CEPH_FS=m
+CONFIG_CEPH_FSCACHE=y
+CONFIG_CEPH_FS_POSIX_ACL=y
+CONFIG_CIFS=y
+CONFIG_CIFS_UPCALL=y
+CONFIG_CIFS_XATTR=y
+CONFIG_CIFS_POSIX=y
+CONFIG_CIFS_DFS_UPCALL=y
+CONFIG_CIFS_SWN_UPCALL=y
+CONFIG_CIFS_ROOT=y
+CONFIG_SMB_SERVER=m
+CONFIG_SMB_SERVER_KERBEROS5=y
+CONFIG_CODA_FS=m
+CONFIG_AFS_FS=m
+CONFIG_AFS_FSCACHE=y
+CONFIG_NLS_DEFAULT="utf8"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_CODEPAGE_737=m
+CONFIG_NLS_CODEPAGE_775=m
+CONFIG_NLS_CODEPAGE_850=m
+CONFIG_NLS_CODEPAGE_852=m
+CONFIG_NLS_CODEPAGE_855=m
+CONFIG_NLS_CODEPAGE_857=m
+CONFIG_NLS_CODEPAGE_860=m
+CONFIG_NLS_CODEPAGE_861=m
+CONFIG_NLS_CODEPAGE_862=m
+CONFIG_NLS_CODEPAGE_863=m
+CONFIG_NLS_CODEPAGE_864=m
+CONFIG_NLS_CODEPAGE_865=m
+CONFIG_NLS_CODEPAGE_866=m
+CONFIG_NLS_CODEPAGE_869=m
+CONFIG_NLS_CODEPAGE_936=m
+CONFIG_NLS_CODEPAGE_950=m
+CONFIG_NLS_CODEPAGE_932=m
+CONFIG_NLS_CODEPAGE_949=m
+CONFIG_NLS_CODEPAGE_874=m
+CONFIG_NLS_ISO8859_8=m
+CONFIG_NLS_CODEPAGE_1250=m
+CONFIG_NLS_CODEPAGE_1251=m
+CONFIG_NLS_ASCII=m
+CONFIG_NLS_ISO8859_1=m
+CONFIG_NLS_ISO8859_2=m
+CONFIG_NLS_ISO8859_3=m
+CONFIG_NLS_ISO8859_4=m
+CONFIG_NLS_ISO8859_5=m
+CONFIG_NLS_ISO8859_6=m
+CONFIG_NLS_ISO8859_7=m
+CONFIG_NLS_ISO8859_9=m
+CONFIG_NLS_ISO8859_13=m
+CONFIG_NLS_ISO8859_14=m
+CONFIG_NLS_ISO8859_15=m
+CONFIG_NLS_KOI8_R=m
+CONFIG_NLS_KOI8_U=m
+CONFIG_NLS_MAC_ROMAN=m
+CONFIG_NLS_MAC_CELTIC=m
+CONFIG_NLS_MAC_CENTEURO=m
+CONFIG_NLS_MAC_CROATIAN=m
+CONFIG_NLS_MAC_CYRILLIC=m
+CONFIG_NLS_MAC_GAELIC=m
+CONFIG_NLS_MAC_GREEK=m
+CONFIG_NLS_MAC_ICELAND=m
+CONFIG_NLS_MAC_INUIT=m
+CONFIG_NLS_MAC_ROMANIAN=m
+CONFIG_NLS_MAC_TURKISH=m
+CONFIG_DLM=m
+CONFIG_UNICODE=y
+CONFIG_KEYS_REQUEST_CACHE=y
+CONFIG_PERSISTENT_KEYRINGS=y
+CONFIG_SECURITY_DMESG_RESTRICT=y
+CONFIG_SECURITY=y
+CONFIG_HARDENED_USERCOPY=y
+CONFIG_SECURITY_APPARMOR=y
+CONFIG_SECURITY_LANDLOCK=y
+CONFIG_INTEGRITY_SIGNATURE=y
+CONFIG_INTEGRITY_ASYMMETRIC_KEYS=y
+CONFIG_IMA=y
+CONFIG_IMA_APPRAISE=y
+CONFIG_IMA_ARCH_POLICY=y
+CONFIG_IMA_APPRAISE_MODSIG=y
+CONFIG_DEFAULT_SECURITY_DAC=y
+CONFIG_LSM="landlock,integrity,apparmor"
+CONFIG_INIT_STACK_NONE=y
+CONFIG_CRYPTO_USER=m
+CONFIG_CRYPTO_PCRYPT=m
+CONFIG_CRYPTO_CRYPTD=m
+CONFIG_CRYPTO_DH=y
+CONFIG_CRYPTO_ECDSA=m
+CONFIG_CRYPTO_ECRDSA=m
+CONFIG_CRYPTO_SM2=m
+CONFIG_CRYPTO_CURVE25519=m
+CONFIG_CRYPTO_AES_TI=m
+CONFIG_CRYPTO_ARIA=m
+CONFIG_CRYPTO_BLOWFISH=m
+CONFIG_CRYPTO_CAMELLIA=m
+CONFIG_CRYPTO_CAST5=m
+CONFIG_CRYPTO_CAST6=m
+CONFIG_CRYPTO_DES=m
+CONFIG_CRYPTO_FCRYPT=m
+CONFIG_CRYPTO_SERPENT=m
+CONFIG_CRYPTO_SM4_GENERIC=m
+CONFIG_CRYPTO_TWOFISH=m
+CONFIG_CRYPTO_ADIANTUM=m
+CONFIG_CRYPTO_CFB=m
+CONFIG_CRYPTO_HCTR2=m
+CONFIG_CRYPTO_KEYWRAP=m
+CONFIG_CRYPTO_LRW=m
+CONFIG_CRYPTO_OFB=m
+CONFIG_CRYPTO_PCBC=m
+CONFIG_CRYPTO_CHACHA20POLY1305=m
+CONFIG_CRYPTO_MD4=m
+CONFIG_CRYPTO_MICHAEL_MIC=m
+CONFIG_CRYPTO_RMD160=m
+CONFIG_CRYPTO_SM3_GENERIC=m
+CONFIG_CRYPTO_VMAC=m
+CONFIG_CRYPTO_WP512=m
+CONFIG_CRYPTO_XCBC=m
+CONFIG_CRYPTO_DEFLATE=y
+CONFIG_CRYPTO_LZO=y
+CONFIG_CRYPTO_842=m
+CONFIG_CRYPTO_LZ4=m
+CONFIG_CRYPTO_LZ4HC=m
+CONFIG_CRYPTO_ANSI_CPRNG=m
+CONFIG_CRYPTO_USER_API_HASH=m
+CONFIG_CRYPTO_USER_API_SKCIPHER=m
+CONFIG_CRYPTO_USER_API_RNG=m
+CONFIG_CRYPTO_USER_API_AEAD=m
+# CONFIG_CRYPTO_USER_API_ENABLE_OBSOLETE is not set
+CONFIG_SPACEMIT_REE_ENGINE=y
+CONFIG_SPACEMIT_REE_AES=y
+CONFIG_CORDIC=m
+CONFIG_XZ_DEC=y
+CONFIG_DMA_CMA=y
+CONFIG_IRQ_POLL=y
+CONFIG_PRINTK_TIME=y
+CONFIG_CONSOLE_LOGLEVEL_DEFAULT=8
+CONFIG_CONSOLE_LOGLEVEL_QUIET=8
+CONFIG_DYNAMIC_DEBUG=y
+CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_DEBUG_WX=y
+CONFIG_SCHED_STACK_END_CHECK=y
+CONFIG_KFENCE=y
+CONFIG_DETECT_HUNG_TASK=y
+CONFIG_LOCK_STAT=y
+CONFIG_DEBUG_WW_MUTEX_SLOWPATH=y
+CONFIG_DEBUG_RWSEMS=y
+CONFIG_DEBUG_ATOMIC_SLEEP=y
+# CONFIG_RCU_TRACE is not set
+# CONFIG_RUNTIME_TESTING_MENU is not set
diff --git a/arch/riscv/include/asm/pci.h b/arch/riscv/include/asm/pci.h
index cc2a184cfc2e..9f6f59aff214 100644
--- a/arch/riscv/include/asm/pci.h
+++ b/arch/riscv/include/asm/pci.h
@@ -27,6 +27,10 @@ static inline int pcibus_to_node(struct pci_bus *bus)
 #endif
 #endif /* defined(CONFIG_PCI) && defined(CONFIG_NUMA) */
 
+#if defined(CONFIG_SOC_SPACEMIT_K1X)
+#define arch_can_pci_mmap_wc() 1
+#endif
+
 /* Generic PCI */
 #include <asm-generic/pci.h>
 
diff --git a/arch/riscv/kernel/stacktrace.c b/arch/riscv/kernel/stacktrace.c
index 10e311b2759d..e69fc2404da4 100644
--- a/arch/riscv/kernel/stacktrace.c
+++ b/arch/riscv/kernel/stacktrace.c
@@ -28,7 +28,7 @@ static inline int fp_is_valid(unsigned long fp, unsigned long sp)
 	return !(fp < low || fp > high || fp & 0x07);
 }
 
-void notrace walk_stackframe(struct task_struct *task, struct pt_regs *regs,
+void notrace __no_sanitize_address walk_stackframe(struct task_struct *task, struct pt_regs *regs,
 			     bool (*fn)(void *, unsigned long), void *arg)
 {
 	unsigned long fp, sp, pc;
diff --git a/arch/riscv/kernel/sys_riscv.c b/arch/riscv/kernel/sys_riscv.c
index 64155323cc92..c8b26b293ad2 100644
--- a/arch/riscv/kernel/sys_riscv.c
+++ b/arch/riscv/kernel/sys_riscv.c
@@ -63,7 +63,8 @@ SYSCALL_DEFINE3(riscv_flush_icache, uintptr_t, start, uintptr_t, end,
 	if (unlikely(flags & ~SYS_RISCV_FLUSH_ICACHE_ALL))
 		return -EINVAL;
 
-	flush_icache_mm(current->mm, flags & SYS_RISCV_FLUSH_ICACHE_LOCAL);
+	//flush_icache_mm(current->mm, flags & SYS_RISCV_FLUSH_ICACHE_LOCAL);
+	flush_icache_mm(current->mm, false);
 
 	return 0;
 }
diff --git a/drivers/base/power/wakeirq.c b/drivers/base/power/wakeirq.c
index 5a5a9e978e85..7ece0f1137d5 100644
--- a/drivers/base/power/wakeirq.c
+++ b/drivers/base/power/wakeirq.c
@@ -212,6 +212,66 @@ int dev_pm_set_dedicated_wake_irq(struct device *dev, int irq)
 }
 EXPORT_SYMBOL_GPL(dev_pm_set_dedicated_wake_irq);
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+static int __dev_pm_set_dedicated_wake_irq_spacemit(struct device *dev, int irq, unsigned int flag, int trigger_type)
+{
+	struct wake_irq *wirq;
+	int err;
+
+	if (irq < 0)
+		return -EINVAL;
+
+	wirq = kzalloc(sizeof(*wirq), GFP_KERNEL);
+	if (!wirq)
+		return -ENOMEM;
+
+	wirq->name = kasprintf(GFP_KERNEL, "%s:wakeup", dev_name(dev));
+	if (!wirq->name) {
+		err = -ENOMEM;
+		goto err_free;
+	}
+
+	wirq->dev = dev;
+	wirq->irq = irq;
+
+	/* Prevent deferred spurious wakeirqs with disable_irq_nosync() */
+	irq_set_status_flags(irq, IRQ_DISABLE_UNLAZY);
+
+	/*
+	 * Consumer device may need to power up and restore state
+	 * so we use a threaded irq.
+	 */
+	err = request_threaded_irq(irq, NULL, handle_threaded_wake_irq,
+				   IRQF_ONESHOT | IRQF_NO_AUTOEN | trigger_type,
+				   wirq->name, wirq);
+	if (err)
+		goto err_free_name;
+
+	err = dev_pm_attach_wake_irq(dev, wirq);
+	if (err)
+		goto err_free_irq;
+
+	wirq->status = WAKE_IRQ_DEDICATED_ALLOCATED | flag;
+
+	return err;
+
+err_free_irq:
+	free_irq(irq, wirq);
+err_free_name:
+	kfree(wirq->name);
+err_free:
+	kfree(wirq);
+
+	return err;
+}
+
+int dev_pm_set_dedicated_wake_irq_spacemit(struct device *dev, int irq, int trigger_type)
+{
+	return __dev_pm_set_dedicated_wake_irq_spacemit(dev, irq, 0, trigger_type);
+}
+EXPORT_SYMBOL_GPL(dev_pm_set_dedicated_wake_irq_spacemit);
+#endif
+
 /**
  * dev_pm_set_dedicated_wake_irq_reverse - Request a dedicated wake-up interrupt
  *                                         with reverse enable ordering
diff --git a/drivers/clk/spacemit/ccu-spacemit-k1x.c b/drivers/clk/spacemit/ccu-spacemit-k1x.c
index 9a9da1cc1232..71bc111626c0 100644
--- a/drivers/clk/spacemit/ccu-spacemit-k1x.c
+++ b/drivers/clk/spacemit/ccu-spacemit-k1x.c
@@ -197,7 +197,16 @@ DEFINE_SPINLOCK(g_cru_lock);
 /* end of RCPU register offset */
 
 /* RCPU2 register offset */
-#define RCPU2_PWM_CLK_RST		0x08
+#define RCPU2_PWM0_CLK_RST		0x00
+#define RCPU2_PWM1_CLK_RST		0x04
+#define RCPU2_PWM2_CLK_RST		0x08
+#define RCPU2_PWM3_CLK_RST		0x0c
+#define RCPU2_PWM4_CLK_RST		0x10
+#define RCPU2_PWM5_CLK_RST		0x14
+#define RCPU2_PWM6_CLK_RST		0x18
+#define RCPU2_PWM7_CLK_RST		0x1c
+#define RCPU2_PWM8_CLK_RST		0x20
+#define RCPU2_PWM9_CLK_RST		0x24
 /* end of RCPU2 register offset */
 
 struct spacemit_k1x_clk k1x_clock_controller;
@@ -1207,8 +1216,53 @@ static SPACEMIT_CCU_GATE_NO_PARENT(rcan_bus_clk, "rcan_bus_clk", NULL,
 static const char *rpwm_parent_names[] = {
 	"pll1_aud_24p5", "pll1_aud_245p7"
 };
-static SPACEMIT_CCU_DIV_MUX_GATE(rpwm_clk, "rpwm_clk", rpwm_parent_names,
-	BASE_TYPE_RCPU2, RCPU2_PWM_CLK_RST,
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm0_clk, "rpwm0_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM0_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm1_clk, "rpwm1_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM1_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm2_clk, "rpwm2_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM2_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm3_clk, "rpwm3_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM3_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm4_clk, "rpwm4_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM4_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm5_clk, "rpwm5_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM5_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm6_clk, "rpwm6_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM6_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm7_clk, "rpwm7_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM7_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm8_clk, "rpwm8_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM8_CLK_RST,
+	8, 11, 4, 2,
+	BIT(1), BIT(1), 0x0,
+	0);
+static SPACEMIT_CCU_DIV_MUX_GATE(rpwm9_clk, "rpwm9_clk", rpwm_parent_names,
+	BASE_TYPE_RCPU2, RCPU2_PWM9_CLK_RST,
 	8, 11, 4, 2,
 	BIT(1), BIT(1), 0x0,
 	0);
@@ -1438,7 +1492,6 @@ static struct clk_hw_onecell_data spacemit_k1x_hw_clks = {
 		[CLK_RCPU_HDMIAUDIO]	= &rhdmi_audio_clk.common.hw,
 		[CLK_RCPU_CAN] 		= &rcan_clk.common.hw,
 		[CLK_RCPU_CAN_BUS]	= &rcan_bus_clk.common.hw,
-		[CLK_RCPU2_PWM] 	= &rpwm_clk.common.hw,
 		[CLK_RCPU_I2C0] 	= &ri2c0_clk.common.hw,
 		[CLK_RCPU_SSP0] 	= &rssp0_clk.common.hw,
 		[CLK_RCPU_IR] 		= &rir_clk.common.hw,
@@ -1455,6 +1508,16 @@ static struct clk_hw_onecell_data spacemit_k1x_hw_clks = {
 		[CLK_DFC_LVL6] 	= &dfc_lvl6.common.hw,
 		[CLK_DFC_LVL7] 	= &dfc_lvl7.common.hw,
 		[CLK_DDR] 	= &ddr.common.hw,
+		[CLK_RCPU2_PWM0] 	= &rpwm0_clk.common.hw,
+		[CLK_RCPU2_PWM1] 	= &rpwm1_clk.common.hw,
+		[CLK_RCPU2_PWM2] 	= &rpwm2_clk.common.hw,
+		[CLK_RCPU2_PWM3] 	= &rpwm3_clk.common.hw,
+		[CLK_RCPU2_PWM4] 	= &rpwm4_clk.common.hw,
+		[CLK_RCPU2_PWM5] 	= &rpwm5_clk.common.hw,
+		[CLK_RCPU2_PWM6] 	= &rpwm6_clk.common.hw,
+		[CLK_RCPU2_PWM7] 	= &rpwm7_clk.common.hw,
+		[CLK_RCPU2_PWM8] 	= &rpwm8_clk.common.hw,
+		[CLK_RCPU2_PWM9] 	= &rpwm9_clk.common.hw,
 	},
 	.num = CLK_MAX_NO,
 };
diff --git a/drivers/crypto/spacemit/spacemit-ce-glue.c b/drivers/crypto/spacemit/spacemit-ce-glue.c
index e7b06926c5cd..b3388788256f 100644
--- a/drivers/crypto/spacemit/spacemit-ce-glue.c
+++ b/drivers/crypto/spacemit/spacemit-ce-glue.c
@@ -327,7 +327,7 @@ static int xts_encrypt(struct skcipher_request *req)
 		start_srcsg = sg_next(sg);
 
 		spacemit_aes_xts_encrypt(0,in_buffer, out_buffer,(u8 *)(ctx->key_enc),
-				(u8 *)(ctx->key_enc + xts_key_len), xts_key_len, (u8 *)req->iv,singal_len / AES_BLOCK_SIZE);
+				((u8 *)ctx->key_enc + xts_key_len), xts_key_len, (u8 *)req->iv,singal_len / AES_BLOCK_SIZE);
 
 		map_addr = out_buffer;
 		for(sg = start_dstsg,len = 0;len<singal_len;len += sg->length)
@@ -389,7 +389,7 @@ static int xts_decrypt(struct skcipher_request *req)
 			memcpy(map_addr, align, singal_len-page_len);
 
 		spacemit_aes_xts_decrypt(0,in_buffer, out_buffer,(u8 *)(ctx->key_dec),
-				(u8 *)(ctx->key_dec + xts_key_len), xts_key_len, (u8 *)req->iv,singal_len / AES_BLOCK_SIZE);
+				((u8 *)ctx->key_dec + xts_key_len), xts_key_len, (u8 *)req->iv,singal_len / AES_BLOCK_SIZE);
 
 		map_addr = out_buffer;
 		for(sg = start_dstsg,len = 0;len<singal_len;len += sg->length)
diff --git a/drivers/crypto/spacemit/spacemit_ce_engine.c b/drivers/crypto/spacemit/spacemit_ce_engine.c
index 0016813dab0a..13a597f608c3 100644
--- a/drivers/crypto/spacemit/spacemit_ce_engine.c
+++ b/drivers/crypto/spacemit/spacemit_ce_engine.c
@@ -1082,6 +1082,11 @@ static int ce_aes_process_nblocks(int index, const unsigned char *buf_in, unsign
 				dev_err_once(dev, "%s : %d : crypto_aes_set_key2 failed!\n",__func__,__LINE__);
 				goto error;
 			}
+			ret = crypto_aes_set_iv(index, inv);
+			if (ret != 0) {
+				dev_err_once(dev, "%s : %d : crypto_aes_set_iv failed!\n",__func__,__LINE__);
+				goto error;
+			}
 			break;
 		case E_AES_CBC:
 		case E_AES_CTR:
diff --git a/drivers/gpu/drm/img-rogue/module_common.c b/drivers/gpu/drm/img-rogue/module_common.c
index 1f454c91fdb0..bd6a6e9ebcc9 100644
--- a/drivers/gpu/drm/img-rogue/module_common.c
+++ b/drivers/gpu/drm/img-rogue/module_common.c
@@ -720,7 +720,7 @@ void PVRSRVDeviceRelease(PVRSRV_DEVICE_NODE *psDeviceNode,
 #endif
 #endif
 			psConnection = psConnectionPriv->pvConnectionData;
-			if (psConnection->bSyncConnection == IMG_TRUE)
+			if (psConnection && psConnection->bSyncConnection == IMG_TRUE)
 			{
 				if (psConnection->hOsPrivateData != NULL)
 				{
diff --git a/drivers/gpu/drm/radeon/radeon_device.c b/drivers/gpu/drm/radeon/radeon_device.c
index 32851632643d..5b21bfd93ea2 100644
--- a/drivers/gpu/drm/radeon/radeon_device.c
+++ b/drivers/gpu/drm/radeon/radeon_device.c
@@ -1361,7 +1361,7 @@ int radeon_device_init(struct radeon_device *rdev,
 	 * AGP - generally dma32 is safest
 	 * PCI - dma32 for legacy pci gart, 40 bits on newer asics
 	 */
-	dma_bits = 40;
+	dma_bits = 32;
 	if (rdev->flags & RADEON_IS_AGP)
 		dma_bits = 32;
 	if ((rdev->flags & RADEON_IS_PCI) &&
diff --git a/drivers/gpu/drm/radeon/radeon_irq_kms.c b/drivers/gpu/drm/radeon/radeon_irq_kms.c
index 9961251b44ba..798070cdc720 100644
--- a/drivers/gpu/drm/radeon/radeon_irq_kms.c
+++ b/drivers/gpu/drm/radeon/radeon_irq_kms.c
@@ -245,6 +245,11 @@ static bool radeon_msi_ok(struct radeon_device *rdev)
 	if (rdev->flags & RADEON_IS_AGP)
 		return false;
 
+#if IS_ENABLED(CONFIG_SOC_SPACEMIT_K1X)
+       /* Chips <= GCN1 cannot get MSI to work on K1 */
+      return false;
+#endif
+
 	/*
 	 * Older chips have a HW limitation, they can only generate 40 bits
 	 * of address for "64-bit" MSIs which breaks on some platforms, notably
diff --git a/drivers/gpu/drm/radeon/radeon_ttm.c b/drivers/gpu/drm/radeon/radeon_ttm.c
index 065a09e7997c..f61ee3100a74 100644
--- a/drivers/gpu/drm/radeon/radeon_ttm.c
+++ b/drivers/gpu/drm/radeon/radeon_ttm.c
@@ -511,7 +511,7 @@ static struct ttm_tt *radeon_ttm_tt_create(struct ttm_buffer_object *bo,
 		caching = ttm_write_combined;
 	else
 		caching = ttm_cached;
-
+	caching = ttm_write_combined;
 	if (ttm_sg_tt_init(&gtt->ttm, bo, page_flags, caching)) {
 		kfree(gtt);
 		return NULL;
diff --git a/drivers/gpu/drm/spacemit/spacemit_dmmu.c b/drivers/gpu/drm/spacemit/spacemit_dmmu.c
index 220eb8fc726f..04e87abdaf67 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dmmu.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dmmu.c
@@ -54,7 +54,7 @@ int spacemit_dmmu_map(struct drm_plane *plane, struct dpu_mmu_tbl *mmu_tbl, u8 t
 		phys_addr_t contig_pa = sg_dma_address(sgt->sgl);
 
 		write_to_cmdlist(priv, MMU_REG, MMU_BASE_ADDR, TBU[tbu_id].TBU_Ctrl, 0x0);
-#if defined (CONFIG_ARM64) || defined (CONFIG_ARM_LPAE)
+#if defined (CONFIG_ARM64) || defined (CONFIG_ARM_LPAE) || defined (CONFIG_ARCH_RV64I)
 		CONFIG_RDMA_ADDR_REG(priv, 0, rdma_id, contig_pa);
 		CONFIG_RDMA_ADDR_REG(priv, 1, rdma_id, (contig_pa + fb->offsets[1]));
 		CONFIG_RDMA_ADDR_REG(priv, 2, rdma_id, (contig_pa + fb->offsets[2]));
@@ -117,7 +117,7 @@ int spacemit_dmmu_map(struct drm_plane *plane, struct dpu_mmu_tbl *mmu_tbl, u8 t
 		dpu_write_reg(hwdev, MMU_REG, MMU_BASE_ADDR, v.TBU[tbu_id].TBU_Ctrl, val);
 	} else {
 		val = val | (DPU_QOS_URGENT << 8);
-#if defined (CONFIG_ARM64) || defined (CONFIG_ARM_LPAE)
+#if defined (CONFIG_ARM64) || defined (CONFIG_ARM_LPAE) || defined (CONFIG_ARCH_RV64I)
 		CONFIG_RDMA_ADDR_REG(priv, 0, rdma_id, tbu.tbu_va[0]);
 		CONFIG_RDMA_ADDR_REG(priv, 1, rdma_id, tbu.tbu_va[1]);
 		CONFIG_RDMA_ADDR_REG(priv, 2, rdma_id, tbu.tbu_va[2]);
diff --git a/drivers/gpu/drm/ttm/ttm_module.c b/drivers/gpu/drm/ttm/ttm_module.c
index b3fffe7b5062..1319178edf03 100644
--- a/drivers/gpu/drm/ttm/ttm_module.c
+++ b/drivers/gpu/drm/ttm/ttm_module.c
@@ -74,7 +74,8 @@ pgprot_t ttm_prot_from_caching(enum ttm_caching caching, pgprot_t tmp)
 #endif /* CONFIG_UML */
 #endif /* __i386__ || __x86_64__ */
 #if defined(__ia64__) || defined(__arm__) || defined(__aarch64__) || \
-	defined(__powerpc__) || defined(__mips__) || defined(__loongarch__)
+	defined(__powerpc__) || defined(__mips__) || defined(__loongarch__) \
+	|| defined(__riscv)
 	if (caching == ttm_write_combined)
 		tmp = pgprot_writecombine(tmp);
 	else
diff --git a/drivers/input/misc/spacemit-pwrkey.c b/drivers/input/misc/spacemit-pwrkey.c
index 3ee621a3e66c..ab8616dc2c56 100644
--- a/drivers/input/misc/spacemit-pwrkey.c
+++ b/drivers/input/misc/spacemit-pwrkey.c
@@ -29,6 +29,9 @@ static irqreturn_t pwrkey_fall_irq(int irq, void *_pwr)
 		input_sync(pwr);
 		fall_triggered = 1;
 	}
+
+	pm_stay_awake(pwr->dev.parent);
+
 	spin_unlock_irqrestore(&pm_lock, flags);
 
 	return IRQ_HANDLED;
@@ -46,6 +49,9 @@ static irqreturn_t pwrkey_rise_irq(int irq, void *_pwr)
 		input_sync(pwr);
 		fall_triggered = 0;
 	}
+
+	pm_relax(pwr->dev.parent);
+
 	spin_unlock_irqrestore(&pm_lock, flags);
 
 	return IRQ_HANDLED;
diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 7222bb69dc78..7b03cf22159f 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -1417,4 +1417,11 @@ config TOUCHSCREEN_CHIPONE_TDDI
 
 	  If unsure, say N.
 
+config TOUCHSCREEN_CHSC5XXX
+	tristate "Chsc5xxx touchscreen support"
+	depends on I2C
+	help
+	  Say Y here if you have a touchscreen using Chsc5xxx.
+
+source "drivers/input/touchscreen/chsc5xxx/Kconfig"
 endif
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 51f9d360a9a4..c02712cad9d1 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -122,3 +122,4 @@ obj-$(CONFIG_TOUCHSCREEN_ZINITIX)	+= zinitix.o
 obj-$(CONFIG_TOUCHSCREEN_HIMAX_HX83112B)	+= himax_hx83112b.o
 
 obj-$(CONFIG_TOUCHSCREEN_CHIPONE_TDDI)	+= chipone-tddi/
+obj-y += chsc5xxx/
diff --git a/drivers/input/touchscreen/chipone-tddi/cts_core.c b/drivers/input/touchscreen/chipone-tddi/cts_core.c
index 3f54cbc10299..b1b2f427e4d2 100644
--- a/drivers/input/touchscreen/chipone-tddi/cts_core.c
+++ b/drivers/input/touchscreen/chipone-tddi/cts_core.c
@@ -1326,33 +1326,33 @@ static int cts_init_fwdata(struct cts_device *cts_dev)
         }
     }
 
-    cts_info("fwver: %04x", fwdata->version);
-    cts_info("libver: %04x", fwdata->lib_version);
-    cts_info("ddi_version: %02x", fwdata->ddi_version);
-    cts_info("res_x: %d", fwdata->res_x);
-    cts_info("res_y: %d", fwdata->res_y);
-    cts_info("rows: %d", fwdata->rows);
-    cts_info("cols: %d", fwdata->cols);
-    cts_info("flip_x: %d", fwdata->flip_x);
-    cts_info("flip_y: %d", fwdata->flip_y);
-    cts_info("swap_axes: %d", fwdata->swap_axes);
-    cts_info("int_mode: %d", fwdata->int_mode);
-    cts_info("int_keep_time: %d", fwdata->int_keep_time);
-    cts_info("rawdata_target: %d", fwdata->rawdata_target);
-    cts_info("esd_method: %d", fwdata->esd_method);
-    cts_info("has_int_data: %d", fwdata->has_int_data);
-    cts_info("int_data_method: %d", fwdata->int_data_method);
-    cts_info("int_data_types: %d", fwdata->int_data_types);
-    cts_info("int_data_size: %ld", fwdata->int_data_size);
-
-    cts_info("pc_cols: %ld", fwdata->pc_cols);
-    cts_info("pc_rows: %ld", fwdata->pc_rows);
-    cts_info("pr_cols: %ld", fwdata->pr_cols);
-    cts_info("pr_rows: %ld", fwdata->pr_rows);
-    cts_info("pc_cols_used: %ld", fwdata->pc_cols_used);
-    cts_info("pc_rows_used: %ld", fwdata->pc_rows_used);
-    cts_info("pr_cols_used: %ld", fwdata->pr_cols_used);
-    cts_info("pr_rows_used: %ld", fwdata->pr_rows_used);
+    cts_dbg("fwver: %04x", fwdata->version);
+    cts_dbg("libver: %04x", fwdata->lib_version);
+    cts_dbg("ddi_version: %02x", fwdata->ddi_version);
+    cts_dbg("res_x: %d", fwdata->res_x);
+    cts_dbg("res_y: %d", fwdata->res_y);
+    cts_dbg("rows: %d", fwdata->rows);
+    cts_dbg("cols: %d", fwdata->cols);
+    cts_dbg("flip_x: %d", fwdata->flip_x);
+    cts_dbg("flip_y: %d", fwdata->flip_y);
+    cts_dbg("swap_axes: %d", fwdata->swap_axes);
+    cts_dbg("int_mode: %d", fwdata->int_mode);
+    cts_dbg("int_keep_time: %d", fwdata->int_keep_time);
+    cts_dbg("rawdata_target: %d", fwdata->rawdata_target);
+    cts_dbg("esd_method: %d", fwdata->esd_method);
+    cts_dbg("has_int_data: %d", fwdata->has_int_data);
+    cts_dbg("int_data_method: %d", fwdata->int_data_method);
+    cts_dbg("int_data_types: %d", fwdata->int_data_types);
+    cts_dbg("int_data_size: %ld", fwdata->int_data_size);
+
+    cts_dbg("pc_cols: %ld", fwdata->pc_cols);
+    cts_dbg("pc_rows: %ld", fwdata->pc_rows);
+    cts_dbg("pr_cols: %ld", fwdata->pr_cols);
+    cts_dbg("pr_rows: %ld", fwdata->pr_rows);
+    cts_dbg("pc_cols_used: %ld", fwdata->pc_cols_used);
+    cts_dbg("pc_rows_used: %ld", fwdata->pc_rows_used);
+    cts_dbg("pr_cols_used: %ld", fwdata->pr_cols_used);
+    cts_dbg("pr_rows_used: %ld", fwdata->pr_rows_used);
 
     return 0;
 }
diff --git a/drivers/input/touchscreen/chsc5xxx/Kconfig b/drivers/input/touchscreen/chsc5xxx/Kconfig
new file mode 100755
index 000000000000..0f3e8a6d9b19
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/Kconfig
@@ -0,0 +1,51 @@
+#
+# ChipSemi CHSC5XXX Touchscreen driver
+#
+
+config CHSC5XXX_TOUCHPANEL_DRIVER
+	tristate "ChipSemi CHSC5XXX touchpanel driver"
+	depends on TOUCHSCREEN_CHSC5XXX
+	default y
+	help
+	  This is the main file for touchpanel driver for ChipSemi CHSC5XXX
+	  touchscreens.
+
+	  Say Y here if you have a ChipSemi CHSC5XXX touchscreen connected
+	  to your system.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called semi_touch_driver.
+
+config SEMI_TOUCH_AUTO_UPDATE_EN
+	tristate "ChipSemi CHSC5XXX touchpanel auto update support"
+	depends on CHSC5XXX_TOUCHPANEL_DRIVER
+	default n
+	help
+	  This enables support for firmware update for ChipSemi CHSC5XXX
+	  touchscreens.
+
+	  Say Y here if you have a ChipSemi CHSC5XXX touchscreen connected
+	  to your system.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called semi_touch_upgrade.
+
+config SEMI_TOUCH_APK_NODE_EN
+	tristate "ChipSemi CHSC5XXX Node for debuging"
+	depends on CHSC5XXX_TOUCHPANEL_DRIVER
+	default n
+	help
+	  This is application debug interface support for ChipSemi CHSC5XXX
+	  touchscreens.
+
+	  Say Y here if you want to have a Android app debug interface
+	  to your system.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called semi_touch_apk.
diff --git a/drivers/input/touchscreen/chsc5xxx/Makefile b/drivers/input/touchscreen/chsc5xxx/Makefile
new file mode 100755
index 000000000000..1a6fbe9adf7d
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/Makefile
@@ -0,0 +1,13 @@
+#semitouch touchpanel driver
+
+obj-$(CONFIG_TOUCHSCREEN_CHSC5XXX)	    += semi_touch_driver.o
+
+semi_touch_driver-objs += basic_util.o
+semi_touch_driver-objs += i2c_communication.o
+semi_touch_driver-objs += idmx_core.o
+semi_touch_driver-objs += semi_touch_function.o
+semi_touch_driver-objs += semi_touch_upgrade.o
+semi_touch_driver-objs += semi_touch_apk.o
+semi_touch_driver-objs += semi_touch_device.o
+semi_touch_driver-objs += semi_touch_custom.o
+
diff --git a/drivers/input/touchscreen/chsc5xxx/basic_util.c b/drivers/input/touchscreen/chsc5xxx/basic_util.c
new file mode 100644
index 000000000000..6a40b25ec55a
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/basic_util.c
@@ -0,0 +1,39 @@
+#include "semi_touch_interface.h"
+
+unsigned short caculate_checksum_u16(unsigned short * buf, unsigned int length)
+{
+    unsigned int len, i;
+    unsigned short sum = 0;
+    
+    len = length >> 1;  //length is in byte unit;
+    
+    for(i=0; i < len; i++)
+        sum += buf[i];
+    
+    return sum;
+}
+
+unsigned short caculate_checksum_u816(unsigned char * buf, unsigned int length)
+{
+    unsigned int i;
+    unsigned short sum = 0;
+    for(i = 0; i < length; i++)
+       sum += buf[i];
+    
+    return sum;
+}
+
+unsigned int caculate_checksum_ex(unsigned char * buf, unsigned int length)
+{
+    unsigned int k = 0, combchk = 0;
+    unsigned short check = 0, checkex = 0;
+    
+    for (k = 0; k < length; k++) {
+        check   += buf[k];
+        checkex += (unsigned short)(k * buf[k]);
+    }
+
+    combchk = (checkex<<16) | check;
+
+    return combchk;
+}
\ No newline at end of file
diff --git a/drivers/input/touchscreen/chsc5xxx/fw_code_bin.h b/drivers/input/touchscreen/chsc5xxx/fw_code_bin.h
new file mode 100644
index 000000000000..b53ca9ee4689
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/fw_code_bin.h
@@ -0,0 +1,672 @@
+#include "platform.h"
+
+/**************************************************************************************************/
+//chip ic 5472 firmware code bin
+/**************************************************************************************************/
+#if TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5472)
+#if (SEMI_TOUCH_ONLINE_UPDATE_EN || SEMI_TOUCH_BOOTUP_UPDATE_EN || SEMI_TOUCH_APK_NODE_EN)
+static const unsigned char fw_burn_mcapshare[] = {
+    0x37,0x02,0x00,0x20,0x13,0x02,0x02,0x02,0xB7,0x82,0x00,0x40,0x93,0x82,0x82,0x00,
+    0x23,0xA0,0x02,0x00,0x02,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x73,0x70,0x04,0x30,
+    0x81,0x42,0x37,0x13,0x00,0x40,0x13,0x03,0x83,0x05,0x23,0x20,0x53,0x00,0x81,0x42,
+    0x37,0xF3,0x00,0xE0,0x23,0x20,0x53,0x00,0x17,0x41,0x00,0x00,0x13,0x01,0x81,0x1B,
+    0x17,0x15,0x00,0x00,0x13,0x05,0x85,0xCC,0x97,0x45,0x00,0x00,0x93,0x85,0x85,0xFA,
+    0x17,0x46,0x00,0x00,0x13,0x06,0x06,0xFA,0x63,0xFA,0xC5,0x00,0x83,0x22,0x05,0x00,
+    0x23,0xA0,0x55,0x00,0x11,0x05,0x91,0x05,0xE3,0xEA,0xC5,0xFE,0x17,0x45,0x00,0x00,
+    0x13,0x05,0x45,0xF8,0x97,0x45,0x00,0x00,0x93,0x85,0x85,0x18,0x63,0x77,0xB5,0x00,
+    0x23,0x20,0x05,0x00,0x11,0x05,0xE3,0x6D,0xB5,0xFE,0xEF,0x00,0xE0,0x5B,0x01,0xA0,
+    0x93,0x17,0x15,0x00,0x3E,0x95,0x06,0x05,0x11,0xC5,0x81,0x47,0x01,0x00,0x85,0x07,
+    0xE3,0x1E,0xF5,0xFE,0x82,0x80,0x15,0xC1,0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,
+    0xAA,0x84,0x01,0x44,0x13,0x05,0x80,0x3E,0xE1,0x3F,0x05,0x04,0xE3,0x9C,0x84,0xFE,
+    0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x82,0x80,0x09,0x86,0x63,0x5C,
+    0xC0,0x00,0x0A,0x06,0x2A,0x96,0x91,0x05,0x11,0x05,0x83,0xA7,0xC5,0xFF,0x23,0x2E,
+    0xF5,0xFE,0xE3,0x1A,0xA6,0xFE,0x82,0x80,0x63,0x59,0xC0,0x00,0x81,0x47,0x11,0x05,
+    0x23,0x2E,0xB5,0xFE,0x85,0x07,0xE3,0x1C,0xF6,0xFE,0x82,0x80,0x9D,0xC9,0x81,0x47,
+    0x81,0x46,0x01,0x46,0x33,0x07,0xF5,0x00,0x03,0x47,0x07,0x00,0x3A,0x96,0x42,0x06,
+    0x41,0x82,0x33,0x07,0xF7,0x02,0x36,0x97,0x93,0x16,0x07,0x01,0xC1,0x82,0x85,0x07,
+    0x13,0x97,0x07,0x01,0x41,0x83,0xE3,0x6F,0xB7,0xFC,0xC2,0x06,0x33,0xE5,0xC6,0x00,
+    0x82,0x80,0xAE,0x86,0x2E,0x86,0xD5,0xBF,0x85,0x81,0x95,0xC1,0xAA,0x87,0xFD,0x15,
+    0xC2,0x05,0xC1,0x81,0x86,0x05,0x09,0x05,0x33,0x87,0xA5,0x00,0x81,0x45,0x03,0xD5,
+    0x07,0x00,0xAA,0x95,0xC2,0x05,0xC1,0x81,0x89,0x07,0xE3,0x9A,0xE7,0xFE,0x2E,0x85,
+    0x82,0x80,0x37,0x47,0x00,0x20,0x83,0x26,0x07,0x21,0xFD,0x77,0x93,0x87,0x27,0x9A,
+    0x23,0x91,0xF6,0x00,0x83,0x27,0x07,0x21,0x05,0x67,0x13,0x07,0xD7,0x65,0x23,0x92,
+    0xE7,0x00,0x37,0x47,0x00,0x20,0x03,0x27,0x07,0x20,0x23,0x93,0xE7,0x00,0x23,0x94,
+    0x07,0x00,0x37,0x47,0x00,0x20,0x03,0x27,0x47,0x20,0x23,0x95,0xE7,0x00,0x23,0x96,
+    0x07,0x00,0x23,0x87,0x07,0x00,0x82,0x80,0x41,0x11,0x06,0xC6,0x22,0xC4,0x26,0xC2,
+    0xB7,0x47,0x00,0x20,0x03,0xA7,0x47,0x21,0x83,0x57,0x67,0x00,0x83,0x56,0x27,0x00,
+    0xB3,0x86,0xF6,0x02,0x7D,0x76,0xF1,0x8E,0x36,0xC0,0x83,0x54,0x47,0x00,0xB3,0x87,
+    0xF4,0x02,0x93,0xD4,0xF7,0x41,0xD2,0x04,0xD1,0x80,0xBE,0x94,0xB1,0x84,0x81,0xCC,
+    0x01,0x44,0x02,0x45,0xEF,0x00,0x90,0x1D,0x82,0x47,0x05,0x67,0xBA,0x97,0x3E,0xC0,
+    0x05,0x04,0xE3,0x98,0x84,0xFE,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x23,0x87,
+    0x07,0x00,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0x31,0x11,0x06,0xC8,
+    0x22,0xC6,0x26,0xC4,0xB7,0x47,0x00,0x20,0x83,0xA7,0x47,0x21,0x83,0xD4,0x47,0x00,
+    0x03,0xD7,0xC7,0x00,0x3A,0xC0,0x03,0xD7,0x27,0x00,0x3A,0xC2,0x03,0xD4,0xA7,0x00,
+    0x13,0x17,0x04,0x01,0x03,0xD4,0x67,0x00,0x3A,0x94,0xA6,0x85,0x37,0x85,0x00,0x20,
+    0x75,0x3D,0x63,0x0E,0xA4,0x00,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x0D,0x47,
+    0x23,0x87,0xE7,0x00,0xC2,0x40,0x32,0x44,0xA2,0x44,0x51,0x01,0x82,0x80,0xB7,0x47,
+    0x00,0x20,0x03,0xA7,0x07,0x21,0x95,0x67,0x93,0x87,0x37,0x50,0x23,0x16,0xF7,0x00,
+    0x93,0x07,0x00,0x40,0x63,0xEF,0x97,0x02,0x82,0x47,0x13,0x94,0x07,0x01,0x92,0x47,
+    0x3E,0x94,0x93,0x17,0x44,0x01,0x95,0xCB,0x93,0x87,0xF4,0xFF,0xA2,0x97,0xA1,0x8F,
+    0x7D,0x77,0xF9,0x8F,0x9D,0xE7,0x37,0x86,0x00,0x20,0xA2,0x85,0x26,0x85,0xEF,0x00,
+    0x00,0x75,0x1D,0xE5,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x23,0x87,0x07,0x00,
+    0x55,0xB7,0x95,0x47,0x23,0x07,0xF7,0x00,0x71,0xBF,0x22,0x85,0xEF,0x00,0x10,0x10,
+    0xE1,0xB7,0xFD,0x77,0xE1,0x8F,0x05,0x65,0x3E,0x95,0xEF,0x00,0x30,0x0F,0xE1,0xB7,
+    0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x25,0x47,0x23,0x87,0xE7,0x00,0x9D,0xBF,
+    0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,0xB7,0x47,0x00,0x20,0x03,0xA7,0x47,0x21,
+    0x83,0x54,0x47,0x00,0x83,0x57,0xC7,0x00,0xC2,0x07,0x83,0x55,0x27,0x00,0x37,0x84,
+    0x00,0x20,0x13,0x06,0x04,0x40,0xBE,0x95,0x26,0x85,0xEF,0x00,0x50,0x09,0xA6,0x85,
+    0x13,0x05,0x04,0x40,0xE5,0x33,0xB7,0x47,0x00,0x20,0x03,0xA7,0x07,0x21,0x23,0x11,
+    0xA7,0x00,0x83,0xA7,0x07,0x21,0x41,0x81,0x23,0x92,0xA7,0x00,0x23,0x87,0x07,0x00,
+    0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x51,0x11,0x06,0xC4,0x29,0x2D,
+    0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x23,0x87,0x07,0x00,0xA2,0x40,0x31,0x01,
+    0x82,0x80,0x99,0xC9,0x81,0x47,0x33,0x07,0xF5,0x00,0x14,0x43,0x33,0x07,0xF6,0x00,
+    0x14,0xC3,0x91,0x07,0xE3,0xE9,0xB7,0xFE,0x82,0x80,0x89,0xCD,0xB2,0x95,0xB2,0x87,
+    0x11,0x8D,0x33,0x07,0xF5,0x00,0x03,0x47,0x07,0x00,0x23,0x80,0xE7,0x00,0x85,0x07,
+    0xE3,0x99,0xB7,0xFE,0x82,0x80,0x21,0x11,0x06,0xCA,0x22,0xC8,0x26,0xC6,0x2A,0xC4,
+    0x02,0xC2,0x81,0x44,0x01,0x44,0x89,0xA8,0xB7,0x47,0x00,0x20,0x13,0x86,0xC7,0x21,
+    0x82,0x45,0x12,0x45,0x7D,0x37,0xA2,0x46,0xA1,0xCA,0x12,0x47,0x81,0x46,0xB7,0x47,
+    0x00,0x20,0x13,0x86,0xC7,0x21,0x92,0x47,0xB3,0x07,0xF7,0x40,0xB2,0x97,0x83,0xC7,
+    0x07,0x00,0x3E,0x94,0x42,0x04,0x41,0x80,0xB3,0x87,0xE7,0x02,0xBE,0x94,0xC2,0x04,
+    0xC1,0x80,0x85,0x06,0x05,0x07,0x82,0x47,0xE3,0xEF,0xF6,0xFC,0xA2,0x47,0x82,0x46,
+    0x95,0x8F,0x3E,0xC4,0x91,0xCB,0x3A,0xC2,0x22,0x47,0x3A,0xC0,0x93,0x07,0x00,0x40,
+    0xE3,0xF4,0xE7,0xFA,0x3E,0xC0,0x4D,0xB7,0x13,0x95,0x04,0x01,0x41,0x8D,0xD2,0x40,
+    0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,0x03,0x27,0x00,0x00,0xB7,0x47,0x00,0x20,
+    0x23,0x8E,0xE7,0x20,0x93,0x56,0x87,0x00,0xA3,0x8E,0xD7,0x20,0x93,0x56,0x07,0x01,
+    0x23,0x8F,0xD7,0x20,0x93,0x56,0x87,0x01,0xA3,0x8F,0xD7,0x20,0x03,0x26,0x40,0x00,
+    0x93,0x87,0xC7,0x21,0x23,0x82,0xC7,0x00,0x93,0x56,0x86,0x00,0xA3,0x82,0xD7,0x00,
+    0x93,0x56,0x06,0x01,0x23,0x83,0xD7,0x00,0x93,0x56,0x86,0x01,0xA3,0x83,0xD7,0x00,
+    0x83,0x26,0x80,0x00,0x23,0x84,0xD7,0x00,0x93,0xD5,0x86,0x00,0xA3,0x84,0xB7,0x00,
+    0x93,0xD5,0x06,0x01,0x23,0x85,0xB7,0x00,0xE1,0x82,0xA3,0x85,0xD7,0x00,0x71,0x8F,
+    0xFD,0x57,0x63,0x02,0xF7,0x08,0x41,0x11,0x06,0xC6,0x22,0xC4,0x26,0xC2,0x03,0x27,
+    0x00,0x03,0xB7,0x47,0x00,0x20,0x93,0x87,0xC7,0x21,0x23,0x88,0xE7,0x02,0x93,0x56,
+    0x87,0x00,0xA3,0x88,0xD7,0x02,0x93,0x56,0x07,0x01,0x23,0x89,0xD7,0x02,0x93,0x56,
+    0x87,0x01,0xA3,0x89,0xD7,0x02,0x03,0x24,0x40,0x03,0x23,0x8A,0x87,0x02,0x93,0x56,
+    0x84,0x00,0xA3,0x8A,0xD7,0x02,0x93,0x56,0x04,0x01,0x23,0x8B,0xD7,0x02,0x93,0x56,
+    0x84,0x01,0xA3,0x8B,0xD7,0x02,0x42,0x07,0x41,0x83,0x95,0x67,0x93,0x87,0x27,0x47,
+    0x63,0x17,0xF7,0x00,0x93,0x04,0xC4,0xFF,0xC1,0x67,0x63,0xE6,0xF4,0x02,0xB7,0x47,
+    0x00,0x20,0x83,0xA7,0x07,0x21,0x45,0x47,0x23,0x87,0xE7,0x00,0xB2,0x40,0x22,0x44,
+    0x92,0x44,0x41,0x01,0x82,0x80,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x21,0x47,
+    0x23,0x87,0xE7,0x00,0x82,0x80,0x26,0x85,0xBD,0x3D,0x2A,0xC0,0x37,0x86,0x00,0x20,
+    0x13,0x06,0x06,0x40,0xA1,0x45,0x26,0x85,0x89,0x3D,0x83,0x27,0xC4,0xFF,0x02,0x47,
+    0x63,0x0A,0xF7,0x00,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x0D,0x47,0x23,0x87,
+    0xE7,0x00,0x6D,0xBF,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,0x23,0x87,0x07,0x00,
+    0x75,0xB7,0x51,0x11,0x06,0xC4,0x22,0xC2,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,
+    0x25,0x47,0x23,0x87,0xE7,0x00,0xC1,0x45,0xB7,0x47,0x00,0x20,0x03,0xA5,0x47,0x21,
+    0xE1,0x3E,0x3D,0xE1,0xB7,0x47,0x00,0x20,0x83,0xA7,0x47,0x21,0x83,0xC7,0xE7,0x00,
+    0x13,0x07,0x00,0x03,0x63,0x8F,0xE7,0x02,0x13,0x07,0x10,0x03,0x63,0x83,0xE7,0x02,
+    0x13,0x07,0x30,0x03,0x63,0x81,0xE7,0x02,0x13,0x07,0x40,0x03,0x63,0x8F,0xE7,0x00,
+    0x05,0x47,0x63,0x8E,0xE7,0x00,0x13,0x07,0x20,0x03,0x63,0x9F,0xE7,0x02,0x95,0x47,
+    0x11,0xA8,0x85,0x47,0x01,0xA8,0x89,0x47,0x31,0xA0,0x8D,0x47,0x21,0xA0,0x91,0x47,
+    0x11,0xA0,0x81,0x47,0x13,0x97,0x37,0x00,0xB7,0x17,0x00,0x20,0x93,0x87,0x87,0xCE,
+    0xBA,0x97,0xDC,0x43,0x82,0x97,0x09,0xA8,0xB7,0x47,0x00,0x20,0x83,0xA7,0x07,0x21,
+    0x13,0x07,0x10,0x05,0x23,0x87,0xE7,0x00,0x37,0x44,0x00,0x20,0x03,0x25,0x04,0x21,
+    0xB7,0x47,0x00,0x20,0x83,0xA7,0x47,0x21,0x83,0xC7,0xE7,0x00,0xA3,0x07,0xF5,0x00,
+    0xB9,0x45,0x09,0x05,0x91,0x36,0x83,0x27,0x04,0x21,0x33,0x05,0xA0,0x40,0x23,0x90,
+    0xA7,0x00,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0xB7,0x07,0x00,0x20,0x03,0xC7,
+    0xF7,0x00,0x93,0x07,0x90,0x0E,0x63,0x03,0xF7,0x00,0x82,0x80,0x51,0x11,0x06,0xC4,
+    0x22,0xC2,0x41,0x46,0xB7,0x05,0x00,0x20,0x37,0x94,0x00,0x20,0x13,0x05,0x04,0xC0,
+    0x71,0x3C,0x01,0x3F,0x41,0x46,0x93,0x05,0x04,0xD0,0x37,0x05,0x00,0x20,0x79,0x34,
+    0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,
+    0xB7,0x87,0x00,0x40,0x13,0x07,0xA0,0x05,0xD8,0xC7,0xB7,0x17,0x00,0x40,0x37,0x17,
+    0x10,0x00,0x09,0x07,0xD8,0xCB,0x23,0xA8,0x07,0x04,0x41,0x47,0xF8,0xCB,0xB7,0x07,
+    0x00,0x20,0x37,0x47,0x00,0x20,0x23,0x2C,0xF7,0x20,0x37,0x47,0x00,0x20,0x23,0x26,
+    0xF7,0x20,0x37,0x94,0x00,0x20,0x93,0x04,0x04,0xC0,0xB7,0x47,0x00,0x20,0x23,0xAA,
+    0x97,0x20,0x13,0x04,0x04,0xD0,0xB7,0x47,0x00,0x20,0x23,0xA8,0x87,0x20,0x21,0x46,
+    0x81,0x45,0x37,0x05,0x00,0x20,0x89,0x34,0x21,0x46,0x81,0x45,0x26,0x85,0x2D,0x3C,
+    0x21,0x46,0x81,0x45,0x22,0x85,0x0D,0x3C,0x35,0x23,0x81,0x3F,0xFD,0xBF,0x51,0x11,
+    0x06,0xC4,0x22,0xC2,0x26,0xC0,0x1D,0x64,0x13,0x04,0x04,0x53,0x01,0x47,0xB7,0x14,
+    0x00,0x40,0x01,0xA8,0x05,0x07,0x21,0xA0,0x29,0x45,0x5D,0x3A,0x01,0x47,0x7D,0x14,
+    0x09,0xCC,0x9C,0x40,0xE3,0xDA,0x07,0xFE,0x8D,0x47,0xE3,0xF5,0xE7,0xFE,0x05,0x45,
+    0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x01,0x45,0xD5,0xBF,0x51,0x11,
+    0x06,0xC4,0x22,0xC2,0x26,0xC0,0x2A,0x84,0x5D,0x3F,0x85,0x47,0x63,0x1C,0xF5,0x04,
+    0xB7,0x17,0x00,0x40,0x23,0xA8,0x87,0x08,0x13,0x64,0x14,0x00,0x23,0xA8,0x87,0x08,
+    0x83,0xA7,0x07,0x09,0x89,0x8B,0x85,0xC7,0x05,0x45,0x9D,0x32,0x09,0x64,0x13,0x04,
+    0xE4,0x70,0xB7,0x14,0x00,0x40,0x83,0xA7,0x04,0x09,0x89,0x8B,0x81,0xCB,0x05,0x45,
+    0x81,0x3A,0x7D,0x14,0xFD,0x57,0xE3,0x18,0xF4,0xFE,0x11,0xA0,0x11,0xCC,0x85,0x3F,
+    0x7D,0x15,0x33,0x35,0xA0,0x00,0x33,0x05,0xA0,0x40,0xA2,0x40,0x12,0x44,0x82,0x44,
+    0x31,0x01,0x82,0x80,0x7D,0x55,0xD5,0xBF,0x7D,0x55,0xC5,0xBF,0x51,0x11,0x06,0xC4,
+    0x22,0xC2,0x26,0xC0,0x2E,0x84,0xB2,0x84,0x93,0x87,0xF5,0xFF,0xD2,0x07,0x37,0x07,
+    0x70,0x00,0xF9,0x8F,0x62,0x05,0xC9,0x8F,0x37,0x05,0x80,0x00,0x5D,0x8D,0x85,0x3F,
+    0x1D,0xE1,0xB7,0x17,0x00,0x40,0x83,0xA7,0x07,0x0A,0x9C,0xC0,0x91,0x47,0x63,0xF7,
+    0x87,0x00,0xB7,0x17,0x00,0x40,0x83,0xA7,0x47,0x0A,0xDC,0xC0,0xA2,0x40,0x12,0x44,
+    0x82,0x44,0x31,0x01,0x82,0x80,0x7D,0x55,0xD5,0xBF,0x41,0x11,0x06,0xC6,0x22,0xC4,
+    0xFD,0x3D,0x85,0x47,0x63,0x1A,0xF5,0x02,0x29,0x45,0xF1,0x38,0x02,0xC0,0x1D,0x64,
+    0x13,0x04,0x04,0x53,0x13,0x05,0x40,0x1F,0x65,0x38,0x0A,0x86,0x85,0x45,0x15,0x45,
+    0x71,0x37,0x02,0x45,0x05,0x89,0x19,0xC1,0x7D,0x14,0x6D,0xF4,0x33,0x05,0xA0,0x40,
+    0xB2,0x40,0x22,0x44,0x41,0x01,0x82,0x80,0x7D,0x55,0xDD,0xBF,0x93,0x87,0xF5,0xFF,
+    0xAA,0x97,0xA9,0x8F,0x93,0xF7,0x07,0xF0,0xA1,0xEB,0x51,0x11,0x06,0xC4,0xB3,0x67,
+    0xB5,0x00,0x8D,0x8B,0x95,0xC3,0xB3,0x06,0xB6,0x00,0x11,0x8D,0x91,0xC9,0x03,0x47,
+    0x06,0x00,0xB3,0x07,0xC5,0x00,0x23,0x80,0xE7,0x00,0x05,0x06,0xE3,0x19,0xD6,0xFE,
+    0x69,0x37,0xA2,0x40,0x31,0x01,0x82,0x80,0x89,0x81,0x89,0xCD,0x8A,0x05,0xB3,0x07,
+    0xB6,0x00,0x32,0x87,0x11,0x8D,0x10,0x43,0xB3,0x06,0xE5,0x00,0x90,0xC2,0x11,0x07,
+    0xE3,0x1B,0xF7,0xFE,0x9D,0x37,0xF1,0xBF,0x79,0x55,0x82,0x80,0x51,0x11,0x06,0xC4,
+    0x22,0xC2,0x93,0x87,0xF5,0xFF,0x1D,0x47,0x63,0x6C,0xF7,0x02,0x14,0x42,0x37,0x17,
+    0x00,0x40,0x23,0x24,0xD7,0x0A,0x11,0x47,0x63,0x77,0xB7,0x00,0x54,0x42,0x37,0x17,
+    0x00,0x40,0x23,0x26,0xD7,0x0A,0xB2,0x07,0x62,0x05,0xC9,0x8F,0x21,0x65,0x5D,0x8D,
+    0xBD,0x35,0x2A,0x84,0x1D,0x37,0x22,0x85,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,
+    0x7D,0x54,0xD5,0xBF,0x51,0x11,0x06,0xC4,0x62,0x05,0x91,0x3D,0xA2,0x40,0x31,0x01,
+    0x82,0x80,0x51,0x11,0x06,0xC4,0x62,0x05,0xB7,0x17,0x00,0x40,0x23,0xAA,0xB7,0x08,
+    0xB7,0x07,0x0A,0x00,0x5D,0x8D,0x25,0x3D,0xA2,0x40,0x31,0x01,0x82,0x80,0x51,0x11,
+    0x06,0xC4,0x22,0xC2,0xB7,0x47,0x00,0x20,0x03,0xA7,0x07,0x20,0x91,0x67,0x93,0x87,
+    0x57,0x08,0x63,0x00,0xF7,0x02,0x99,0x67,0x93,0x87,0x87,0x0C,0x63,0x01,0xF7,0x04,
+    0xB7,0x17,0x00,0x40,0x23,0xAC,0x07,0x04,0x01,0x45,0xA2,0x40,0x12,0x44,0x31,0x01,
+    0x82,0x80,0xB7,0x47,0x00,0x20,0x83,0xA7,0x47,0x20,0x13,0xF7,0xC7,0x07,0x6D,0xD7,
+    0x37,0x44,0x00,0x20,0x13,0x04,0x04,0x20,0x93,0xF7,0x07,0xF8,0x5C,0xC0,0x19,0x45,
+    0x51,0x37,0x13,0x06,0x44,0x00,0x89,0x45,0x05,0x45,0x0D,0x3F,0xD1,0xB7,0xB7,0x47,
+    0x00,0x20,0x83,0xA7,0x47,0x20,0x13,0xF7,0xC7,0x01,0x5D,0xDF,0x37,0x44,0x00,0x20,
+    0x13,0x04,0x04,0x20,0x81,0x9B,0x5C,0xC0,0x19,0x45,0xA9,0x3F,0x13,0x06,0x44,0x00,
+    0x85,0x45,0x05,0x45,0x21,0x37,0x69,0xBF,0x51,0x11,0x06,0xC4,0x22,0xC2,0xB7,0x47,
+    0x00,0x20,0x03,0xA7,0x07,0x20,0x91,0x67,0x93,0x87,0x57,0x08,0x63,0x00,0xF7,0x02,
+    0x99,0x67,0x93,0x87,0x87,0x0C,0x63,0x04,0xF7,0x04,0xB7,0x17,0x00,0x40,0x09,0x47,
+    0xB8,0xCF,0x01,0x45,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0xB7,0x47,0x00,0x20,
+    0x83,0xA7,0x47,0x20,0x93,0xF6,0xC7,0x07,0x13,0x07,0xC0,0x07,0xE3,0x8F,0xE6,0xFC,
+    0x37,0x44,0x00,0x20,0x13,0x04,0x04,0x20,0x93,0xE7,0xF7,0x07,0x5C,0xC0,0x19,0x45,
+    0xD5,0x3D,0x13,0x06,0x44,0x00,0x85,0x45,0x05,0x45,0x4D,0x35,0x7D,0xBF,0xB7,0x47,
+    0x00,0x20,0x83,0xA7,0x47,0x20,0x93,0xF6,0xC7,0x01,0x71,0x47,0xE3,0x87,0xE6,0xFA,
+    0x37,0x44,0x00,0x20,0x13,0x04,0x04,0x20,0x93,0xE7,0xF7,0x01,0x5C,0xC0,0x19,0x45,
+    0xD1,0x35,0x13,0x06,0x44,0x00,0x85,0x45,0x05,0x45,0x8D,0x3D,0x79,0xB7,0x01,0x11,
+    0x06,0xCE,0x22,0xCC,0x26,0xCA,0xAA,0x84,0x2A,0xC6,0x2E,0xC4,0x32,0x84,0x32,0xC8,
+    0x7D,0x39,0x85,0x47,0x63,0x16,0xF5,0x0C,0xE1,0xCC,0x22,0xC2,0xA2,0x47,0x3E,0xC0,
+    0x25,0xA0,0x12,0x46,0xA2,0x85,0x02,0x45,0xD5,0x33,0x15,0xE9,0x12,0x46,0xA2,0x85,
+    0x02,0x45,0xE9,0x3B,0x0D,0xE5,0x92,0x47,0x33,0x87,0x87,0x00,0x3A,0xC2,0x82,0x47,
+    0xA2,0x97,0x3E,0xC0,0x81,0x8C,0xCD,0xC4,0x82,0x47,0x13,0xF4,0xF7,0x0F,0x93,0x07,
+    0x00,0x10,0x33,0x84,0x87,0x40,0xE3,0xF6,0x84,0xFC,0x26,0x84,0xD9,0xB7,0xB5,0x33,
+    0xD1,0xE0,0xA2,0x47,0x13,0xF5,0x37,0x00,0x71,0xC9,0x22,0x46,0x03,0x47,0x06,0x00,
+    0xB7,0x47,0x00,0x20,0x23,0x8E,0xE7,0x20,0x83,0x46,0x16,0x00,0x93,0x87,0xC7,0x21,
+    0xA3,0x80,0xD7,0x00,0x83,0x46,0x26,0x00,0x23,0x81,0xD7,0x00,0x91,0x47,0x33,0x85,
+    0xA7,0x40,0xB2,0x47,0x63,0xF3,0xA7,0x00,0x3E,0x85,0xC2,0x46,0x83,0xC7,0x06,0x00,
+    0x63,0x94,0xE7,0x04,0x37,0x47,0x00,0x20,0x13,0x07,0xC7,0x21,0x93,0x87,0x16,0x00,
+    0xB3,0x85,0xA6,0x00,0x63,0x8B,0xB7,0x06,0x03,0x46,0x17,0x00,0x83,0xC6,0x07,0x00,
+    0x05,0x07,0x85,0x07,0xE3,0x08,0xD6,0xFE,0x7D,0x55,0x31,0xA0,0x01,0x45,0xB2,0x47,
+    0xD1,0xEF,0x11,0xA0,0x01,0x45,0xF2,0x40,0x62,0x44,0xD2,0x44,0x05,0x61,0x82,0x80,
+    0x71,0x55,0xD5,0xBF,0x7D,0x55,0xC5,0xBF,0x7D,0x55,0xF5,0xB7,0x7D,0x55,0xE5,0xB7,
+    0xE9,0x39,0xA2,0x47,0x8D,0x8B,0xB9,0xC3,0x91,0x46,0x9D,0x8E,0xA2,0x45,0x03,0xC7,
+    0x05,0x00,0xB7,0x47,0x00,0x20,0x23,0x8E,0xE7,0x20,0x03,0xC6,0x15,0x00,0x93,0x87,
+    0xC7,0x21,0xA3,0x80,0xC7,0x00,0x03,0xC6,0x25,0x00,0x23,0x81,0xC7,0x00,0xB2,0x47,
+    0x3E,0x85,0x63,0xF3,0xF6,0x00,0x36,0x85,0x2D,0xF9,0xC2,0x47,0xAA,0x97,0x3E,0xC8,
+    0xA2,0x47,0xAA,0x97,0x3E,0xC4,0xB2,0x47,0x89,0x8F,0x3E,0xC6,0x32,0x47,0x93,0x55,
+    0x27,0x00,0x8D,0x47,0xE3,0xF4,0xE7,0xF8,0xB7,0x47,0x00,0x20,0x13,0x86,0xC7,0x21,
+    0x93,0x87,0xC7,0x21,0x01,0x47,0xA2,0x46,0x33,0x86,0xC6,0x40,0xB3,0x06,0xF6,0x00,
+    0x94,0x42,0x94,0xC3,0x05,0x07,0x91,0x07,0xE3,0x6A,0xB7,0xFE,0xB7,0x47,0x00,0x20,
+    0x03,0xC7,0xC7,0x21,0xC2,0x46,0x83,0xC7,0x06,0x00,0xE3,0x19,0xF7,0xF6,0xB7,0x47,
+    0x00,0x20,0x93,0x87,0xD7,0x21,0x13,0x87,0x16,0x00,0xB7,0x45,0x00,0x20,0x93,0x85,
+    0xC5,0x21,0xB2,0x46,0xB6,0x95,0xE3,0x8F,0xB7,0xF2,0x03,0xC6,0x07,0x00,0x83,0x46,
+    0x07,0x00,0x85,0x07,0x05,0x07,0xE3,0x08,0xD6,0xFE,0x7D,0x55,0x2D,0xB7,0x09,0xCD,
+    0x32,0x95,0xB2,0x87,0x91,0x8D,0x33,0x87,0xF5,0x00,0x03,0x47,0x07,0x00,0x23,0x80,
+    0xE7,0x00,0x85,0x07,0xE3,0x99,0xA7,0xFE,0x01,0x45,0x82,0x80,0x51,0x11,0x06,0xC4,
+    0x22,0xC2,0x2A,0x84,0x29,0x33,0xD5,0x3E,0x19,0x45,0xE9,0x39,0xA2,0x85,0x13,0x05,
+    0x00,0x02,0xC5,0x31,0x79,0x45,0xEF,0xF0,0x0F,0xCD,0xC5,0x36,0xA2,0x40,0x12,0x44,
+    0x31,0x01,0x82,0x80,0x41,0x11,0x06,0xC6,0x22,0xC4,0x26,0xC2,0x37,0x46,0x00,0x20,
+    0x13,0x06,0x06,0x20,0x8D,0x45,0x13,0x05,0xF0,0x09,0x8D,0x3E,0x3D,0xE1,0x37,0x46,
+    0x00,0x20,0x13,0x06,0x06,0x20,0x83,0x57,0x06,0x00,0x1C,0xC2,0x11,0x06,0x85,0x45,
+    0x15,0x45,0xA9,0x3E,0x2A,0x84,0x45,0xED,0xB7,0x47,0x00,0x20,0x93,0x87,0x07,0x20,
+    0x03,0xC7,0x47,0x00,0xD8,0xC3,0x98,0x43,0x91,0x67,0x93,0x87,0x57,0x08,0x63,0x00,
+    0xF7,0x04,0xB7,0x47,0x00,0x20,0x03,0xC7,0x87,0x20,0x89,0x47,0x63,0x01,0xF7,0x08,
+    0x37,0x17,0x00,0x40,0xB7,0x07,0x01,0x08,0x93,0x87,0xB7,0x03,0x5C,0xC3,0xB7,0x17,
+    0x00,0x40,0x23,0xAC,0x07,0x04,0x22,0x85,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,
+    0x82,0x80,0xB7,0x47,0x00,0x20,0x23,0xA0,0x07,0x20,0x7D,0x54,0xED,0xB7,0x0A,0x86,
+    0x85,0x45,0x13,0x05,0x50,0x03,0xDD,0x3C,0x29,0xED,0x82,0x47,0xA2,0x07,0x41,0x67,
+    0x7D,0x17,0xF9,0x8F,0x3E,0xC0,0x37,0x47,0x00,0x20,0x13,0x07,0x07,0x20,0x54,0x43,
+    0xD5,0x8F,0x5C,0xC3,0x13,0xF7,0x07,0x20,0x49,0xFF,0xB7,0x44,0x00,0x20,0x93,0x84,
+    0x04,0x20,0x09,0x47,0x23,0x84,0xE4,0x00,0x93,0xE7,0x07,0x20,0xDC,0xC0,0x19,0x45,
+    0xD5,0x3E,0x13,0x86,0x44,0x00,0x89,0x45,0x05,0x45,0x4D,0x36,0x9D,0xBF,0x37,0x17,
+    0x00,0x40,0xB7,0x07,0x02,0x08,0x93,0x87,0xB7,0x06,0x5C,0xC3,0x49,0xB7,0x7D,0x54,
+    0x59,0xB7,0x7D,0x54,0x49,0xB7,0x00,0x00,0x30,0x00,0x00,0x00,0x1C,0x02,0x00,0x20,
+    0x31,0x00,0x00,0x00,0xF0,0x02,0x00,0x20,0x33,0x00,0x00,0x00,0x18,0x04,0x00,0x20,
+    0x34,0x00,0x00,0x00,0x4A,0x03,0x00,0x20,0x01,0x00,0x00,0x00,0x72,0x01,0x00,0x20,
+    0x32,0x00,0x00,0x00,0xB8,0x01,0x00,0x20,
+};
+#else
+static const unsigned char fw_burn_mcapshare[] = {
+
+};
+#endif
+
+#if (SEMI_TOUCH_APK_NODE_EN)
+static const unsigned char fw_short_mcapshare[] = {
+    0x37,0x02,0x00,0x20,0x13,0x02,0x02,0x02,0xB7,0x82,0x00,0x40,0x93,0x82,0x82,0x00,
+    0x23,0xA0,0x02,0x00,0x02,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x73,0x70,0x04,0x30,
+    0x97,0x82,0x00,0x00,0x93,0x82,0x02,0x05,0x93,0xE2,0x32,0x00,0x73,0x90,0x52,0x30,
+    0x97,0x82,0x00,0x00,0x93,0x82,0x02,0xFC,0x73,0x90,0x72,0x30,0x17,0x91,0x00,0x00,
+    0x13,0x01,0x81,0x91,0x17,0x15,0x00,0x00,0x13,0x05,0x85,0x99,0x97,0x85,0x00,0x00,
+    0x93,0x85,0x45,0xFA,0x17,0x86,0x00,0x00,0x13,0x06,0xE6,0x0F,0x63,0xFA,0xC5,0x00,
+    0x83,0x22,0x05,0x00,0x23,0xA0,0x55,0x00,0x11,0x05,0x91,0x05,0xE3,0xEA,0xC5,0xFE,
+    0x17,0x85,0x00,0x00,0x13,0x05,0x45,0x0E,0x97,0x95,0x00,0x00,0x93,0x85,0xC5,0x50,
+    0x63,0x77,0xB5,0x00,0x23,0x20,0x05,0x00,0x11,0x05,0xE3,0x6D,0xB5,0xFE,0xEF,0x00,
+    0x60,0x00,0x01,0xA0,0x51,0x11,0x06,0xC4,0x22,0xC2,0x37,0x04,0x00,0x20,0xB7,0x07,
+    0x00,0x54,0x1C,0xC0,0xB7,0x87,0x00,0x40,0x13,0x07,0xA0,0x05,0xD8,0xC7,0x98,0x43,
+    0xE1,0x76,0x93,0x86,0xF6,0xCF,0x75,0x8F,0x98,0xC3,0x1D,0x2A,0xB7,0x97,0x00,0x20,
+    0x93,0x87,0x87,0xAF,0x5C,0xC0,0x8D,0x25,0xE1,0x25,0x73,0x60,0x04,0x30,0xEF,0x00,
+    0xF0,0x06,0xF5,0xBF,0x21,0x11,0x06,0xCA,0x22,0xC8,0x26,0xC6,0xB1,0xC5,0x2E,0xC4,
+    0x2A,0xC2,0x01,0x44,0x02,0xC0,0x81,0x44,0x92,0x47,0xA2,0x97,0x03,0xC5,0x07,0x00,
+    0xAA,0x94,0xC2,0x04,0xC1,0x80,0xA2,0x85,0xEF,0x00,0xD0,0x0C,0x82,0x47,0x3E,0x95,
+    0x93,0x17,0x05,0x01,0xC1,0x83,0x3E,0xC0,0x05,0x04,0x93,0x17,0x04,0x01,0xC1,0x83,
+    0x22,0x47,0xE3,0xEB,0xE7,0xFC,0x82,0x47,0x13,0x95,0x07,0x01,0x45,0x8D,0xD2,0x40,
+    0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,0x2E,0xC0,0xAE,0x84,0xED,0xB7,0xB3,0xE7,
+    0xC5,0x00,0xC9,0x8F,0x8D,0x8B,0x8D,0xC3,0x33,0x07,0xC5,0x00,0x2E,0x96,0xAA,0x87,
+    0x63,0x7B,0xE5,0x00,0x85,0x05,0x85,0x07,0x03,0xC7,0xF5,0xFF,0xA3,0x8F,0xE7,0xFE,
+    0xE3,0x9A,0xC5,0xFE,0x82,0x80,0x82,0x80,0x2A,0x96,0xE3,0x7D,0xC5,0xFE,0xAA,0x87,
+    0x91,0x05,0x91,0x07,0x03,0xA7,0xC5,0xFF,0x23,0xAE,0xE7,0xFE,0xE3,0xEA,0xC7,0xFE,
+    0x82,0x80,0xB3,0x67,0xC5,0x00,0x8D,0x8B,0x81,0xCF,0x2A,0x96,0xAA,0x87,0x63,0x78,
+    0xC5,0x00,0x85,0x07,0xA3,0x8F,0xB7,0xFE,0xE3,0x9D,0xC7,0xFE,0x82,0x80,0x82,0x80,
+    0x93,0xF5,0xF5,0x0F,0x93,0x97,0x85,0x00,0xCD,0x8F,0x93,0x95,0x07,0x01,0xDD,0x8D,
+    0x2A,0x96,0xE3,0x75,0xC5,0xFE,0xAA,0x87,0x91,0x07,0x23,0xAE,0xB7,0xFE,0xE3,0xED,
+    0xC7,0xFE,0x82,0x80,0x93,0x17,0x15,0x00,0x3E,0x95,0x06,0x05,0x11,0xC5,0x81,0x47,
+    0x01,0x00,0x85,0x07,0xE3,0x1E,0xF5,0xFE,0x82,0x80,0x15,0xC1,0x51,0x11,0x06,0xC4,
+    0x22,0xC2,0x26,0xC0,0xAA,0x84,0x01,0x44,0x13,0x05,0x80,0x3E,0xE1,0x3F,0x05,0x04,
+    0xE3,0x9C,0x84,0xFE,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x82,0x80,
+    0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x05,0x67,0xBA,0x97,0x11,0x47,0x23,0x80,
+    0xE7,0xB0,0xB7,0x96,0x00,0x20,0x93,0x86,0x46,0xA6,0x01,0x47,0xB7,0xE5,0x00,0xE0,
+    0x93,0x85,0x05,0x10,0x85,0x62,0x7D,0x43,0x37,0x86,0x00,0x20,0x13,0x06,0x06,0x08,
+    0x13,0x05,0x40,0x02,0xB3,0x87,0xE5,0x00,0x23,0x80,0x07,0x40,0x23,0x80,0x07,0x00,
+    0x96,0x97,0x23,0x80,0x67,0x80,0x90,0xC2,0x05,0x07,0x91,0x06,0xE3,0x14,0xA7,0xFE,
+    0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x05,0x67,0xBA,0x97,0x7D,0x57,0x23,0x88,
+    0xE7,0x80,0x82,0x80,0x93,0x07,0x30,0x02,0x63,0xE9,0xA7,0x00,0x0A,0x05,0xB7,0x97,
+    0x00,0x20,0x93,0x87,0x47,0xA6,0x3E,0x95,0x0C,0xC1,0x82,0x80,0x93,0x07,0x30,0x02,
+    0x63,0xED,0xA7,0x00,0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x3E,0x95,0x83,0x47,
+    0x05,0x40,0x93,0xE7,0x17,0x00,0x23,0x00,0xF5,0x40,0x82,0x80,0x93,0x07,0x30,0x02,
+    0x63,0xED,0xA7,0x00,0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x3E,0x95,0x83,0x47,
+    0x05,0x40,0x93,0xF7,0xE7,0x0F,0x23,0x00,0xF5,0x40,0x82,0x80,0xB7,0x96,0x00,0x20,
+    0x93,0x86,0xC6,0x59,0x93,0x07,0x80,0x02,0xA3,0x82,0xF6,0x00,0xB7,0x87,0x00,0x20,
+    0x83,0xA7,0xC7,0x15,0x03,0xA7,0x47,0x08,0x79,0x76,0x3D,0x06,0x71,0x8F,0x13,0x67,
+    0x07,0x28,0x23,0xA2,0xE7,0x08,0x29,0x47,0x23,0x83,0xE6,0x00,0x03,0xA7,0x87,0x08,
+    0xB7,0x06,0x10,0xE0,0xFD,0x16,0x75,0x8F,0xB7,0x06,0xA0,0x00,0x55,0x8F,0x23,0xA4,
+    0xE7,0x08,0x37,0xB7,0x00,0x20,0x13,0x07,0x47,0xB4,0x23,0xA4,0xE7,0x10,0x05,0x47,
+    0x63,0x80,0xE5,0x10,0x03,0xA7,0xC7,0x0F,0x85,0x66,0x55,0x8F,0x23,0xAE,0xE7,0x0E,
+    0x03,0xA7,0x47,0x0F,0x13,0x67,0x07,0x10,0x23,0xAA,0xE7,0x0E,0x13,0x07,0x70,0x02,
+    0x63,0x7E,0xA7,0x0E,0x37,0x97,0x00,0x20,0x03,0x47,0x77,0x5A,0x19,0x8D,0x05,0x47,
+    0x33,0x17,0xA7,0x00,0x13,0x47,0xF7,0xFF,0x23,0xA8,0xE7,0x0E,0x7D,0x57,0x23,0xA4,
+    0xE7,0x0E,0x23,0xA6,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0x85,0x66,0x55,0x8F,0x23,0xAE,
+    0xE7,0x0E,0x03,0xA7,0x07,0x09,0xB7,0x06,0x00,0x01,0x55,0x8F,0x23,0xA8,0xE7,0x08,
+    0x03,0xA7,0xC7,0x0F,0xB7,0x06,0x10,0x00,0x55,0x8F,0x23,0xAE,0xE7,0x0E,0x03,0xA7,
+    0xC7,0x0F,0x62,0x05,0xB7,0x06,0x00,0x03,0x75,0x8D,0xB7,0x06,0x00,0xFD,0xFD,0x16,
+    0x75,0x8F,0x59,0x8D,0x23,0xAE,0xA7,0x0E,0xB7,0x87,0x00,0x20,0x83,0xA7,0xC7,0x15,
+    0x03,0xA7,0x87,0x0F,0x79,0x9B,0x23,0xAC,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0xB7,0x06,
+    0x00,0x10,0x55,0x8F,0x23,0xAE,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0x13,0x67,0x07,0x01,
+    0x23,0xAE,0xE7,0x0E,0x83,0xA6,0x87,0x0F,0x7D,0x77,0x7D,0x17,0xF9,0x8E,0x23,0xAC,
+    0xD7,0x0E,0x83,0xA6,0xC7,0x0F,0x93,0xF6,0xF6,0xEF,0x23,0xAE,0xD7,0x0E,0x83,0xA6,
+    0x07,0x10,0x41,0x76,0x7D,0x16,0xF1,0x8E,0x23,0xA0,0xD7,0x10,0x83,0xA6,0x07,0x10,
+    0x75,0x8F,0x23,0xA0,0xE7,0x10,0x03,0xA7,0x87,0x08,0x85,0x66,0x55,0x8F,0x23,0xA4,
+    0xE7,0x08,0x03,0xA7,0x87,0x08,0xC1,0x66,0x55,0x8F,0x23,0xA4,0xE7,0x08,0x82,0x80,
+    0x03,0xA7,0xC7,0x0F,0xFD,0x76,0xFD,0x16,0x75,0x8F,0x23,0xAE,0xE7,0x0E,0x03,0xA7,
+    0x47,0x0F,0x13,0x77,0xF7,0xEF,0x23,0xAA,0xE7,0x0E,0x09,0xB7,0x7D,0x47,0x63,0x76,
+    0xA7,0x04,0x01,0x15,0x05,0x47,0x33,0x15,0xA7,0x00,0x13,0x45,0xF5,0xFF,0x23,0xA4,
+    0xA7,0x0E,0x7D,0x57,0x23,0xA6,0xE7,0x0E,0x23,0xA8,0xE7,0x0E,0x03,0xA7,0x47,0x0F,
+    0x13,0x77,0xF7,0xEF,0x23,0xAA,0xE7,0x0E,0x03,0xA7,0x07,0x09,0xB7,0x06,0x00,0xFF,
+    0xFD,0x16,0x75,0x8F,0x23,0xA8,0xE7,0x08,0x03,0xA7,0xC7,0x0F,0xB7,0x06,0xF0,0xFF,
+    0xFD,0x16,0x75,0x8F,0x23,0xAE,0xE7,0x0E,0x05,0xB7,0xFD,0x56,0x23,0xA4,0xD7,0x0E,
+    0x05,0x47,0x33,0x15,0xA7,0x00,0x13,0x45,0xF5,0xFF,0x23,0xA6,0xA7,0x0E,0x23,0xA8,
+    0xD7,0x0E,0x03,0xA7,0x47,0x0F,0x13,0x77,0xF7,0xEF,0x23,0xAA,0xE7,0x0E,0x03,0xA7,
+    0x07,0x09,0xB7,0x06,0x00,0xFF,0xFD,0x16,0x75,0x8F,0x23,0xA8,0xE7,0x08,0x03,0xA7,
+    0xC7,0x0F,0xB7,0x06,0xF0,0xFF,0xFD,0x16,0x75,0x8F,0x23,0xAE,0xE7,0x0E,0xE9,0xBD,
+    0xB7,0x97,0x00,0x20,0x03,0xC7,0x77,0x5A,0xAE,0x87,0x63,0xE6,0xE5,0x00,0xB3,0x87,
+    0xE5,0x40,0x93,0xF7,0xC7,0x0F,0x05,0x47,0x63,0x0A,0xE5,0x06,0x13,0x97,0x15,0x00,
+    0x37,0x95,0x00,0x20,0x83,0x26,0xC5,0x60,0xBA,0x96,0x86,0x07,0x37,0xB6,0x00,0x20,
+    0x13,0x06,0x46,0xB4,0xB2,0x97,0x83,0xD7,0x07,0x00,0x23,0x90,0xF6,0x00,0x83,0x27,
+    0xC5,0x60,0xBA,0x97,0x83,0x96,0x07,0x00,0xB7,0x97,0x00,0x20,0x83,0xA7,0x87,0x60,
+    0x3E,0x97,0x83,0x17,0x07,0x00,0x63,0xDC,0xD7,0x04,0x13,0x97,0x15,0x00,0x37,0xB6,
+    0x00,0x20,0x13,0x06,0x06,0xAB,0x32,0x97,0xB3,0x87,0xF6,0x40,0x23,0x10,0xF7,0x00,
+    0x93,0x07,0x70,0x04,0x63,0x88,0xF5,0x04,0xB7,0xB7,0x00,0x20,0x93,0x87,0x87,0xBE,
+    0x03,0xC7,0x77,0x01,0x05,0x07,0xA3,0x8B,0xE7,0x00,0x82,0x80,0x37,0x97,0x00,0x20,
+    0x03,0x27,0x87,0x60,0x86,0x05,0x2E,0x97,0x86,0x07,0xB7,0xB6,0x00,0x20,0x93,0x86,
+    0x46,0xB4,0xB6,0x97,0x83,0xD7,0x07,0x00,0x23,0x10,0xF7,0x00,0xF1,0xB7,0x13,0x97,
+    0x15,0x00,0x37,0xB6,0x00,0x20,0x13,0x06,0x06,0xAB,0x32,0x97,0x95,0x8F,0x23,0x10,
+    0xF7,0x00,0x7D,0xB7,0x51,0x11,0x06,0xC4,0xB7,0x97,0x00,0x20,0x05,0x47,0x23,0xA8,
+    0xE7,0x58,0x37,0xB7,0x00,0x20,0x13,0x07,0x07,0xB0,0x37,0xB6,0x00,0x20,0x13,0x03,
+    0x06,0xAB,0x13,0x05,0x03,0x09,0x13,0x06,0x00,0xFB,0x33,0x06,0x66,0x40,0xB7,0xA5,
+    0x00,0x20,0x83,0x16,0x07,0x00,0x83,0xA7,0x45,0x01,0xBA,0x97,0xB2,0x97,0x23,0x90,
+    0xD7,0x00,0x09,0x07,0xE3,0x17,0xA7,0xFE,0x13,0x05,0x03,0x05,0x1A,0x87,0x13,0x06,
+    0x00,0x04,0x33,0x06,0x66,0x40,0xB7,0xA5,0x00,0x20,0x83,0x16,0x07,0x00,0x83,0xA7,
+    0x45,0x01,0xBA,0x97,0xB2,0x97,0x23,0x90,0xD7,0x00,0x09,0x07,0xE3,0x17,0xA7,0xFE,
+    0x93,0x05,0x00,0x09,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x47,0x01,0xE5,0x34,0xB7,0x07,
+    0x00,0x20,0x88,0xC7,0x37,0x07,0x00,0x45,0x98,0xC3,0xB7,0xB7,0x00,0x20,0x93,0x87,
+    0x87,0xBE,0x03,0xC7,0x77,0x01,0x05,0x07,0xA3,0x8B,0xE7,0x00,0xA2,0x40,0x31,0x01,
+    0x82,0x80,0xB7,0xB7,0x00,0x20,0x05,0x47,0x23,0x85,0xE7,0xBE,0x82,0x80,0xB7,0xB7,
+    0x00,0x20,0x23,0x85,0x07,0xBE,0x82,0x80,0xB7,0xB7,0x00,0x20,0x83,0xC7,0x97,0xBE,
+    0x8D,0xC7,0x37,0x87,0x00,0x20,0x03,0x27,0xC7,0x15,0x03,0x27,0x87,0x0A,0x4D,0xEF,
+    0xFD,0x17,0x37,0xB7,0x00,0x20,0x13,0x07,0x87,0xBE,0xBA,0x97,0x83,0xC6,0xA7,0x00,
+    0x85,0x06,0x23,0x85,0xD7,0x00,0xA3,0x00,0x07,0x00,0xB7,0xB7,0x00,0x20,0x93,0x87,
+    0x87,0xBE,0x03,0xC7,0x07,0x01,0x83,0xC7,0x77,0x01,0x63,0x17,0xF7,0x00,0xB7,0xB7,
+    0x00,0x20,0x83,0xC7,0x17,0xBF,0x99,0xE7,0xB7,0xB7,0x00,0x20,0x05,0x47,0x23,0x85,
+    0xE7,0xBE,0x82,0x80,0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,0xB7,0xB7,0x00,0x20,
+    0x1D,0x47,0xA3,0x84,0xE7,0xBE,0xB7,0x94,0x00,0x20,0x93,0x84,0x44,0xAF,0x03,0xD4,
+    0x04,0x00,0xB7,0xA7,0x00,0x20,0x23,0x98,0x87,0x00,0xB7,0x87,0x00,0x20,0x83,0xD5,
+    0x07,0x16,0xB7,0xA7,0x00,0x20,0x23,0x99,0xB7,0x00,0x22,0x85,0xC5,0x3E,0x05,0x04,
+    0x42,0x04,0x41,0x80,0x23,0x90,0x84,0x00,0xB7,0x97,0x00,0x20,0x93,0x87,0xC7,0x59,
+    0x03,0xC7,0xB7,0x00,0x83,0xC7,0xA7,0x00,0xBA,0x97,0x63,0x4A,0xF4,0x00,0xB7,0x97,
+    0x00,0x20,0x23,0x9A,0x07,0xAE,0xB7,0x87,0x00,0x20,0x23,0x90,0x07,0x16,0xA2,0x40,
+    0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x82,0x80,0x51,0x11,0x06,0xC4,0xB7,0x87,
+    0x00,0x20,0x83,0xA7,0xC7,0x15,0x7D,0x57,0x23,0xA0,0xE7,0x12,0x23,0xA0,0x07,0x12,
+    0xB7,0xE7,0x00,0xE0,0x03,0xC7,0x57,0x51,0x13,0x67,0x17,0x00,0xA3,0x8A,0xE7,0x50,
+    0x21,0x37,0xA2,0x40,0x31,0x01,0x82,0x80,0x37,0x96,0x00,0x20,0x93,0x07,0xC6,0x59,
+    0x93,0x06,0x00,0x02,0xA3,0x84,0xD7,0x00,0x23,0x85,0xD7,0x00,0x13,0x07,0x80,0x02,
+    0xA3,0x85,0xE7,0x00,0x23,0x86,0xD7,0x00,0xA3,0x86,0xE7,0x00,0xD1,0x45,0x23,0x88,
+    0xB7,0x00,0xA3,0x87,0xE7,0x00,0x23,0x87,0xD7,0x00,0x8D,0x46,0xA3,0x81,0xD7,0x00,
+    0x21,0x45,0x23,0x82,0xA7,0x00,0xA3,0x82,0xE7,0x00,0x23,0x83,0xB7,0x00,0x23,0x0E,
+    0xD6,0x58,0x09,0x47,0xA3,0x80,0xE7,0x00,0x19,0x46,0x23,0x81,0xC7,0x00,0xA3,0x83,
+    0xE7,0x00,0x23,0x84,0xD7,0x00,0x13,0x07,0x00,0x50,0x23,0x99,0xE7,0x00,0x82,0x80,
+    0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,0xB7,0x87,0x00,0x20,0x83,0xA7,0xC7,0x15,
+    0x7D,0x57,0x23,0xA0,0xE7,0x12,0x23,0xA0,0x07,0x12,0x45,0x67,0x13,0x07,0x17,0x11,
+    0x23,0xA2,0xE7,0x12,0x03,0xA7,0xC7,0x10,0xB7,0x06,0x00,0xF0,0xFD,0x16,0x75,0x8F,
+    0x23,0xA6,0xE7,0x10,0x03,0xA7,0xC7,0x0F,0x3D,0x9B,0x23,0xAE,0xE7,0x0E,0x03,0xA7,
+    0x87,0x0F,0x85,0x66,0x55,0x8F,0x23,0xAC,0xE7,0x0E,0x03,0xA7,0x47,0x0F,0xB7,0x06,
+    0x00,0xD0,0xFD,0x16,0x75,0x8F,0xB7,0x06,0x00,0x20,0x55,0x8F,0x23,0xAA,0xE7,0x0E,
+    0x03,0xA7,0x47,0x0F,0xB7,0x06,0x00,0xFD,0xFD,0x16,0x75,0x8F,0xB7,0x06,0x00,0x01,
+    0x55,0x8F,0x23,0xAA,0xE7,0x0E,0x03,0xA7,0x47,0x0F,0xFD,0x76,0x93,0x86,0xF6,0x0E,
+    0x75,0x8F,0x13,0x67,0x07,0x01,0x23,0xAA,0xE7,0x0E,0x23,0xA2,0x07,0x0E,0x23,0xA4,
+    0x07,0x0E,0x23,0xA6,0x07,0x0E,0x23,0xA8,0x07,0x0E,0x37,0x97,0x00,0x20,0x13,0x07,
+    0x07,0x61,0x23,0xA2,0xE7,0x10,0x37,0x97,0x00,0x20,0x13,0x07,0x87,0x5B,0x23,0xA4,
+    0xE7,0x10,0x37,0x96,0x00,0x20,0x13,0x07,0xC6,0x59,0x83,0x46,0x97,0x00,0x23,0xA0,
+    0xD7,0x0E,0x83,0x46,0x57,0x00,0x92,0x06,0x83,0x45,0x37,0x00,0xC2,0x05,0xCD,0x8E,
+    0x83,0x45,0x27,0x00,0xCD,0x8E,0x83,0x45,0x17,0x00,0xE2,0x05,0xCD,0x8E,0x23,0xA2,
+    0xD7,0x08,0x83,0x46,0x67,0x00,0xD2,0x06,0x83,0x45,0x47,0x00,0x92,0x05,0xCD,0x8E,
+    0x23,0xA4,0xD7,0x08,0x83,0x46,0x87,0x00,0xC2,0x06,0x83,0x45,0x77,0x00,0xE2,0x05,
+    0xCD,0x8E,0x23,0xA6,0xD7,0x08,0x83,0x46,0xC6,0x59,0xF2,0x06,0x03,0x46,0xF7,0x00,
+    0x32,0x06,0xD1,0x8E,0x03,0x47,0xE7,0x00,0x55,0x8F,0x23,0xA8,0xE7,0x08,0xB7,0xB7,
+    0x00,0x20,0x23,0x80,0x07,0xC0,0x93,0x87,0x07,0xC0,0xA3,0x80,0x07,0x00,0x23,0x81,
+    0x07,0x00,0xA3,0x81,0x07,0x00,0x23,0x82,0x07,0x00,0xA3,0x82,0x07,0x00,0x23,0x83,
+    0x07,0x00,0xA3,0x83,0x07,0x00,0x37,0xB4,0x00,0x20,0x61,0x46,0x81,0x45,0x13,0x05,
+    0x84,0xBE,0x41,0x38,0x85,0x44,0x93,0x07,0x84,0xBE,0xA3,0x84,0x97,0x00,0x37,0x97,
+    0x00,0x20,0xB7,0x97,0x00,0x20,0x93,0x87,0x07,0xBA,0x23,0x24,0xF7,0x60,0x37,0x97,
+    0x00,0x20,0xB7,0x97,0x00,0x20,0x93,0x87,0x87,0xC4,0x23,0x26,0xF7,0x60,0x37,0xA7,
+    0x00,0x20,0xB7,0x97,0x00,0x20,0x93,0x87,0x87,0xAF,0x23,0x2A,0xF7,0x00,0xB7,0x05,
+    0x00,0x20,0x93,0x85,0xA5,0x70,0x55,0x45,0x35,0x32,0x55,0x45,0x81,0x32,0x23,0x04,
+    0x94,0xBE,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x51,0x11,0x06,0xC4,
+    0xB7,0xB7,0x00,0x20,0x83,0xC7,0x97,0xBE,0x8D,0xC7,0xB7,0x97,0x00,0x20,0x83,0xA7,
+    0xC7,0x58,0x95,0xC3,0x11,0x47,0x63,0x8D,0xE7,0x02,0xB7,0x97,0x00,0x20,0x83,0xA7,
+    0xC7,0x58,0x19,0x47,0x63,0x9E,0xE7,0x00,0xB7,0x97,0x00,0x20,0x23,0xA6,0x07,0x58,
+    0x29,0xA8,0x5D,0x39,0xD9,0xBF,0x37,0x97,0x00,0x20,0x03,0x27,0x07,0x59,0x11,0xE7,
+    0x85,0x07,0x37,0x97,0x00,0x20,0x23,0x26,0xF7,0x58,0xA2,0x40,0x31,0x01,0x82,0x80,
+    0x37,0xB7,0x00,0x20,0x03,0x47,0x17,0xBF,0x65,0xD7,0xB7,0xB7,0x00,0x20,0x93,0x87,
+    0x87,0xBE,0x03,0xC7,0x07,0x01,0x83,0xC7,0x77,0x01,0xE3,0x00,0xF7,0xFE,0xB7,0xA7,
+    0x00,0x20,0x83,0xD5,0x07,0x01,0xB7,0xA7,0x00,0x20,0x03,0xD5,0x27,0x01,0xCD,0x3C,
+    0x69,0xBF,0x00,0x00,0x2A,0x86,0x01,0x45,0x93,0xF6,0x15,0x00,0x91,0xC2,0x32,0x95,
+    0x85,0x81,0x06,0x06,0xF5,0xF9,0x82,0x80,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x20,
+    0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,
+    0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0x80,0x80,0x00,0x20,
+    0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,
+    0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0x80,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,
+    0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,
+    0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,
+    0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,
+    0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0xF4,0x80,0x00,0x20,0x71,0x11,0x16,0xC0,
+    0xF3,0x22,0x20,0x34,0x63,0xC2,0x02,0x06,0x11,0x01,0x97,0x12,0x00,0x00,0x93,0x82,
+    0x62,0x9D,0x93,0x82,0xC2,0xFB,0x23,0xA0,0x12,0x00,0x23,0xA2,0x22,0x00,0x23,0xA4,
+    0x32,0x00,0x23,0xA6,0x42,0x00,0x23,0xAA,0x62,0x00,0x23,0xAC,0x72,0x00,0x23,0xAE,
+    0x82,0x00,0x23,0xA0,0x92,0x02,0x23,0xA2,0xA2,0x02,0x23,0xA4,0xB2,0x02,0x23,0xA6,
+    0xC2,0x02,0x23,0xA8,0xD2,0x02,0x23,0xAA,0xE2,0x02,0x23,0xAC,0xF2,0x02,0x73,0x25,
+    0x10,0x34,0x23,0xAE,0xA2,0x02,0x73,0x25,0x00,0x30,0x23,0xA0,0xA2,0x04,0x16,0x85,
+    0x83,0x22,0xC1,0xFF,0x2A,0x81,0x16,0xC8,0x82,0x42,0x11,0x01,0x11,0xA0,0x00,0x00,
+    0x79,0x71,0x16,0xC2,0x1A,0xC4,0xF3,0x22,0x10,0x34,0x73,0x23,0x20,0x34,0x1A,0xD4,
+    0x16,0xD6,0x73,0x60,0x04,0x30,0x06,0xC0,0x1E,0xC6,0x2A,0xC8,0x2E,0xCA,0x32,0xCC,
+    0x36,0xCE,0x3A,0xD0,0x3E,0xD2,0x13,0x73,0xF3,0x03,0x0A,0x03,0x97,0x12,0x00,0x00,
+    0x93,0x82,0x42,0x94,0x9A,0x92,0x83,0xA3,0x02,0x00,0x82,0x93,0x82,0x40,0x92,0x42,
+    0x22,0x43,0xB2,0x43,0x62,0x46,0xF2,0x46,0x02,0x57,0x92,0x57,0x73,0x70,0x04,0x30,
+    0x22,0x55,0x73,0x10,0x25,0x34,0xB2,0x55,0x73,0x90,0x15,0x34,0x42,0x45,0xD2,0x45,
+    0x45,0x61,0x73,0x00,0x20,0x30,0x00,0x00,0x00,0x20,0x00,0x40,0x01,0x00,0x00,0x00
+};
+#else
+static const unsigned char fw_short_mcapshare[] = {
+
+};
+#endif
+
+
+
+/**************************************************************************************************/
+//chip ic 5816 firmware code bin
+/**************************************************************************************************/
+#elif TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5816)
+#if (SEMI_TOUCH_ONLINE_UPDATE_EN || SEMI_TOUCH_BOOTUP_UPDATE_EN || SEMI_TOUCH_APK_NODE_EN)
+static const unsigned char fw_burn_mcapshare[] = {
+    0x37,0x02,0x00,0x20,0x13,0x02,0x02,0x02,0x37,0x77,0x00,0x40,0x37,0x45,0x04,0x12,
+    0x05,0x05,0x08,0xC3,0x02,0x82,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x01,0x00,0x01,0x00,0x01,0x00,0x73,0x70,0x04,0x30,0x17,0x11,0x00,0x00,0x13,0x01,
+    0xE1,0x1D,0x17,0x15,0x00,0x00,0x13,0x05,0xE5,0xA4,0x97,0x15,0x00,0x00,0x93,0x85,
+    0x65,0xFC,0x17,0x16,0x00,0x00,0x13,0x06,0x66,0xFC,0x63,0xFA,0xC5,0x00,0x83,0x22,
+    0x05,0x00,0x23,0xA0,0x55,0x00,0x11,0x05,0x91,0x05,0xE3,0xEA,0xC5,0xFE,0x17,0x15,
+    0x00,0x00,0x13,0x05,0xA5,0xFA,0x97,0x15,0x00,0x00,0x93,0x85,0x25,0x1A,0x63,0x77,
+    0xB5,0x00,0x23,0x20,0x05,0x00,0x11,0x05,0xE3,0x6D,0xB5,0xFE,0xEF,0x00,0xA0,0x56,
+    0x01,0xA0,0x37,0x17,0x00,0x20,0x83,0x26,0x07,0x62,0xFD,0x77,0x93,0x87,0x27,0x9A,
+    0x23,0x91,0xF6,0x00,0x83,0x27,0x07,0x62,0x05,0x67,0x13,0x07,0xD7,0x65,0x23,0x92,
+    0xE7,0x00,0x0D,0x67,0x13,0x07,0x07,0x03,0x23,0x93,0xE7,0x00,0x23,0x94,0x07,0x00,
+    0x23,0x95,0x07,0x00,0x23,0x96,0x07,0x00,0x23,0x87,0x07,0x00,0x82,0x80,0x31,0x11,
+    0x06,0xC8,0x22,0xC6,0x26,0xC4,0xB7,0x17,0x00,0x20,0x03,0xA7,0x47,0x63,0x83,0x54,
+    0x47,0x00,0x03,0x54,0x27,0x00,0xB3,0xE7,0x84,0x00,0x8D,0x8B,0x89,0xCF,0xB7,0x17,
+    0x00,0x20,0x83,0xA7,0x07,0x62,0x15,0x47,0x23,0x87,0xE7,0x00,0xC2,0x40,0x32,0x44,
+    0xA2,0x44,0x51,0x01,0x82,0x80,0xB3,0x86,0x84,0x00,0xA9,0x67,0x93,0x87,0x07,0x10,
+    0xE3,0xEF,0xD7,0xFC,0xA9,0x67,0x63,0x74,0xF4,0x00,0x63,0xEA,0xD7,0x02,0x83,0x57,
+    0xA7,0x00,0x3E,0xC0,0x03,0x57,0x67,0x00,0x3A,0xC2,0xA6,0x85,0x37,0x25,0x00,0x20,
+    0x4D,0x23,0x82,0x47,0xC2,0x07,0x12,0x47,0xBA,0x97,0x63,0x82,0xA7,0x02,0xB7,0x17,
+    0x00,0x20,0x83,0xA7,0x07,0x62,0x0D,0x47,0x23,0x87,0xE7,0x00,0x45,0xBF,0xB7,0x17,
+    0x00,0x20,0x83,0xA7,0x07,0x62,0x15,0x47,0x23,0x87,0xE7,0x00,0x45,0xB7,0xB7,0x17,
+    0x00,0x20,0x03,0xA7,0x07,0x62,0x95,0x67,0x93,0x87,0xB7,0x5B,0x23,0x16,0xF7,0x00,
+    0x37,0x26,0x00,0x20,0xA6,0x85,0x22,0x85,0xB5,0x25,0x01,0xE9,0xB7,0x17,0x00,0x20,
+    0x83,0xA7,0x07,0x62,0x23,0x87,0x07,0x00,0x95,0xBF,0xB7,0x17,0x00,0x20,0x83,0xA7,
+    0x07,0x62,0x13,0x07,0x40,0xFA,0x23,0x87,0xE7,0x00,0x8D,0xB7,0xB7,0x17,0x00,0x20,
+    0x83,0xA7,0x47,0x63,0x03,0xD5,0xC7,0x00,0x42,0x05,0x03,0xD7,0x27,0x00,0x3A,0x95,
+    0x13,0x77,0x35,0x00,0x3D,0xEF,0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,0x03,0xD4,
+    0x47,0x00,0x93,0x77,0x34,0x00,0xB1,0xE3,0xA9,0x67,0x63,0x78,0xF5,0x00,0x93,0x07,
+    0xF4,0xFF,0xAA,0x97,0x29,0x67,0x63,0xF6,0xE7,0x04,0xB7,0x24,0x00,0x20,0x13,0x86,
+    0x04,0x40,0xA2,0x85,0x5D,0x23,0xA2,0x85,0x13,0x85,0x04,0x40,0xDD,0x21,0xB7,0x17,
+    0x00,0x20,0x03,0xA7,0x07,0x62,0x23,0x11,0xA7,0x00,0x83,0xA7,0x07,0x62,0x41,0x81,
+    0x23,0x92,0xA7,0x00,0x23,0x87,0x07,0x00,0x01,0xA8,0xB7,0x17,0x00,0x20,0x83,0xA7,
+    0x07,0x62,0x15,0x47,0x23,0x87,0xE7,0x00,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,
+    0x82,0x80,0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x62,0x15,0x47,0x23,0x87,0xE7,0x00,
+    0xE5,0xB7,0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x62,0x15,0x47,0x23,0x87,0xE7,0x00,
+    0x82,0x80,0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x62,0x25,0x47,0x23,0x87,0xE7,0x00,
+    0xB7,0x17,0x00,0x20,0x83,0xA7,0x47,0x63,0x03,0xD5,0x27,0x00,0x9D,0x47,0x63,0xF3,
+    0xA7,0x00,0x82,0x80,0x51,0x11,0x06,0xC4,0x91,0x2F,0x63,0x4C,0x05,0x00,0xB7,0x17,
+    0x00,0x20,0x03,0xA7,0x07,0x62,0x23,0x11,0xA7,0x00,0x83,0xA7,0x07,0x62,0x23,0x87,
+    0x07,0x00,0xA2,0x40,0x31,0x01,0x82,0x80,0x41,0x11,0x06,0xC6,0x22,0xC4,0x26,0xC2,
+    0x2A,0x84,0xAE,0x84,0x32,0xC0,0x71,0x99,0x8D,0x05,0xA2,0x95,0xF1,0x99,0x37,0x16,
+    0x00,0x20,0x13,0x06,0x86,0x21,0x89,0x8D,0xCD,0x21,0x95,0xC0,0x0D,0x88,0xB7,0x17,
+    0x00,0x20,0x93,0x87,0x87,0x21,0x3E,0x94,0x02,0x47,0xBA,0x87,0xBA,0x94,0x03,0x47,
+    0x04,0x00,0x23,0x80,0xE7,0x00,0x05,0x04,0x85,0x07,0xE3,0x9A,0x97,0xFE,0xB2,0x40,
+    0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0x21,0x11,0x06,0xCA,0x22,0xC8,0x26,0xC6,
+    0x2A,0xC4,0x02,0xC2,0x81,0x44,0x01,0x44,0xA1,0xA8,0x82,0x47,0x93,0x85,0x37,0x00,
+    0xB7,0x17,0x00,0x20,0x13,0x86,0x87,0x21,0xF1,0x99,0x12,0x45,0x79,0x21,0xA2,0x46,
+    0xA1,0xCA,0x12,0x47,0x81,0x46,0xB7,0x17,0x00,0x20,0x13,0x86,0x87,0x21,0x92,0x47,
+    0xB3,0x07,0xF7,0x40,0xB2,0x97,0x83,0xC7,0x07,0x00,0x3E,0x94,0x42,0x04,0x41,0x80,
+    0xB3,0x87,0xE7,0x02,0xBE,0x94,0xC2,0x04,0xC1,0x80,0x85,0x06,0x05,0x07,0x82,0x47,
+    0xE3,0xEF,0xF6,0xFC,0xA2,0x47,0x82,0x46,0x95,0x8F,0x3E,0xC4,0x91,0xCB,0x3A,0xC2,
+    0x22,0x47,0x3A,0xC0,0x93,0x07,0x00,0x40,0xE3,0xF1,0xE7,0xFA,0x3E,0xC0,0x71,0xBF,
+    0x13,0x95,0x04,0x01,0x41,0x8D,0xD2,0x40,0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,
+    0x03,0x27,0x00,0x00,0xB7,0x17,0x00,0x20,0x23,0x8C,0xE7,0x20,0x93,0x56,0x87,0x00,
+    0xA3,0x8C,0xD7,0x20,0x93,0x56,0x07,0x01,0x23,0x8D,0xD7,0x20,0x93,0x56,0x87,0x01,
+    0xA3,0x8D,0xD7,0x20,0x03,0x26,0x40,0x00,0x93,0x87,0x87,0x21,0x23,0x82,0xC7,0x00,
+    0x93,0x56,0x86,0x00,0xA3,0x82,0xD7,0x00,0x93,0x56,0x06,0x01,0x23,0x83,0xD7,0x00,
+    0x93,0x56,0x86,0x01,0xA3,0x83,0xD7,0x00,0x83,0x26,0x80,0x00,0x23,0x84,0xD7,0x00,
+    0x93,0xD5,0x86,0x00,0xA3,0x84,0xB7,0x00,0x93,0xD5,0x06,0x01,0x23,0x85,0xB7,0x00,
+    0xE1,0x82,0xA3,0x85,0xD7,0x00,0x71,0x8F,0xFD,0x57,0x63,0x02,0xF7,0x08,0x41,0x11,
+    0x06,0xC6,0x22,0xC4,0x26,0xC2,0x03,0x27,0x00,0x03,0xB7,0x17,0x00,0x20,0x93,0x87,
+    0x87,0x21,0x23,0x88,0xE7,0x02,0x93,0x56,0x87,0x00,0xA3,0x88,0xD7,0x02,0x93,0x56,
+    0x07,0x01,0x23,0x89,0xD7,0x02,0x93,0x56,0x87,0x01,0xA3,0x89,0xD7,0x02,0x03,0x24,
+    0x40,0x03,0x23,0x8A,0x87,0x02,0x93,0x56,0x84,0x00,0xA3,0x8A,0xD7,0x02,0x93,0x56,
+    0x04,0x01,0x23,0x8B,0xD7,0x02,0x93,0x56,0x84,0x01,0xA3,0x8B,0xD7,0x02,0x42,0x07,
+    0x41,0x83,0x99,0x67,0x93,0x87,0x67,0x81,0x63,0x17,0xF7,0x00,0x93,0x04,0xC4,0xFF,
+    0xC1,0x67,0x63,0xE6,0xF4,0x02,0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x62,0x45,0x47,
+    0x23,0x87,0xE7,0x00,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0xB7,0x17,
+    0x00,0x20,0x83,0xA7,0x07,0x62,0x21,0x47,0x23,0x87,0xE7,0x00,0x82,0x80,0x26,0x85,
+    0xA5,0x3D,0x2A,0xC0,0x37,0x26,0x00,0x20,0x13,0x06,0x06,0x40,0xA1,0x45,0x26,0x85,
+    0x21,0x3D,0x83,0x27,0xC4,0xFF,0x02,0x47,0x63,0x0A,0xF7,0x00,0xB7,0x17,0x00,0x20,
+    0x83,0xA7,0x07,0x62,0x0D,0x47,0x23,0x87,0xE7,0x00,0x6D,0xBF,0xB7,0x17,0x00,0x20,
+    0x83,0xA7,0x07,0x62,0x23,0x87,0x07,0x00,0x75,0xB7,0x51,0x11,0x06,0xC4,0x22,0xC2,
+    0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x62,0x25,0x47,0x23,0x87,0xE7,0x00,0xC1,0x45,
+    0xB7,0x17,0x00,0x20,0x03,0xA5,0x47,0x63,0x99,0x2C,0x29,0xED,0xB7,0x17,0x00,0x20,
+    0x83,0xA7,0x47,0x63,0x83,0xC7,0xE7,0x00,0x13,0x07,0x00,0x03,0x63,0x89,0xE7,0x02,
+    0x13,0x07,0x10,0x03,0x63,0x8F,0xE7,0x00,0x13,0x07,0x30,0x03,0x63,0x8D,0xE7,0x00,
+    0x05,0x47,0x63,0x8C,0xE7,0x00,0x13,0x07,0x20,0x03,0x63,0x9C,0xE7,0x02,0x91,0x47,
+    0x01,0xA8,0x85,0x47,0x31,0xA0,0x89,0x47,0x21,0xA0,0x8D,0x47,0x11,0xA0,0x81,0x47,
+    0x13,0x97,0x37,0x00,0xB7,0x17,0x00,0x20,0x93,0x87,0x87,0xA5,0xBA,0x97,0xDC,0x43,
+    0x82,0x97,0x01,0xA8,0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x62,0x09,0x47,0x23,0x87,
+    0xE7,0x00,0x37,0x14,0x00,0x20,0x03,0x25,0x04,0x62,0xB7,0x17,0x00,0x20,0x83,0xA7,
+    0x47,0x63,0x83,0xC7,0xE7,0x00,0xA3,0x07,0xF5,0x00,0xB9,0x45,0x09,0x05,0xC1,0x2A,
+    0x83,0x27,0x04,0x62,0x33,0x05,0xA0,0x40,0x23,0x90,0xA7,0x00,0xA2,0x40,0x12,0x44,
+    0x31,0x01,0x82,0x80,0xB7,0x07,0x00,0x20,0x03,0xC7,0xF7,0x00,0x93,0x07,0x90,0x0E,
+    0x63,0x03,0xF7,0x00,0x82,0x80,0x51,0x11,0x06,0xC4,0x41,0x46,0xB7,0x05,0x00,0x20,
+    0x37,0x15,0x00,0x20,0x13,0x05,0x45,0x62,0x35,0x22,0x05,0x37,0x41,0x46,0xB7,0x15,
+    0x00,0x20,0x93,0x85,0x85,0x20,0x37,0x05,0x00,0x20,0x29,0x2A,0xA2,0x40,0x31,0x01,
+    0x82,0x80,0xB7,0x17,0x00,0x20,0x03,0xA7,0x47,0x00,0x93,0x06,0x10,0x0B,0x14,0xC3,
+    0x03,0xA7,0x47,0x00,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x83,0x26,0x00,0x00,0x93,0x07,
+    0x00,0x0B,0x1C,0xC3,0xB7,0x17,0x00,0x20,0x03,0xA7,0x47,0x00,0x5C,0x47,0x85,0x8B,
+    0xF5,0xDF,0x13,0xC7,0xF6,0xFF,0x93,0x97,0x16,0x01,0xC5,0x83,0x41,0x83,0x63,0x03,
+    0xF7,0x00,0x82,0x80,0x37,0x16,0x00,0x20,0x03,0x27,0x86,0x61,0x81,0x76,0x8D,0x06,
+    0x75,0x8F,0x8A,0x07,0xD9,0x8F,0x23,0x2C,0xF6,0x60,0x37,0x17,0x00,0x20,0x03,0x27,
+    0x07,0x00,0x5C,0xC3,0xF9,0xBF,0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,0xB7,0x17,
+    0x00,0x20,0x93,0x87,0x07,0x00,0x94,0x43,0x25,0x67,0x13,0x07,0xA7,0x25,0x98,0xCA,
+    0x37,0x47,0x06,0x02,0x15,0x07,0x98,0xC2,0x94,0x43,0xB7,0x37,0x49,0x13,0x93,0x87,
+    0x97,0xE0,0xDC,0xC2,0x37,0x17,0x04,0x00,0x41,0x17,0xD8,0xC6,0x37,0x17,0x00,0x20,
+    0x23,0x2C,0xF7,0x60,0xB7,0x17,0x00,0x20,0x03,0xA7,0x47,0x00,0x93,0x07,0x00,0x1E,
+    0x1C,0xCB,0xB7,0x47,0x49,0x00,0x93,0x87,0x07,0xE0,0x1C,0xD3,0x5C,0xD3,0xB7,0x07,
+    0x00,0x20,0x37,0x17,0x00,0x20,0x23,0x2C,0xF7,0x62,0x37,0x17,0x00,0x20,0x23,0x2E,
+    0xF7,0x60,0xB7,0x14,0x00,0x20,0x13,0x87,0x44,0x62,0xB7,0x17,0x00,0x20,0x23,0xAA,
+    0xE7,0x62,0x37,0x14,0x00,0x20,0x13,0x07,0x84,0x20,0xB7,0x17,0x00,0x20,0x23,0xA0,
+    0xE7,0x62,0x41,0x46,0x81,0x45,0x37,0x05,0x00,0x20,0x15,0x28,0x41,0x46,0x81,0x45,
+    0x13,0x85,0x44,0x62,0x2D,0x20,0x41,0x46,0x81,0x45,0x13,0x05,0x84,0x20,0x05,0x20,
+    0x55,0x3D,0xFD,0xBF,0x09,0x86,0x19,0xCA,0x0A,0x06,0x2A,0x96,0x91,0x05,0x11,0x05,
+    0x83,0xA7,0xC5,0xFF,0x23,0x2E,0xF5,0xFE,0xE3,0x1A,0xA6,0xFE,0x82,0x80,0x09,0x86,
+    0x01,0xCA,0x0A,0x06,0x2A,0x96,0x11,0x05,0x23,0x2E,0xB5,0xFE,0xE3,0x1D,0xA6,0xFE,
+    0x82,0x80,0x9D,0xC9,0x81,0x47,0x81,0x46,0x01,0x46,0x33,0x07,0xF5,0x00,0x03,0x47,
+    0x07,0x00,0x3A,0x96,0x42,0x06,0x41,0x82,0x33,0x07,0xF7,0x02,0x36,0x97,0x93,0x16,
+    0x07,0x01,0xC1,0x82,0x85,0x07,0x13,0x97,0x07,0x01,0x41,0x83,0xE3,0x6F,0xB7,0xFC,
+    0xC2,0x06,0x33,0xE5,0xC6,0x00,0x82,0x80,0xAE,0x86,0x2E,0x86,0xD5,0xBF,0x85,0x81,
+    0x95,0xC1,0xAA,0x87,0xFD,0x15,0xC2,0x05,0xC1,0x81,0x86,0x05,0x09,0x05,0x33,0x87,
+    0xA5,0x00,0x81,0x45,0x03,0xD5,0x07,0x00,0xAA,0x95,0xC2,0x05,0xC1,0x81,0x89,0x07,
+    0xE3,0x9A,0xE7,0xFE,0x2E,0x85,0x82,0x80,0x89,0x81,0x09,0x81,0x95,0xC5,0x81,0x46,
+    0x37,0x13,0x00,0x20,0xB3,0x07,0xD5,0x00,0x13,0x07,0x43,0x00,0x83,0x22,0x07,0x00,
+    0x23,0xA2,0xF2,0x00,0x23,0xA0,0xC2,0x00,0x18,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,
+    0x93,0x86,0x06,0x02,0xE3,0xE0,0xB6,0xFE,0x82,0x80,0x51,0x11,0x06,0xC4,0x13,0x06,
+    0xA0,0x09,0xA9,0x65,0x01,0x45,0xC9,0x37,0x13,0x06,0xB0,0x09,0x93,0x05,0x00,0x10,
+    0x01,0x45,0x5D,0x3F,0xA2,0x40,0x31,0x01,0x82,0x80,0xA9,0x67,0x13,0x07,0x00,0x0B,
+    0x63,0x66,0xF5,0x00,0xD9,0x77,0x3E,0x95,0x13,0x07,0x10,0x0B,0x89,0x81,0xB7,0x17,
+    0x00,0x20,0x93,0x87,0x47,0x00,0x94,0x43,0x98,0xC2,0x98,0x43,0x5C,0x47,0x85,0x8B,
+    0xF5,0xDF,0x81,0xCD,0x8A,0x05,0xAA,0x95,0xAA,0x87,0x94,0x43,0x33,0x87,0xA7,0x40,
+    0x32,0x97,0x14,0xC3,0x91,0x07,0xE3,0x9A,0xF5,0xFE,0xB7,0x17,0x00,0x20,0x93,0x87,
+    0x47,0x00,0x98,0x43,0x93,0x06,0x00,0x0B,0x14,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,
+    0xF5,0xDF,0x82,0x80,0x41,0x11,0x22,0xC6,0x26,0xC4,0x2A,0x83,0xA9,0x67,0x63,0x68,
+    0xF5,0x0C,0xD9,0x76,0xAA,0x96,0x93,0x07,0x10,0x09,0x3E,0xC2,0x93,0x07,0x10,0x0B,
+    0x3E,0xC0,0x93,0x04,0x70,0x09,0x89,0x82,0x89,0x81,0xB7,0x17,0x00,0x20,0x83,0xA7,
+    0x47,0x00,0x13,0x07,0x00,0x1E,0x98,0xCB,0x9D,0xC5,0xB2,0x82,0x33,0x84,0xB6,0x00,
+    0xB7,0x17,0x00,0x20,0x13,0x87,0x47,0x00,0x1C,0x43,0xD4,0xC3,0x83,0xA3,0x02,0x00,
+    0x23,0xA4,0x77,0x00,0x84,0xC3,0x18,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x85,0x06,
+    0x91,0x02,0xE3,0x9F,0x86,0xFC,0xB7,0x17,0x00,0x20,0x93,0x87,0x47,0x00,0x98,0x43,
+    0x93,0x06,0x00,0x1E,0x14,0xCB,0x82,0x46,0x14,0xC3,0x83,0xA2,0x07,0x00,0x83,0xA7,
+    0xC2,0x00,0x85,0x8B,0xED,0xDF,0xAD,0xC9,0x18,0x41,0x1C,0x42,0x63,0x17,0xF7,0x0A,
+    0x13,0x94,0x25,0x00,0x2A,0x94,0xAA,0x87,0x81,0x46,0x85,0x06,0x91,0x07,0x63,0x0A,
+    0xF4,0x04,0x83,0xA3,0x07,0x00,0x33,0x87,0xA7,0x40,0x32,0x97,0x18,0x43,0xE3,0x86,
+    0xE3,0xFE,0xFD,0x55,0xB7,0x17,0x00,0x20,0x93,0x87,0x47,0x00,0x98,0x43,0x93,0x06,
+    0x00,0x0B,0x14,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x85,0x05,0x13,0xB5,
+    0x15,0x00,0x33,0x05,0xA0,0x40,0x32,0x44,0xA2,0x44,0x41,0x01,0x82,0x80,0xAA,0x86,
+    0x93,0x07,0x00,0x09,0x3E,0xC2,0x93,0x07,0x00,0x0B,0x3E,0xC0,0x93,0x04,0x60,0x09,
+    0x1D,0xBF,0xFD,0x57,0x63,0x85,0xF6,0x04,0x92,0x47,0x23,0xA0,0xF2,0x00,0xB7,0x17,
+    0x00,0x20,0x03,0xA7,0x47,0x00,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0xC5,0xD5,0x18,0x41,
+    0x1C,0x42,0x63,0x18,0xF7,0x02,0x93,0x96,0x25,0x00,0xAA,0x96,0x81,0x45,0x85,0x05,
+    0x11,0x03,0xE3,0x89,0x66,0xF8,0x03,0x27,0x03,0x00,0xB3,0x07,0xA3,0x40,0xB2,0x97,
+    0x9C,0x43,0xE3,0x06,0xF7,0xFE,0xFD,0x55,0xB5,0xBF,0xFD,0x55,0xA5,0xBF,0xB6,0x85,
+    0x95,0xBF,0xFD,0x55,0x85,0xBF,0x51,0x11,0x06,0xC4,0x22,0xC2,0x93,0x77,0x45,0x00,
+    0x85,0xC7,0xB7,0x17,0x00,0x20,0x93,0x87,0x47,0x00,0x98,0x43,0x23,0x22,0x07,0x00,
+    0x93,0x06,0x30,0x09,0x14,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x31,0x3D,
+    0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0x93,0x76,0x15,0x00,0x99,0xCE,0xB7,0x17,
+    0x00,0x20,0x93,0x87,0x47,0x00,0x98,0x43,0x23,0x22,0x07,0x00,0x13,0x06,0x20,0x09,
+    0x10,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x13,0x74,0x25,0x00,0x1D,0xC4,
+    0xB7,0x17,0x00,0x20,0x93,0x87,0x47,0x00,0x98,0x43,0x23,0x22,0x07,0x00,0x13,0x06,
+    0x50,0x09,0x10,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x89,0xEA,0x13,0x06,
+    0xB0,0x09,0x93,0x05,0x00,0x10,0x01,0x45,0x41,0x3B,0x5D,0xB7,0xD5,0xD2,0x13,0x06,
+    0xA0,0x09,0xA9,0x65,0x01,0x45,0x49,0x33,0x41,0xDC,0xD5,0xB7,0x41,0x11,0x06,0xC6,
+    0x22,0xC4,0x26,0xC2,0x2A,0x84,0x02,0xC0,0xB7,0x14,0x00,0x20,0x22,0x85,0xA1,0x3F,
+    0x93,0x77,0x54,0x00,0x8D,0xC7,0x93,0x87,0x44,0x00,0x98,0x43,0x93,0x06,0x00,0x09,
+    0x14,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x83,0x27,0x00,0x00,0xA5,0xE7,
+    0x91,0x47,0xA9,0x66,0x98,0x43,0x25,0xE3,0x91,0x07,0xE3,0x9D,0xD7,0xFE,0x93,0x77,
+    0x64,0x00,0x95,0xC7,0x93,0x87,0x44,0x00,0x98,0x43,0x93,0x06,0x10,0x09,0x14,0xC3,
+    0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0x83,0x27,0x00,0x00,0x8D,0xEF,0x91,0x47,
+    0x93,0x06,0x00,0x10,0x98,0x43,0x05,0xEB,0x91,0x07,0xE3,0x9D,0xD7,0xFE,0x22,0x85,
+    0xDD,0x3D,0x02,0x45,0xB7,0x17,0x00,0x20,0x93,0x87,0x47,0x00,0x98,0x43,0x93,0x06,
+    0x00,0x0B,0x14,0xC3,0x98,0x43,0x5C,0x47,0x85,0x8B,0xF5,0xDF,0xB2,0x40,0x22,0x44,
+    0x92,0x44,0x41,0x01,0x82,0x80,0x82,0x47,0x85,0x07,0x3E,0x87,0x3E,0xC0,0x95,0x47,
+    0xE3,0x16,0xF7,0xF6,0x7D,0x55,0xF9,0xB7,0x30,0x00,0x00,0x00,0xBE,0x00,0x00,0x20,
+    0x31,0x00,0x00,0x00,0x8C,0x01,0x00,0x20,0x33,0x00,0x00,0x00,0x50,0x03,0x00,0x20,
+    0x01,0x00,0x00,0x00,0x82,0x00,0x00,0x20,0x32,0x00,0x00,0x00,0x32,0x02,0x00,0x20,
+    0x00,0x70,0x00,0x40,0x00,0x10,0x00,0x40,
+};
+#else
+static const unsigned char fw_burn_mcapshare[] = {
+};
+#endif
+
+#if (SEMI_TOUCH_APK_NODE_EN)
+static const unsigned char fw_short_mcapshare[] = {
+    0x37,0x02,0x00,0x20,0x13,0x02,0x02,0x02,0x37,0x77,0x00,0x40,0x37,0x45,0x04,0x12,
+    0x05,0x05,0x08,0xC3,0x02,0x82,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x01,0x00,0x01,0x00,0x01,0x00,0x73,0x70,0x04,0x30,0x17,0x11,0x00,0x00,0x13,0x01,
+    0xE1,0x1D,0x17,0x05,0x00,0x00,0x13,0x05,0xA5,0x3B,0x97,0x15,0x00,0x00,0x93,0x85,
+    0x65,0xFC,0x17,0x16,0x00,0x00,0x13,0x06,0x66,0xFC,0x63,0xFA,0xC5,0x00,0x83,0x22,
+    0x05,0x00,0x23,0xA0,0x55,0x00,0x11,0x05,0x91,0x05,0xE3,0xEA,0xC5,0xFE,0x17,0x15,
+    0x00,0x00,0x13,0x05,0xA5,0xFA,0x97,0x15,0x00,0x00,0x93,0x85,0x25,0x1A,0x63,0x77,
+    0xB5,0x00,0x23,0x20,0x05,0x00,0x11,0x05,0xE3,0x6D,0xB5,0xFE,0xEF,0x00,0x80,0x1B,
+    0x01,0xA0,0xB7,0x17,0x00,0x20,0x83,0xA7,0x07,0x00,0xD4,0x43,0x37,0x07,0x00,0xE1,
+    0x13,0x06,0xF7,0xFF,0xF1,0x8E,0xB7,0x05,0x00,0x04,0xCD,0x8E,0xD4,0xC3,0x98,0x47,
+    0x71,0x8F,0x4D,0x8F,0x98,0xC7,0x98,0x47,0xB7,0x16,0xE0,0xFF,0xFD,0x16,0x75,0x8F,
+    0xE1,0x66,0x55,0x8F,0x98,0xC7,0x98,0x47,0x13,0x77,0x07,0xE0,0x13,0x67,0x87,0x00,
+    0x98,0xC7,0x31,0x47,0xD8,0xD3,0x37,0x37,0x54,0x76,0x13,0x07,0x07,0x21,0x98,0xD7,
+    0x31,0x67,0x13,0x07,0x87,0xA9,0xD8,0xD7,0x85,0x46,0x23,0xA0,0xD7,0x0C,0x37,0x17,
+    0x00,0x20,0x13,0x07,0x07,0x22,0x23,0xA2,0xE7,0x0C,0x03,0xA7,0xC7,0x1E,0x13,0x67,
+    0x17,0x00,0x23,0xA6,0xE7,0x1E,0x03,0xA7,0x47,0x1F,0x11,0x66,0x13,0x06,0x06,0xF0,
+    0x51,0x8F,0x23,0xAA,0xE7,0x1E,0x03,0xA7,0x47,0x1F,0x13,0x67,0x07,0x01,0x23,0xAA,
+    0xE7,0x1E,0x03,0xA7,0x07,0x1E,0x13,0x67,0x17,0x00,0x23,0xA0,0xE7,0x1E,0x03,0xA7,
+    0x07,0x1E,0x13,0x77,0xF7,0x8F,0x23,0xA0,0xE7,0x1E,0x03,0xA7,0x47,0x1E,0x13,0x77,
+    0xF7,0xEF,0x23,0xA2,0xE7,0x1E,0x03,0xA7,0x47,0x1E,0x79,0x9B,0x23,0xA2,0xE7,0x1E,
+    0x03,0xA7,0x87,0x1E,0x13,0x67,0x07,0x10,0x23,0xA4,0xE7,0x1E,0x23,0xA0,0xD7,0x16,
+    0x82,0x80,0x2D,0x47,0xAE,0x87,0x63,0x76,0xB7,0x00,0x93,0x87,0x45,0xFF,0x93,0xF7,
+    0xF7,0x0F,0x05,0x47,0x63,0x0E,0xE5,0x04,0x86,0x05,0x86,0x07,0x37,0x17,0x00,0x20,
+    0x13,0x07,0x07,0x22,0xBA,0x97,0x83,0x96,0x07,0x00,0x37,0x17,0x00,0x20,0x83,0x27,
+    0x07,0x21,0xAE,0x97,0x23,0x90,0xD7,0x00,0x37,0x16,0x00,0x20,0x83,0x27,0xC6,0x21,
+    0xAE,0x97,0x03,0x27,0x07,0x21,0x2E,0x97,0xB7,0x16,0x00,0x20,0x83,0xA6,0x86,0x20,
+    0xAE,0x96,0x03,0x57,0x07,0x00,0x83,0xD6,0x06,0x00,0x15,0x8F,0x23,0x90,0xE7,0x00,
+    0x83,0x27,0xC6,0x21,0xBE,0x95,0x83,0x97,0x05,0x00,0x63,0xC4,0x07,0x02,0x82,0x80,
+    0x86,0x07,0x37,0x17,0x00,0x20,0x13,0x07,0x07,0x22,0xBA,0x97,0x03,0x97,0x07,0x00,
+    0xB7,0x17,0x00,0x20,0x83,0xA7,0x87,0x20,0x86,0x05,0xAE,0x97,0x23,0x90,0xE7,0x00,
+    0x82,0x80,0xB3,0x07,0xF0,0x40,0x23,0x90,0xF5,0x00,0xD1,0xBF,0x51,0x11,0x06,0xC4,
+    0xB7,0x17,0x00,0x20,0x03,0xA5,0xC7,0x21,0x83,0x56,0x05,0x00,0x93,0x07,0x25,0x00,
+    0x13,0x06,0x05,0x02,0x21,0xA0,0x89,0x07,0x63,0x8A,0xC7,0x00,0x03,0x97,0x07,0x00,
+    0xE3,0xDB,0xE6,0xFE,0x93,0x16,0x07,0x01,0xC1,0x82,0xF5,0xB7,0x93,0x05,0x00,0x02,
+    0x9D,0x22,0xB7,0x07,0x00,0x20,0x88,0xC7,0x37,0x07,0x00,0x45,0x98,0xC3,0xA2,0x40,
+    0x31,0x01,0x82,0x80,0x51,0x11,0x06,0xC4,0x22,0xC2,0x26,0xC0,0x37,0x14,0x00,0x20,
+    0x13,0x04,0x04,0x00,0x58,0x40,0xA5,0x67,0x93,0x87,0xA7,0x25,0x1C,0xCB,0xB7,0x47,
+    0x06,0x02,0x95,0x07,0x1C,0xC3,0x58,0x40,0xB7,0x37,0x49,0x13,0x93,0x87,0x97,0xE0,
+    0x5C,0xC3,0x37,0x07,0x00,0x20,0xB7,0x07,0x00,0x54,0x1C,0xC3,0xB7,0x17,0x00,0x20,
+    0x93,0x87,0xC7,0x23,0x5C,0xC3,0x37,0x17,0x00,0x20,0x23,0x2E,0xF7,0x20,0x37,0x17,
+    0x00,0x20,0xB7,0x17,0x00,0x20,0x93,0x87,0xC7,0x25,0x23,0x28,0xF7,0x20,0x37,0x17,
+    0x00,0x20,0xB7,0x17,0x00,0x20,0x93,0x87,0xC7,0x27,0x23,0x24,0xF7,0x20,0xB7,0x17,
+    0x00,0x20,0x05,0x47,0x23,0x8E,0xE7,0x2A,0xB7,0x17,0x00,0x20,0x23,0x8A,0x07,0x20,
+    0xC9,0x3B,0x18,0x40,0x83,0x27,0xC7,0x1E,0xF9,0x9B,0x23,0x26,0xF7,0x1E,0x81,0x44,
+    0x37,0x14,0x00,0x20,0x89,0xA0,0x83,0x45,0x44,0x21,0xB7,0x17,0x00,0x20,0x03,0xA7,
+    0x07,0x00,0x93,0x96,0x15,0x00,0x89,0x47,0xB3,0x97,0xD7,0x00,0x23,0x28,0xF7,0x1E,
+    0x85,0x47,0x7C,0xD3,0x3C,0x57,0xFD,0xFF,0xB7,0x17,0x00,0x20,0x03,0xC5,0xC7,0x2B,
+    0x8D,0x35,0x83,0x47,0x44,0x21,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x23,0x0A,0xF4,0x20,
+    0x41,0x47,0x63,0x84,0xE7,0x00,0xE1,0xD0,0x01,0xA0,0x23,0x0A,0x04,0x20,0xB7,0x17,
+    0x00,0x20,0x83,0xC7,0xC7,0x2B,0x85,0xC3,0xB7,0x17,0x00,0x20,0x23,0x8E,0x07,0x2A,
+    0xB7,0x17,0x00,0x20,0x03,0xA7,0x07,0x00,0x83,0x27,0xC7,0x1E,0x93,0xE7,0x17,0x00,
+    0x23,0x26,0xF7,0x1E,0xC9,0xBF,0x5D,0x3D,0xB7,0x17,0x00,0x20,0x03,0xA7,0x07,0x00,
+    0x83,0x27,0xC7,0x1E,0xF9,0x9B,0x23,0x26,0xF7,0x1E,0xB7,0x17,0x00,0x20,0x05,0x47,
+    0x23,0x8E,0xE7,0x2A,0x85,0x44,0x45,0xBF,0x09,0x86,0x19,0xCA,0x0A,0x06,0x2A,0x96,
+    0x91,0x05,0x11,0x05,0x83,0xA7,0xC5,0xFF,0x23,0x2E,0xF5,0xFE,0xE3,0x1A,0xA6,0xFE,
+    0x82,0x80,0x09,0x86,0x01,0xCA,0x0A,0x06,0x2A,0x96,0x11,0x05,0x23,0x2E,0xB5,0xFE,
+    0xE3,0x1D,0xA6,0xFE,0x82,0x80,0x9D,0xC9,0x81,0x47,0x81,0x46,0x01,0x46,0x33,0x07,
+    0xF5,0x00,0x03,0x47,0x07,0x00,0x3A,0x96,0x42,0x06,0x41,0x82,0x33,0x07,0xF7,0x02,
+    0x36,0x97,0x93,0x16,0x07,0x01,0xC1,0x82,0x85,0x07,0x13,0x97,0x07,0x01,0x41,0x83,
+    0xE3,0x6F,0xB7,0xFC,0xC2,0x06,0x33,0xE5,0xC6,0x00,0x82,0x80,0xAE,0x86,0x2E,0x86,
+    0xD5,0xBF,0x85,0x81,0x95,0xC1,0xAA,0x87,0xFD,0x15,0xC2,0x05,0xC1,0x81,0x86,0x05,
+    0x09,0x05,0x33,0x87,0xA5,0x00,0x81,0x45,0x03,0xD5,0x07,0x00,0xAA,0x95,0xC2,0x05,
+    0xC1,0x81,0x89,0x07,0xE3,0x9A,0xE7,0xFE,0x2E,0x85,0x82,0x80,0x00,0x20,0x00,0x40,
+    0x00,0x70,0x00,0x40,
+};
+#else
+static const unsigned char fw_short_mcapshare[] = {
+
+};
+#endif
+
+#endif //TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5472)
diff --git a/drivers/input/touchscreen/chsc5xxx/fw_update_packet.h b/drivers/input/touchscreen/chsc5xxx/fw_update_packet.h
new file mode 100644
index 000000000000..ec0b5f7328d0
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/fw_update_packet.h
@@ -0,0 +1,5122 @@
+static const unsigned char upd_data[] = {
+0x43,0x48,0x53,0x43,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
+0x00,0x02,0x00,0x00,0x4C,0x3D,0x01,0x00,0x02,0x1E,0x00,0x29,0x01,0x02,0x1E,0x00,
+0x29,0x00,0xD0,0x02,0x00,0x05,0xF0,0x00,0xB4,0x00,0x05,0xEC,0xBF,0xC5,0x23,0x23,
+0x23,0x23,0x00,0x00,0x22,0x0D,0x18,0x0D,0x18,0x00,0x0C,0x28,0x20,0x03,0x06,0x14,
+0x20,0x32,0x32,0x04,0x04,0x03,0x1A,0x14,0x8C,0x00,0x6E,0x00,0x8C,0x00,0x6E,0x00,
+0x20,0x23,0x1E,0x00,0x00,0x03,0x00,0x64,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,
+0x14,0x14,0x14,0x14,0xD0,0x07,0x19,0x64,0x32,0x78,0x0A,0xFE,0xA2,0x40,0x00,0x48,
+0x28,0x0A,0x64,0x00,0xC8,0x00,0x2C,0x01,0x90,0x01,0xF4,0x01,0xDC,0x00,0xB4,0x00,
+0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0xDC,0x00,0xB4,0x00,0x1C,0x1E,0x22,0x43,
+0x04,0x02,0x1C,0x1E,0x80,0x00,0x64,0x00,0xDC,0x05,0x28,0x00,0xF4,0x01,0xAA,0xAA,
+0xF0,0x00,0xB4,0x00,0x8C,0x00,0x6E,0x00,0x8C,0x00,0x6E,0x00,0x0C,0x0B,0x0A,0x09,
+0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,
+0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x23,0x22,0x21,0x20,
+0x1F,0x1E,0x1D,0x1C,0x1B,0x1A,0x19,0x18,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
+0x0A,0x10,0x11,0x12,0x1B,0x1A,0x19,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,
+0x24,0x25,0x26,0x27,0x22,0x23,0x24,0x25,0x26,0x27,0x1A,0x1B,0x32,0x32,0x32,0x99,
+0x99,0x99,0x99,0x23,0x24,0x25,0x26,0x27,0x01,0xFE,0x2E,0x85,0x82,0x80,0x37,0x47,
+0x00,0x20,0x83,0x26,0x07,0x21,0xFD,0x77,0x93,0x87,0xE8,0xBC,0x14,0x28,0x04,0x33,
+0x14,0x28,0x33,0x04,0x06,0x18,0x28,0x04,0x33,0x18,0x28,0x43,0x04,0x06,0x55,0x00,
+0x44,0x00,0x6C,0x00,0x56,0x00,0x58,0x00,0x46,0x00,0x55,0x00,0x44,0x00,0x72,0x00,
+0x5B,0x00,0x49,0x00,0x3A,0x00,0x58,0x00,0x46,0x00,0x72,0x00,0x5B,0x00,0x9C,0xFF,
+0x96,0x00,0x32,0x00,0x64,0x00,0xD6,0xFF,0x2A,0x00,0x1C,0x00,0x2A,0x00,0xC7,0xFF,
+0x39,0x00,0x26,0x00,0x39,0x00,0x05,0x46,0x46,0x23,0x23,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x55,0x55,0x22,0x35,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x73,0x70,0x04,0x30,
+0x97,0x02,0x00,0x20,0x93,0x82,0xC2,0x57,0x93,0xE2,0x32,0x00,0x73,0x90,0x52,0x30,
+0x97,0x02,0x00,0x20,0x93,0x82,0xC2,0x46,0x73,0x90,0x72,0x30,0x05,0xA0,0x01,0x00,
+0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x72,0x54,0x12,0x88,
+0x4C,0x3D,0x01,0x00,0x38,0xED,0x00,0x00,0x01,0x00,0x65,0x80,0x85,0x42,0x37,0xF3,
+0x00,0xE0,0x13,0x03,0x43,0x00,0x23,0x20,0x53,0x00,0x93,0x02,0x10,0x02,0x37,0xF3,
+0x00,0xE0,0x13,0x03,0x83,0x00,0x23,0x20,0x53,0x00,0x8D,0x42,0x37,0xF3,0x00,0xE0,
+0x23,0x20,0x53,0x00,0x17,0x51,0x00,0x20,0x13,0x01,0x01,0x30,0x17,0xF5,0x00,0x00,
+0x13,0x05,0x05,0xF0,0x97,0x05,0x00,0x20,0x93,0x85,0x85,0x28,0x17,0x56,0x00,0x20,
+0x13,0x06,0x86,0x05,0x63,0xFA,0xC5,0x00,0x83,0x22,0x05,0x00,0x23,0xA0,0x55,0x00,
+0x11,0x05,0x91,0x05,0xE3,0xEA,0xC5,0xFE,0x17,0x55,0x00,0x20,0x13,0x05,0xC5,0x03,
+0x97,0x05,0x01,0x20,0x93,0x85,0xC5,0xAD,0x63,0x77,0xB5,0x00,0x23,0x20,0x05,0x00,
+0x11,0x05,0xE3,0x6D,0xB5,0xFE,0x17,0x55,0x00,0x20,0x13,0x05,0xE5,0x0A,0x97,0x55,
+0x00,0x20,0x93,0x85,0x65,0x2E,0x37,0x06,0xAE,0xDE,0x13,0x06,0xE6,0xAC,0x10,0xC1,
+0x11,0x05,0xE3,0x6E,0xB5,0xFE,0xEF,0x80,0xA0,0x05,0x01,0xA0,0x73,0x70,0x04,0x30,
+0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x05,0x67,0x3E,0x97,0x91,0x46,0x23,0x00,
+0xD7,0xB0,0xB7,0x05,0x00,0x20,0x37,0x57,0x00,0x20,0x13,0x07,0x87,0x0D,0x01,0x46,
+0x05,0x65,0xFD,0x42,0x93,0x85,0x05,0x58,0x13,0x03,0x40,0x02,0xB3,0x86,0xC7,0x00,
+0x23,0x80,0x06,0x40,0x23,0x80,0x06,0x00,0xAA,0x96,0x23,0x80,0x56,0x80,0x0C,0xC3,
+0x05,0x06,0x11,0x07,0xE3,0x14,0x66,0xFE,0xAA,0x97,0x7D,0x57,0x23,0x88,0xE7,0x80,
+0x82,0x80,0x93,0x07,0x30,0x02,0x63,0xEA,0xA7,0x00,0x93,0x17,0x25,0x00,0x37,0x55,
+0x00,0x20,0x13,0x05,0x85,0x0D,0x3E,0x95,0x0C,0xC1,0x82,0x80,0x93,0x07,0x30,0x02,
+0x63,0xED,0xA7,0x00,0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x3E,0x95,0x83,0x47,
+0x05,0x40,0x93,0xE7,0x17,0x00,0x23,0x00,0xF5,0x40,0x82,0x80,0x93,0x07,0x30,0x02,
+0x63,0xED,0xA7,0x00,0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x3E,0x95,0x83,0x47,
+0x05,0x40,0x93,0xF7,0xE7,0x0F,0x23,0x00,0xF5,0x40,0x82,0x80,0x51,0x11,0x22,0xC2,
+0x26,0xC0,0x06,0xC4,0xAA,0x84,0x01,0x44,0x63,0x17,0x94,0x00,0xA2,0x40,0x12,0x44,
+0x82,0x44,0x31,0x01,0x82,0x80,0x13,0x05,0x80,0x3E,0x97,0x00,0x00,0x20,0xE7,0x80,
+0x60,0x18,0x05,0x04,0xD5,0xB7,0x2A,0x96,0x63,0x13,0xC5,0x00,0x82,0x80,0x05,0x05,
+0xA3,0x0F,0xB5,0xFE,0xD5,0xBF,0x79,0x9A,0x2A,0x96,0x63,0x13,0xC5,0x00,0x82,0x80,
+0x09,0x05,0x23,0x1F,0xB5,0xFE,0xD5,0xBF,0x71,0x9A,0x2A,0x96,0x63,0x13,0xC5,0x00,
+0x82,0x80,0x11,0x05,0x23,0x2E,0xB5,0xFE,0xD5,0xBF,0x93,0x17,0x05,0x01,0xC1,0x83,
+0x63,0x56,0x05,0x00,0xB3,0x07,0xF0,0x40,0xC2,0x07,0xC1,0x83,0x3E,0x85,0x82,0x80,
+0xB7,0xE7,0x00,0xE0,0x93,0x87,0x07,0x10,0x3E,0x95,0x83,0x47,0x05,0x40,0x93,0xE7,
+0x17,0x00,0x23,0x00,0xF5,0x40,0x82,0x80,0x93,0x77,0xC5,0xFF,0x13,0x87,0x07,0x0C,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x87,0xFE,0x71,0x11,0x13,0x45,0xF5,0xFF,0xBA,0x97,
+0x98,0x43,0x0D,0x89,0x3A,0xC0,0x58,0x00,0x3A,0x95,0x23,0x0E,0xB5,0xFE,0x02,0x47,
+0x98,0xC3,0x11,0x01,0x82,0x80,0xB7,0xB7,0x00,0x20,0x83,0xA7,0x87,0x2C,0x37,0xF6,
+0x00,0x20,0x93,0x06,0x86,0x68,0x03,0xD7,0x07,0x00,0x13,0x06,0x86,0x68,0xC1,0x42,
+0x79,0x9B,0x23,0x90,0xE7,0x00,0x03,0xD7,0x27,0x00,0x13,0x67,0x17,0x00,0x23,0x91,
+0xE7,0x00,0x03,0xD7,0x47,0x00,0x79,0x9B,0x23,0x92,0xE7,0x00,0x03,0xD7,0x67,0x00,
+0x13,0x67,0x17,0x00,0x23,0x93,0xE7,0x00,0x83,0xC5,0x66,0x03,0x03,0xD7,0x87,0x00,
+0x85,0x89,0x79,0x9B,0x4D,0x8F,0x23,0x94,0xE7,0x00,0x03,0xD7,0xA7,0x00,0x93,0x85,
+0x07,0x01,0x79,0x9B,0x23,0x95,0xE7,0x00,0x03,0xD7,0xC7,0x00,0x79,0x9B,0x23,0x96,
+0xE7,0x00,0x03,0xD7,0xE7,0x00,0x79,0x9B,0x23,0x97,0xE7,0x00,0x83,0xC6,0x66,0x03,
+0x37,0xF7,0x00,0x20,0x13,0x05,0x87,0x6D,0x85,0x8A,0xA1,0x06,0x8A,0x06,0xAA,0x96,
+0x83,0xA3,0x86,0x00,0x01,0x45,0x93,0x06,0x87,0x6D,0x03,0xD7,0x05,0x00,0x33,0xD3,
+0xA3,0x00,0x13,0x73,0x13,0x00,0x79,0x9B,0x33,0x67,0x67,0x00,0x23,0x90,0xE5,0x00,
+0x05,0x05,0x89,0x05,0xE3,0x13,0x55,0xFE,0x03,0x47,0x66,0x03,0x93,0x87,0x07,0x03,
+0xC1,0x45,0x05,0x07,0x05,0x8B,0x21,0x07,0x0A,0x07,0x36,0x97,0x08,0x47,0x81,0x46,
+0x03,0xD7,0x07,0x00,0x33,0x56,0xD5,0x00,0x05,0x8A,0x79,0x9B,0x51,0x8F,0x23,0x90,
+0xE7,0x00,0x85,0x06,0x89,0x07,0xE3,0x95,0xB6,0xFE,0x82,0x80,0x61,0x11,0xB7,0xB7,
+0x00,0x20,0x37,0xF7,0x00,0x20,0x22,0xC2,0x26,0xC0,0x83,0xA2,0x87,0x2C,0x93,0x07,
+0xC7,0x2D,0x83,0xC6,0x37,0x01,0x03,0xC3,0x27,0x01,0x85,0x89,0x05,0x89,0x33,0x03,
+0xD3,0x02,0x81,0x47,0x81,0x46,0x13,0x07,0xC7,0x2D,0x13,0x96,0x07,0x01,0x41,0x82,
+0x63,0x6B,0x66,0x08,0x86,0x05,0x33,0x86,0xA5,0x00,0xB7,0xF7,0x00,0x20,0xB3,0xC6,
+0x66,0x02,0x03,0x43,0x27,0x01,0x13,0x06,0x06,0x02,0x93,0x83,0x87,0x6D,0x06,0x06,
+0x1E,0x96,0x13,0x73,0xF3,0x0F,0x83,0x53,0x87,0x01,0x93,0x14,0x03,0x01,0xC1,0x80,
+0x01,0x44,0x93,0x87,0x87,0x6D,0x23,0x13,0xD6,0x00,0x01,0x46,0x93,0x16,0x04,0x01,
+0xC1,0x82,0x63,0xE2,0x96,0x06,0x33,0x46,0x66,0x02,0xB3,0x86,0xA5,0x00,0x93,0x86,
+0x06,0x02,0x86,0x06,0xBE,0x96,0x01,0x43,0x23,0x97,0xC6,0x00,0x83,0x46,0x27,0x01,
+0x03,0x47,0x37,0x01,0xB6,0x93,0x13,0x76,0xF7,0x0F,0x13,0x14,0x06,0x01,0x41,0x80,
+0x01,0x47,0x93,0x16,0x03,0x01,0xC1,0x82,0x63,0xE0,0x86,0x04,0x33,0x47,0xC7,0x02,
+0xAA,0x95,0x93,0x85,0x85,0x02,0x12,0x44,0x86,0x05,0xBE,0x95,0x82,0x44,0x23,0x93,
+0xE5,0x00,0x21,0x01,0x82,0x80,0x13,0x96,0x17,0x00,0x16,0x96,0x03,0x16,0x06,0x00,
+0x85,0x07,0xB2,0x96,0x99,0xBF,0xB3,0x86,0x83,0x00,0x86,0x06,0x96,0x96,0x83,0x96,
+0x06,0x00,0x05,0x04,0x36,0x96,0x59,0xB7,0xB3,0x86,0x63,0x00,0x86,0x06,0x96,0x96,
+0x83,0x96,0x06,0x00,0x05,0x03,0x36,0x97,0x6D,0xB7,0x37,0xF7,0x00,0x20,0x71,0x11,
+0x93,0x07,0xC7,0x2D,0x22,0xC0,0x83,0xC2,0x37,0x01,0xB7,0x57,0x00,0x20,0x03,0xA6,
+0x07,0x01,0x81,0x46,0x13,0x03,0xC7,0x2D,0xB2,0x92,0xB2,0x85,0x63,0x93,0x55,0x02,
+0x93,0x97,0x16,0x00,0x93,0xF7,0xF7,0x0F,0x13,0x05,0xC7,0x2D,0xA3,0x0E,0xD3,0x00,
+0xA3,0x0B,0xF3,0x00,0x13,0x07,0xC7,0x2D,0x63,0x1E,0xB6,0x02,0x02,0x44,0x11,0x01,
+0x82,0x80,0x03,0xC5,0x05,0x0B,0x9A,0x83,0x81,0x47,0x05,0x81,0x63,0x9B,0xD7,0x00,
+0x93,0x87,0x16,0x00,0x9A,0x96,0x23,0x87,0xA6,0x02,0x93,0xF6,0xF7,0x0F,0x85,0x05,
+0x75,0xBF,0x85,0x03,0x03,0xC4,0xD3,0x02,0xE3,0x0B,0xA4,0xFE,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0xE9,0xBF,0x03,0x43,0x06,0x0B,0xAA,0x82,0x81,0x47,0x93,0x53,0x13,0x00,
+0x63,0x81,0xD7,0x02,0x85,0x02,0x03,0xC4,0xD2,0x02,0x63,0x1F,0x74,0x00,0x86,0x07,
+0x13,0x73,0x13,0x00,0x93,0xF7,0xF7,0x0F,0x63,0x03,0x03,0x00,0x85,0x07,0x23,0x01,
+0xF7,0x06,0x05,0x07,0x05,0x06,0x49,0xBF,0x85,0x07,0x93,0xF7,0xF7,0x0F,0xC9,0xBF,
+0x37,0xF7,0x00,0x20,0x71,0x11,0x93,0x07,0xC7,0x2D,0x22,0xC0,0x83,0xC2,0x27,0x01,
+0xB7,0x57,0x00,0x20,0x03,0xA6,0x07,0x01,0x81,0x46,0x13,0x03,0xC7,0x2D,0xB2,0x92,
+0xB2,0x85,0x63,0x93,0x55,0x02,0x93,0x97,0x16,0x00,0x93,0xF7,0xF7,0x0F,0x13,0x05,
+0xC7,0x2D,0x23,0x0E,0xD3,0x00,0x23,0x0B,0xF3,0x00,0x13,0x07,0xC7,0x2D,0x63,0x1E,
+0xB6,0x02,0x02,0x44,0x11,0x01,0x82,0x80,0x03,0xC5,0x05,0x09,0x9A,0x83,0x81,0x47,
+0x05,0x81,0x63,0x9B,0xD7,0x00,0x93,0x87,0x16,0x00,0x9A,0x96,0x23,0x8F,0xA6,0x00,
+0x93,0xF6,0xF7,0x0F,0x85,0x05,0x75,0xBF,0x85,0x03,0x03,0xC4,0xD3,0x01,0xE3,0x0B,
+0xA4,0xFE,0x85,0x07,0x93,0xF7,0xF7,0x0F,0xE9,0xBF,0x03,0x43,0x06,0x09,0xAA,0x82,
+0x81,0x47,0x93,0x53,0x13,0x00,0x63,0x81,0xD7,0x02,0x85,0x02,0x03,0xC4,0xD2,0x01,
+0x63,0x1F,0x74,0x00,0x86,0x07,0x13,0x73,0x13,0x00,0x93,0xF7,0xF7,0x0F,0x63,0x03,
+0x03,0x00,0x85,0x07,0x23,0x01,0xF7,0x04,0x05,0x07,0x05,0x06,0x49,0xBF,0x85,0x07,
+0x93,0xF7,0xF7,0x0F,0xC9,0xBF,0x51,0x11,0x22,0xC2,0x2A,0x84,0x0D,0x45,0x06,0xC4,
+0x97,0x00,0x00,0x20,0xE7,0x80,0xC0,0x42,0x37,0xF6,0x00,0x20,0x93,0x06,0xC6,0x2D,
+0x03,0xC7,0xF6,0x00,0xB7,0x57,0x00,0x20,0x83,0xA7,0x87,0xFE,0xC1,0x65,0x62,0x07,
+0x4D,0x8F,0x23,0xA6,0xE7,0x08,0x03,0xA7,0x47,0x08,0x83,0xC5,0x76,0x00,0x79,0x75,
+0x3D,0x05,0x69,0x8F,0x92,0x05,0x4D,0x8F,0x23,0xA2,0xE7,0x08,0x03,0xA7,0x47,0x08,
+0x83,0xC5,0x46,0x00,0x37,0x05,0x00,0xF1,0x7D,0x15,0x69,0x8F,0xE2,0x05,0x4D,0x8F,
+0x23,0xA2,0xE7,0x08,0x03,0xA7,0x07,0x09,0x03,0x46,0xC6,0x2D,0x0D,0x88,0x12,0x07,
+0x72,0x06,0x11,0x83,0x51,0x8F,0x23,0xA8,0xE7,0x08,0x03,0xA7,0x87,0x08,0x83,0xC6,
+0x96,0x00,0x37,0x06,0x10,0xE0,0x7D,0x16,0xD2,0x06,0x71,0x8F,0x55,0x8F,0x23,0xA4,
+0xE7,0x08,0x13,0x07,0x80,0x02,0x33,0x07,0xE4,0x02,0xB7,0x76,0x00,0x20,0x93,0x86,
+0x46,0xBA,0x06,0x07,0x36,0x97,0x23,0xA4,0xE7,0x10,0x23,0xA4,0x07,0x0E,0x23,0xA6,
+0x07,0x0E,0x37,0xF7,0x00,0x20,0x23,0xA8,0x07,0x0E,0x13,0x07,0x87,0x6D,0x83,0x46,
+0x37,0x03,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x67,0x36,0x97,0x03,0x47,0x47,0x00,
+0x13,0x77,0xF7,0x0F,0x79,0xC3,0x03,0xA7,0xC7,0x0F,0xFD,0x76,0xFD,0x16,0x75,0x8F,
+0x23,0xAE,0xE7,0x0E,0x03,0xA7,0x87,0x0F,0xB7,0x06,0x00,0xF0,0xFD,0x16,0x13,0x67,
+0x17,0x00,0x23,0xAC,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0x62,0x04,0xA2,0x40,0x75,0x8F,
+0x23,0xAE,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0xB7,0x06,0x00,0xFD,0xFD,0x16,0x75,0x8F,
+0x59,0x8C,0x23,0xAE,0x87,0x0E,0x03,0xA7,0xC7,0x0F,0xB7,0x06,0x10,0x00,0x12,0x44,
+0x55,0x8F,0x23,0xAE,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0xC1,0x76,0xFD,0x16,0x13,0x67,
+0x07,0x01,0x23,0xAE,0xE7,0x0E,0x03,0xA7,0x07,0x10,0x75,0x8F,0x23,0xA0,0xE7,0x10,
+0x83,0xA6,0x87,0x0F,0x7D,0x77,0x7D,0x17,0xF9,0x8E,0x23,0xAC,0xD7,0x0E,0x83,0xA6,
+0xC7,0x0F,0x93,0xF6,0xF6,0xEF,0x23,0xAE,0xD7,0x0E,0x83,0xA6,0x47,0x0F,0x93,0xF6,
+0xF6,0xEF,0x23,0xAA,0xD7,0x0E,0x83,0xA6,0x07,0x10,0x75,0x8F,0x23,0xA0,0xE7,0x10,
+0x03,0xA7,0x07,0x09,0xB7,0x06,0x00,0x01,0x55,0x8F,0x23,0xA8,0xE7,0x08,0x03,0xA7,
+0x87,0x08,0x85,0x66,0x55,0x8F,0x23,0xA4,0xE7,0x08,0x03,0xA7,0x87,0x08,0xC1,0x66,
+0x55,0x8F,0x23,0xA4,0xE7,0x08,0x31,0x01,0x82,0x80,0x03,0xA7,0xC7,0x0F,0x85,0x66,
+0x55,0x8F,0x3D,0xBF,0x31,0x11,0x26,0xC4,0xB7,0x54,0x00,0x20,0x83,0xA7,0x84,0xFE,
+0x22,0xC6,0x06,0xC8,0x7D,0x57,0x23,0xA0,0xE7,0x12,0xC5,0x66,0x23,0xA0,0x07,0x12,
+0x93,0x86,0x16,0x11,0x23,0xA2,0xD7,0x12,0x13,0x05,0x80,0x3E,0x97,0x00,0x00,0x20,
+0xE7,0x80,0x40,0xBD,0x37,0x54,0x00,0x20,0x83,0x27,0x04,0x01,0x13,0x87,0x84,0xFE,
+0x14,0x43,0x83,0xC7,0x47,0x15,0x93,0xF7,0x07,0x04,0x63,0x8D,0x07,0x20,0x85,0x47,
+0x10,0x43,0x23,0xA4,0xF6,0x12,0x85,0x66,0x93,0x07,0x80,0x3E,0x93,0x86,0x16,0x11,
+0x93,0x05,0x10,0x11,0xFD,0x17,0x63,0x91,0x07,0x20,0x13,0x05,0x80,0x0C,0x97,0x00,
+0x00,0x20,0xE7,0x80,0x20,0xB9,0xB7,0x54,0x00,0x20,0x13,0x87,0x84,0xFE,0x14,0x43,
+0x85,0x67,0x13,0x86,0x17,0x11,0x23,0xA2,0xC6,0x12,0x93,0x87,0x17,0x10,0x23,0xA2,
+0xF6,0x12,0x13,0x05,0x80,0x0C,0x97,0x00,0x00,0x20,0xE7,0x80,0xA0,0xB6,0x83,0x27,
+0x04,0x01,0x13,0x87,0x84,0xFE,0x14,0x43,0x83,0xC7,0x47,0x15,0x93,0xF7,0x07,0x04,
+0x63,0x81,0x07,0x1C,0x93,0x07,0x10,0x04,0x23,0xA4,0xF6,0x12,0x14,0x43,0x85,0x67,
+0x93,0x87,0x17,0x10,0x23,0xA2,0xF6,0x12,0x13,0x05,0x80,0x0C,0x97,0x00,0x00,0x20,
+0xE7,0x80,0x40,0xB3,0xB7,0x57,0x00,0x20,0x13,0x87,0x87,0xFE,0x08,0x43,0xB7,0x06,
+0x00,0xF0,0xFD,0x16,0x83,0x27,0xC5,0x10,0x03,0x26,0x04,0x01,0xF5,0x8F,0xB7,0xF6,
+0x00,0x20,0x23,0x26,0xF5,0x10,0x93,0x87,0xC6,0x2D,0x83,0xC7,0xE7,0x08,0x93,0x84,
+0xC6,0x2D,0x93,0xF7,0xF7,0x0F,0x63,0x89,0x07,0x16,0x83,0x47,0xF6,0x14,0x99,0xE3,
+0x83,0x47,0x96,0x01,0x3D,0x66,0xA3,0x88,0xF4,0x00,0x11,0x43,0x93,0x05,0x86,0xAE,
+0x63,0x6F,0xF3,0x14,0xA3,0x03,0x61,0x00,0x03,0x46,0x71,0x00,0x0A,0x06,0x97,0x00,
+0x00,0x20,0xE7,0x80,0x00,0xB2,0xD1,0x36,0xA5,0x39,0xB7,0x57,0x00,0x20,0x13,0x87,
+0x87,0xFE,0x1C,0x43,0x37,0x06,0x00,0xD0,0x7D,0x16,0x03,0xA7,0x47,0x0F,0xB7,0xF6,
+0x00,0x20,0x71,0x8F,0x37,0x06,0x00,0x20,0x51,0x8F,0x23,0xAA,0xE7,0x0E,0x03,0xA7,
+0x47,0x0F,0x37,0x06,0x00,0xFD,0x7D,0x16,0x71,0x8F,0x37,0x06,0x00,0x01,0x51,0x8F,
+0x23,0xAA,0xE7,0x0E,0x03,0xA7,0x47,0x0F,0x7D,0x76,0x13,0x06,0xF6,0x0E,0x71,0x8F,
+0x13,0x67,0x07,0x01,0x23,0xAA,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0x05,0x66,0x3D,0x9B,
+0x23,0xAE,0xE7,0x0E,0x03,0xA7,0x87,0x0F,0x51,0x8F,0x23,0xAC,0xE7,0x0E,0x23,0xA2,
+0x07,0x0E,0x37,0x57,0x00,0x20,0x23,0xA4,0x07,0x0E,0x03,0x27,0x47,0x00,0x23,0xA6,
+0x07,0x0E,0x23,0xA8,0x07,0x0E,0x23,0xA2,0xE7,0x10,0x37,0x57,0x00,0x20,0x03,0x27,
+0x87,0x00,0x23,0xA4,0xE7,0x10,0x03,0x47,0x71,0x00,0x13,0x77,0xF7,0x0F,0x23,0xA0,
+0xE7,0x0E,0x03,0xC5,0x44,0x00,0x03,0xC7,0x74,0x00,0x83,0xC5,0x54,0x00,0x03,0xC6,
+0x24,0x00,0x12,0x07,0xC2,0x05,0x4D,0x8F,0x49,0x8F,0x62,0x06,0x51,0x8F,0x23,0xA2,
+0xE7,0x08,0x03,0xC7,0x94,0x00,0x03,0xC6,0x64,0x00,0x09,0x45,0x52,0x07,0x12,0x06,
+0x51,0x8F,0x23,0xA4,0xE7,0x08,0x03,0xC7,0x04,0x01,0x03,0xC6,0xF4,0x00,0x42,0x07,
+0x62,0x06,0x51,0x8F,0x23,0xA6,0xE7,0x08,0x03,0xC7,0xC6,0x2D,0x83,0xC6,0x74,0x01,
+0x03,0xC6,0x64,0x01,0x72,0x07,0xB2,0x06,0x55,0x8F,0x51,0x8F,0x23,0xA8,0xE7,0x08,
+0x97,0x00,0x00,0x20,0xE7,0x80,0xC0,0x06,0x81,0x47,0x03,0xC7,0x24,0x01,0x93,0x96,
+0x07,0x01,0xC1,0x82,0x63,0xEB,0xE6,0x08,0xB7,0x15,0x00,0x20,0x55,0x45,0x93,0x85,
+0xA5,0x0A,0xEF,0xF0,0x0F,0xFB,0x32,0x44,0xC2,0x40,0xA2,0x44,0x55,0x45,0x51,0x01,
+0x6F,0xF0,0xCF,0xFB,0x8D,0x47,0xED,0xB3,0x23,0x22,0xD6,0x12,0x23,0x22,0xB6,0x12,
+0xD5,0xBB,0x93,0x07,0x30,0x04,0x89,0xB5,0x83,0x47,0xD6,0x01,0x49,0xBD,0x21,0x46,
+0x63,0x66,0xF6,0x00,0xA3,0x03,0xC1,0x00,0xC1,0x05,0x79,0xBD,0x31,0x46,0x63,0x67,
+0xF6,0x00,0xA3,0x03,0xC1,0x00,0x93,0x85,0x05,0x03,0x79,0xB5,0x41,0x46,0x63,0x67,
+0xF6,0x00,0xA3,0x03,0xC1,0x00,0x93,0x85,0x05,0x06,0xBD,0xBD,0x51,0x46,0x63,0x67,
+0xF6,0x00,0xA3,0x03,0xC1,0x00,0x93,0x85,0x05,0x0A,0xBD,0xB5,0x61,0x46,0x63,0x67,
+0xF6,0x00,0xA3,0x03,0xC1,0x00,0x93,0x85,0x05,0x0F,0xB9,0xBD,0x93,0x07,0x00,0x02,
+0xA3,0x03,0xF1,0x00,0x93,0x85,0x05,0x15,0x81,0xBD,0x03,0x27,0x04,0x01,0xBE,0x85,
+0x3E,0xC0,0x3E,0x97,0x03,0x45,0x07,0x09,0x01,0x30,0x82,0x47,0x85,0x07,0xB1,0xB7,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0xC7,0xFE,0x51,0x11,0x37,0x67,0x5C,0x5C,0x06,0xC4,
+0x13,0x07,0xC7,0xC5,0x98,0xC3,0x37,0x07,0x00,0x20,0xD8,0xC3,0x98,0xC7,0x93,0x06,
+0x00,0x02,0xD4,0xC7,0x98,0xCB,0x93,0x06,0xD7,0x07,0xD4,0xCB,0x98,0xCF,0xD4,0xCF,
+0x13,0x07,0x20,0x43,0x98,0xD3,0x37,0x47,0x49,0x00,0x13,0x07,0x07,0xE0,0xB7,0x15,
+0x00,0x20,0x41,0x45,0xD8,0xD3,0x93,0x85,0xE5,0x3C,0xEF,0xF0,0x8F,0xEC,0xA2,0x40,
+0x41,0x45,0x31,0x01,0x6F,0xF0,0x8F,0xED,0x01,0x11,0x26,0xCA,0xB7,0x54,0x00,0x20,
+0x03,0xA5,0x84,0x02,0x06,0xCE,0x22,0xCC,0x03,0x47,0xF5,0x00,0x93,0x07,0x90,0x0E,
+0x63,0x1C,0xF7,0x00,0xC1,0x45,0x97,0x00,0x00,0x20,0xE7,0x80,0x00,0x91,0x11,0xC9,
+0x83,0xA7,0x84,0x02,0xA3,0x87,0x07,0x00,0xF2,0x40,0x62,0x44,0xD2,0x44,0x05,0x61,
+0x82,0x80,0x83,0xA7,0x84,0x02,0x23,0x09,0x01,0x00,0x23,0x13,0x01,0x00,0x03,0xC7,
+0xE7,0x00,0x23,0x14,0x01,0x00,0x91,0x46,0xA3,0x09,0xE1,0x00,0x7D,0x17,0x13,0x77,
+0xF7,0x0F,0x26,0x84,0x63,0xE3,0xE6,0x02,0xBD,0x66,0x0A,0x07,0x93,0x86,0x86,0xCB,
+0x36,0x97,0x18,0x43,0x02,0x87,0xFD,0x77,0x93,0x87,0x27,0x90,0x23,0x13,0xF1,0x00,
+0x85,0x67,0x93,0x87,0xD7,0x6F,0x23,0x14,0xF1,0x00,0xB9,0x45,0x13,0x05,0x61,0x00,
+0x97,0x00,0x00,0x20,0xE7,0x80,0x60,0x8A,0x83,0x27,0x84,0x02,0x33,0x05,0xA0,0x40,
+0x23,0x12,0xA1,0x00,0xA3,0x87,0x07,0x00,0x23,0x90,0x07,0x00,0xB7,0x57,0x00,0x20,
+0x03,0xA5,0x47,0x02,0x41,0x46,0x4C,0x00,0x97,0x00,0x00,0x20,0xE7,0x80,0x80,0x83,
+0xA5,0xBF,0x83,0xD6,0x47,0x00,0x1D,0x67,0x13,0x07,0x57,0x26,0xB7,0xF4,0x00,0x20,
+0x63,0x91,0xE6,0x04,0x83,0xC7,0x84,0x68,0x81,0xCF,0x93,0x87,0x84,0x68,0x23,0x97,
+0x07,0x02,0xEF,0x50,0x80,0x4D,0xEF,0xB0,0xD0,0x6C,0xE9,0x3E,0xEF,0xC0,0x80,0x09,
+0x83,0x27,0x84,0x02,0x37,0xF5,0x00,0x20,0x13,0x05,0xC5,0x6A,0x83,0xC7,0x27,0x00,
+0x93,0xB7,0x17,0x00,0x23,0x84,0xF4,0x68,0x97,0x10,0x00,0x20,0xE7,0x80,0xA0,0x92,
+0xAD,0xBF,0x05,0x67,0x13,0x07,0x57,0x80,0xE3,0x9C,0xE6,0xFC,0x03,0xD7,0x27,0x00,
+0x61,0xFB,0x03,0x95,0x67,0x00,0xEF,0xB0,0x50,0x08,0xD9,0xB7,0x03,0xC7,0x27,0x00,
+0xB7,0xF5,0x00,0x20,0x93,0x85,0x45,0x3A,0xA3,0x80,0xE5,0x00,0x93,0x06,0xD7,0xFF,
+0x23,0x90,0x07,0x00,0xA3,0x87,0x07,0x00,0x93,0xF6,0xD6,0x0F,0x81,0xEE,0xB7,0xF7,
+0x00,0x20,0x13,0x07,0x00,0x05,0x23,0x88,0xE7,0x6C,0x97,0x30,0x00,0x20,0xE7,0x80,
+0xC0,0xFA,0x25,0xB7,0x99,0x46,0x63,0x1B,0xD7,0x00,0xA3,0x80,0xE5,0x00,0xB7,0xF7,
+0x00,0x20,0x13,0x07,0xB0,0x05,0x23,0x88,0xE7,0x6C,0x01,0xBF,0x89,0x46,0x63,0x11,
+0xD7,0x0E,0x37,0xF6,0x00,0x20,0x93,0x06,0xC6,0x2D,0x03,0xC5,0x46,0x0C,0x13,0x06,
+0xC6,0x2D,0x13,0x75,0xF5,0x0F,0x09,0xE9,0x29,0x45,0xEF,0xF0,0x2F,0xD8,0x97,0x10,
+0x00,0x20,0xE7,0x80,0x80,0x9F,0xD5,0xB5,0x83,0xC7,0x47,0x00,0xB7,0x54,0x00,0x20,
+0x03,0xA5,0x04,0x01,0xC9,0xC7,0x83,0xC7,0x06,0x09,0xA3,0x80,0xE5,0x00,0x89,0x8B,
+0xC9,0xC3,0x83,0xC7,0xF6,0x08,0x85,0x45,0x93,0xF7,0x77,0x0F,0xA3,0x87,0xF6,0x08,
+0x91,0x67,0x93,0x87,0x87,0xA9,0x23,0x95,0xF6,0x0A,0x23,0x96,0xF6,0x0A,0x83,0xC7,
+0x06,0x09,0x93,0xE7,0x07,0x08,0x23,0x88,0xF6,0x08,0x85,0x47,0xA3,0x85,0xF6,0x08,
+0x03,0x47,0x85,0x07,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x6D,0x05,0x8B,0x23,0x8A,
+0xE7,0x02,0x03,0xC5,0x47,0x03,0xEF,0xB0,0x50,0x54,0xEF,0x70,0x80,0x60,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0x87,0x68,0x98,0x47,0x23,0xAA,0x07,0x00,0xA3,0x8C,0x07,0x02,
+0x98,0xCB,0x83,0xA7,0x04,0x01,0x83,0xC7,0x07,0x15,0x93,0xF7,0x07,0x04,0x89,0xC7,
+0x97,0xF0,0xFF,0x1F,0xE7,0x80,0xE0,0x73,0xEF,0x00,0x70,0x17,0xB9,0xB5,0xA3,0x80,
+0x05,0x00,0x83,0x47,0x85,0x01,0x03,0x47,0xF6,0x08,0x91,0x83,0x85,0x07,0xA3,0x05,
+0xF6,0x08,0x83,0x47,0xF5,0x00,0xA1,0x8B,0xD9,0x8F,0xA3,0x07,0xF6,0x08,0x75,0xB7,
+0x41,0x46,0x63,0x10,0xC7,0x06,0x83,0xD7,0x47,0x00,0x89,0xEB,0xB7,0xF7,0x00,0x20,
+0x93,0x87,0x87,0x68,0x23,0x82,0x07,0x04,0x01,0x45,0x31,0xA8,0x05,0x47,0x63,0x9F,
+0xE7,0x00,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x05,0x45,0x83,0xC7,0x07,0x15,
+0x85,0x8B,0xE3,0x8C,0x07,0xDE,0xEF,0x20,0x90,0x5A,0xC5,0xBB,0x63,0x99,0xD7,0x00,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x23,0x82,0xE7,0x04,0xF1,0xB7,0x0D,0x47,
+0xE3,0x9D,0xE7,0xDC,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x23,0x82,0xD7,0x04,
+0x65,0xBF,0x45,0x46,0x63,0x17,0xC7,0x02,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,
+0x03,0x47,0x47,0x15,0x41,0x8B,0xE3,0x0A,0x07,0xDA,0x83,0xD7,0x47,0x00,0x37,0xF7,
+0x00,0x20,0x13,0x07,0x87,0x68,0xFD,0x17,0x93,0xB7,0x17,0x00,0x23,0x03,0xF7,0x04,
+0x69,0xBB,0x13,0x06,0xA0,0x02,0xE3,0x1A,0xC7,0xD8,0x03,0xD7,0x47,0x00,0x49,0xE7,
+0xB7,0xF7,0x00,0x20,0x13,0x87,0x07,0x27,0x85,0x46,0x23,0x0A,0xD7,0x04,0xB1,0x46,
+0x23,0x18,0xD7,0x02,0x37,0x57,0x00,0x20,0x03,0x26,0x07,0x01,0x93,0x87,0x07,0x27,
+0x83,0x46,0x16,0x15,0x03,0x47,0x06,0x15,0xA2,0x06,0xD9,0x8E,0x03,0x47,0x26,0x15,
+0x42,0x07,0xD9,0x8E,0x03,0x47,0x36,0x15,0x62,0x07,0x55,0x8F,0x93,0x16,0xF7,0x00,
+0x63,0xD5,0x06,0x00,0xF1,0x46,0x23,0x98,0xD7,0x02,0x93,0x16,0xE7,0x00,0x63,0xD8,
+0x06,0x00,0x83,0xD6,0x07,0x03,0x93,0xE6,0x06,0x02,0x23,0x98,0xD7,0x02,0x93,0x16,
+0xD7,0x00,0x63,0xD8,0x06,0x00,0x83,0xD6,0x07,0x03,0x93,0xE6,0x06,0x04,0x23,0x98,
+0xD7,0x02,0x93,0x16,0xC7,0x00,0xE3,0xDA,0x06,0xD0,0x03,0xD7,0x07,0x03,0x13,0x67,
+0x07,0x08,0x23,0x98,0xE7,0x02,0x11,0xB3,0x93,0x07,0xF7,0xFF,0xC2,0x07,0xC1,0x83,
+0x05,0x46,0xE3,0x6C,0xF6,0xCE,0xB7,0xF7,0x00,0x20,0x93,0x85,0x07,0x27,0x23,0x8A,
+0xD5,0x04,0x93,0x87,0x07,0x27,0x95,0x46,0x63,0x03,0xC7,0x00,0xA9,0x46,0x37,0x57,
+0x00,0x20,0x83,0x25,0x07,0x01,0x23,0x98,0xD7,0x02,0x03,0xC6,0x15,0x15,0x03,0xC7,
+0x05,0x15,0x22,0x06,0x59,0x8E,0x03,0xC7,0x25,0x15,0x42,0x07,0x59,0x8E,0x03,0xC7,
+0x35,0x15,0x62,0x07,0x51,0x8F,0x13,0x16,0xB7,0x00,0x63,0x56,0x06,0x00,0x93,0xE6,
+0x06,0x01,0x23,0x98,0xD7,0x02,0x93,0x16,0xA7,0x00,0x63,0xD8,0x06,0x00,0x83,0xD6,
+0x07,0x03,0x93,0xE6,0x06,0x02,0x23,0x98,0xD7,0x02,0x93,0x16,0x97,0x00,0x63,0xD8,
+0x06,0x00,0x83,0xD6,0x07,0x03,0x93,0xE6,0x06,0x04,0x23,0x98,0xD7,0x02,0x93,0x16,
+0x87,0x00,0x95,0xB7,0x03,0xD7,0x27,0x00,0x85,0x46,0x63,0x12,0xD7,0x04,0x83,0xD7,
+0x47,0x00,0xB7,0x56,0x00,0x20,0x83,0xA6,0x06,0x02,0x63,0x9F,0xE7,0x00,0xB7,0xB7,
+0x00,0x20,0x93,0x87,0xC7,0x82,0x23,0x90,0xF6,0x02,0xB7,0xD7,0x00,0x20,0x93,0x87,
+0x47,0x28,0x23,0x91,0xF6,0x02,0x91,0xB1,0xB7,0xA7,0x00,0x20,0x93,0x87,0x47,0xD9,
+0x23,0x90,0xF6,0x02,0xB7,0xC7,0x00,0x20,0x93,0x87,0xC7,0x7E,0xDD,0xB7,0x09,0x46,
+0x63,0x1B,0xC7,0x00,0x03,0xC7,0x47,0x00,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,
+0x23,0x8F,0xE7,0x02,0x19,0xB9,0x0D,0x46,0x63,0x16,0xC7,0x06,0x83,0xD7,0x47,0x00,
+0x63,0x9F,0xD7,0x02,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x03,0xC7,0xF7,0x08,
+0x13,0x77,0x77,0x0F,0xA3,0x87,0xE7,0x08,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,
+0x03,0xC7,0x87,0x07,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x6D,0x05,0x8B,0x23,0x8A,
+0xE7,0x02,0x03,0xC5,0x47,0x03,0x85,0x45,0xEF,0xB0,0x30,0x29,0xF9,0xB6,0xE3,0x96,
+0x07,0xBC,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x37,0xF7,0x00,0x20,0x13,0x07,
+0xC7,0x2D,0x83,0xC7,0xF7,0x00,0x83,0x46,0xF7,0x08,0xA1,0x8B,0xD5,0x8F,0xA3,0x07,
+0xF7,0x08,0x65,0xB6,0x11,0x46,0x63,0x15,0xC7,0x00,0x03,0xC7,0x47,0x00,0x5D,0xBF,
+0x15,0x46,0x63,0x1F,0xC7,0x00,0x83,0xD7,0x47,0x00,0x05,0x47,0x63,0x83,0xD7,0x00,
+0x09,0x47,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0xA3,0x82,0xE7,0x0C,0xB5,0xBE,
+0x19,0x46,0x63,0x19,0xC7,0x04,0xB7,0xF4,0x00,0x20,0x13,0x87,0x84,0x6D,0x03,0x47,
+0x77,0x06,0x93,0x84,0x84,0x6D,0xE3,0x02,0x07,0xB6,0x83,0xD7,0x47,0x00,0x03,0xC6,
+0x24,0x04,0x13,0xF7,0x17,0x00,0xE3,0x0A,0xE6,0xB4,0x63,0xF4,0xF6,0x00,0x23,0x83,
+0x04,0x06,0xB3,0x37,0xF0,0x00,0x23,0x81,0xF4,0x04,0xA3,0x80,0x04,0x04,0xEF,0xB0,
+0x10,0x67,0x23,0x82,0x04,0x04,0xEF,0xB0,0x60,0x3D,0x93,0x07,0x80,0xFC,0x23,0x86,
+0xF4,0x06,0x25,0xB6,0x9D,0x46,0x63,0x1D,0xD7,0x00,0x83,0xD7,0x47,0x00,0x37,0xF7,
+0x00,0x20,0xB3,0x37,0xF0,0x00,0xA3,0x0F,0xF7,0x72,0xEF,0xB0,0xB0,0x40,0x31,0xB6,
+0xA1,0x46,0x63,0x1C,0xD7,0x00,0x83,0xD6,0x47,0x00,0x13,0x07,0x50,0x0A,0x93,0x07,
+0xA0,0x05,0x63,0x8C,0xE6,0x00,0x81,0x47,0x09,0xA8,0xA5,0x46,0x63,0x1C,0xD7,0x00,
+0x03,0xD7,0x47,0x00,0x93,0x07,0xB0,0x05,0x7D,0xD7,0x37,0xF7,0x00,0x20,0x23,0x08,
+0xF7,0x6C,0xE1,0xBC,0xA9,0x46,0xE3,0x1A,0xD7,0xAC,0x83,0xD6,0x47,0x00,0x37,0x57,
+0x00,0x20,0x85,0x47,0x03,0x27,0xC7,0xFE,0x63,0x96,0xF6,0x00,0x1C,0x53,0xF5,0x9B,
+0x1C,0xD3,0x65,0xBC,0x1C,0x53,0x93,0xE7,0x27,0x00,0xDD,0xBF,0x83,0xD6,0x27,0x00,
+0x05,0x47,0xE3,0x94,0xE6,0xAA,0x83,0xD7,0x47,0x00,0x13,0x07,0xB0,0x03,0x23,0x10,
+0xF1,0x00,0x83,0x57,0x01,0x00,0x63,0x67,0xF7,0x00,0x93,0x07,0xC0,0x03,0x23,0x10,
+0xF1,0x00,0x39,0xA0,0x03,0x57,0x01,0x00,0x93,0x07,0xC0,0x12,0xE3,0xE9,0xE7,0xFE,
+0x23,0x11,0x01,0x00,0x03,0x57,0x01,0x00,0xB7,0xF7,0x00,0x20,0x93,0x06,0x90,0x0A,
+0x93,0x87,0x87,0x68,0x63,0xF7,0xE6,0x0A,0x03,0xC7,0x17,0x00,0x13,0x77,0xF7,0x0F,
+0x19,0xE7,0x05,0x47,0xA3,0x80,0xE7,0x00,0x85,0x47,0x23,0x11,0xF1,0x00,0x83,0x57,
+0x21,0x00,0xC2,0x07,0xC1,0x83,0xA5,0xCB,0x97,0x10,0x00,0x20,0xE7,0x80,0x80,0x67,
+0xEF,0xB0,0x30,0x16,0xEF,0xF0,0x0F,0xE7,0x37,0x57,0x00,0x20,0x83,0x27,0x07,0x01,
+0xB7,0xF4,0x00,0x20,0x93,0x84,0x84,0x6D,0x83,0xC7,0x87,0x07,0x85,0x45,0x85,0x07,
+0x85,0x8B,0x23,0x8A,0xF4,0x02,0x03,0xC5,0x44,0x03,0xEF,0xB0,0x10,0x0D,0x05,0x2B,
+0x37,0x57,0x00,0x20,0x83,0x27,0x07,0x01,0x85,0x45,0x83,0xC7,0x87,0x07,0x85,0x8B,
+0x23,0x8A,0xF4,0x02,0x03,0xC5,0x44,0x03,0xEF,0xB0,0x30,0x0B,0x09,0x2B,0x97,0x30,
+0x00,0x20,0xE7,0x80,0x80,0xA6,0x97,0x00,0x00,0x20,0xE7,0x80,0x40,0xF5,0x97,0x30,
+0x00,0x20,0xE7,0x80,0x20,0xA8,0x03,0x57,0x01,0x00,0x89,0x67,0x93,0x87,0x07,0x71,
+0xB3,0xC7,0xE7,0x02,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,0x23,0x11,0xF7,0x0A,
+0x6D,0xBA,0x03,0xC7,0x17,0x00,0x13,0x77,0xF7,0x0F,0x35,0xD3,0xA3,0x80,0x07,0x00,
+0xA1,0xBF,0xB7,0xE7,0x00,0xE0,0x98,0x4B,0xB7,0x77,0x00,0x20,0xB7,0x06,0x50,0x00,
+0x23,0xA2,0xE7,0xCE,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0xD8,0x47,0x36,0x97,
+0xD8,0xC7,0x82,0x80,0x51,0x11,0xB7,0x15,0x00,0x00,0x22,0xC2,0x93,0x85,0x65,0x15,
+0x2A,0x84,0x1D,0x45,0x06,0xC4,0xEF,0xE0,0xDF,0xFA,0xB7,0x07,0x00,0x01,0x37,0xE7,
+0x00,0xE0,0xFD,0x17,0x5C,0xCB,0x23,0x2C,0x07,0x00,0x8D,0x47,0x1C,0xCB,0x1D,0x45,
+0x11,0xC4,0x12,0x44,0xA2,0x40,0x31,0x01,0x6F,0xE0,0x5F,0xFA,0x12,0x44,0xA2,0x40,
+0x31,0x01,0x6F,0xE0,0xBF,0xFB,0x8D,0x47,0x63,0x14,0xF5,0x00,0x2E,0x85,0x5D,0xBF,
+0x82,0x80,0x2A,0x87,0x81,0x47,0xFD,0x46,0x63,0xE2,0xE6,0x06,0xB3,0x16,0xF7,0x00,
+0x15,0x8D,0xA5,0x46,0x63,0xFF,0xF6,0x04,0x93,0x86,0x67,0xFF,0xB3,0x56,0xD5,0x00,
+0x93,0x15,0x17,0x00,0x3D,0x66,0x05,0x07,0x13,0x06,0xC6,0xCC,0x06,0x07,0x32,0x97,
+0xB2,0x95,0x83,0xD5,0x05,0x00,0x03,0x55,0x07,0x00,0x13,0xF7,0x17,0x00,0x0D,0x8D,
+0x33,0x05,0xD5,0x02,0x29,0x81,0x2E,0x95,0x09,0xCB,0x2D,0x67,0x13,0x07,0x57,0x50,
+0x33,0x05,0xE5,0x02,0x11,0x67,0x3A,0x95,0x3D,0x81,0x85,0x83,0x33,0x15,0xF5,0x00,
+0x85,0x67,0x93,0x87,0x07,0x80,0x3E,0x95,0x31,0x81,0x82,0x80,0x05,0x83,0x85,0x07,
+0x61,0xBF,0xA9,0x46,0x9D,0x8E,0xB3,0x16,0xD5,0x00,0x5D,0xB7,0xB7,0x57,0x00,0x20,
+0x03,0xA7,0x07,0x01,0x83,0x46,0x97,0x17,0x93,0xD7,0x46,0x00,0x8D,0xCF,0xBD,0x8A,
+0x03,0x47,0xE7,0x00,0x99,0xC6,0x3A,0x86,0x63,0xF3,0xE6,0x00,0x36,0x86,0x13,0x77,
+0xF6,0x0F,0xB7,0x56,0x00,0x20,0x83,0xA6,0x06,0x03,0x09,0x46,0x83,0xC6,0x46,0x0A,
+0x63,0x6C,0xD6,0x00,0xA9,0x07,0xB3,0x87,0xA7,0x02,0x29,0x45,0xB3,0xC7,0xA7,0x02,
+0x13,0x95,0x07,0x01,0x41,0x81,0x82,0x80,0xE3,0xFF,0xE6,0xFE,0xB3,0x07,0xF5,0x02,
+0xB3,0x06,0xD7,0x40,0x79,0x17,0xB3,0x87,0xD7,0x02,0xA9,0x46,0x33,0x07,0xD7,0x02,
+0xB3,0xC7,0xE7,0x02,0xAA,0x97,0xE9,0xBF,0xB7,0xF7,0x00,0x20,0x13,0x87,0x87,0x68,
+0x03,0x47,0x97,0x03,0x13,0x77,0xF7,0x0F,0x59,0xCB,0x51,0x11,0x26,0xC0,0xB7,0x54,
+0x00,0x20,0x93,0x84,0x84,0x3B,0x22,0xC2,0x13,0x84,0x87,0x68,0x83,0xC7,0x04,0x00,
+0x06,0xC4,0x85,0xE7,0x37,0xA5,0x00,0x20,0x13,0x05,0x45,0xAC,0x97,0x00,0x00,0x20,
+0xE7,0x80,0x60,0x1C,0x37,0x75,0x00,0x20,0x13,0x05,0xC5,0xD3,0x97,0x00,0x00,0x20,
+0xE7,0x80,0x60,0x1B,0x85,0x47,0x23,0x80,0xF4,0x00,0x83,0x47,0x54,0x03,0x93,0xF7,
+0xF7,0x0F,0x9D,0xC7,0x37,0xA4,0x00,0x20,0x03,0x25,0x44,0xAC,0xB7,0xA5,0x00,0x20,
+0x93,0x85,0xC5,0xAB,0x97,0x00,0x00,0x20,0xE7,0x80,0x00,0x1E,0x13,0x05,0x44,0xAC,
+0x12,0x44,0xA2,0x40,0x82,0x44,0x31,0x01,0x17,0x03,0x00,0x20,0x67,0x00,0xA3,0x17,
+0x37,0x74,0x00,0x20,0x03,0x25,0xC4,0xD3,0xB7,0x75,0x00,0x20,0x93,0x85,0x05,0xD3,
+0x97,0x00,0x00,0x20,0xE7,0x80,0x40,0x1B,0x13,0x05,0xC4,0xD3,0xD1,0xBF,0x82,0x80,
+0xB7,0x77,0x00,0x20,0x93,0x87,0x07,0xD8,0x05,0x67,0x3E,0x97,0x93,0x05,0xE0,0xFC,
+0x13,0x06,0x40,0xFC,0x93,0x06,0xC0,0xF9,0x23,0x16,0xB7,0x6E,0x23,0x17,0xC7,0x6E,
+0x23,0x18,0xD7,0x6E,0x37,0x57,0x00,0x20,0x23,0x97,0xB7,0x04,0x23,0x98,0xC7,0x04,
+0x23,0x99,0xD7,0x04,0x23,0x28,0xF7,0xFE,0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x03,0xC7,0xF7,0x0A,0x05,0x8B,0x63,0x02,0x07,0x28,0x31,0x11,0xB7,0xF6,
+0x00,0x20,0x13,0x87,0xC6,0x67,0x06,0xC8,0x22,0xC6,0x26,0xC4,0x03,0x47,0x87,0x00,
+0x93,0x86,0xC6,0x67,0x36,0xC0,0x13,0x77,0xF7,0x0F,0x21,0xC3,0x37,0x54,0x00,0x20,
+0x13,0x04,0x04,0xFF,0x03,0xD6,0x87,0x01,0x1C,0x40,0x37,0x57,0x00,0x20,0x03,0x25,
+0xC7,0x00,0x83,0xC6,0x97,0x14,0x37,0xB7,0x00,0x20,0x83,0x25,0x47,0x2C,0x41,0x47,
+0x63,0x9B,0xE6,0x02,0x06,0x06,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0xA0,0xF7,0x18,0x40,
+0x83,0x47,0x97,0x14,0x85,0x07,0xA3,0x04,0xF7,0x14,0x82,0x47,0x01,0x44,0x83,0xC7,
+0x67,0x00,0x93,0xF7,0xF7,0x0F,0x63,0x94,0x07,0x10,0x5D,0xC4,0xC2,0x40,0x32,0x44,
+0xA2,0x44,0x51,0x01,0x82,0x80,0xE3,0x72,0xD7,0xFE,0x37,0xF7,0x00,0x20,0x05,0x63,
+0x03,0x27,0x47,0x12,0xB7,0x56,0x00,0x20,0x33,0x84,0x67,0x00,0x93,0x86,0x46,0x7E,
+0x81,0x42,0x22,0xC2,0x13,0x93,0x02,0x01,0x13,0x53,0x03,0x01,0xE3,0x7F,0xC3,0xFA,
+0x03,0xD3,0x46,0x06,0x83,0x53,0x05,0x00,0x63,0x19,0x03,0x04,0x13,0x93,0x12,0x00,
+0x2E,0x93,0x03,0x14,0x03,0x00,0x03,0xD3,0x67,0x03,0x99,0x44,0x33,0x03,0x93,0x02,
+0xA9,0x44,0x33,0x43,0x93,0x02,0x63,0x5A,0x64,0x02,0xA2,0x93,0x23,0x10,0x75,0x00,
+0x03,0x13,0x05,0x00,0x83,0x93,0x47,0x00,0x63,0x46,0x73,0x02,0x83,0x83,0x87,0x00,
+0x03,0x53,0x07,0x00,0x33,0x03,0x73,0x40,0x23,0x10,0x67,0x00,0x23,0x10,0x05,0x00,
+0x85,0x02,0x09,0x07,0x09,0x05,0x89,0x06,0x71,0xBF,0x12,0x44,0x03,0x53,0x24,0xB6,
+0x9A,0x93,0xE9,0xB7,0x83,0x93,0x67,0x00,0xE3,0xC4,0x63,0xFE,0x83,0x83,0x97,0x00,
+0x03,0x53,0x07,0x00,0x1E,0x93,0xC9,0xBF,0x82,0x47,0x05,0x44,0x83,0xC7,0x77,0x00,
+0x93,0xF7,0xF7,0x0F,0xB9,0xD3,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x47,0xD8,0xB7,0xA7,
+0x00,0x20,0x83,0xA5,0x87,0xD8,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0xB7,0x54,
+0x00,0x20,0x93,0x84,0x04,0xFF,0x03,0xC6,0xA7,0x01,0x9C,0x40,0x41,0x43,0x83,0xC3,
+0xA7,0x14,0x63,0x9A,0x63,0x08,0x06,0x06,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0x80,0xE6,
+0x98,0x40,0x83,0x47,0xA7,0x14,0x85,0x07,0x23,0x05,0xF7,0x14,0xFD,0xBD,0xB7,0xF7,
+0x00,0x20,0x03,0xA5,0xC7,0x12,0xB7,0xA7,0x00,0x20,0x83,0xA5,0x07,0xD9,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0xB7,0x54,0x00,0x20,0x93,0x84,0x04,0xFF,0x03,0xC6,
+0x97,0x01,0x9C,0x40,0x41,0x43,0x83,0xC3,0xB7,0x14,0x63,0x9E,0x63,0x00,0x06,0x06,
+0x97,0xF0,0xFF,0x1F,0xE7,0x80,0x00,0xE2,0x98,0x40,0x83,0x47,0xB7,0x14,0x85,0x07,
+0xA3,0x05,0xF7,0x14,0x5D,0xBD,0x85,0x66,0xBE,0x96,0x37,0xA7,0x00,0x20,0x83,0x92,
+0x46,0xB6,0x03,0x27,0xC7,0xD8,0x83,0xD6,0xE7,0x03,0xE3,0x70,0x73,0xEA,0x19,0x43,
+0xB3,0x86,0x66,0x02,0x29,0x43,0x42,0x06,0x41,0x82,0xA9,0x07,0xB3,0xC6,0x66,0x02,
+0xC2,0x06,0xC1,0x86,0x05,0xA8,0x85,0x66,0xBE,0x96,0x37,0xE7,0x00,0x20,0x83,0x92,
+0x66,0xB6,0x03,0x27,0xC7,0xD1,0x83,0xD6,0xA7,0x03,0xE3,0x78,0x73,0xE6,0x19,0x43,
+0xB3,0x86,0x66,0x02,0x29,0x43,0x42,0x06,0x41,0x82,0xD1,0x07,0xB3,0xC6,0x66,0x02,
+0xC2,0x06,0xC1,0x86,0x01,0x43,0x3D,0xA8,0x93,0x13,0x13,0x00,0xAE,0x93,0x83,0x94,
+0x03,0x00,0x83,0x53,0x05,0x00,0x63,0xDE,0xD4,0x02,0xA6,0x93,0x23,0x10,0x75,0x00,
+0x83,0x13,0x05,0x00,0x83,0x94,0x47,0x00,0x63,0xC7,0x93,0x02,0x83,0x84,0x87,0x00,
+0x83,0x53,0x07,0x00,0xA6,0x93,0x23,0x10,0x77,0x00,0x23,0x10,0x05,0x00,0x05,0x03,
+0x09,0x07,0x09,0x05,0x93,0x13,0x03,0x01,0x93,0xD3,0x03,0x01,0xE3,0xEE,0xC3,0xFA,
+0x29,0xB5,0x96,0x93,0xE1,0xB7,0x83,0x94,0x67,0x00,0xE3,0xC2,0x74,0xFE,0x83,0x84,
+0x97,0x00,0x83,0x53,0x07,0x00,0xB3,0x83,0x93,0x40,0xF1,0xB7,0x82,0x80,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0xFF,0x51,0x11,0x06,0xC4,0x22,0xC2,0xA3,0x84,0x07,0x14,
+0x23,0x95,0x07,0x14,0xB7,0xF7,0x00,0x20,0x03,0xD6,0x47,0x2F,0xB7,0x57,0x00,0x20,
+0x03,0xA5,0xC7,0x00,0x06,0x06,0x81,0x45,0xEF,0xE0,0xFF,0xB6,0x37,0x54,0x00,0x20,
+0x83,0x27,0x04,0x01,0x81,0x45,0x03,0xC6,0x97,0x01,0xB7,0xF7,0x00,0x20,0x03,0xA5,
+0xC7,0x12,0x06,0x06,0xEF,0xE0,0x3F,0xB5,0x83,0x27,0x04,0x01,0x12,0x44,0xA2,0x40,
+0x03,0xC6,0xA7,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x47,0xD8,0x06,0x06,0x81,0x45,
+0x31,0x01,0x6F,0xE0,0x5F,0xB3,0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x68,0x83,0x46,
+0x97,0x03,0x03,0x47,0x57,0x03,0xB7,0x57,0x00,0x20,0x93,0xF6,0xF6,0x0F,0x83,0xA7,
+0x07,0xFF,0x13,0x77,0xF7,0x0F,0x63,0x93,0x06,0x12,0xB7,0xF6,0x00,0x20,0x93,0x86,
+0xC6,0x2D,0x63,0x06,0x07,0x10,0x03,0xD6,0x26,0x0A,0x03,0xD7,0xE6,0x09,0x33,0x57,
+0xC7,0x02,0x42,0x07,0x41,0x87,0x05,0x46,0x63,0x59,0xE0,0x00,0xA9,0x46,0x3A,0x86,
+0x63,0xD3,0xE6,0x00,0x29,0x46,0x42,0x06,0x41,0x86,0x63,0x06,0x05,0x12,0x05,0x47,
+0x63,0x04,0xE5,0x1A,0x03,0x87,0x87,0x00,0x63,0x45,0xE0,0x00,0x05,0x47,0x23,0x84,
+0xE7,0x00,0x03,0x87,0x97,0x00,0x63,0x45,0xE0,0x00,0x05,0x47,0xA3,0x84,0xE7,0x00,
+0x03,0x87,0x27,0x01,0x63,0x45,0xE0,0x00,0x05,0x47,0x23,0x89,0xE7,0x00,0x03,0x87,
+0x37,0x01,0x63,0x45,0xE0,0x00,0x05,0x47,0xA3,0x89,0xE7,0x00,0x03,0x87,0xC7,0x01,
+0x63,0x45,0xE0,0x00,0x05,0x47,0x23,0x8E,0xE7,0x00,0x03,0x87,0xD7,0x01,0x63,0x45,
+0xE0,0x00,0x05,0x47,0xA3,0x8E,0xE7,0x00,0x05,0x47,0x63,0x0B,0xE6,0x1C,0x61,0x11,
+0x22,0xC2,0x26,0xC0,0x81,0x46,0x85,0x43,0x13,0x84,0x47,0x01,0x93,0x84,0xA7,0x00,
+0x3E,0x87,0x89,0xC6,0x22,0x87,0x63,0x93,0x76,0x00,0x26,0x87,0x03,0x13,0x47,0x00,
+0x83,0x15,0x67,0x00,0x03,0x05,0x87,0x00,0x33,0x43,0xC3,0x02,0xD1,0x42,0xB3,0xC5,
+0xC5,0x02,0x42,0x03,0x13,0x53,0x03,0x41,0x23,0x12,0x67,0x00,0x33,0x05,0x55,0x02,
+0xC2,0x05,0xC1,0x85,0x23,0x13,0xB7,0x00,0x42,0x05,0x41,0x85,0x63,0x54,0xA3,0x00,
+0x23,0x12,0xA7,0x00,0x03,0x05,0x97,0x00,0x31,0x53,0x33,0x05,0x65,0x02,0x42,0x05,
+0x41,0x85,0x63,0x54,0xB5,0x00,0x23,0x13,0xA7,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,
+0x0D,0x47,0xE3,0x9F,0xE6,0xF8,0x12,0x44,0x82,0x44,0x21,0x01,0x82,0x80,0x03,0xD7,
+0x66,0x0A,0x83,0xD6,0x26,0x0A,0x33,0x57,0xD7,0x02,0xE5,0xBD,0x05,0xCB,0x37,0xA7,
+0x00,0x20,0x03,0x27,0xC7,0xAB,0x93,0x06,0x40,0x06,0x63,0x74,0xD7,0x00,0x13,0x07,
+0x40,0x06,0x89,0x66,0x93,0x86,0x06,0x71,0x63,0xF3,0xE6,0x00,0x36,0x87,0x93,0x06,
+0x40,0x06,0x33,0x57,0xD7,0x02,0x42,0x07,0x41,0x87,0xC9,0xBD,0x37,0x77,0x00,0x20,
+0x03,0x27,0x07,0xD3,0xC9,0xBF,0x83,0xD6,0x67,0x03,0x95,0x45,0x13,0x03,0x20,0x03,
+0x33,0x87,0xB6,0x02,0x29,0x45,0xB3,0xD6,0x66,0x02,0x23,0x92,0xE7,0x00,0x03,0xD7,
+0x27,0x05,0x33,0x07,0xA7,0x02,0xE2,0x06,0xE1,0x86,0x23,0x84,0xD7,0x00,0xA3,0x84,
+0xD7,0x00,0x83,0xD6,0xE7,0x03,0x23,0x93,0xE7,0x00,0x33,0x87,0xB6,0x02,0x23,0x97,
+0xE7,0x00,0x03,0xD7,0xE7,0x04,0xB3,0xD6,0x66,0x02,0x33,0x07,0xA7,0x02,0xE2,0x06,
+0xE1,0x86,0x23,0x89,0xD7,0x00,0xA3,0x89,0xD7,0x00,0x83,0xD6,0x07,0x05,0x23,0x98,
+0xE7,0x00,0x03,0xD7,0xA7,0x03,0x33,0x85,0xA6,0x02,0xB3,0x05,0xB7,0x02,0x23,0x9D,
+0xA7,0x00,0x33,0x57,0x67,0x02,0x23,0x9C,0xB7,0x00,0x62,0x07,0x61,0x87,0x23,0x8E,
+0xE7,0x00,0xA3,0x8E,0xE7,0x00,0xB9,0xBD,0x03,0xD7,0x67,0x03,0x93,0x05,0x20,0x03,
+0x95,0x46,0xB3,0x06,0xD7,0x02,0x15,0x45,0x29,0x43,0x33,0x57,0xB7,0x02,0x85,0x86,
+0x23,0x92,0xD7,0x00,0x95,0x46,0x33,0x07,0xD7,0x02,0x83,0xD6,0x27,0x05,0xB3,0x86,
+0xA6,0x02,0x62,0x07,0x61,0x87,0x23,0x84,0xE7,0x00,0xA3,0x84,0xE7,0x00,0x23,0x93,
+0xD7,0x00,0x83,0xD6,0xE7,0x03,0x33,0x87,0xA6,0x02,0x23,0x97,0xE7,0x00,0x03,0xD7,
+0xE7,0x04,0xB3,0xD6,0xB6,0x02,0x33,0x07,0x67,0x02,0xE2,0x06,0xE1,0x86,0x23,0x89,
+0xD7,0x00,0xA3,0x89,0xD7,0x00,0x83,0xD6,0x07,0x05,0x23,0x98,0xE7,0x00,0x03,0xD7,
+0xA7,0x03,0xB3,0x86,0x66,0x02,0x33,0x05,0xA7,0x02,0x23,0x9D,0xD7,0x00,0x33,0x57,
+0xB7,0x02,0x23,0x9C,0xA7,0x00,0x62,0x07,0x61,0x87,0x23,0x8E,0xE7,0x00,0x95,0xBF,
+0x82,0x80,0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,0x03,0xC7,0x87,0x36,0x85,0x47,
+0x63,0xE7,0xE7,0x02,0xB7,0x56,0x00,0x20,0x83,0xC6,0x66,0x3F,0x63,0xE1,0xD7,0x02,
+0x51,0x11,0x06,0xC4,0x63,0x18,0xF7,0x00,0xB7,0xF7,0x00,0x20,0x83,0xC7,0x47,0x74,
+0x01,0x45,0x91,0xC3,0x05,0x45,0x81,0x33,0xA2,0x40,0x31,0x01,0x3D,0xBC,0x82,0x80,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x03,0xC7,0xF7,0x0A,0x05,0x8B,0x63,0x0E,
+0x07,0x20,0x37,0xF7,0x00,0x20,0x03,0x47,0x47,0x4F,0x63,0x18,0x07,0x20,0x51,0x11,
+0x22,0xC2,0x37,0xF4,0x00,0x20,0x13,0x07,0xC4,0x67,0x06,0xC4,0x26,0xC0,0x03,0x47,
+0x87,0x00,0x13,0x04,0xC4,0x67,0x13,0x77,0xF7,0x0F,0x21,0xC3,0xB7,0x54,0x00,0x20,
+0x93,0x84,0x04,0xFF,0x94,0x40,0x37,0x57,0x00,0x20,0x03,0x25,0xC7,0x00,0x37,0xB7,
+0x00,0x20,0x83,0x25,0x47,0x2C,0x03,0xC7,0x96,0x14,0x03,0xD6,0x87,0x01,0xC1,0x47,
+0x63,0x19,0xF7,0x02,0x06,0x06,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0xA0,0x9A,0x98,0x40,
+0x83,0x47,0x97,0x14,0x85,0x07,0xA3,0x04,0xF7,0x14,0x83,0x47,0x64,0x00,0x81,0x44,
+0x93,0xF7,0xF7,0x0F,0xE9,0xEB,0xB5,0xC8,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,
+0x82,0x80,0xE3,0xF4,0xE7,0xFE,0xB7,0xF7,0x00,0x20,0x03,0xA7,0x47,0x12,0x01,0x43,
+0x93,0x17,0x03,0x01,0xC1,0x83,0xE3,0xFA,0xC7,0xFC,0x93,0x17,0x13,0x00,0xAE,0x97,
+0x83,0x52,0x05,0x00,0x83,0xD7,0x07,0x00,0x96,0x97,0xC2,0x07,0xC1,0x87,0x23,0x10,
+0xF5,0x00,0x83,0x92,0x46,0x00,0x63,0xC0,0x57,0x02,0x83,0x82,0x86,0x00,0x83,0x57,
+0x07,0x00,0xB3,0x87,0x57,0x40,0x23,0x10,0xF7,0x00,0x23,0x10,0x05,0x00,0x05,0x03,
+0x09,0x07,0x09,0x05,0x75,0xBF,0x83,0x92,0x66,0x00,0xE3,0xCA,0xF2,0xFE,0x83,0x82,
+0x96,0x00,0x83,0x57,0x07,0x00,0x96,0x97,0xF9,0xBF,0x83,0x47,0x74,0x00,0x85,0x44,
+0x93,0xF7,0xF7,0x0F,0xC9,0xD3,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x47,0xD8,0xB7,0xA7,
+0x00,0x20,0x83,0xA5,0x87,0xD8,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x37,0x57,
+0x00,0x20,0x13,0x07,0x07,0xFF,0x03,0xC6,0xA7,0x01,0x1C,0x43,0xC1,0x46,0x03,0xC3,
+0xA7,0x14,0x63,0x14,0xD3,0x08,0x06,0x06,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0x80,0x8D,
+0xB7,0x57,0x00,0x20,0x13,0x87,0x07,0xFF,0x18,0x43,0x83,0x47,0xA7,0x14,0x85,0x07,
+0x23,0x05,0xF7,0x14,0x0D,0xBF,0xB7,0xF7,0x00,0x20,0x03,0xA5,0xC7,0x12,0xB7,0xA7,
+0x00,0x20,0x83,0xA5,0x07,0xD9,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x37,0x57,
+0x00,0x20,0x13,0x07,0x07,0xFF,0x03,0xC6,0x97,0x01,0x1C,0x43,0xC1,0x46,0x03,0xC3,
+0xB7,0x14,0x63,0x12,0xD3,0x02,0x06,0x06,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0x80,0x88,
+0xB7,0x57,0x00,0x20,0x13,0x87,0x07,0xFF,0x18,0x43,0x83,0x47,0xB7,0x14,0x85,0x07,
+0xA3,0x05,0xF7,0x14,0xCD,0xB5,0x37,0xA7,0x00,0x20,0x03,0x27,0xC7,0xD8,0xE3,0xFC,
+0x66,0xEC,0x42,0x06,0x41,0x82,0xA9,0x07,0x11,0xA8,0x37,0xE7,0x00,0x20,0x03,0x27,
+0xC7,0xD1,0xE3,0xF2,0x66,0xEC,0x42,0x06,0x41,0x82,0xD1,0x07,0x01,0x43,0x2D,0xA8,
+0x93,0x16,0x13,0x00,0xAE,0x96,0x83,0x52,0x05,0x00,0x83,0xD6,0x06,0x00,0x96,0x96,
+0xC2,0x06,0xC1,0x86,0x23,0x10,0xD5,0x00,0x83,0x92,0x47,0x00,0x63,0xC4,0x56,0x02,
+0x83,0x82,0x87,0x00,0x83,0x56,0x07,0x00,0x96,0x96,0x23,0x10,0xD7,0x00,0x23,0x10,
+0x05,0x00,0x05,0x03,0x09,0x07,0x09,0x05,0x93,0x16,0x03,0x01,0xC1,0x82,0xE3,0xE1,
+0xC6,0xFC,0x95,0xBD,0x83,0x92,0x67,0x00,0xE3,0xC5,0xD2,0xFE,0x83,0x82,0x97,0x00,
+0x83,0x56,0x07,0x00,0xB3,0x86,0x56,0x40,0xC9,0xBF,0x82,0x80,0x51,0x11,0x05,0x45,
+0x06,0xC4,0x11,0x36,0xA2,0x40,0x31,0x01,0xE1,0xB3,0x01,0x47,0x93,0x77,0xF7,0x0F,
+0x63,0xE6,0xC7,0x00,0x83,0x47,0x05,0x00,0x3E,0x85,0x82,0x80,0xB3,0x87,0xE5,0x00,
+0x83,0xC7,0x07,0x00,0x05,0x07,0xB3,0x06,0xF5,0x00,0x83,0xC6,0x06,0x00,0xF9,0xDE,
+0xF5,0xD3,0x05,0x47,0x63,0x98,0xE7,0x00,0x83,0x47,0x15,0x00,0x89,0x07,0x93,0xF7,
+0xF7,0x0F,0xD9,0xBF,0x09,0x47,0x63,0x96,0xE7,0x00,0x83,0x47,0x25,0x00,0x91,0x07,
+0xFD,0xB7,0x0D,0x47,0x63,0x96,0xE7,0x00,0x83,0x47,0x35,0x00,0x95,0x07,0xC5,0xB7,
+0x11,0x47,0x63,0x96,0xE7,0x00,0x83,0x47,0x45,0x00,0x99,0x07,0xC9,0xBF,0x15,0x47,
+0x63,0x96,0xE7,0x00,0x83,0x47,0x55,0x00,0x9D,0x07,0xD1,0xB7,0x19,0x47,0xE3,0x9D,
+0xE7,0xF8,0x83,0x47,0x65,0x00,0xA1,0x07,0x5D,0xBF,0x13,0x01,0x41,0xFD,0xB7,0xF7,
+0x00,0x20,0x22,0xD2,0x03,0xC4,0x47,0x4F,0xB7,0x57,0x00,0x20,0x93,0x86,0x07,0xFF,
+0x06,0xD4,0x26,0xD0,0xD8,0x42,0x88,0x42,0x11,0xCC,0x23,0x10,0x07,0x00,0xA3,0x0E,
+0x05,0x0E,0x13,0x06,0x00,0x06,0x81,0x45,0x13,0x05,0xC5,0x09,0xEF,0xE0,0xAF,0xD7,
+0x01,0x44,0x3D,0xA8,0x37,0x56,0x00,0x20,0x93,0x05,0x46,0x7E,0x85,0x66,0x93,0x84,
+0x07,0xFF,0xAE,0x96,0x93,0x07,0x46,0x7E,0x3E,0xC2,0x83,0xC6,0x76,0x36,0xB7,0x67,
+0x00,0x20,0x93,0x87,0x47,0x7E,0x3E,0xC0,0x9D,0xE2,0xA3,0x00,0x07,0x00,0xA3,0x0E,
+0x05,0x0E,0x13,0x06,0x00,0x06,0x81,0x45,0x13,0x05,0xC5,0x09,0xEF,0xE0,0xAF,0xD3,
+0x22,0x85,0xA2,0x50,0x12,0x54,0x82,0x54,0x13,0x01,0xC1,0x02,0x82,0x80,0x03,0x46,
+0x17,0x00,0x63,0x11,0x06,0x16,0x85,0x47,0xA3,0x00,0xF7,0x00,0xB7,0x75,0x00,0x20,
+0xA3,0x0E,0xD5,0x0E,0x13,0x06,0x00,0x06,0x93,0x85,0x85,0xAE,0x13,0x05,0xC5,0x09,
+0x97,0xE0,0xFF,0x1F,0xE7,0x80,0x00,0x6B,0xE1,0xB7,0x63,0x1D,0x03,0x02,0x0D,0x47,
+0x33,0x87,0xE6,0x02,0x01,0x46,0x93,0x07,0x17,0x00,0x3E,0xC4,0x93,0x07,0x87,0x04,
+0x3E,0xC6,0x82,0x47,0x88,0x40,0x85,0x63,0x03,0xC7,0x77,0x36,0x63,0x68,0xE6,0x08,
+0x85,0x06,0x93,0xF6,0xF6,0x0F,0x88,0x40,0x03,0x47,0xD5,0x0F,0xE3,0xE7,0xE6,0xFC,
+0x63,0x05,0x03,0x10,0xD4,0x40,0x82,0x47,0xB7,0x75,0x00,0x20,0x03,0xC7,0x16,0x00,
+0x13,0x06,0x00,0x06,0x93,0x85,0x85,0xAE,0x05,0x07,0xA3,0x80,0xE6,0x00,0x03,0xC7,
+0x77,0x36,0x13,0x05,0xC5,0x09,0xA3,0x00,0xE5,0x06,0x97,0xE0,0xFF,0x1F,0xE7,0x80,
+0x60,0x64,0xD8,0x40,0xA5,0x46,0x03,0x46,0x17,0x00,0xE3,0xFB,0xC6,0xF4,0xA3,0x00,
+0x07,0x00,0x88,0x40,0x81,0x45,0x13,0x06,0x00,0x06,0xA3,0x0E,0x05,0x0E,0x13,0x05,
+0xC5,0x09,0xEF,0xE0,0x4F,0xC7,0x82,0x47,0x37,0x77,0x00,0x20,0x13,0x07,0xC7,0xAE,
+0x83,0xC5,0x77,0x36,0x81,0x46,0x63,0x16,0xB4,0x0A,0x9C,0x40,0x05,0x44,0x83,0x97,
+0x27,0x05,0x86,0x07,0xE3,0xCE,0xF6,0xF0,0x09,0x44,0x19,0xBF,0x0D,0x47,0x33,0x07,
+0xE6,0x02,0x93,0x85,0x03,0x98,0x92,0x47,0x36,0xCE,0x1A,0xCC,0x32,0xCA,0xBA,0x95,
+0x86,0x05,0xBE,0x95,0xB2,0x47,0x83,0x95,0x45,0x00,0x3A,0xC8,0x93,0x92,0x17,0x00,
+0x16,0x95,0x03,0x15,0xC5,0x00,0x97,0xE0,0xFF,0x1F,0xE7,0x80,0x20,0x60,0x85,0x42,
+0x42,0x47,0x85,0x63,0x52,0x46,0x62,0x43,0xF2,0x46,0x63,0xF6,0xA2,0x00,0x05,0x06,
+0x13,0x76,0xF6,0x0F,0x39,0xBF,0x92,0x47,0x93,0x83,0x13,0x98,0x1E,0x97,0x06,0x07,
+0x3E,0x97,0xA2,0x47,0x88,0x40,0x32,0xCC,0x93,0x85,0x87,0x04,0x86,0x05,0x2E,0x95,
+0x03,0x15,0xC5,0x00,0x83,0x15,0x47,0x00,0x36,0xCA,0x1A,0xC8,0x97,0xE0,0xFF,0x1F,
+0xE7,0x80,0xC0,0x5B,0x85,0x42,0x42,0x43,0xD2,0x46,0x62,0x46,0xE3,0xE1,0xA2,0xFC,
+0x05,0x43,0xFD,0xB5,0x01,0x43,0x81,0x46,0xFD,0xB5,0xDC,0x40,0xA3,0x80,0x07,0x00,
+0x3D,0xB5,0x03,0x56,0x07,0x00,0x13,0x15,0x06,0x01,0x41,0x85,0x63,0xD3,0xA6,0x00,
+0x36,0x86,0x93,0x16,0x06,0x01,0x05,0x04,0xC1,0x86,0x13,0x74,0xF4,0x0F,0x19,0x07,
+0x1D,0xBF,0x51,0x11,0x06,0xC4,0xD5,0x33,0x19,0xED,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0x47,0xFF,0x03,0xC5,0x07,0x00,0x09,0xC5,0x7D,0x15,0x23,0x80,0xA7,0x00,0x09,0x45,
+0xA2,0x40,0x31,0x01,0x82,0x80,0x85,0x47,0x63,0x19,0xF5,0x00,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x47,0xFF,0x23,0x80,0x07,0x00,0xE5,0xB7,0x89,0x47,0x63,0x1B,0xF5,0x00,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x47,0xFF,0x13,0x07,0x40,0x06,0x23,0x80,0xE7,0x00,
+0xC1,0xBF,0x01,0x45,0xF1,0xB7,0xB7,0xB7,0x00,0x20,0x83,0xA7,0x47,0x2C,0x39,0x71,
+0xB7,0xF6,0x00,0x20,0x3E,0xC6,0x93,0x87,0xC6,0x2D,0x83,0xD7,0x87,0x01,0x22,0xDC,
+0x37,0x54,0x00,0x20,0x37,0x77,0x00,0x20,0x3E,0xC0,0x93,0x07,0x04,0xFF,0x90,0x43,
+0x83,0x45,0xC7,0xB7,0xDC,0x43,0x93,0x86,0xC6,0x2D,0x36,0xC4,0x06,0xDE,0xB7,0x56,
+0x00,0x20,0x26,0xDA,0x09,0x47,0x13,0x04,0x04,0xFF,0x89,0x07,0x93,0x86,0x46,0x7E,
+0x63,0x82,0xE5,0x06,0x01,0x45,0x01,0x47,0x93,0x02,0x70,0x0C,0x8D,0x44,0x02,0x43,
+0x93,0x15,0x05,0x01,0xC1,0x81,0x63,0xF2,0x65,0x06,0x32,0x43,0x93,0x15,0x15,0x00,
+0x9A,0x95,0x03,0x93,0x05,0x00,0x83,0x55,0x66,0x03,0x93,0xD3,0x35,0x00,0x63,0xD2,
+0x63,0x1C,0x86,0x05,0xB3,0xC5,0x95,0x02,0x63,0x5D,0xB3,0x1A,0x83,0xD5,0x46,0x06,
+0x63,0x99,0x05,0x1A,0x83,0xC5,0x07,0x00,0x05,0x07,0x42,0x07,0x23,0x80,0x07,0x50,
+0x41,0x87,0x63,0xE5,0xB2,0x00,0x85,0x05,0x23,0x80,0xB7,0x00,0x05,0x05,0x85,0x07,
+0x89,0x06,0x75,0xB7,0x81,0x45,0x01,0x47,0x89,0x43,0x93,0x02,0x70,0x0C,0x82,0x44,
+0x13,0x95,0x05,0x01,0x41,0x81,0x63,0x61,0x95,0x10,0xA2,0x47,0x83,0xD7,0x87,0x01,
+0x3E,0xCC,0x1C,0x40,0xE2,0x46,0x3E,0xC2,0x95,0x47,0xB3,0xD7,0xF6,0x02,0x63,0x40,
+0xF7,0x1A,0x44,0x40,0x81,0x47,0x02,0xD4,0x13,0x87,0x24,0x00,0x02,0xD2,0x01,0x44,
+0x02,0xC4,0xA5,0x45,0x02,0x46,0x93,0x96,0x07,0x01,0xC1,0x82,0x63,0xE7,0xC6,0x1A,
+0xB7,0x57,0x00,0x20,0x83,0xA5,0x07,0x01,0x81,0x46,0x02,0xC8,0x83,0xC7,0x95,0x01,
+0x01,0x47,0x02,0xC6,0x3E,0xCE,0x83,0x57,0xC1,0x01,0x01,0x43,0x89,0x42,0x3E,0xCA,
+0xB7,0xA7,0x00,0x20,0x03,0xA5,0x07,0xD9,0x52,0x46,0x93,0x97,0x06,0x01,0xC1,0x83,
+0x63,0xE7,0xC7,0x1C,0x83,0xC7,0xA5,0x01,0x01,0x45,0x02,0xCA,0x3E,0xD0,0x83,0x57,
+0x01,0x02,0x81,0x42,0x81,0x45,0x3E,0xD8,0xB7,0xA7,0x00,0x20,0x83,0xA7,0x87,0xD8,
+0x3E,0xD6,0x81,0x47,0xC2,0x56,0x13,0x16,0x05,0x01,0x41,0x82,0x63,0x66,0xD6,0x1E,
+0xE2,0x46,0x13,0xD6,0x26,0x40,0xA2,0x46,0x63,0x5F,0xD6,0x24,0x92,0x56,0x22,0x46,
+0x26,0x85,0x25,0x44,0x33,0xC6,0xC6,0x02,0x42,0x06,0x41,0x86,0xB3,0x03,0x95,0x40,
+0x82,0x46,0xC2,0x03,0x93,0xD3,0x03,0x01,0x63,0xE6,0xD3,0x20,0xF2,0x46,0x13,0xD5,
+0x16,0x00,0x63,0x69,0xA7,0x20,0xC2,0x46,0x33,0xC7,0xE6,0x02,0x42,0x07,0x41,0x87,
+0x82,0x56,0x13,0xD5,0x16,0x00,0x63,0xE8,0xA7,0x20,0xD2,0x46,0xB3,0xC7,0xF6,0x02,
+0xC2,0x07,0xC1,0x87,0x85,0x66,0xA6,0x96,0x23,0x9A,0xC6,0xA0,0x23,0x9B,0xE6,0xA0,
+0x23,0x9C,0xF6,0xA0,0x05,0x45,0xE9,0xA8,0xB2,0x44,0x13,0x95,0x15,0x00,0x26,0x95,
+0x03,0x13,0x05,0x00,0x03,0x55,0x66,0x03,0x93,0x54,0x35,0x00,0x63,0xD8,0x64,0x02,
+0x09,0x85,0x63,0x55,0xA3,0x02,0x03,0xD5,0x46,0x06,0x0D,0xE1,0x03,0xC5,0x07,0x00,
+0x05,0x07,0x42,0x07,0x23,0x80,0x07,0x50,0x41,0x87,0x63,0xE5,0xA2,0x00,0x05,0x05,
+0x23,0x80,0xA7,0x00,0x85,0x05,0x85,0x07,0x89,0x06,0x55,0xBD,0x03,0x15,0x26,0x05,
+0x33,0x45,0x75,0x02,0x63,0x52,0xA3,0x02,0x03,0xD5,0x46,0x06,0x11,0xED,0x03,0xC5,
+0x07,0x50,0x05,0x07,0x42,0x07,0x23,0x80,0x07,0x00,0x41,0x87,0xE3,0xEC,0xA2,0xFC,
+0x05,0x05,0x23,0x80,0xA7,0x50,0xF9,0xB7,0x23,0x80,0x07,0x00,0x23,0x80,0x07,0x50,
+0xD1,0xB7,0x83,0x15,0x26,0x05,0x89,0x43,0xB3,0xC3,0x75,0x02,0x63,0x54,0x73,0x02,
+0x63,0xD2,0x65,0x02,0x83,0xD5,0x46,0x06,0x91,0xED,0x83,0xC5,0x07,0x50,0x05,0x07,
+0x42,0x07,0x23,0x80,0x07,0x00,0x41,0x87,0xE3,0xE2,0xB2,0xE4,0x85,0x05,0x23,0x80,
+0xB7,0x50,0x2D,0xBD,0x23,0x80,0x07,0x00,0x23,0x80,0x07,0x50,0x05,0xBD,0x92,0x47,
+0x62,0x46,0x81,0x45,0x13,0x85,0x07,0x15,0xEF,0xE0,0xEF,0x8B,0xA2,0x47,0x08,0x40,
+0x81,0x45,0x03,0xD6,0x87,0x01,0x13,0x05,0x05,0x65,0xEF,0xE0,0xCF,0x8A,0x01,0x45,
+0xF2,0x50,0x62,0x54,0xD2,0x54,0x21,0x61,0x82,0x80,0x83,0x46,0x07,0x00,0x63,0xF5,
+0xD5,0x02,0xA2,0x46,0x13,0x86,0x16,0x00,0x93,0x16,0x06,0x01,0x32,0x46,0xC1,0x82,
+0x36,0xC4,0x93,0x96,0x17,0x00,0xB2,0x96,0x83,0x96,0x06,0x00,0x12,0x56,0xB2,0x96,
+0x36,0xD2,0x85,0x07,0x05,0x07,0x39,0xBD,0x83,0x46,0x07,0x50,0xE3,0xFB,0xD5,0xFE,
+0x13,0x06,0x14,0x00,0x13,0x14,0x06,0x01,0x32,0x46,0x93,0x96,0x17,0x00,0x41,0x80,
+0xB2,0x96,0x83,0x96,0x06,0x00,0x22,0x56,0xB2,0x96,0x36,0xD4,0xD9,0xBF,0x12,0x46,
+0x93,0x97,0x16,0x00,0xAA,0x97,0x03,0x56,0xE6,0x03,0x83,0x97,0x07,0x00,0x93,0x53,
+0x26,0x00,0x63,0xDD,0xF3,0x00,0x05,0x82,0x63,0xDA,0xC7,0x00,0x32,0x46,0x05,0x03,
+0x13,0x73,0xF3,0x0F,0xB2,0x97,0x3E,0xC6,0x85,0x06,0xFD,0xBB,0x12,0x46,0x03,0x16,
+0xE6,0x04,0x33,0x46,0x56,0x02,0xE3,0xD9,0xC7,0xFE,0x42,0x46,0x05,0x07,0x13,0x77,
+0xF7,0x0F,0xB2,0x97,0x3E,0xC8,0xCD,0xB7,0xB2,0x53,0x13,0x16,0x15,0x00,0x1E,0x96,
+0x92,0x43,0x03,0x16,0x06,0x00,0x83,0xD3,0xA3,0x03,0x93,0xD6,0x23,0x00,0x63,0xDC,
+0xC6,0x00,0x93,0xD3,0x13,0x00,0x63,0x58,0x76,0x00,0x85,0x05,0x93,0xF5,0xF5,0x0F,
+0xB2,0x92,0x05,0x05,0xC5,0xB3,0x92,0x46,0x83,0x93,0x06,0x05,0x89,0x46,0xB3,0xC3,
+0xD3,0x02,0xE3,0x58,0x76,0xFE,0xD2,0x46,0x85,0x07,0x93,0xF7,0xF7,0x0F,0xB2,0x96,
+0x36,0xCA,0xC5,0xB7,0x83,0x43,0x25,0x00,0x63,0x74,0x74,0x00,0x23,0x01,0x85,0x00,
+0x05,0x05,0xE9,0xBB,0x01,0x47,0xE3,0x6D,0xA3,0xDE,0x32,0x47,0x33,0x43,0x67,0x02,
+0x13,0x17,0x03,0x01,0xED,0xB3,0x81,0x47,0xE3,0xEE,0xA5,0xDE,0xB3,0xC5,0xB2,0x02,
+0x93,0x97,0x05,0x01,0xFD,0xB3,0x01,0x45,0xE3,0x5C,0x86,0xEC,0xA2,0x56,0x26,0x85,
+0x33,0xC6,0x86,0x02,0x25,0x44,0x42,0x06,0x41,0x86,0xB3,0x03,0x95,0x40,0x82,0x46,
+0xC2,0x03,0x93,0xD3,0x03,0x01,0x63,0xE0,0xD3,0x04,0xF2,0x46,0x13,0xD5,0x16,0x00,
+0x63,0x73,0xE5,0x04,0xC2,0x46,0x33,0xC7,0xE6,0x02,0x42,0x07,0x41,0x87,0x82,0x56,
+0x13,0xD5,0x16,0x00,0x63,0x72,0xF5,0x04,0xD2,0x46,0xB3,0xC7,0xF6,0x02,0xC2,0x07,
+0xC1,0x87,0x05,0x65,0x26,0x95,0x23,0x1A,0xC5,0xA0,0x23,0x1B,0xE5,0xA0,0x23,0x1C,
+0xF5,0xA0,0x09,0x45,0xB5,0xBD,0x83,0x43,0x25,0x50,0x63,0x74,0x74,0x00,0x23,0x01,
+0x85,0x50,0x05,0x05,0x5D,0xB7,0x01,0x47,0xE3,0x73,0x65,0xFC,0x32,0x47,0x33,0x43,
+0x67,0x02,0x13,0x17,0x03,0x01,0x5D,0xBF,0x81,0x47,0xE3,0xE4,0xA5,0xFC,0xB3,0xC5,
+0xB2,0x02,0x93,0x97,0x05,0x01,0x6D,0xBF,0x11,0x11,0x22,0xCA,0x06,0xCC,0x26,0xC8,
+0x01,0x44,0x81,0x46,0xB7,0x57,0x00,0x20,0x13,0x87,0x47,0x7E,0x85,0x67,0xBA,0x97,
+0x83,0xC7,0x67,0x36,0x63,0xF4,0xF6,0x0C,0x8D,0x47,0xB3,0x87,0xF6,0x02,0x81,0x44,
+0x3E,0xC0,0x85,0x07,0x3E,0xC2,0x69,0xA8,0x8D,0x42,0xB3,0x82,0x54,0x02,0x02,0x47,
+0x36,0xC6,0x93,0x87,0x82,0x02,0x86,0x07,0xBE,0x95,0x85,0x67,0x93,0x87,0x87,0x95,
+0x33,0x05,0xF7,0x00,0xB7,0x57,0x00,0x20,0x93,0x87,0x47,0x7E,0x06,0x05,0x3E,0x95,
+0x83,0x95,0x45,0x00,0x03,0x15,0xC5,0x00,0x16,0xC4,0x97,0xE0,0xFF,0x1F,0xE7,0x80,
+0xE0,0x06,0x85,0x67,0x37,0x57,0x00,0x20,0x05,0x43,0x93,0x87,0x87,0x95,0xA2,0x42,
+0xB2,0x46,0x93,0x03,0x07,0xFF,0x63,0x61,0xA3,0x04,0x12,0x47,0x83,0xA5,0x03,0x00,
+0x93,0x82,0x92,0x02,0xBA,0x97,0x37,0x57,0x00,0x20,0x13,0x07,0x47,0x7E,0x86,0x02,
+0x86,0x07,0xAE,0x92,0xBA,0x97,0x83,0x95,0x42,0x00,0x03,0x95,0xC7,0x00,0x36,0xC4,
+0x97,0xE0,0xFF,0x1F,0xE7,0x80,0x80,0x02,0x05,0x43,0xA2,0x46,0x63,0x66,0xA3,0x00,
+0x13,0x06,0x14,0x00,0x13,0x74,0xF6,0x0F,0x13,0x87,0x14,0x00,0x93,0x74,0xF7,0x0F,
+0xB7,0x57,0x00,0x20,0x93,0x83,0x07,0xFF,0x83,0xA5,0x03,0x00,0x83,0xC7,0xC5,0x0F,
+0xE3,0xEC,0xF4,0xF4,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x2D,0xB7,0x33,0x35,0x80,0x00,
+0xE2,0x40,0x52,0x44,0xC2,0x44,0x71,0x01,0x82,0x80,0x41,0x11,0x22,0xC4,0x37,0x54,
+0x00,0x20,0x85,0x67,0xB7,0x56,0x00,0x20,0x13,0x04,0x44,0x7E,0x26,0xC2,0x06,0xC6,
+0x93,0x84,0x06,0xFF,0x3E,0x94,0xD8,0x40,0x03,0x46,0x64,0x36,0x3E,0x97,0x15,0xE6,
+0x03,0x44,0x47,0xA0,0x19,0xC0,0x01,0x44,0x19,0xA8,0x88,0x40,0x13,0x06,0x80,0x04,
+0x81,0x45,0x23,0x0E,0x05,0x0E,0x13,0x05,0x45,0x05,0xEF,0xD0,0xDF,0xDB,0x22,0x85,
+0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x03,0x47,
+0x27,0xA0,0x13,0x83,0x87,0x3B,0x09,0x46,0xA3,0x00,0xC3,0x00,0x93,0x86,0x06,0xFF,
+0x93,0x87,0x87,0x3B,0x39,0xC7,0x37,0xF7,0x00,0x20,0x03,0x47,0x47,0x4F,0x31,0xE3,
+0x85,0x47,0xA3,0x00,0xF3,0x00,0x49,0x3D,0x2A,0xC0,0x03,0x47,0x64,0x36,0x88,0x40,
+0xB7,0x75,0x00,0x20,0x13,0x06,0x80,0x04,0x23,0x0E,0xE5,0x0E,0x93,0x85,0x05,0xAA,
+0x13,0x05,0x45,0x05,0x97,0xE0,0xFF,0x1F,0xE7,0x80,0xC0,0xF0,0x82,0x47,0xC1,0xD7,
+0x37,0x57,0x00,0x20,0x95,0x47,0x13,0x03,0x87,0x3B,0xA3,0x00,0xF3,0x00,0x05,0x44,
+0x79,0xB7,0x88,0x42,0x0D,0x47,0x13,0x06,0x80,0x04,0x23,0x0E,0x05,0x0E,0x81,0x45,
+0x13,0x05,0x45,0x05,0xA3,0x80,0xE7,0x00,0xEF,0xD0,0xFF,0xD2,0xA9,0xBF,0x51,0x11,
+0x06,0xC4,0x25,0x37,0xB7,0x56,0x00,0x20,0x93,0x86,0x06,0xFF,0xDC,0x42,0x05,0x67,
+0xBA,0x97,0x0D,0xCD,0x03,0xC7,0x37,0xA0,0x25,0x46,0x05,0x07,0x13,0x77,0xF7,0x0F,
+0x63,0x6E,0xE6,0x00,0xA3,0x81,0xE7,0xA0,0xDC,0x42,0x05,0x67,0xA2,0x40,0xBA,0x97,
+0x03,0xC5,0x47,0xA0,0x31,0x01,0x33,0x35,0xA0,0x00,0x82,0x80,0x29,0x47,0xA3,0x81,
+0xE7,0xA0,0x13,0x07,0x40,0x06,0x23,0x82,0xE7,0xA0,0xF9,0xBF,0x03,0xC7,0x47,0xA0,
+0x19,0xC3,0x7D,0x17,0xCD,0xBF,0xA3,0x81,0x07,0xA0,0xF9,0xB7,0x37,0x55,0x00,0x20,
+0x13,0x06,0x45,0x7E,0x85,0x67,0x3E,0x96,0x83,0x45,0x66,0x36,0x01,0x47,0x81,0x46,
+0x13,0x06,0x45,0x7E,0x63,0x66,0xB7,0x0A,0x36,0x85,0x82,0x80,0x13,0x95,0x27,0x00,
+0xAA,0x95,0x05,0x65,0x13,0x05,0x85,0x95,0x16,0x95,0x06,0x05,0x32,0x95,0x83,0x95,
+0x25,0x00,0x03,0x15,0xC5,0x00,0x36,0xCA,0x1E,0xC8,0x3A,0xC6,0x1A,0xC4,0x3E,0xC2,
+0x16,0xC0,0x97,0xE0,0xFF,0x1F,0xE7,0x80,0x60,0xE6,0xB7,0x57,0x00,0x20,0x85,0x45,
+0x13,0x86,0x47,0x7E,0x22,0x43,0x32,0x47,0xC2,0x43,0xD2,0x46,0x63,0xF8,0xA5,0x00,
+0x92,0x47,0x82,0x42,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x25,0xA2,0x05,0x44,0x05,0xAA,
+0x13,0x95,0x27,0x00,0xAA,0x95,0x05,0x65,0x13,0x05,0x85,0x95,0x1A,0x95,0x06,0x05,
+0x32,0x95,0x83,0x95,0x25,0x03,0x03,0x15,0xC5,0x00,0x36,0xC8,0x3A,0xC4,0x1E,0xC6,
+0x3E,0xC2,0x1A,0xC0,0x97,0xE0,0xFF,0x1F,0xE7,0x80,0x40,0xE1,0x85,0x45,0x22,0x47,
+0xC2,0x46,0x63,0xFD,0xA5,0x00,0x92,0x47,0x37,0x56,0x00,0x20,0xB2,0x43,0x85,0x07,
+0x93,0xF7,0xF7,0x0F,0x02,0x43,0x13,0x06,0x46,0x7E,0xDD,0xA0,0x7D,0xE8,0xED,0xA8,
+0x13,0x01,0xC1,0xFD,0x06,0xD0,0x22,0xCE,0x26,0xCC,0x0D,0x44,0x33,0x03,0x87,0x02,
+0x93,0x87,0x87,0x95,0x93,0x02,0x13,0x00,0x96,0x97,0x86,0x07,0xB2,0x97,0x03,0xC5,
+0xC7,0x00,0xB7,0xA7,0x00,0x20,0x83,0xA3,0x87,0xD8,0xB7,0x57,0x00,0x20,0x83,0xA4,
+0x07,0xFF,0x93,0x15,0x15,0x00,0x9E,0x95,0x83,0xD7,0xA4,0x03,0x83,0x93,0x05,0x00,
+0xB3,0x87,0x87,0x02,0x05,0x44,0x85,0x87,0x63,0xC5,0x77,0x02,0x09,0xC5,0x83,0x93,
+0xE5,0xFF,0x63,0xC0,0x77,0x02,0xB7,0x53,0x00,0x20,0x83,0xA3,0x03,0x01,0x01,0x44,
+0x83,0xC3,0xA3,0x01,0xFD,0x13,0x63,0x56,0x75,0x00,0x03,0x94,0x25,0x00,0x33,0xA4,
+0x87,0x00,0x85,0x67,0x93,0x87,0x87,0x95,0x9A,0x97,0x86,0x07,0xB2,0x97,0x03,0xC5,
+0xC7,0x00,0xB7,0xA7,0x00,0x20,0x83,0xA3,0x07,0xD9,0x83,0xD7,0xE4,0x03,0x8D,0x44,
+0x93,0x15,0x15,0x00,0xB3,0x87,0x97,0x02,0x9E,0x95,0x83,0x94,0x05,0x00,0x85,0x43,
+0x85,0x87,0x63,0xC5,0x97,0x02,0x09,0xC5,0x83,0x94,0xE5,0xFF,0x63,0xC0,0x97,0x02,
+0xB7,0x53,0x00,0x20,0x83,0xA3,0x03,0x01,0x83,0xC4,0x93,0x01,0x81,0x43,0xFD,0x14,
+0x63,0x56,0x95,0x00,0x83,0x93,0x25,0x00,0xB3,0xA3,0x77,0x00,0x81,0x47,0xB7,0x54,
+0x00,0x20,0x83,0xA5,0x04,0x03,0x03,0xC5,0x05,0x00,0xE3,0xE1,0xA7,0xE8,0x81,0x47,
+0x83,0xA5,0x04,0x03,0x03,0xC5,0x15,0x00,0xE3,0xE4,0xA7,0xEC,0x11,0xC4,0x63,0x85,
+0x03,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x37,0x55,0x00,0x20,0x13,0x06,0x45,0x7E,
+0x85,0x67,0x3E,0x96,0x83,0x45,0x66,0x36,0x05,0x07,0x13,0x77,0xF7,0x0F,0x13,0x06,
+0x45,0x7E,0xE3,0x6C,0xB7,0xEE,0x82,0x50,0x72,0x44,0xE2,0x44,0x36,0x85,0x13,0x01,
+0x41,0x02,0x82,0x80,0x51,0x11,0x06,0xC4,0x11,0x3D,0xB7,0x67,0x00,0x20,0x93,0x87,
+0x47,0x7E,0x83,0xC7,0x67,0x36,0xA2,0x40,0x33,0x35,0xF5,0x00,0x31,0x01,0x82,0x80,
+0xB7,0xF7,0x00,0x20,0x83,0xC7,0xB7,0x38,0x51,0x11,0x22,0xC2,0x06,0xC4,0x37,0x54,
+0x00,0x20,0x91,0x8B,0x13,0x04,0x04,0xFF,0x99,0xE7,0x5C,0x40,0x05,0x67,0xBA,0x97,
+0x23,0x81,0x07,0xA0,0xA9,0xA0,0x7D,0x3F,0xB7,0x57,0x00,0x20,0x23,0x8D,0xA7,0x3A,
+0x39,0xC1,0x58,0x40,0x85,0x67,0x3E,0x97,0x83,0x47,0x57,0xA0,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0xA3,0x02,0xF7,0xA0,0x99,0xCB,0x93,0x06,0x40,0x06,0x23,0x03,0xD7,0xA0,
+0xA5,0x46,0x63,0xF5,0xF6,0x00,0xA9,0x47,0xA3,0x02,0xF7,0xA0,0x5C,0x40,0x05,0x67,
+0xBA,0x97,0x03,0xC7,0x67,0xA0,0x4D,0xDF,0x05,0x47,0x23,0x81,0xE7,0xA0,0xA2,0x40,
+0x12,0x44,0x31,0x01,0x82,0x80,0x5C,0x40,0x05,0x67,0x3E,0x97,0x83,0x46,0x67,0xA0,
+0x81,0xC6,0xFD,0x16,0x23,0x03,0xD7,0xA0,0x05,0x67,0xBA,0x97,0xA3,0x82,0x07,0xA0,
+0xF1,0xB7,0x01,0xC5,0x2E,0x85,0x6F,0xE0,0x7F,0xAB,0xB7,0x57,0x00,0x20,0x03,0xA7,
+0x07,0x01,0x83,0x46,0xA7,0x17,0x93,0xD7,0x46,0x00,0x8D,0xCF,0xBD,0x8A,0x03,0x47,
+0xE7,0x00,0x99,0xC6,0x3A,0x86,0x63,0xF3,0xE6,0x00,0x36,0x86,0x13,0x77,0xF6,0x0F,
+0xB7,0x56,0x00,0x20,0x83,0xA6,0x06,0x03,0x09,0x46,0x83,0xC6,0x46,0x0A,0x63,0x6D,
+0xD6,0x00,0xA9,0x07,0xB3,0x87,0xB7,0x02,0xA9,0x45,0xB3,0xC7,0xB7,0x02,0x93,0x95,
+0x07,0x01,0xC1,0x81,0x2E,0x85,0x82,0x80,0xE3,0xFE,0xE6,0xFE,0xB3,0x87,0xF5,0x02,
+0xB3,0x06,0xD7,0x40,0x79,0x17,0xB3,0x87,0xD7,0x02,0xA9,0x46,0x33,0x07,0xD7,0x02,
+0xB3,0xC7,0xE7,0x02,0xAE,0x97,0xE1,0xBF,0x13,0x01,0xC1,0xF9,0xA6,0xCC,0xB7,0x54,
+0x00,0x20,0x13,0x87,0x44,0x7E,0x85,0x67,0xA2,0xCE,0x86,0xD0,0xBA,0x97,0x83,0xC7,
+0x57,0x36,0x93,0x84,0x44,0x7E,0x93,0xF7,0xF7,0x0F,0x3E,0xCE,0xB7,0x57,0x00,0x20,
+0x03,0xA4,0x07,0x01,0xB7,0xF7,0x00,0x20,0x13,0x87,0x87,0x68,0x83,0x46,0x67,0x03,
+0x37,0x67,0x00,0x20,0x13,0x07,0x47,0x7E,0x3A,0xC6,0x13,0x87,0x87,0x68,0xC9,0xEE,
+0x83,0x47,0x54,0x17,0x3E,0xCC,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x03,0x03,0x57,
+0x07,0x03,0xB7,0xF6,0x00,0x20,0x3E,0xC0,0xB7,0x57,0x00,0x20,0x83,0xC7,0xC7,0x3E,
+0x3A,0xD4,0x13,0x37,0x37,0x00,0x3E,0xD6,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,
+0xBA,0xC0,0x02,0x47,0x3E,0xD2,0xB7,0xA7,0x00,0x20,0x83,0xA7,0x87,0xD8,0x3A,0xC2,
+0x32,0x47,0x83,0xA6,0x46,0x71,0x3E,0xDA,0xB7,0x57,0x00,0x20,0x83,0xC7,0xD7,0x3E,
+0x03,0x47,0x67,0x36,0x36,0xCA,0x82,0x46,0x3E,0xDC,0xB7,0xA7,0x00,0x20,0x83,0xA7,
+0x07,0xD9,0x06,0x07,0x36,0x97,0x3A,0xD8,0x05,0x67,0x13,0x07,0xC7,0x2B,0x3E,0xDE,
+0xB7,0xF7,0x00,0x20,0xBA,0xC2,0x83,0xC7,0x37,0x4F,0x37,0xF7,0x00,0x20,0x13,0x07,
+0xC7,0x2D,0x3A,0xD0,0x42,0x57,0x92,0x46,0x63,0x1B,0xD7,0x00,0x86,0x50,0x76,0x44,
+0xE6,0x44,0x13,0x01,0x41,0x06,0x82,0x80,0x83,0x47,0x74,0x17,0xA5,0xB7,0x12,0x47,
+0x03,0x57,0x27,0x08,0x63,0x09,0x07,0x26,0x05,0x67,0x13,0x07,0xE7,0x2B,0x26,0x97,
+0x03,0x47,0x07,0x00,0x11,0xCB,0x83,0x46,0xC4,0x01,0x09,0x45,0xFD,0x16,0x63,0x86,
+0xE6,0x00,0x01,0x45,0x81,0x46,0x19,0xA0,0x05,0x45,0x85,0x46,0x16,0x46,0x26,0x96,
+0x03,0x46,0x06,0x00,0x32,0xC4,0x63,0x05,0x06,0x24,0x03,0x46,0xB4,0x01,0xA2,0x45,
+0x02,0xC8,0x7D,0x16,0x63,0x15,0xB6,0x00,0x89,0x46,0x36,0xC8,0x85,0x46,0x02,0x46,
+0x83,0x42,0x06,0x00,0x93,0x05,0x26,0x00,0x01,0x46,0x63,0x96,0xC2,0x22,0x01,0x43,
+0x32,0x56,0x63,0x18,0x06,0x26,0x12,0x56,0x83,0x55,0xA6,0x03,0x63,0x83,0x05,0x26,
+0x63,0x1A,0x03,0x0E,0x0D,0x46,0xB3,0x85,0xC5,0x02,0x85,0x85,0x85,0xC2,0x02,0x56,
+0x03,0x46,0xE6,0x08,0x13,0x76,0xF6,0x0F,0x63,0x00,0x06,0x22,0x03,0x46,0xE4,0x14,
+0xB3,0x05,0xB6,0x02,0x13,0x06,0x40,0x06,0xB3,0xC5,0xC5,0x02,0xC2,0x05,0xC1,0x85,
+0x15,0xC1,0x85,0x42,0x03,0x46,0x64,0x0E,0x63,0x13,0x55,0x20,0x11,0x82,0x29,0x45,
+0x63,0x0A,0xA6,0x00,0x63,0x0F,0x06,0x1E,0xB3,0x05,0xB6,0x02,0xB3,0xC5,0xA5,0x02,
+0xC2,0x05,0xC1,0x85,0xC2,0x05,0xC1,0x81,0x01,0x45,0xBA,0xCA,0xB6,0xC8,0x9A,0xC6,
+0xBE,0xC4,0xC1,0x3B,0x83,0x45,0x14,0x15,0x83,0x43,0x04,0x15,0x13,0x16,0x05,0x01,
+0xA2,0x05,0xB3,0xE2,0x75,0x00,0x83,0x43,0x24,0x15,0x41,0x86,0xA6,0x47,0xC2,0x03,
+0xB3,0xE5,0x53,0x00,0x83,0x43,0x34,0x15,0x36,0x43,0xC6,0x46,0xE2,0x03,0xB3,0xE3,
+0xB3,0x00,0x56,0x47,0x63,0xDA,0x03,0x02,0x83,0x42,0xC4,0x01,0x93,0x95,0x13,0x00,
+0xFD,0x12,0x63,0xD3,0x05,0x1A,0xB3,0x85,0xE2,0x40,0x33,0x86,0xC5,0x02,0xE2,0x45,
+0x33,0x06,0xB6,0x02,0xB3,0x42,0x56,0x02,0x13,0x06,0x40,0x06,0xB3,0xC2,0xC2,0x02,
+0x33,0x06,0x55,0x00,0x42,0x06,0x41,0x86,0x52,0x55,0x93,0x15,0x17,0x00,0xAA,0x95,
+0x03,0x95,0x05,0x00,0x63,0x47,0xA6,0x18,0x09,0xC7,0x03,0x95,0xE5,0xFF,0x63,0x42,
+0xA6,0x18,0x03,0x45,0xA4,0x01,0x7D,0x15,0x63,0x56,0xA7,0x00,0x03,0x93,0x25,0x00,
+0x33,0x23,0x66,0x00,0x02,0x47,0x03,0x45,0x17,0x00,0x13,0x06,0x27,0x03,0x01,0x47,
+0x63,0x13,0xE5,0x16,0x01,0x47,0x62,0x56,0x63,0x18,0x06,0x18,0x12,0x56,0x03,0x55,
+0xE6,0x03,0x63,0x03,0x05,0x18,0x45,0xE3,0x0D,0x46,0x33,0x05,0xC5,0x02,0x05,0x85,
+0x85,0xC2,0x82,0x56,0x83,0xC6,0xE6,0x08,0x93,0xF6,0xF6,0x0F,0x63,0x8E,0x06,0x14,
+0x83,0x46,0xD4,0x14,0x33,0x85,0xA6,0x02,0x93,0x06,0x40,0x06,0x33,0x45,0xD5,0x02,
+0xC2,0x46,0x42,0x05,0x41,0x85,0x9D,0xC2,0xC2,0x45,0x05,0x46,0x83,0x46,0x54,0x0E,
+0x63,0x9F,0xC5,0x12,0x91,0x82,0x29,0x46,0x63,0x8A,0xC6,0x00,0x63,0x8B,0x06,0x12,
+0x33,0x85,0xA6,0x02,0x33,0x45,0xC5,0x02,0x42,0x05,0x41,0x85,0x42,0x05,0x41,0x81,
+0x9A,0xC6,0x3E,0xC8,0xBA,0xC4,0xEF,0xE0,0x6F,0xF7,0xA2,0x47,0x42,0x05,0x41,0x85,
+0x93,0x96,0x17,0x00,0xF2,0x57,0x36,0x43,0xBE,0x96,0x03,0x96,0x06,0x00,0xC2,0x47,
+0x63,0x44,0xC5,0x10,0x22,0x46,0x26,0x47,0x09,0xC6,0x03,0x96,0xE6,0xFF,0x63,0x4D,
+0xC5,0x0E,0x03,0x46,0x94,0x01,0xA2,0x45,0x7D,0x16,0x63,0xD6,0xC5,0x00,0x03,0x97,
+0x26,0x00,0x33,0x27,0xE5,0x00,0x03,0x46,0x44,0x15,0x81,0x46,0x13,0x76,0x06,0x02,
+0x09,0xCE,0x81,0xEF,0xD2,0x45,0x4D,0x46,0xBE,0x86,0x63,0x68,0xB6,0x00,0xF2,0x45,
+0x05,0x46,0x86,0x46,0x63,0x83,0xC5,0x00,0xBE,0x86,0x02,0x56,0x03,0x46,0x06,0x09,
+0x41,0x8A,0x09,0xCE,0x0D,0x46,0x63,0x7B,0xF6,0x00,0xD2,0x45,0x13,0x06,0x10,0x03,
+0x63,0x66,0xB6,0x00,0xA2,0x55,0x09,0x46,0x63,0x73,0xB6,0x00,0xC5,0xC2,0x33,0x63,
+0x67,0x00,0x63,0x04,0x03,0x0C,0x12,0x47,0x99,0x04,0x09,0x07,0x3A,0xC2,0x9D,0xB3,
+0x85,0x46,0x36,0xC8,0xE9,0xB3,0x03,0x93,0x05,0x00,0x83,0xC3,0x64,0x00,0x63,0x46,
+0x73,0x00,0x83,0xC3,0x74,0x00,0x63,0xD7,0x63,0x00,0x05,0x06,0x13,0x76,0xF6,0x0F,
+0x91,0x05,0x65,0xBB,0x05,0x43,0x6D,0xBB,0x03,0x46,0xC4,0x14,0xD5,0xB3,0x3D,0x8A,
+0xFD,0xBB,0x93,0x05,0x80,0xC1,0x39,0xB5,0x33,0x06,0xC7,0x02,0xE2,0x45,0x33,0x06,
+0xB6,0x02,0xB3,0x42,0x56,0x02,0x13,0x06,0x40,0x06,0x33,0xC6,0xC2,0x02,0x2A,0x96,
+0x95,0xB5,0x05,0x43,0x41,0xBD,0x83,0x15,0x06,0x00,0x83,0xC2,0x44,0x00,0x63,0xC6,
+0x55,0x00,0x83,0xC2,0x54,0x00,0x63,0xD7,0xB2,0x00,0x05,0x07,0x13,0x77,0xF7,0x0F,
+0x11,0x06,0xBD,0xBD,0x05,0x47,0x41,0xB5,0x83,0x46,0xB4,0x14,0x65,0xB5,0xBD,0x8A,
+0xD9,0xB5,0x13,0x05,0x80,0xC1,0xD9,0xBD,0x05,0x47,0x31,0xBF,0x83,0x46,0x34,0x15,
+0xE2,0x06,0x13,0x96,0x46,0x00,0x63,0x51,0x06,0x02,0x52,0x46,0x93,0x06,0x10,0x03,
+0x63,0xEC,0xC6,0x00,0x85,0x46,0x63,0x96,0xD7,0x00,0xF2,0x46,0x63,0x96,0xF6,0x00,
+0x3D,0xBF,0x89,0x46,0xE3,0x8B,0xD7,0xFE,0x0D,0xFF,0x12,0x47,0xB2,0x46,0x23,0x11,
+0x07,0x08,0x32,0x47,0x03,0x47,0x57,0x36,0x7D,0x17,0x13,0x77,0xF7,0x0F,0xA3,0x82,
+0xE6,0x36,0x15,0xB7,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,0x71,0x11,0x22,0xC0,
+0x03,0xD7,0x67,0x03,0xA9,0x47,0x83,0x43,0x05,0x00,0x0E,0x07,0x33,0x47,0xF7,0x02,
+0xB7,0x57,0x00,0x20,0x03,0xA3,0x07,0x01,0xB7,0xB7,0x00,0x20,0x83,0xA2,0x47,0x2C,
+0x03,0x44,0x15,0x00,0x83,0x46,0x25,0x00,0x83,0x45,0x35,0x00,0x01,0x45,0x42,0x07,
+0x41,0x87,0x63,0xF2,0xD5,0x04,0x02,0x44,0x13,0x35,0x25,0x00,0x13,0x45,0x15,0x00,
+0x11,0x01,0x82,0x80,0x83,0x47,0x93,0x01,0xB3,0x87,0xF6,0x02,0xB2,0x97,0xC2,0x07,
+0xC1,0x83,0x86,0x07,0x96,0x97,0x83,0x97,0x07,0x00,0x63,0xC5,0xE7,0x00,0x05,0x05,
+0x13,0x75,0xF5,0x0F,0x05,0x06,0x13,0x76,0xF6,0x0F,0xE3,0x7D,0xC4,0xFC,0x85,0x06,
+0x93,0xF6,0xF6,0x0F,0x7D,0xBF,0x1E,0x86,0xCD,0xBF,0xB7,0x57,0x00,0x20,0x13,0x01,
+0xC1,0xFB,0x93,0x86,0x47,0x7E,0x05,0x67,0x36,0x97,0x86,0xC0,0x22,0xDE,0x26,0xDC,
+0x03,0x47,0x67,0x36,0xB7,0x66,0x00,0x20,0x93,0x86,0x46,0x7E,0x3A,0xC0,0x36,0xC8,
+0x82,0x46,0x05,0x47,0x63,0x71,0xD7,0x14,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x03,
+0x13,0x86,0x47,0x7E,0x3E,0xC6,0x3A,0xC2,0x37,0xB7,0x00,0x20,0x03,0x27,0x47,0x2C,
+0x3A,0xCA,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x3A,0xCC,0x37,0x57,0x00,0x20,
+0x03,0x27,0x07,0xFF,0x3A,0xCE,0xB2,0x47,0x81,0x44,0x93,0x87,0x47,0x7E,0x3E,0xC4,
+0xB2,0x47,0x93,0x86,0x47,0x7E,0x92,0x47,0x93,0x87,0x27,0x08,0x3E,0xD0,0x12,0x47,
+0x93,0xF7,0xF4,0x0F,0x3E,0xD2,0x93,0x97,0x14,0x00,0xBA,0x97,0x83,0xD7,0x27,0x08,
+0xE9,0xCB,0x02,0x53,0xB2,0x85,0x01,0x47,0x03,0x55,0x03,0x00,0x93,0x77,0xF7,0x0F,
+0x4D,0xC9,0x12,0x55,0x63,0x87,0xA7,0x0A,0x03,0xC5,0x66,0x00,0x83,0xC7,0x75,0x00,
+0x63,0xE1,0xA7,0x0A,0x03,0xC5,0x76,0x00,0x83,0xC7,0x65,0x00,0x63,0x6B,0xF5,0x08,
+0x22,0x45,0x93,0x17,0x17,0x00,0xB2,0x97,0x03,0x55,0xC5,0x04,0x83,0xD7,0xC7,0x04,
+0x3A,0x84,0x63,0x73,0xF5,0x00,0x26,0x84,0x13,0x74,0xF4,0x0F,0x19,0x45,0x33,0x05,
+0xA4,0x02,0xE2,0x47,0x3A,0xDA,0x2E,0xD8,0x83,0xC7,0x97,0x01,0x1A,0xD6,0xB3,0x02,
+0xA6,0x00,0x83,0xC3,0x92,0x00,0xB3,0x87,0xF3,0x02,0x83,0xC3,0x82,0x00,0xBE,0x93,
+0xD2,0x47,0x86,0x03,0xBE,0x93,0xF2,0x47,0x83,0x92,0x03,0x00,0x83,0xD7,0x67,0x03,
+0x86,0x07,0x63,0xD8,0xF2,0x04,0x11,0x05,0x32,0x95,0x36,0xD4,0xA5,0x35,0xB7,0x57,
+0x00,0x20,0x13,0x86,0x47,0x7E,0xA2,0x56,0x32,0x53,0xC2,0x55,0x52,0x57,0x15,0xE1,
+0x92,0x47,0x13,0x04,0x04,0x04,0x06,0x04,0x3E,0x94,0xC2,0x47,0x23,0x11,0x04,0x00,
+0x42,0x47,0x83,0xC7,0x57,0x36,0xFD,0x17,0x93,0xF7,0xF7,0x0F,0xA3,0x02,0xF7,0x36,
+0x19,0xBF,0x02,0x45,0x05,0x07,0x93,0x77,0xF7,0x0F,0x09,0x03,0x99,0x05,0xE3,0xED,
+0xA7,0xF2,0xA2,0x47,0x02,0x47,0x85,0x04,0x89,0x07,0x3E,0xC4,0x93,0xF7,0xF4,0x0F,
+0x99,0x06,0xE3,0xE6,0xE7,0xF0,0x86,0x40,0x72,0x54,0xE2,0x54,0x13,0x01,0x41,0x04,
+0x82,0x80,0x51,0x11,0x22,0xC2,0x37,0x54,0x00,0x20,0x83,0x27,0x04,0xFF,0x06,0xC4,
+0x3D,0x47,0x83,0xC7,0x97,0x14,0x13,0x04,0x04,0xFF,0x63,0x63,0xF7,0x06,0x37,0xF7,
+0x00,0x20,0x03,0x56,0x47,0x2F,0x37,0xF7,0x00,0x20,0x03,0x25,0x47,0x12,0x37,0xB7,
+0x00,0x20,0x83,0x25,0x87,0x2C,0x95,0xCB,0x01,0x47,0x3D,0x43,0xC1,0x42,0x93,0x17,
+0x07,0x01,0xC1,0x83,0x63,0xF8,0xC7,0x02,0x83,0x16,0x05,0x00,0x93,0x17,0x17,0x00,
+0xAE,0x97,0xB3,0x86,0x66,0x02,0x83,0x97,0x07,0x00,0x05,0x07,0x09,0x05,0xB6,0x97,
+0xB3,0xC7,0x57,0x02,0x23,0x1F,0xF5,0xFE,0xD9,0xBF,0x06,0x06,0x97,0xD0,0xFF,0x1F,
+0xE7,0x80,0x40,0x4C,0x18,0x40,0x83,0x47,0x97,0x14,0x85,0x07,0xA3,0x04,0xF7,0x14,
+0x1C,0x40,0x3D,0x47,0x83,0xC7,0xB7,0x14,0x63,0x67,0xF7,0x06,0x37,0x57,0x00,0x20,
+0x03,0x27,0x07,0x01,0x03,0x46,0x97,0x01,0x37,0xA7,0x00,0x20,0x03,0x25,0xC7,0xD8,
+0x37,0xF7,0x00,0x20,0x83,0x25,0x87,0x12,0x85,0xCF,0x42,0x06,0x01,0x47,0x41,0x82,
+0x3D,0x43,0xC1,0x42,0x93,0x17,0x07,0x01,0xC1,0x83,0x63,0xF8,0xC7,0x02,0x83,0x16,
+0x05,0x00,0x93,0x17,0x17,0x00,0xAE,0x97,0xB3,0x86,0x66,0x02,0x83,0x97,0x07,0x00,
+0x05,0x07,0x09,0x05,0xB6,0x97,0xB3,0xC7,0x57,0x02,0x23,0x1F,0xF5,0xFE,0xD9,0xBF,
+0x06,0x06,0x97,0xD0,0xFF,0x1F,0xE7,0x80,0xE0,0x44,0x18,0x40,0x83,0x47,0xB7,0x14,
+0x85,0x07,0xA3,0x05,0xF7,0x14,0x1C,0x40,0x3D,0x47,0x83,0xC7,0xA7,0x14,0x63,0x67,
+0xF7,0x06,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x46,0xA7,0x01,0x37,0xE7,
+0x00,0x20,0x03,0x25,0xC7,0xD1,0x37,0xF7,0x00,0x20,0x83,0x25,0x07,0x12,0x85,0xCF,
+0x42,0x06,0x01,0x47,0x41,0x82,0x3D,0x43,0xC1,0x42,0x93,0x17,0x07,0x01,0xC1,0x83,
+0x63,0xF8,0xC7,0x02,0x83,0x16,0x05,0x00,0x93,0x17,0x17,0x00,0xAE,0x97,0xB3,0x86,
+0x66,0x02,0x83,0x97,0x07,0x00,0x05,0x07,0x09,0x05,0xB6,0x97,0xB3,0xC7,0x57,0x02,
+0x23,0x1F,0xF5,0xFE,0xD9,0xBF,0x06,0x06,0x97,0xD0,0xFF,0x1F,0xE7,0x80,0x80,0x3D,
+0x18,0x40,0x83,0x47,0xA7,0x14,0x85,0x07,0x23,0x05,0xF7,0x14,0xA2,0x40,0x12,0x44,
+0x31,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x37,0x75,0x00,0x20,
+0x81,0x45,0x03,0xC6,0x97,0x01,0x13,0x05,0x05,0xD4,0x06,0x06,0x6F,0xD0,0xAF,0xA0,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0x93,0xF7,0x07,0x02,
+0x95,0xC3,0xB7,0x57,0x00,0x20,0x83,0xA5,0x07,0x01,0x37,0x75,0x00,0x20,0xB7,0xB7,
+0x00,0x20,0x03,0xA3,0x47,0x2C,0x13,0x05,0x05,0xD4,0x81,0x47,0x03,0xC7,0x95,0x01,
+0x63,0xE3,0xE7,0x00,0x82,0x80,0x13,0x96,0x17,0x00,0xB3,0x06,0xC3,0x00,0x01,0x47,
+0xB3,0x02,0xC5,0x00,0x03,0xC6,0xA5,0x01,0x63,0x66,0xC7,0x00,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0xE9,0xBF,0x03,0xD6,0x06,0x00,0x83,0xD3,0x02,0x00,0x05,0x07,0x13,0x77,
+0xF7,0x0F,0x1E,0x96,0x23,0x90,0xC6,0x00,0x03,0xC6,0x95,0x01,0x06,0x06,0xB2,0x96,
+0xD1,0xBF,0x31,0x11,0x26,0xC4,0xB7,0x57,0x00,0x20,0xB7,0x54,0x00,0x20,0x03,0xA7,
+0x07,0xFF,0x83,0xA5,0x04,0x01,0x22,0xC6,0x06,0xC8,0x03,0x53,0xC7,0x03,0x03,0xC7,
+0x25,0x0E,0x29,0x45,0x37,0xF4,0x00,0x20,0x13,0x56,0x47,0x00,0x33,0x06,0x66,0x02,
+0x93,0x76,0xF7,0x00,0x13,0x07,0xC4,0x2D,0x03,0x47,0x07,0x09,0x13,0x04,0xC4,0x2D,
+0x62,0x07,0x61,0x87,0x33,0x46,0xA6,0x02,0xB3,0x86,0x66,0x02,0x42,0x06,0x41,0x82,
+0xB3,0xC6,0xA6,0x02,0x63,0x45,0x07,0x0E,0x37,0xA5,0x00,0x20,0x83,0xC5,0xC5,0x01,
+0x03,0x25,0x85,0xD8,0xC2,0x06,0xC1,0x82,0x13,0x07,0x61,0x00,0x97,0xF0,0xFF,0x1F,
+0xE7,0x80,0x40,0xA4,0xB7,0x57,0x00,0x20,0x93,0x87,0x07,0xFF,0x83,0xA5,0x04,0x01,
+0x98,0x43,0x13,0x73,0xF5,0x0F,0x03,0xC5,0x15,0x0E,0x83,0x52,0x07,0x04,0x29,0x47,
+0x13,0x56,0x45,0x00,0x93,0x76,0xF5,0x00,0x03,0x45,0x04,0x09,0x62,0x05,0x61,0x85,
+0x33,0x06,0x56,0x02,0xB3,0x86,0x56,0x02,0x33,0x46,0xE6,0x02,0xB3,0xC6,0xE6,0x02,
+0x63,0x42,0x05,0x0A,0x42,0x06,0x41,0x82,0x37,0xA5,0x00,0x20,0x83,0xC5,0xB5,0x01,
+0x03,0x25,0x05,0xD9,0xC2,0x06,0xC1,0x82,0x13,0x07,0x61,0x00,0x1A,0xC0,0x97,0xF0,
+0xFF,0x1F,0xE7,0x80,0x20,0x9E,0x02,0x43,0x2A,0x93,0x13,0x73,0xF3,0x0F,0x05,0x45,
+0x63,0x1A,0x03,0x04,0xB7,0x57,0x00,0x20,0x93,0x87,0x07,0xFF,0x9C,0x43,0x29,0x47,
+0x83,0xD6,0x67,0x03,0x83,0xA7,0x04,0x01,0x83,0xC7,0x07,0x0E,0x13,0xD5,0x47,0x00,
+0x93,0xF5,0xF7,0x00,0x83,0x47,0x04,0x09,0x33,0x05,0xD5,0x02,0xE2,0x07,0xE1,0x87,
+0x33,0x45,0xE5,0x02,0xB3,0x85,0xD5,0x02,0x42,0x05,0x41,0x81,0xB3,0xC5,0xE5,0x02,
+0x63,0xCB,0x07,0x04,0xC2,0x05,0xC1,0x81,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0x80,0xA9,
+0x33,0x35,0xA0,0x00,0xC2,0x40,0x32,0x44,0xA2,0x44,0x51,0x01,0x82,0x80,0xC2,0x06,
+0xC1,0x82,0x3D,0x47,0xB3,0x86,0xE6,0x02,0x06,0x06,0x42,0x06,0x41,0x82,0xB3,0xC6,
+0xA6,0x02,0x19,0xB7,0x41,0x65,0x7D,0x15,0x69,0x8E,0xE5,0x42,0x33,0x06,0x56,0x02,
+0xE9,0x8E,0x49,0x45,0x33,0x46,0xE6,0x02,0xB3,0x86,0xA6,0x02,0x42,0x06,0x41,0x82,
+0xB3,0xC6,0xE6,0x02,0x91,0xB7,0xC2,0x05,0xC1,0x81,0xBD,0x47,0xB3,0x85,0xF5,0x02,
+0x06,0x05,0x42,0x05,0x41,0x81,0xB3,0xC5,0xE5,0x02,0x69,0xBF,0xB7,0x52,0x00,0x20,
+0x93,0x87,0x02,0xFF,0xDC,0x43,0x05,0x67,0x93,0x82,0x02,0xFF,0x3E,0x97,0x03,0x45,
+0x77,0xA0,0x11,0xC5,0x7D,0x15,0xA3,0x03,0xA7,0xA0,0x03,0x45,0x87,0xA0,0xB7,0x56,
+0x00,0x20,0x13,0x86,0x46,0x7E,0x05,0x67,0x3A,0x96,0x83,0x43,0x76,0x36,0x37,0x63,
+0x00,0x20,0x13,0x03,0x43,0x7E,0x63,0x8A,0x03,0x04,0x81,0x45,0x85,0x05,0x93,0x86,
+0x46,0x7E,0x93,0xF5,0xF5,0x0F,0x03,0x16,0x83,0x30,0x13,0x07,0x87,0x30,0x99,0x06,
+0x63,0x90,0xB3,0x08,0x83,0xA6,0x02,0x00,0x05,0x67,0x3E,0x97,0x83,0x96,0x26,0x05,
+0x23,0x15,0xC7,0xA0,0x86,0x06,0x63,0x59,0xD6,0x04,0x03,0x46,0x63,0x36,0x85,0x46,
+0x63,0xF4,0xC6,0x04,0x93,0x06,0x40,0x06,0xA3,0x03,0xD7,0xA0,0x05,0x67,0xBA,0x97,
+0x09,0x47,0x23,0x84,0xE7,0xA0,0x09,0x45,0x82,0x80,0x85,0x46,0x63,0x0B,0xD5,0x02,
+0x09,0xC5,0x09,0x47,0xE3,0x04,0xE5,0xFE,0x82,0x80,0xBA,0x97,0x23,0x84,0x07,0xA0,
+0x82,0x80,0x93,0x06,0x40,0x06,0xA3,0x03,0xD7,0xA0,0x05,0x67,0xBA,0x97,0x09,0x47,
+0x23,0x84,0xE7,0xA0,0x09,0x45,0xAD,0xA8,0x05,0x67,0x3E,0x97,0xA9,0x46,0xA3,0x03,
+0xD7,0xA0,0x05,0x67,0xBA,0x97,0x05,0x47,0x23,0x84,0xE7,0xA0,0x05,0x45,0x82,0x80,
+0x71,0x11,0x22,0xC0,0x33,0x85,0xE6,0x00,0x03,0x55,0x05,0x00,0x13,0x14,0x05,0x01,
+0x41,0x84,0x63,0x53,0x86,0x00,0x32,0x85,0x85,0x05,0x13,0x16,0x05,0x01,0x93,0xF5,
+0xF5,0x0F,0x41,0x86,0x99,0x06,0xE3,0x9F,0xB3,0xFC,0x83,0xA6,0x02,0x00,0x05,0x67,
+0x3E,0x97,0x83,0x96,0x26,0x05,0x23,0x15,0xC7,0xA0,0x86,0x06,0x63,0x57,0xD6,0x00,
+0x03,0x46,0x63,0x36,0x85,0x46,0xE3,0xE6,0xC6,0xF8,0x05,0x67,0x3E,0x97,0xA9,0x46,
+0xA3,0x03,0xD7,0xA0,0x05,0x67,0xBA,0x97,0x05,0x47,0x23,0x84,0xE7,0xA0,0x05,0x45,
+0x02,0x44,0x11,0x01,0x82,0x80,0xB7,0xF7,0x00,0x20,0x83,0xC7,0xB7,0x38,0x91,0x8B,
+0x95,0xCB,0x51,0x11,0x06,0xC4,0x5D,0x3D,0xB7,0x57,0x00,0x20,0x93,0x87,0x07,0xFF,
+0xDC,0x43,0x05,0x67,0xBA,0x97,0x09,0xC9,0x05,0x47,0x23,0x81,0xE7,0xA0,0xEF,0xF0,
+0xAF,0xCD,0xA2,0x40,0x31,0x01,0x51,0xBA,0x83,0xC7,0x27,0xA0,0xED,0xFB,0xA2,0x40,
+0x31,0x01,0x82,0x80,0x82,0x80,0x21,0x11,0x22,0xC8,0x37,0x54,0x00,0x20,0x93,0x07,
+0x04,0xFF,0xD8,0x43,0x85,0x67,0x06,0xCA,0x33,0x06,0xF7,0x00,0x83,0x56,0xC6,0xA0,
+0x26,0xC6,0x99,0xCA,0xFD,0x16,0x23,0x16,0xD6,0xA0,0x81,0x44,0xD2,0x40,0x42,0x44,
+0x26,0x85,0xB2,0x44,0x61,0x01,0x82,0x80,0xB7,0x56,0x00,0x20,0x93,0x86,0x46,0x7E,
+0xB6,0x97,0x83,0xC4,0x67,0x36,0xAD,0xE4,0xB7,0x56,0x00,0x20,0x83,0xA5,0x06,0x01,
+0xB7,0xA7,0x00,0x20,0x03,0xA5,0x07,0xD9,0x03,0xC3,0x95,0x01,0x13,0x04,0x04,0xFF,
+0x81,0x47,0x01,0x46,0x81,0x42,0x36,0xC0,0x93,0xF6,0xF7,0x0F,0x63,0xE5,0x66,0x04,
+0x83,0xC3,0xA5,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x87,0xD8,0x81,0x46,0x81,0x47,
+0x01,0x43,0x93,0xF5,0xF7,0x0F,0x63,0xEB,0x75,0x04,0x85,0x65,0x2E,0x97,0x08,0x40,
+0x83,0x55,0xE7,0xA0,0x83,0x57,0xE5,0x03,0xE1,0xE5,0x8D,0x45,0xB3,0xD3,0xB7,0x02,
+0x63,0xC1,0xC3,0x06,0x5C,0x40,0x05,0x67,0xBA,0x97,0x23,0x97,0x07,0xA0,0xBD,0xBF,
+0x23,0x17,0x06,0xA0,0x9D,0xBF,0x91,0xE6,0x03,0x16,0x05,0x00,0x81,0x42,0x85,0x07,
+0x65,0xB7,0x93,0x96,0x17,0x00,0xAA,0x96,0x83,0x96,0x06,0x00,0xE3,0x59,0xD6,0xFE,
+0x93,0x92,0x07,0x01,0x93,0xD2,0x02,0x41,0x36,0x86,0xD5,0xB7,0x91,0xE5,0x83,0x16,
+0x05,0x00,0x01,0x43,0x85,0x07,0x71,0xBF,0x93,0x95,0x17,0x00,0xAA,0x95,0x83,0x95,
+0x05,0x00,0xE3,0xD9,0xB6,0xFE,0x13,0x93,0x07,0x01,0x13,0x53,0x03,0x41,0xAE,0x86,
+0xD5,0xB7,0xB3,0x87,0xB7,0x02,0x85,0x87,0xE3,0x5E,0xF6,0xF8,0x83,0x57,0xA5,0x03,
+0x33,0xD6,0xB7,0x02,0xE3,0x58,0xD6,0xF8,0xB3,0x85,0xB7,0x02,0x85,0x85,0xE3,0xD3,
+0xB6,0xF8,0x23,0x18,0x57,0xA0,0x23,0x19,0x67,0xA0,0x5C,0x40,0x05,0x67,0x82,0x46,
+0xBA,0x97,0x03,0xD7,0xE7,0xA0,0x83,0xA6,0x06,0x01,0x29,0x46,0x05,0x07,0x42,0x07,
+0x41,0x83,0x23,0x97,0xE7,0xA0,0x83,0xC6,0xB6,0x03,0x85,0x44,0x33,0x86,0xC6,0x02,
+0xE3,0x4E,0xC7,0xEC,0x86,0x06,0x23,0x97,0x07,0xA0,0x23,0x96,0xD7,0xA0,0xF9,0xB5,
+0x95,0x45,0xB3,0xD3,0xB7,0x02,0x63,0xCC,0xC3,0x00,0x01,0x45,0x5C,0x40,0x05,0x67,
+0xBA,0x97,0x23,0x98,0x57,0xA0,0x23,0x99,0x67,0xA0,0x45,0xF9,0x25,0xB7,0x8D,0x43,
+0xB3,0x87,0x77,0x02,0x85,0x87,0xE3,0x52,0xF6,0xFE,0x83,0x57,0xA5,0x03,0xB3,0xD5,
+0xB7,0x02,0xE3,0xDC,0xD5,0xFC,0xB3,0x83,0x77,0x02,0x93,0xD3,0x13,0x40,0xE3,0xD6,
+0x76,0xFC,0x83,0x55,0x07,0xA1,0x16,0x85,0x1A,0xC4,0x16,0xC2,0x97,0xD0,0xFF,0x1F,
+0xE7,0x80,0xC0,0xEB,0x85,0x47,0x92,0x42,0x22,0x43,0xE3,0xE8,0xA7,0xFA,0x5C,0x40,
+0x05,0x67,0x1A,0x85,0xBA,0x97,0x83,0xD5,0x27,0xA1,0x16,0xC4,0x1A,0xC2,0x97,0xD0,
+0xFF,0x1F,0xE7,0x80,0xA0,0xE9,0x13,0x35,0x25,0x00,0xA2,0x42,0x12,0x43,0x79,0xB7,
+0xB7,0xF7,0x00,0x20,0x83,0xA6,0x47,0x71,0x13,0x07,0xC0,0x03,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x87,0x3B,0x63,0x77,0xD7,0x00,0x29,0x47,0x23,0x8A,0xE7,0x00,0x05,0x45,
+0x82,0x80,0x03,0xC5,0x47,0x01,0x6D,0xDD,0x7D,0x15,0x23,0x8A,0xA7,0x00,0xC5,0xBF,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x83,0xC7,0x57,0x03,0x01,0x45,0x93,0xF7,
+0xF7,0x0F,0x63,0x86,0x07,0x24,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,0x51,0x11,
+0x22,0xC4,0x26,0xC2,0x03,0xC6,0xB6,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA3,0x07,0xD9,
+0x02,0xC0,0x01,0x47,0x81,0x47,0x13,0x05,0xC0,0xF9,0x93,0x75,0xF7,0x0F,0x63,0xEB,
+0xC5,0x12,0x93,0x15,0x36,0x00,0x29,0x47,0xB3,0xC5,0xE5,0x02,0x01,0x45,0x63,0xCF,
+0xB7,0x04,0x83,0xC3,0xC6,0x01,0xB7,0xA7,0x00,0x20,0x83,0xA2,0x87,0xD8,0x01,0x47,
+0x81,0x47,0x13,0x04,0xC0,0xF9,0x13,0x75,0xF7,0x0F,0x63,0x61,0x75,0x12,0x29,0x45,
+0x13,0x97,0x33,0x00,0x33,0x47,0xA7,0x02,0x01,0x45,0x63,0xC9,0xE7,0x02,0xB7,0xB7,
+0x00,0x20,0x03,0xA4,0x47,0x2C,0x01,0x47,0x81,0x47,0x93,0x04,0x40,0x09,0x63,0x96,
+0xF3,0x14,0xB7,0xF7,0x00,0x20,0x83,0xD7,0x67,0x2F,0x29,0x45,0x8E,0x07,0xB3,0xC7,
+0xA7,0x02,0x05,0x45,0x63,0x44,0xF7,0x00,0x23,0x00,0xA1,0x00,0x01,0x47,0x81,0x47,
+0x93,0x03,0x40,0x06,0x93,0x72,0xF7,0x0F,0x63,0xE3,0xC2,0x12,0x01,0x43,0x63,0xCF,
+0xB7,0x04,0x83,0xC2,0xC6,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA3,0x87,0xD8,0x01,0x47,
+0x81,0x47,0x93,0x03,0x40,0x06,0x93,0x75,0xF7,0x0F,0x63,0xEE,0x55,0x10,0x13,0x97,
+0x32,0x00,0xA9,0x45,0x33,0x47,0xB7,0x02,0x01,0x43,0x63,0xC9,0xE7,0x02,0xB7,0xB7,
+0x00,0x20,0x83,0xA3,0x47,0x2C,0x01,0x47,0x81,0x47,0x13,0x04,0x40,0x09,0x63,0x93,
+0xF2,0x14,0xB7,0xF7,0x00,0x20,0x83,0xD7,0x67,0x2F,0xA9,0x46,0x05,0x43,0x8E,0x07,
+0xB3,0xC7,0xD7,0x02,0x63,0x44,0xF7,0x00,0xA3,0x00,0x61,0x00,0xB7,0x67,0x00,0x20,
+0x93,0x87,0x47,0x7E,0x83,0xC7,0x87,0x36,0x91,0xEB,0x01,0xC5,0x85,0x47,0x23,0x01,
+0xF1,0x00,0x63,0x05,0x03,0x00,0x85,0x47,0xA3,0x01,0xF1,0x00,0x37,0x57,0x00,0x20,
+0x93,0x07,0x87,0x3B,0xE1,0x07,0x01,0x46,0x93,0x06,0x87,0x3B,0x15,0x45,0x91,0x45,
+0x33,0x07,0xC1,0x00,0x03,0x47,0x07,0x00,0x65,0xCB,0x03,0xC7,0x07,0x00,0x05,0x07,
+0x13,0x77,0xF7,0x0F,0x23,0x80,0xE7,0x00,0x63,0x72,0xE5,0x0E,0x23,0xAC,0x06,0x00,
+0x05,0x45,0xD5,0xA0,0x93,0x15,0x17,0x00,0x9A,0x95,0x83,0x95,0x05,0x00,0x63,0xD5,
+0xA5,0x00,0x85,0x07,0xC2,0x07,0xC1,0x83,0x05,0x07,0x45,0xBD,0x13,0x15,0x17,0x00,
+0x16,0x95,0x03,0x15,0x05,0x00,0x63,0x55,0x85,0x00,0x85,0x07,0xC2,0x07,0xC1,0x83,
+0x05,0x07,0xD1,0xB5,0x13,0x95,0x12,0x00,0x22,0x95,0x03,0x55,0x05,0x00,0x13,0x05,
+0xD5,0xFC,0x42,0x05,0x41,0x81,0x63,0xE5,0xA4,0x00,0x05,0x07,0x42,0x07,0x41,0x83,
+0x85,0x02,0x13,0xF5,0xF2,0x0F,0xE3,0x6F,0xC5,0xFC,0x03,0xC5,0x96,0x01,0x85,0x07,
+0x93,0xF7,0xF7,0x0F,0x06,0x05,0x2A,0x94,0x5D,0xBD,0x81,0x42,0xDD,0xB7,0x93,0x12,
+0x17,0x00,0x9A,0x92,0x83,0x92,0x02,0x00,0x63,0xD5,0x53,0x00,0x85,0x07,0xC2,0x07,
+0xC1,0x83,0x05,0x07,0xC1,0xB5,0x93,0x15,0x17,0x00,0x9A,0x95,0x83,0x95,0x05,0x00,
+0x63,0xD5,0xB3,0x00,0x85,0x07,0xC2,0x07,0xC1,0x83,0x05,0x07,0xE9,0xB5,0x93,0x15,
+0x13,0x00,0x9E,0x95,0x83,0xD5,0x05,0x00,0x93,0x85,0x75,0x0C,0xC2,0x05,0xC1,0x81,
+0x63,0x65,0xB4,0x00,0x05,0x07,0x42,0x07,0x41,0x83,0x05,0x03,0x93,0x75,0xF3,0x0F,
+0xE3,0xEF,0xC5,0xFC,0x83,0xC5,0x96,0x01,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x86,0x05,
+0xAE,0x93,0x75,0xBD,0x01,0x43,0xDD,0xB7,0x23,0x80,0x07,0x00,0x05,0x06,0x85,0x07,
+0xE3,0x10,0xB6,0xF0,0x01,0x45,0x22,0x44,0x92,0x44,0x31,0x01,0x82,0x80,0x82,0x80,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x03,0xC7,0xF7,0x0A,0x05,0x8B,0x63,0x0F,
+0x07,0x2E,0x37,0xF7,0x00,0x20,0x03,0x47,0x47,0x4F,0x63,0x19,0x07,0x2E,0x13,0x01,
+0x81,0xFD,0xB7,0xF6,0x00,0x20,0x13,0x87,0xC6,0x67,0x06,0xD2,0x22,0xD0,0x26,0xCE,
+0x03,0x47,0x87,0x00,0x93,0x86,0xC6,0x67,0x36,0xC2,0x13,0x77,0xF7,0x0F,0x31,0xC3,
+0x37,0x53,0x00,0x20,0x13,0x04,0x03,0xFF,0x14,0x40,0x37,0x57,0x00,0x20,0x03,0x25,
+0xC7,0x00,0x37,0xB7,0x00,0x20,0x83,0x25,0x47,0x2C,0x03,0xC7,0x96,0x14,0x03,0xD6,
+0x87,0x01,0xC1,0x47,0x13,0x03,0x03,0xFF,0x63,0x1F,0xF7,0x02,0x06,0x06,0x97,0xD0,
+0xFF,0x1F,0xE7,0x80,0x20,0xB5,0x18,0x40,0x83,0x47,0x97,0x14,0x85,0x07,0xA3,0x04,
+0xF7,0x14,0x92,0x47,0x01,0x44,0xB7,0x54,0x00,0x20,0x83,0xC7,0x67,0x00,0x93,0xF7,
+0xF7,0x0F,0x63,0x92,0x07,0x16,0x63,0x01,0x04,0x10,0x92,0x50,0x02,0x54,0xF2,0x44,
+0x13,0x01,0x81,0x02,0x82,0x80,0xE3,0xFE,0xE7,0xFC,0xB7,0xF7,0x00,0x20,0x83,0xA4,
+0x47,0x12,0x06,0x06,0x2A,0x84,0xB3,0x07,0x96,0x00,0x3E,0xC0,0x2E,0x87,0x01,0x46,
+0x81,0x47,0x82,0x45,0xE3,0x8F,0xB4,0xFA,0x83,0x25,0x03,0x00,0x85,0x63,0x3E,0x85,
+0x9E,0x95,0x83,0xD5,0xE5,0xB5,0x32,0xCA,0x3A,0xC8,0x36,0xC6,0x3E,0xC4,0x97,0xD0,
+0xFF,0x1F,0xE7,0x80,0xA0,0xB1,0x37,0x57,0x00,0x20,0x89,0x42,0x13,0x03,0x07,0xFF,
+0xA2,0x47,0x85,0x63,0xB2,0x46,0x42,0x47,0x52,0x46,0x63,0xF9,0xA2,0x02,0x03,0x55,
+0x07,0x00,0x83,0x55,0x04,0x00,0xAA,0x95,0xC2,0x05,0xC1,0x85,0x23,0x10,0xB4,0x00,
+0x03,0x95,0x46,0x00,0x63,0xD9,0xA5,0x04,0x03,0x95,0x66,0x00,0x63,0x4E,0xB5,0x04,
+0x03,0x85,0x96,0x00,0x83,0xD5,0x04,0x00,0xAA,0x95,0x99,0xA0,0x83,0x25,0x03,0x00,
+0x32,0x85,0x3E,0xCA,0xAE,0x93,0x83,0xD5,0x03,0xB6,0x3A,0xC8,0x36,0xC6,0x32,0xC4,
+0x97,0xD0,0xFF,0x1F,0xE7,0x80,0x80,0xAB,0xB7,0x57,0x00,0x20,0x89,0x42,0x13,0x83,
+0x07,0xFF,0x22,0x46,0xB2,0x46,0x42,0x47,0xD2,0x47,0xE3,0xE2,0xA2,0xFA,0x89,0x04,
+0x09,0x04,0x09,0x07,0xB9,0xBF,0x03,0x85,0x86,0x00,0x83,0xD5,0x04,0x00,0x89,0x8D,
+0x23,0x90,0xB4,0x00,0x23,0x10,0x04,0x00,0xB7,0x55,0x00,0x20,0x83,0xA5,0x05,0x01,
+0x85,0x07,0xC2,0x07,0x83,0xC5,0x95,0x01,0xC1,0x87,0xE3,0xCA,0xB7,0xFC,0x05,0x06,
+0x42,0x06,0x41,0x86,0x81,0x47,0xE1,0xB7,0x92,0x47,0x05,0x44,0x83,0xC7,0x77,0x00,
+0x93,0xF7,0xF7,0x0F,0xE3,0x89,0x07,0xEE,0xB7,0xA7,0x00,0x20,0x93,0x86,0x04,0xFF,
+0x03,0xA5,0x47,0xD8,0x98,0x42,0xB7,0xA7,0x00,0x20,0x83,0xA2,0x87,0xD8,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0x45,0xA7,0x14,0x03,0xC6,0xA7,0x01,0xC1,0x47,
+0x63,0x96,0xF5,0x08,0x06,0x06,0x96,0x85,0x97,0xD0,0xFF,0x1F,0xE7,0x80,0x80,0x9E,
+0xB7,0x57,0x00,0x20,0x93,0x86,0x07,0xFF,0x98,0x42,0x83,0x47,0xA7,0x14,0x85,0x07,
+0x23,0x05,0xF7,0x14,0x4D,0xB5,0xB7,0xF7,0x00,0x20,0x93,0x86,0x04,0xFF,0x03,0xA5,
+0xC7,0x12,0x98,0x42,0xB7,0xA7,0x00,0x20,0x83,0xA2,0x07,0xD9,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x83,0x45,0xB7,0x14,0x03,0xC6,0x97,0x01,0xC1,0x47,0x63,0x93,
+0xF5,0x02,0x06,0x06,0x96,0x85,0x97,0xD0,0xFF,0x1F,0xE7,0x80,0xA0,0x99,0xB7,0x57,
+0x00,0x20,0x93,0x86,0x07,0xFF,0x98,0x42,0x83,0x47,0xB7,0x14,0x85,0x07,0xA3,0x05,
+0xF7,0x14,0x91,0xBD,0xB7,0xA6,0x00,0x20,0x83,0xA3,0xC6,0xD8,0xE3,0xF5,0xB7,0xE4,
+0x93,0x17,0x06,0x01,0xC1,0x83,0x3E,0xC0,0x29,0x07,0x21,0xA8,0xB7,0xE6,0x00,0x20,
+0x83,0xA3,0xC6,0xD1,0xE3,0xF9,0xB7,0xE2,0x93,0x17,0x06,0x01,0xC1,0x83,0x3E,0xC0,
+0x51,0x07,0xAA,0x87,0x01,0x43,0x05,0xA0,0x83,0xD5,0x06,0xB6,0x35,0xA8,0x9E,0x96,
+0x83,0x05,0x87,0x00,0x03,0xD6,0x06,0x00,0x2E,0x96,0x23,0x90,0xC6,0x00,0x23,0x90,
+0x07,0x00,0x05,0x03,0x89,0x07,0x02,0x46,0x93,0x16,0x03,0x01,0xC1,0x82,0xE3,0xFC,
+0xC6,0xDE,0x83,0xA6,0x04,0xFF,0x05,0x66,0x3E,0xCC,0x3A,0xCA,0x1E,0xC8,0x16,0xC6,
+0xB2,0x96,0x79,0xF0,0x83,0xD5,0xE6,0xB5,0x1A,0x85,0x1A,0xC4,0x97,0xD0,0xFF,0x1F,
+0xE7,0x80,0xC0,0x93,0x89,0x46,0x22,0x43,0xB2,0x42,0xC2,0x43,0x52,0x47,0xE2,0x47,
+0xE3,0xF1,0xA6,0xFC,0x93,0x16,0x13,0x00,0x33,0x86,0xD2,0x00,0x83,0xD5,0x07,0x00,
+0x03,0x56,0x06,0x00,0x2E,0x96,0x42,0x06,0x41,0x86,0x23,0x90,0xC7,0x00,0x83,0x15,
+0x47,0x00,0xE3,0x56,0xB6,0xF8,0x83,0x15,0x67,0x00,0xE3,0xCC,0xC5,0xF8,0x9E,0x96,
+0x83,0x05,0x97,0x00,0x03,0xD6,0x06,0x00,0x0D,0x8E,0x41,0xB7,0x82,0x80,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0xFF,0x51,0x11,0x06,0xC4,0xA3,0x84,0x07,0x14,0x23,0x95,
+0x07,0x14,0x05,0xC9,0x85,0x47,0x63,0x0F,0xF5,0x02,0xEF,0xC0,0xBF,0xC6,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0x87,0x6D,0x03,0xC5,0x47,0x03,0x97,0x10,0x00,0x20,0xE7,0x80,
+0x00,0xCA,0xA2,0x40,0xB7,0xF7,0x00,0x20,0x05,0x47,0xA3,0x83,0xE7,0x6C,0x31,0x01,
+0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x23,0x87,0x07,0x08,0xEF,0x10,
+0xB0,0x41,0xE1,0xB7,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x23,0x87,0xA7,0x08,
+0xFD,0xB7,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,0x83,0x46,0xE7,0x08,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0x93,0xF6,0xF6,0x0F,0xC1,0xC2,0x31,0xE1,0x83,0xC6,
+0xB7,0x13,0x03,0xC6,0xA7,0x13,0xA2,0x06,0xD1,0x8E,0x23,0x1E,0xD7,0x0A,0x83,0xC6,
+0xD7,0x13,0x03,0xC6,0xC7,0x13,0xA2,0x06,0xD1,0x8E,0x23,0x1F,0xD7,0x0A,0x83,0xC6,
+0xF7,0x13,0x03,0xC6,0xE7,0x13,0xA2,0x06,0xD1,0x8E,0x23,0x10,0xD7,0x0C,0x83,0xC6,
+0x07,0x14,0x83,0xC7,0x17,0x14,0xA2,0x07,0xD5,0x8F,0x23,0x11,0xF7,0x0C,0x82,0x80,
+0x83,0xC6,0x37,0x14,0x03,0xC6,0x27,0x14,0xA2,0x06,0xD1,0x8E,0x23,0x1E,0xD7,0x0A,
+0x83,0xC6,0x57,0x14,0x03,0xC6,0x47,0x14,0xA2,0x06,0xD1,0x8E,0x23,0x1F,0xD7,0x0A,
+0x83,0xC6,0x77,0x14,0x03,0xC6,0x67,0x14,0xA2,0x06,0xD1,0x8E,0x23,0x10,0xD7,0x0C,
+0x83,0xC6,0x87,0x14,0x83,0xC7,0x97,0x14,0x7D,0xBF,0x83,0xC6,0x37,0x13,0x03,0xC6,
+0x27,0x13,0xA2,0x06,0xD1,0x8E,0x23,0x1E,0xD7,0x0A,0x83,0xC6,0x57,0x13,0x03,0xC6,
+0x47,0x13,0xA2,0x06,0xD1,0x8E,0x23,0x1F,0xD7,0x0A,0x83,0xC6,0x77,0x13,0x03,0xC6,
+0x67,0x13,0xA2,0x06,0xD1,0x8E,0x23,0x10,0xD7,0x0C,0x83,0xC6,0x87,0x13,0x83,0xC7,
+0x97,0x13,0x51,0xB7,0x05,0x43,0x63,0x63,0xB3,0x00,0x82,0x80,0x05,0x47,0x81,0x47,
+0x13,0x96,0x17,0x00,0x93,0x16,0x17,0x00,0x2A,0x96,0xAA,0x96,0x03,0x16,0x06,0x00,
+0x83,0x96,0x06,0x00,0x63,0xD5,0xC6,0x00,0x93,0x17,0x07,0x01,0xC1,0x87,0x05,0x07,
+0x93,0x16,0x07,0x01,0xC1,0x82,0xE3,0xED,0xB6,0xFC,0x99,0xCB,0x86,0x07,0xAA,0x97,
+0x83,0x96,0x07,0x00,0x03,0x17,0x05,0x00,0x23,0x10,0xD5,0x00,0x23,0x90,0xE7,0x00,
+0xFD,0x15,0xC2,0x05,0xC1,0x81,0x09,0x05,0x7D,0xB7,0x51,0x11,0x06,0xC4,0x22,0xC2,
+0x97,0xE0,0xFF,0x1F,0xE7,0x80,0xC0,0xD3,0x37,0x54,0x00,0x20,0x83,0x27,0x04,0x01,
+0x01,0x46,0x83,0xC5,0x97,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x07,0xD9,0x97,0xF0,
+0xFF,0x1F,0xE7,0x80,0x60,0x8D,0x83,0x27,0x04,0x01,0x12,0x44,0xA2,0x40,0x83,0xC5,
+0xA7,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA5,0x87,0xD8,0x05,0x46,0x31,0x01,0x17,0xF3,
+0xFF,0x1F,0x67,0x00,0x63,0x8B,0x51,0x11,0x06,0xC4,0x22,0xC2,0xEF,0xF0,0x4F,0xB3,
+0x37,0x54,0x00,0x20,0x83,0x27,0x04,0x01,0x01,0x46,0x83,0xC5,0x97,0x01,0xB7,0xA7,
+0x00,0x20,0x03,0xA5,0x07,0xD9,0x97,0xF0,0xFF,0x1F,0xE7,0x80,0x80,0x82,0x83,0x27,
+0x04,0x01,0x12,0x44,0xA2,0x40,0x83,0xC5,0xA7,0x01,0xB7,0xA7,0x00,0x20,0x03,0xA5,
+0x87,0xD8,0x05,0x46,0x31,0x01,0x17,0xF3,0xFF,0x1F,0x67,0x00,0x83,0x80,0x31,0x11,
+0xB7,0x57,0x00,0x20,0x26,0xC4,0x06,0xC8,0x22,0xC6,0x13,0x87,0x87,0x3B,0x03,0x47,
+0x07,0x02,0x93,0x84,0x87,0x3B,0x39,0xCF,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,
+0x83,0x56,0x27,0x0A,0x61,0x67,0x13,0x07,0x07,0x6A,0x33,0x57,0xD7,0x02,0x23,0x91,
+0xE4,0x02,0x03,0xC7,0x24,0x00,0x21,0xC7,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,
+0x83,0x56,0x27,0x0A,0x61,0x67,0x13,0x07,0x07,0x6A,0x33,0x57,0xD7,0x02,0x23,0x92,
+0xE4,0x02,0x03,0xD7,0x24,0x02,0x19,0xCB,0x03,0xD7,0x44,0x02,0x01,0xCB,0x37,0x67,
+0x00,0x20,0x13,0x07,0x47,0x7E,0x03,0x47,0x87,0x36,0x19,0xEF,0x23,0x83,0x04,0x02,
+0x01,0x45,0x35,0xAA,0x03,0xD7,0x24,0x02,0x4D,0xDF,0x7D,0x17,0x4D,0xBF,0x03,0xD7,
+0x44,0x02,0x61,0xDB,0x7D,0x17,0xE1,0xB7,0x37,0x54,0x00,0x20,0x03,0x25,0x04,0x03,
+0x03,0xC3,0x64,0x02,0xB7,0x57,0x00,0x20,0x03,0xA6,0x07,0x01,0x83,0x45,0x25,0x06,
+0xB7,0x76,0x00,0x20,0x63,0x13,0x03,0x04,0x03,0x45,0x35,0x06,0x03,0x47,0x96,0x01,
+0x37,0xB6,0x00,0x20,0x03,0x26,0x46,0x2C,0x33,0x07,0xA7,0x02,0x2E,0x97,0x06,0x07,
+0x32,0x97,0x03,0x17,0x07,0x00,0x37,0x76,0x00,0x20,0x23,0x8C,0xB6,0xD2,0x23,0x1B,
+0xE6,0xD2,0x37,0x76,0x00,0x20,0x23,0x1A,0xE6,0xD2,0x37,0xA7,0x00,0x20,0x23,0x00,
+0xA7,0xAC,0x05,0x47,0x23,0x83,0xE4,0x02,0x61,0xB7,0x37,0x55,0x00,0x20,0x03,0x25,
+0x05,0xFF,0x83,0x57,0x65,0x03,0x03,0xC5,0x86,0xD3,0x3E,0xC0,0x83,0x47,0xD6,0x15,
+0x3E,0xC2,0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x60,0x5C,0x85,0x46,0xE3,0xE0,0xA6,0xF6,
+0x03,0x26,0x04,0x03,0x83,0x45,0x36,0x06,0x37,0xA6,0x00,0x20,0x03,0x45,0x06,0xAC,
+0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x80,0x5A,0x85,0x46,0xE3,0xE1,0xA6,0xF4,0xB7,0x57,
+0x00,0x20,0x83,0x26,0x04,0x03,0x03,0xA7,0x07,0x01,0x03,0xC6,0x36,0x06,0x03,0x47,
+0x97,0x01,0x83,0xC6,0x26,0x06,0x33,0x07,0xC7,0x02,0x37,0x76,0x00,0x20,0x36,0x97,
+0xB7,0xB6,0x00,0x20,0x83,0xA6,0x46,0x2C,0x06,0x07,0x36,0x97,0x83,0x16,0x07,0x00,
+0x37,0x77,0x00,0x20,0x83,0x15,0x67,0xD3,0x63,0xD8,0xD5,0x04,0x23,0x1B,0xD7,0xD2,
+0x03,0x15,0x67,0xD3,0x83,0x15,0x46,0xD3,0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x00,0x55,
+0x12,0x47,0x82,0x47,0x33,0x84,0xE7,0x02,0x13,0x07,0x40,0x06,0x33,0x54,0xE4,0x02,
+0x42,0x04,0x41,0x80,0xE3,0x7C,0x85,0xEC,0x03,0xC7,0x64,0x02,0xCD,0x46,0x05,0x07,
+0x13,0x77,0xF7,0x0F,0xE3,0xF0,0xE6,0xF4,0x23,0x83,0x04,0x02,0x05,0x45,0xC2,0x40,
+0x32,0x44,0xA2,0x44,0x51,0x01,0x82,0x80,0x83,0x15,0x46,0xD3,0xE3,0xDA,0xB6,0xFA,
+0x23,0x1A,0xD6,0xD2,0x75,0xB7,0x51,0x11,0x22,0xC2,0x37,0x54,0x00,0x20,0x26,0xC0,
+0x93,0x04,0x84,0x3B,0x29,0x46,0x81,0x45,0x13,0x85,0x84,0x02,0x06,0xC4,0xEF,0xC0,
+0x8F,0xB0,0xEF,0xD0,0x1F,0xF7,0x23,0x84,0xA4,0x02,0xEF,0xD0,0xDF,0xFB,0xA3,0x84,
+0xA4,0x02,0xEF,0xE0,0xCF,0xDC,0xB7,0xF7,0x00,0x20,0x83,0x87,0xB7,0x38,0x23,0x85,
+0xA4,0x02,0x13,0x04,0x84,0x3B,0xB7,0x54,0x00,0x20,0x63,0xD6,0x07,0x00,0xEF,0xF0,
+0x8F,0xC5,0xA3,0x05,0xA4,0x02,0xEF,0xF0,0xAF,0xE2,0xB7,0xF7,0x00,0x20,0x83,0xC7,
+0x47,0x74,0x23,0x06,0xA4,0x02,0x89,0xE7,0xEF,0xF0,0x8F,0xE4,0xA3,0x06,0xA4,0x02,
+0xF9,0x33,0x23,0x07,0xA4,0x02,0x12,0x44,0xA2,0x40,0x13,0x85,0x04,0x3E,0x82,0x44,
+0xB7,0x55,0x00,0x20,0x1D,0x46,0x93,0x85,0x85,0xFF,0x31,0x01,0x6F,0xD0,0xFF,0xC6,
+0xB7,0xF7,0x00,0x20,0x83,0xC7,0xB7,0x38,0x85,0x8B,0xC5,0xCF,0x51,0x11,0x22,0xC2,
+0xB7,0x57,0x00,0x20,0x37,0x54,0x00,0x20,0x26,0xC0,0x06,0xC4,0x13,0x87,0x87,0x3B,
+0x13,0x04,0x04,0xFF,0x23,0x00,0x07,0x02,0x18,0x40,0x93,0x84,0x87,0x3B,0x83,0x46,
+0x97,0x14,0x3D,0x47,0x63,0x72,0xD7,0x08,0xEF,0xD0,0x0F,0xB5,0x2D,0x33,0x25,0x3F,
+0x23,0x09,0xA4,0x00,0xA5,0x47,0x63,0xE9,0xA7,0x06,0xBD,0x67,0x93,0x87,0x07,0xD1,
+0x0A,0x05,0x3E,0x95,0x1C,0x41,0x82,0x87,0x01,0x45,0xEF,0xD0,0xCF,0xF0,0x12,0x44,
+0xA2,0x40,0x82,0x44,0x31,0x01,0x6F,0xD0,0xBF,0x9C,0x12,0x44,0xA2,0x40,0x82,0x44,
+0x31,0x01,0x6F,0xD0,0xCF,0xE8,0x12,0x44,0xA2,0x40,0x82,0x44,0x31,0x01,0x6F,0xD0,
+0xFF,0xBD,0x12,0x44,0x85,0x47,0x23,0x80,0xF4,0x02,0xA2,0x40,0x82,0x44,0x31,0x01,
+0x6F,0xD0,0x3F,0x96,0x01,0x45,0xEF,0xD0,0x0F,0xED,0x12,0x44,0xA2,0x40,0x82,0x44,
+0x31,0x01,0x6F,0xF0,0xEF,0xFD,0xEF,0xD0,0x8F,0xE5,0x37,0xA7,0x00,0x20,0x83,0x57,
+0x87,0xAC,0x95,0x07,0x23,0x14,0xF7,0xAC,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,
+0x82,0x80,0x82,0x80,0x5C,0x4D,0x63,0x51,0xF0,0x02,0x58,0x41,0xB3,0x86,0xE7,0x02,
+0x58,0x45,0x36,0x97,0x58,0xC5,0x18,0x41,0xB3,0x86,0xE7,0x02,0x18,0x49,0x36,0x97,
+0x18,0xC9,0x58,0x49,0xBA,0x97,0x5C,0xC9,0x82,0x80,0x37,0xF7,0x00,0x20,0x13,0x07,
+0xC7,0x2D,0xA5,0xC1,0x83,0x56,0x67,0x09,0xB7,0x57,0x00,0x20,0x03,0xA7,0x07,0x01,
+0x93,0xD7,0x16,0x40,0x63,0x74,0xF5,0x06,0xA1,0xC9,0x83,0x47,0xD7,0x03,0x03,0x46,
+0xC7,0x03,0x03,0x47,0x47,0x04,0xA2,0x07,0xD1,0x8F,0x85,0x45,0x63,0x7D,0xF5,0x06,
+0x33,0x85,0xA7,0x40,0x33,0x07,0xA7,0x02,0x33,0x86,0xA7,0x40,0x33,0x05,0xA7,0x02,
+0x29,0x47,0xB3,0x87,0xE7,0x02,0x33,0x45,0xF5,0x02,0x89,0x47,0x33,0x05,0xA6,0x40,
+0x63,0xF7,0xB7,0x06,0xFD,0x16,0x33,0x86,0xA6,0x40,0x63,0x56,0x05,0x06,0x36,0x86,
+0x9D,0xA0,0x83,0x56,0x47,0x09,0x4D,0xB7,0x83,0x47,0x17,0x04,0x03,0x46,0x07,0x04,
+0x89,0x45,0xA2,0x07,0xD1,0x8F,0x03,0x47,0x67,0x04,0x4D,0xBF,0x99,0xC9,0x83,0x47,
+0xF7,0x03,0x03,0x46,0xE7,0x03,0x8D,0x45,0xA2,0x07,0xD1,0x8F,0x03,0x47,0x57,0x04,
+0x71,0xBF,0x83,0x47,0x37,0x04,0x03,0x46,0x27,0x04,0x91,0x45,0xA2,0x07,0xD1,0x8F,
+0x03,0x47,0x77,0x04,0x61,0xB7,0x13,0x86,0xF6,0xFF,0x63,0x6E,0xA6,0x00,0x33,0x83,
+0xF6,0x40,0x2A,0x86,0x63,0x79,0xA3,0x00,0x33,0x05,0x65,0x40,0xA5,0xBF,0x01,0x46,
+0x63,0x43,0x05,0x00,0x2A,0x86,0x32,0x85,0x82,0x80,0x2A,0x87,0x63,0x48,0x06,0x04,
+0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,0x01,0x45,0x83,0xC7,0xC6,0x01,0x63,0x50,
+0xF6,0x04,0xB7,0xB7,0x00,0x20,0x03,0xA3,0x47,0x2C,0x63,0xD3,0xE5,0x00,0x82,0x80,
+0x63,0x42,0x07,0x02,0x83,0xC7,0xB6,0x01,0x63,0x5E,0xF7,0x00,0x83,0xC7,0x96,0x01,
+0xB3,0x87,0xC7,0x02,0xBA,0x97,0x86,0x07,0x9A,0x97,0x83,0x97,0x07,0x00,0x63,0x53,
+0xF0,0x00,0x3E,0x95,0x05,0x07,0x62,0x07,0x61,0x87,0xC1,0xBF,0x01,0x45,0x82,0x80,
+0x2A,0x87,0x63,0x48,0x06,0x04,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,0x01,0x45,
+0x83,0xC7,0xB6,0x01,0x63,0x50,0xF6,0x04,0xB7,0xB7,0x00,0x20,0x03,0xA3,0x47,0x2C,
+0x63,0xD3,0xE5,0x00,0x82,0x80,0x63,0x42,0x07,0x02,0x83,0xC7,0xC6,0x01,0x63,0x5E,
+0xF7,0x00,0x83,0xC7,0x96,0x01,0xB3,0x87,0xE7,0x02,0xB2,0x97,0x86,0x07,0x9A,0x97,
+0x83,0x97,0x07,0x00,0x63,0x53,0xF0,0x00,0x3E,0x95,0x05,0x07,0x62,0x07,0x61,0x87,
+0xC1,0xBF,0x01,0x45,0x82,0x80,0x37,0x57,0x00,0x20,0x83,0x27,0x47,0x7E,0x13,0x01,
+0x81,0xFB,0xA2,0xC0,0x26,0xDE,0x86,0xC2,0x83,0xC6,0x47,0x00,0x83,0xC7,0x57,0x00,
+0x2A,0xC8,0x36,0xC2,0x3E,0xC4,0x93,0x07,0x05,0x02,0x93,0x06,0x47,0x7E,0x86,0x07,
+0xBE,0x96,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x22,0x46,0x13,0x07,0x47,0x7E,
+0x83,0xC7,0x97,0x01,0x3A,0xCE,0x22,0x47,0xB3,0x87,0xC7,0x02,0x12,0x46,0x79,0x17,
+0x13,0x77,0xF7,0x0F,0x2E,0x84,0xB2,0x97,0x37,0xB6,0x00,0x20,0x03,0x26,0x46,0x2C,
+0x86,0x07,0xB2,0x97,0x83,0xD7,0x07,0x00,0x23,0x96,0xF6,0x00,0x92,0x47,0x93,0x16,
+0x87,0x01,0xE1,0x86,0xF9,0x17,0x93,0xF7,0xF7,0x0F,0x3E,0xCC,0xE2,0x44,0x3C,0x10,
+0x3E,0xC0,0x3E,0xD2,0xA2,0x47,0x13,0x96,0x84,0x01,0x61,0x86,0x93,0x85,0x27,0x00,
+0xE2,0x05,0x36,0x85,0xE1,0x85,0x3A,0xC6,0x3A,0xD0,0x36,0xCA,0x11,0x3F,0x92,0x57,
+0x85,0x04,0x70,0x18,0x88,0xC3,0x91,0x07,0x93,0xF4,0xF4,0x0F,0xD2,0x46,0x02,0x57,
+0xE3,0x19,0xF6,0xFC,0xB2,0x57,0xC2,0x54,0x22,0x55,0x63,0xFA,0x97,0x00,0xB3,0x35,
+0xF5,0x02,0x26,0x86,0x81,0x46,0x33,0x05,0xF5,0x02,0xEF,0xA0,0xC0,0x51,0xD2,0x57,
+0x2A,0xD4,0x62,0x55,0x63,0xFA,0x97,0x00,0xB3,0xB5,0xA7,0x02,0x26,0x86,0x81,0x46,
+0x33,0x85,0xA7,0x02,0xEF,0xA0,0x20,0x50,0x02,0x47,0x2A,0xDC,0x81,0x47,0x81,0x44,
+0x81,0x45,0x15,0x46,0x14,0x43,0x11,0x07,0x33,0x85,0xF6,0x02,0x85,0x07,0xB6,0x94,
+0xAA,0x95,0xE3,0x99,0xC7,0xFE,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,0x83,0xD7,
+0x67,0x03,0x85,0x83,0x3E,0xCA,0x63,0xFB,0xF4,0x02,0x42,0x47,0x99,0x47,0xB3,0x07,
+0xF7,0x02,0x72,0x47,0xBA,0x97,0x03,0xC7,0x87,0x00,0x26,0x07,0x13,0x07,0x07,0x10,
+0x58,0xC4,0x83,0xC7,0x97,0x00,0x44,0xC8,0xA6,0x07,0x93,0x87,0x07,0x10,0x1C,0xC8,
+0x96,0x40,0x06,0x44,0xF2,0x54,0x13,0x01,0x81,0x04,0x82,0x80,0x81,0x46,0x13,0x95,
+0x95,0x00,0x44,0xC8,0x26,0x86,0xDD,0x81,0xEF,0xA0,0xE0,0x48,0x92,0x47,0x13,0x07,
+0x00,0x40,0xA6,0x07,0x3E,0x95,0x93,0x06,0x05,0x10,0x81,0x47,0x63,0x74,0xD7,0x00,
+0x93,0x07,0x05,0xD0,0x5C,0xC4,0x92,0x47,0x02,0x47,0x89,0x07,0xE2,0x07,0xE1,0x87,
+0x03,0x06,0xC1,0x00,0x03,0x05,0x81,0x01,0xBE,0x85,0x3A,0xD0,0x3E,0xC2,0xF1,0x33,
+0xB2,0x47,0x02,0x57,0x93,0x86,0x17,0x00,0x93,0xF7,0xF6,0x0F,0x08,0xC3,0x3E,0xC6,
+0x11,0x07,0x74,0x18,0x92,0x47,0xE3,0x1D,0xD7,0xFC,0x32,0x57,0xC2,0x57,0x22,0x55,
+0x63,0x7C,0xF7,0x00,0xB3,0x35,0xE5,0x02,0x3E,0x86,0x81,0x46,0x3E,0xC2,0x33,0x05,
+0xE5,0x02,0xEF,0xA0,0x40,0x42,0x92,0x47,0x52,0x57,0x2A,0xD4,0x62,0x55,0x63,0x7A,
+0xF7,0x00,0xB3,0x35,0xE5,0x02,0x3E,0x86,0x81,0x46,0x33,0x05,0xE5,0x02,0xEF,0xA0,
+0x80,0x40,0x2A,0xDC,0x81,0x47,0x01,0x47,0x81,0x45,0x15,0x46,0x82,0x46,0x94,0x42,
+0x33,0x85,0xF6,0x02,0x36,0x97,0x82,0x46,0x85,0x07,0x91,0x06,0x36,0xC0,0xAA,0x95,
+0xE3,0x96,0xC7,0xFE,0xD2,0x47,0x63,0x76,0xF7,0x02,0xC2,0x46,0x99,0x47,0xB3,0x87,
+0xF6,0x02,0xF2,0x46,0xB6,0x97,0x83,0xC6,0x87,0x00,0xA6,0x06,0x93,0x86,0x06,0x10,
+0x54,0xC4,0x83,0xC7,0x97,0x00,0xA6,0x07,0x93,0x87,0x07,0x10,0x1C,0xC8,0x58,0xC8,
+0x01,0xBF,0x3A,0x86,0x81,0x46,0x13,0x95,0x95,0x00,0xDD,0x81,0x3A,0xC0,0xEF,0xA0,
+0x80,0x3A,0xA2,0x47,0x93,0x06,0x00,0x40,0x02,0x47,0xA6,0x07,0x3E,0x95,0x13,0x06,
+0x05,0x10,0x81,0x47,0x63,0xF4,0xC6,0x00,0x93,0x07,0x05,0xD0,0x1C,0xC8,0xE3,0xF1,
+0xE4,0xEE,0xF1,0xB7,0x41,0x11,0x22,0xC4,0x37,0x54,0x00,0x20,0x13,0x07,0x44,0x7E,
+0x85,0x67,0x26,0xC2,0xBA,0x97,0x06,0xC6,0xB7,0x54,0x00,0x20,0x83,0xC7,0x57,0x36,
+0x93,0x86,0xA4,0x3E,0x23,0x85,0x04,0x3E,0x37,0x66,0x00,0x20,0x05,0x47,0x36,0xC0,
+0x13,0x04,0x44,0x7E,0x93,0x04,0x46,0x7E,0x63,0x1D,0xF7,0x04,0x85,0x46,0x81,0x47,
+0x19,0x43,0x11,0x45,0x3D,0xA0,0x33,0x87,0x67,0x02,0x22,0x97,0x83,0x45,0x77,0x00,
+0x83,0x42,0x67,0x00,0xB3,0x85,0x55,0x40,0x63,0x4B,0xB5,0x02,0x83,0x45,0x57,0x00,
+0x03,0x47,0x47,0x00,0x33,0x87,0xE5,0x40,0x63,0x43,0xE5,0x02,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0x03,0xC7,0x54,0x36,0xE3,0xE8,0xE7,0xFC,0x89,0xC6,0x02,0x47,0x85,0x47,
+0x23,0x00,0xF7,0x00,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0x81,0x46,
+0xF1,0xBF,0x83,0xC7,0x54,0x36,0x09,0x47,0xE3,0x16,0xF7,0xFE,0x83,0x45,0xE4,0x00,
+0x03,0x45,0x84,0x00,0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x40,0xF1,0x11,0x47,0x85,0x47,
+0x63,0x6E,0xA7,0x00,0x83,0x45,0xF4,0x00,0x03,0x45,0x94,0x00,0x97,0xC0,0xFF,0x1F,
+0xE7,0x80,0xC0,0xEF,0x13,0x35,0x55,0x00,0x93,0x47,0x15,0x00,0x01,0x47,0x19,0x43,
+0x11,0x45,0x83,0xC6,0x54,0x36,0x63,0x64,0xD7,0x00,0xCD,0xF3,0x65,0xB7,0xB3,0x06,
+0x67,0x02,0xA2,0x96,0x83,0xC5,0x76,0x00,0x83,0xC2,0x66,0x00,0xB3,0x85,0x55,0x40,
+0x63,0x4E,0xB5,0x00,0x83,0xC5,0x56,0x00,0x83,0xC6,0x46,0x00,0xB3,0x86,0xD5,0x40,
+0x63,0x46,0xD5,0x00,0x05,0x07,0x13,0x77,0xF7,0x0F,0xE1,0xB7,0x81,0x47,0xDD,0xBF,
+0xB7,0x52,0x00,0x20,0x83,0xA7,0x02,0x01,0x21,0x11,0x06,0xCA,0x22,0xC8,0x26,0xC6,
+0x03,0xC6,0xE7,0x15,0xA9,0x46,0x03,0xD7,0x05,0x00,0x26,0x06,0x33,0x46,0xD6,0x02,
+0x32,0xC4,0x63,0x7F,0xC7,0x10,0xB7,0xF3,0x00,0x20,0x93,0x87,0xC3,0x2D,0x03,0xD3,
+0x47,0x09,0x93,0x14,0x07,0x01,0xC1,0x84,0x93,0x57,0x13,0x00,0x03,0x53,0x05,0x00,
+0x2A,0xC0,0x2E,0xC2,0x33,0x03,0xF3,0x40,0x13,0x14,0x03,0x01,0x41,0x84,0xB3,0x87,
+0x94,0x02,0x33,0x05,0x84,0x02,0x3E,0x95,0xEF,0xC0,0xBF,0xC7,0x22,0x46,0x63,0x71,
+0xC5,0x0E,0xA9,0x46,0x63,0xFE,0xA6,0x0C,0xB3,0x05,0xA6,0x40,0xB7,0x52,0x00,0x20,
+0x83,0xA6,0x02,0x01,0xB3,0x82,0xB5,0x02,0x2A,0xC4,0x83,0xC6,0xF6,0x15,0xB3,0xB5,
+0xB5,0x02,0x33,0x85,0x56,0x02,0xB3,0x85,0xD5,0x02,0xB3,0xB6,0x56,0x02,0x93,0x52,
+0x75,0x01,0x26,0x05,0xB6,0x95,0xA6,0x05,0xB3,0xE5,0xB2,0x00,0x81,0x46,0xEF,0x90,
+0x50,0x63,0xA2,0x47,0x81,0x46,0x3E,0x86,0xEF,0x90,0xB0,0x62,0x59,0x56,0xFD,0x56,
+0xEF,0x90,0x30,0x62,0x93,0x02,0x05,0x20,0x33,0xB5,0xA2,0x00,0xB7,0xF7,0x00,0x20,
+0xAA,0x95,0x93,0x83,0xC7,0x2D,0x63,0xD4,0x05,0x00,0x81,0x42,0x81,0x45,0x93,0xD6,
+0xF4,0x41,0xB3,0x87,0x95,0x02,0xB3,0x86,0x56,0x02,0x33,0xB7,0x54,0x02,0xBE,0x96,
+0xB3,0x87,0x54,0x02,0xBA,0x96,0xFD,0x86,0x93,0xF6,0xF6,0x1F,0x13,0x57,0xF4,0x41,
+0xBE,0x96,0x83,0xD7,0x43,0x09,0x33,0x07,0x57,0x02,0xA5,0x82,0x13,0xD6,0x17,0x00,
+0xC2,0x06,0xC1,0x86,0xB3,0x87,0x85,0x02,0x3E,0x97,0xB3,0x37,0x54,0x02,0xB3,0x05,
+0x54,0x02,0xBA,0x97,0xFD,0x87,0x93,0xF7,0xF7,0x1F,0xAE,0x97,0xA5,0x83,0xB2,0x97,
+0xC2,0x07,0xC1,0x87,0x3E,0x87,0x63,0xD3,0x07,0x00,0x01,0x47,0x82,0x47,0x23,0x90,
+0xE7,0x00,0xB6,0x87,0x63,0xD3,0x06,0x00,0x81,0x47,0x12,0x47,0x23,0x10,0xF7,0x00,
+0xD2,0x40,0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x83,0xC7,
+0xA7,0x3E,0x13,0x01,0xC1,0xFC,0x22,0xD6,0x26,0xD4,0x06,0xD8,0x2A,0x84,0x93,0x04,
+0x05,0x02,0xB5,0xC3,0x2C,0x00,0x13,0x75,0xF5,0x0F,0x35,0x36,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x83,0xC7,0x07,0x15,0xA1,0x8B,0x81,0xC7,0x2C,0x08,0x48,0x08,
+0x41,0x35,0x52,0x45,0x81,0x45,0x86,0x04,0xEF,0xF0,0x3F,0x99,0x2A,0xCA,0x2A,0xC0,
+0x62,0x45,0x85,0x45,0xEF,0xF0,0x7F,0x98,0x13,0x07,0x84,0x00,0xB7,0x57,0x00,0x20,
+0x61,0x04,0x93,0x87,0x87,0x40,0x06,0x07,0x06,0x04,0x3E,0x97,0x3E,0x94,0xBE,0x94,
+0xF2,0x47,0x82,0x46,0x23,0x10,0xA4,0x00,0x91,0x83,0x85,0x07,0x23,0x14,0xD7,0x00,
+0x23,0x94,0xF4,0x00,0x75,0xA0,0x37,0x57,0x00,0x20,0x93,0x96,0x14,0x00,0x93,0x07,
+0x47,0x7E,0xB6,0x97,0x37,0x56,0x00,0x20,0x23,0x96,0x07,0x00,0x83,0x27,0x06,0x03,
+0x93,0x06,0x05,0x04,0x86,0x06,0xB6,0x97,0x83,0xD7,0x27,0x00,0x02,0xCA,0x02,0xCC,
+0x3E,0xC0,0x83,0x27,0x47,0x7E,0x02,0xD0,0x02,0xCE,0x83,0xC7,0x27,0x00,0x13,0x03,
+0x47,0x7E,0xB7,0x52,0x00,0x20,0x3E,0xC4,0x83,0x26,0x47,0x7E,0xA2,0x47,0x83,0xC5,
+0x36,0x00,0x63,0xD5,0xF5,0x06,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0xFF,0xF2,0x47,
+0x03,0x57,0x67,0x03,0x05,0x83,0x63,0xFF,0xE7,0x0E,0x19,0x46,0x33,0x06,0xC4,0x02,
+0x93,0x06,0x84,0x00,0x37,0x57,0x00,0x20,0x13,0x07,0x87,0x40,0x86,0x06,0xBA,0x96,
+0x61,0x04,0x06,0x04,0x86,0x04,0x91,0x83,0x32,0x93,0x03,0x46,0x83,0x00,0x3A,0x94,
+0x85,0x07,0x26,0x06,0x13,0x06,0x06,0x10,0x23,0x94,0xC6,0x00,0x83,0x46,0x93,0x00,
+0x26,0x97,0x23,0x14,0xF7,0x00,0xA6,0x06,0x93,0x86,0x06,0x10,0x23,0x10,0xD4,0x00,
+0xC2,0x50,0x32,0x54,0xA2,0x54,0x13,0x01,0x41,0x03,0x82,0x80,0x83,0xA5,0x02,0x01,
+0xB7,0xB3,0x00,0x20,0x83,0xC5,0x95,0x01,0xB3,0x87,0xF5,0x02,0x3E,0xC2,0x83,0xC7,
+0x06,0x00,0x3E,0xC6,0x83,0x26,0x47,0x7E,0xB2,0x47,0x83,0xC6,0x16,0x00,0x63,0xD6,
+0xF6,0x00,0xA2,0x47,0x85,0x07,0x3E,0xC4,0x85,0xB7,0x92,0x46,0xB6,0x97,0x82,0x56,
+0x93,0x95,0x17,0x00,0x3E,0xC8,0x85,0x06,0x36,0xD0,0x83,0xA6,0x43,0x2C,0xAE,0x96,
+0x93,0x95,0x14,0x00,0x83,0x96,0x06,0x00,0x9A,0x95,0x03,0x95,0xC5,0x00,0x36,0xD2,
+0x63,0x54,0xD5,0x00,0x23,0x96,0xD5,0x00,0x93,0x87,0x07,0x03,0x86,0x07,0x9A,0x97,
+0x83,0xD7,0x47,0x00,0x82,0x45,0xFD,0x8D,0x95,0xC9,0x03,0x25,0x06,0x03,0x03,0x55,
+0x25,0x0A,0xE9,0x8F,0x63,0x86,0xB7,0x00,0x89,0x47,0xB3,0xC6,0xF6,0x02,0x36,0xD2,
+0x28,0x00,0xEF,0xF0,0x2F,0xFF,0xB7,0x57,0x00,0x20,0xB7,0x52,0x00,0x20,0xB7,0xB3,
+0x00,0x20,0x37,0x56,0x00,0x20,0x13,0x83,0x47,0x7E,0x3E,0x87,0xB2,0x47,0x85,0x07,
+0x3E,0xC6,0x8D,0xBF,0x52,0x47,0x26,0x07,0x33,0x57,0xF7,0x02,0x13,0x07,0x07,0x10,
+0x3A,0xCA,0x62,0x47,0x26,0x07,0xB3,0x57,0xF7,0x02,0x93,0x87,0x07,0x10,0x3E,0xCC,
+0x35,0xB5,0x93,0x07,0x05,0x02,0xB7,0x56,0x00,0x20,0x86,0x07,0x93,0x86,0x86,0x40,
+0xBE,0x96,0x99,0x47,0x33,0x05,0xF5,0x02,0x37,0x57,0x00,0x20,0x13,0x07,0x47,0x7E,
+0x03,0xD6,0x86,0x00,0xBD,0x45,0x3A,0x95,0x83,0x47,0x55,0x00,0x03,0x47,0x45,0x00,
+0x33,0x06,0xB6,0x02,0x85,0x07,0x99,0x8F,0x03,0x47,0x75,0x00,0x03,0x45,0x65,0x00,
+0xC2,0x07,0x05,0x07,0x09,0x8F,0x42,0x07,0xC1,0x83,0x41,0x83,0xB3,0x87,0xE7,0x02,
+0x63,0xD3,0xF5,0x00,0xBD,0x47,0xB3,0x57,0xF6,0x02,0x23,0x94,0xF6,0x00,0x82,0x80,
+0x41,0x11,0x22,0xC4,0x26,0xC2,0x06,0xC6,0xB1,0x36,0x37,0x57,0x00,0x20,0x93,0x07,
+0x47,0x7E,0xBA,0x84,0x05,0x67,0x01,0x44,0x3E,0x97,0x83,0x46,0x57,0x36,0x13,0x86,
+0x67,0x00,0x63,0x67,0xD4,0x00,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,
+0x91,0x07,0x22,0x85,0x32,0xC0,0x23,0xA2,0xF4,0x7E,0x85,0x3B,0x22,0x85,0x95,0x37,
+0x02,0x46,0x37,0x67,0x00,0x20,0x05,0x04,0xB2,0x87,0x13,0x07,0x47,0x7E,0xF1,0xB7,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0x91,0x8B,0xB9,0xCF,
+0x93,0x06,0x85,0x00,0xB7,0xA7,0x00,0x20,0x86,0x06,0x93,0x87,0xC7,0xB5,0xB6,0x97,
+0x03,0xD7,0x87,0x00,0x8D,0x47,0xB3,0x07,0xF7,0x02,0x37,0x57,0x00,0x20,0x13,0x07,
+0x87,0x40,0x2A,0x97,0x83,0x46,0x77,0x27,0x37,0x57,0x00,0x20,0x13,0x07,0x47,0x7E,
+0x93,0x86,0x06,0x02,0x86,0x06,0x36,0x97,0x03,0x57,0xC7,0x00,0x11,0x83,0x05,0x07,
+0xB3,0xC7,0xE7,0x02,0x13,0x07,0x40,0x06,0xC2,0x07,0xC1,0x83,0x3E,0x85,0x63,0x74,
+0xF7,0x00,0x13,0x05,0x40,0x06,0x13,0x75,0xF5,0x0F,0x82,0x80,0x01,0x45,0x82,0x80,
+0x51,0x11,0xB7,0x57,0x00,0x20,0x22,0xC4,0x26,0xC2,0x93,0x87,0x87,0x40,0xD9,0xCD,
+0x13,0x07,0x85,0x09,0x06,0x07,0x3E,0x97,0x83,0x53,0x87,0x00,0x13,0x14,0x15,0x00,
+0xB3,0x02,0xB4,0x00,0x37,0xA7,0x00,0x20,0x13,0x83,0xC2,0x00,0x93,0x04,0xC7,0xAC,
+0x0A,0x03,0x26,0x93,0x86,0x02,0x22,0xC0,0xA6,0x92,0x03,0x24,0x03,0x00,0x83,0xD2,
+0x02,0x00,0x13,0x07,0xC7,0xAC,0xA2,0x96,0xB3,0x83,0xD3,0x02,0x33,0x84,0xC6,0x00,
+0xB3,0x82,0xC2,0x02,0xB3,0x86,0xC6,0x02,0x96,0x93,0x86,0x03,0xB3,0xC3,0x83,0x02,
+0x33,0xC4,0x86,0x02,0x85,0x66,0x63,0xD3,0x86,0x00,0x05,0x64,0x23,0x20,0x83,0x00,
+0x63,0xD3,0x03,0x00,0x81,0x43,0x37,0xF6,0x00,0x20,0x93,0xD6,0x13,0x40,0x13,0x06,
+0xC6,0x2D,0x85,0xCD,0x03,0x56,0x66,0x09,0x63,0xDD,0xC6,0x02,0x13,0x05,0x85,0x09,
+0x06,0x05,0xAA,0x97,0x23,0x94,0xD7,0x00,0x82,0x47,0x22,0x44,0x92,0x44,0xBE,0x95,
+0x86,0x05,0x2E,0x97,0x23,0x10,0xD7,0x00,0x31,0x01,0x82,0x80,0x13,0x07,0x05,0x09,
+0x06,0x07,0x3E,0x97,0x83,0x53,0x07,0x00,0x95,0xB7,0x03,0x56,0x46,0x09,0x63,0xC5,
+0xC6,0x00,0x93,0x06,0xF6,0xFF,0xF9,0xF1,0x13,0x05,0x05,0x09,0x06,0x05,0x3E,0x95,
+0x23,0x10,0xD5,0x00,0xD1,0xB7,0xB7,0xF7,0x00,0x20,0x83,0xC7,0xB7,0x38,0x89,0x8B,
+0x63,0x88,0x07,0x2A,0xB7,0xA6,0x00,0x20,0x13,0x01,0x41,0xFC,0x93,0x87,0xC6,0xAC,
+0x37,0x56,0x00,0x20,0x3E,0xC6,0x89,0x47,0x3E,0xC2,0x93,0x07,0x86,0x40,0x37,0xA7,
+0x00,0x20,0x3E,0xD0,0x93,0x87,0xC6,0xAC,0x3E,0xCC,0x93,0x07,0xC7,0xD3,0x22,0xDA,
+0x26,0xD8,0x06,0xDC,0x93,0x04,0x86,0x40,0x13,0x04,0xC7,0xD3,0x02,0xC0,0x3E,0xC4,
+0x82,0x57,0x02,0x47,0x3E,0x97,0x03,0x47,0xA7,0x16,0x31,0xCB,0x82,0x47,0x41,0x67,
+0x7D,0x17,0x13,0x96,0x27,0x00,0xE2,0x47,0x03,0xD5,0x04,0x12,0xB2,0x97,0x83,0xD6,
+0x07,0x00,0x3E,0xCA,0x63,0x92,0xE6,0x06,0x23,0x90,0xA7,0x00,0x92,0x46,0xE2,0x47,
+0x03,0xD7,0x84,0x13,0xBE,0x96,0xB2,0x47,0x23,0x90,0xE6,0x00,0x85,0x46,0x94,0xDB,
+0xD4,0xDB,0xA2,0x47,0x92,0x46,0x3E,0x96,0x23,0x10,0xA6,0x00,0xBE,0x96,0x23,0x90,
+0xE6,0x00,0x13,0x07,0x00,0xF8,0x23,0x08,0x04,0x02,0x23,0x0E,0xE4,0x02,0x82,0x47,
+0x31,0x47,0x89,0x04,0x85,0x07,0x3E,0xC0,0xB2,0x47,0x05,0x04,0xA1,0x07,0x3E,0xC6,
+0x92,0x47,0x91,0x07,0x3E,0xC2,0x82,0x47,0xE3,0x94,0xE7,0xF8,0xE2,0x50,0x52,0x54,
+0xC2,0x54,0x13,0x01,0xC1,0x03,0x82,0x80,0x03,0x47,0x04,0x03,0x93,0x16,0x87,0x01,
+0xE1,0x86,0x63,0xC5,0x06,0x00,0x05,0x07,0x23,0x08,0xE4,0x02,0x83,0x45,0x04,0x03,
+0xAD,0x46,0x13,0x07,0x60,0x03,0x63,0xE4,0xB6,0x00,0x13,0x07,0x00,0x06,0xB7,0xF7,
+0x00,0x20,0x93,0x86,0x87,0x6D,0xD4,0x5E,0x89,0xCA,0x93,0x86,0x26,0x03,0x33,0x87,
+0xE6,0x02,0x93,0x06,0x20,0x03,0x33,0x57,0xD7,0x02,0xA2,0x47,0x3A,0xCE,0xB2,0x97,
+0x83,0xD5,0x07,0x00,0x3E,0xC8,0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x20,0x85,0x72,0x47,
+0x63,0x7D,0xE5,0x0E,0x3A,0xD2,0xA2,0x47,0x12,0x47,0x03,0xD5,0x84,0x13,0xBA,0x97,
+0x83,0xD5,0x07,0x00,0x3E,0xCE,0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x20,0x83,0x12,0x57,
+0x63,0x7D,0xE5,0x0C,0xD2,0x47,0x03,0xD5,0x04,0x12,0x83,0xD5,0x07,0x00,0x97,0xC0,
+0xFF,0x1F,0xE7,0x80,0xA0,0x81,0x12,0x57,0x63,0x71,0xE5,0x0C,0x12,0x47,0xE2,0x47,
+0x03,0xD5,0x84,0x13,0xB3,0x86,0xE7,0x00,0x83,0xD5,0x06,0x00,0x97,0xB0,0xFF,0x1F,
+0xE7,0x80,0xC0,0x7F,0x12,0x57,0x63,0x72,0xE5,0x0A,0x03,0x47,0xC4,0x03,0x93,0x16,
+0x87,0x01,0xE1,0x86,0x63,0xC5,0x06,0x00,0x05,0x07,0x23,0x0E,0xE4,0x02,0x83,0x46,
+0xC4,0x03,0x51,0x47,0x63,0x7C,0xD7,0x00,0xC2,0x47,0x03,0xD7,0x07,0x00,0xF2,0x47,
+0x23,0x90,0xE4,0x12,0x03,0xD7,0x07,0x00,0x23,0x9C,0xE4,0x12,0xD2,0x47,0x03,0xD5,
+0x04,0x12,0x83,0xD5,0x07,0x00,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x20,0x7B,0xE2,0x47,
+0x12,0x47,0x2A,0xCE,0x03,0xD5,0x84,0x13,0x3E,0x97,0x83,0x55,0x07,0x00,0x97,0xB0,
+0xFF,0x1F,0xE7,0x80,0xA0,0x79,0x03,0xD7,0x04,0x12,0xC2,0x47,0xF2,0x42,0xB3,0x06,
+0xA5,0x02,0x23,0x90,0xE7,0x00,0x12,0x47,0xA2,0x47,0x2A,0x83,0xBA,0x97,0x03,0xD7,
+0x84,0x13,0x3E,0xCA,0x23,0x90,0xE7,0x00,0x33,0x87,0x52,0x02,0x36,0x97,0xB7,0x06,
+0x10,0x00,0x63,0xCF,0xE6,0x00,0x85,0x66,0x93,0x86,0xF6,0x8F,0x63,0xDF,0xE6,0x06,
+0x29,0x87,0x05,0x07,0x93,0x03,0x00,0x10,0x39,0xA0,0x23,0x0E,0x04,0x02,0x79,0xB7,
+0x13,0x07,0x00,0x10,0x85,0x43,0x93,0x06,0xF0,0x03,0x63,0xE2,0x56,0x06,0x93,0x96,
+0x32,0x00,0x63,0xFE,0x66,0x04,0x02,0x45,0x85,0x46,0x13,0x06,0x00,0x10,0x81,0x45,
+0x3A,0xD6,0x1E,0xD4,0x1A,0xD2,0x16,0xCE,0xE1,0x39,0xF2,0x42,0x12,0x53,0xA2,0x53,
+0x32,0x57,0x93,0x06,0xF0,0x03,0x63,0xEA,0x66,0x04,0x0E,0x03,0x63,0x77,0x53,0x04,
+0x85,0x46,0x13,0x06,0x00,0x10,0x02,0x45,0x85,0x45,0x5D,0x39,0x03,0x47,0xC4,0x03,
+0xE3,0x17,0x07,0xE2,0x03,0xD7,0x04,0x12,0xC2,0x47,0x23,0x90,0xE7,0x00,0x03,0xD7,
+0x84,0x13,0xD2,0x47,0x23,0x90,0xE7,0x00,0x19,0xBD,0x05,0x47,0x61,0xB7,0x02,0x45,
+0xBA,0x86,0x1E,0x86,0x81,0x45,0x1A,0xD6,0x16,0xD4,0x3A,0xD2,0x1E,0xCE,0x49,0x31,
+0x32,0x53,0xA2,0x52,0x12,0x57,0xF2,0x43,0x6D,0xB7,0xBA,0x86,0x1E,0x86,0x65,0xBF,
+0x82,0x80,0xB7,0xF7,0x00,0x20,0x31,0x11,0x93,0x87,0xC7,0x2D,0x22,0xC6,0x03,0xD4,
+0x47,0x09,0x2E,0xC0,0xAA,0x85,0x05,0x80,0x22,0x85,0x06,0xC8,0x26,0xC4,0x83,0xD4,
+0x67,0x09,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x60,0x69,0x82,0x46,0x85,0x80,0x2A,0xC2,
+0xB6,0x85,0x26,0x85,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x40,0x68,0x12,0x47,0x2A,0xC0,
+0x22,0x85,0xBA,0x85,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x40,0x67,0x82,0x47,0x2A,0x84,
+0x26,0x85,0xBE,0x85,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x40,0x66,0x63,0x73,0x85,0x00,
+0x2A,0x84,0x13,0x15,0x04,0x01,0xC2,0x40,0x32,0x44,0xA2,0x44,0x41,0x81,0x51,0x01,
+0x82,0x80,0x01,0x11,0x37,0xF7,0x00,0x20,0x93,0x07,0xC7,0x2D,0x06,0xCE,0x22,0xCC,
+0x26,0xCA,0x83,0xC7,0xF7,0x0A,0x13,0x07,0xC7,0x2D,0x3A,0xC0,0xC1,0x8B,0xD9,0xCB,
+0x37,0x53,0x00,0x20,0x37,0xA4,0x00,0x20,0x93,0x06,0xC4,0xB5,0x93,0x04,0x83,0x40,
+0x13,0x04,0xC4,0xB5,0x13,0x07,0x83,0x40,0xB7,0x52,0x00,0x20,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x87,0x40,0x33,0x05,0xF7,0x40,0x83,0x47,0xA7,0x16,0x13,0x75,0xF5,0x0F,
+0x63,0x87,0x07,0x24,0x03,0xC6,0x86,0x07,0x8D,0x47,0x63,0xE3,0xC7,0x04,0x83,0xC7,
+0x46,0x08,0x8D,0xE7,0x03,0xD6,0x04,0x12,0x23,0x14,0xC4,0x04,0x03,0xD6,0x84,0x13,
+0x23,0x10,0xC4,0x06,0x03,0xD6,0x04,0x15,0x23,0x1C,0xC4,0x00,0x23,0x18,0xC4,0x02,
+0x23,0x10,0xC4,0x00,0x85,0x07,0x23,0x82,0xF6,0x08,0x29,0xA0,0x13,0x06,0x30,0x06,
+0xE3,0x7A,0xF6,0xFE,0x83,0xC7,0x06,0x09,0x9D,0xC3,0x91,0x47,0x23,0x8C,0xF6,0x06,
+0xB7,0x57,0x00,0x20,0x05,0x07,0x93,0x87,0x47,0x41,0x85,0x06,0x09,0x04,0x89,0x04,
+0xE3,0x16,0xF7,0xF8,0xF2,0x40,0x62,0x44,0xD2,0x44,0x05,0x61,0x82,0x80,0x03,0xA6,
+0x02,0x01,0x83,0xD5,0x04,0x15,0x83,0x47,0x96,0x04,0x83,0x43,0x86,0x04,0xA2,0x07,
+0xB3,0xE7,0x77,0x00,0x93,0xD3,0x47,0x00,0x9E,0x87,0x63,0xE8,0x75,0x00,0x8D,0x47,
+0xB3,0x87,0xF3,0x02,0x63,0xF3,0xF5,0x00,0xAE,0x87,0x03,0x46,0xA6,0x04,0xB3,0x07,
+0xF6,0x02,0x86,0x07,0xB3,0xD7,0x77,0x02,0x83,0x53,0x04,0x00,0x63,0xFC,0x75,0x00,
+0xB3,0x83,0xB3,0x40,0x95,0x40,0xB3,0x83,0xF3,0x02,0xB3,0x83,0x13,0x02,0xB3,0xD3,
+0xB3,0x02,0x9E,0x97,0x83,0x53,0x84,0x01,0x63,0xFD,0x75,0x10,0xB3,0x83,0xB3,0x40,
+0xB3,0x83,0xF3,0x02,0x86,0x03,0xB3,0xD5,0xB3,0x02,0xAE,0x97,0xE5,0x45,0x33,0x06,
+0xB6,0x02,0x63,0xF3,0xC7,0x00,0x3E,0x86,0x82,0x47,0x83,0xC7,0xF7,0x08,0x91,0x8B,
+0x9D,0xCF,0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,0x83,0xC7,0x57,0x36,0x89,0x45,
+0x63,0xE7,0xF5,0x02,0x36,0xC6,0x32,0xC4,0x3A,0xC2,0x1D,0x3C,0xB2,0x46,0xB7,0x52,
+0x00,0x20,0x83,0xA7,0x02,0x01,0x23,0x84,0xA6,0x16,0x22,0x46,0x83,0xC7,0xA7,0x04,
+0x12,0x47,0xB3,0x87,0xA7,0x02,0x29,0x45,0xB3,0xD7,0xA7,0x02,0x3E,0x96,0x83,0xD5,
+0x84,0x13,0x03,0xD5,0x04,0x12,0x36,0xC6,0x32,0xC4,0x3A,0xC2,0x19,0x35,0x93,0x07,
+0xF0,0x3F,0x12,0x47,0x22,0x46,0xB2,0x46,0x63,0xE9,0xA7,0x00,0x93,0x07,0x00,0x40,
+0x89,0x8F,0x3D,0x45,0xB3,0xD7,0xA7,0x02,0x3E,0x96,0x83,0xD5,0x04,0x12,0x03,0x55,
+0x84,0x04,0x36,0xC8,0x32,0xC6,0x3A,0xC4,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x00,0x49,
+0x2A,0xC2,0x83,0xD5,0x84,0x13,0x03,0x55,0x04,0x06,0x97,0xB0,0xFF,0x1F,0xE7,0x80,
+0xE0,0x47,0x92,0x47,0x33,0x05,0xA5,0x02,0xB3,0x87,0xF7,0x02,0x3E,0x95,0xEF,0xC0,
+0x4F,0xA9,0xB7,0xF7,0x00,0x20,0x83,0xA7,0x47,0x71,0x22,0x47,0x32,0x46,0xC2,0x46,
+0xB7,0x52,0x00,0x20,0x99,0xC7,0xA6,0x07,0x93,0x05,0x40,0x06,0xB3,0xD7,0xB7,0x02,
+0x3E,0x96,0x83,0xC7,0x86,0x07,0x63,0x79,0xC5,0x02,0x9D,0xE7,0x83,0x57,0x84,0x04,
+0x23,0x90,0xF4,0x12,0x83,0x57,0x04,0x06,0x23,0x9C,0xF4,0x12,0x83,0xD7,0x04,0x15,
+0x03,0x56,0x04,0x03,0x63,0xF4,0xC7,0x00,0x23,0x18,0xF4,0x02,0x23,0x10,0xF4,0x00,
+0x85,0xBD,0x23,0x1C,0xB4,0x00,0xDD,0xBD,0x85,0x07,0x03,0xA6,0x02,0x01,0x93,0xF7,
+0xF7,0x0F,0x23,0x8C,0xF6,0x06,0x03,0x46,0xA6,0x04,0x0E,0x06,0x63,0x75,0xC5,0x04,
+0x83,0xC5,0x46,0x08,0x0D,0x46,0xE3,0x73,0xB6,0xFC,0x03,0xD5,0x04,0x12,0x03,0x56,
+0x84,0x04,0x91,0x45,0xB3,0x83,0xF5,0x40,0x33,0x06,0x76,0x02,0x33,0x05,0xF5,0x02,
+0x2A,0x96,0x33,0x46,0xB6,0x02,0x23,0x90,0xC4,0x12,0x03,0x56,0x04,0x06,0xB3,0x03,
+0x76,0x02,0x03,0xD6,0x84,0x13,0xB3,0x07,0xF6,0x02,0xBE,0x93,0xB3,0xC5,0xB3,0x02,
+0x23,0x9C,0xB4,0x12,0x61,0xB7,0x91,0x47,0x23,0x8C,0xF6,0x06,0x41,0xB7,0x23,0x82,
+0x06,0x08,0x23,0x8C,0x06,0x06,0x23,0x88,0x06,0x08,0x23,0x84,0x06,0x16,0xCD,0xBB,
+0xB7,0xF7,0x00,0x20,0x13,0x87,0xC7,0x2D,0x03,0x47,0xF7,0x0A,0x93,0x87,0xC7,0x2D,
+0x41,0x8B,0x09,0xEB,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x47,0xB7,0x04,
+0x63,0x0F,0x07,0x2E,0x13,0x01,0x81,0xFD,0x06,0xD2,0x22,0xD0,0x26,0xCE,0x83,0xC7,
+0x07,0x09,0x93,0x06,0x00,0x28,0x93,0xF7,0x07,0x04,0x99,0xE3,0x93,0x06,0x00,0x20,
+0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x6D,0x5C,0x5F,0x03,0x47,0x07,0x04,0x63,0xF4,
+0xE7,0x28,0xBA,0x97,0xB3,0x87,0xD7,0x02,0x13,0x07,0x60,0x09,0xB7,0x54,0x00,0x20,
+0x37,0xA4,0x00,0x20,0x93,0x06,0xC4,0xB5,0x13,0x04,0xC4,0xB5,0xB3,0xD7,0xE7,0x02,
+0x3E,0xC6,0x93,0x87,0x84,0x40,0x3E,0xC0,0x93,0x84,0x84,0x40,0x82,0x47,0x83,0xC7,
+0xA7,0x16,0x63,0x8B,0x07,0x28,0x83,0x57,0x04,0x0A,0x23,0x11,0xF4,0x0A,0x83,0x57,
+0x04,0x10,0x23,0x11,0xF4,0x10,0x83,0x57,0xE4,0x09,0x23,0x10,0xF4,0x0A,0x83,0x57,
+0xE4,0x0F,0x23,0x10,0xF4,0x10,0x83,0x57,0xC4,0x09,0x23,0x1F,0xF4,0x08,0x83,0x57,
+0xC4,0x0F,0x23,0x1F,0xF4,0x0E,0x83,0xD7,0x04,0x12,0x23,0x1E,0xF4,0x08,0x83,0xD7,
+0x84,0x13,0x23,0x1E,0xF4,0x0E,0x03,0xC7,0x86,0x07,0x8D,0x47,0x63,0xF2,0xE7,0x1E,
+0xA2,0x87,0x01,0x47,0x0D,0x46,0x83,0xD5,0x07,0x0A,0x03,0xD5,0x27,0x0A,0x32,0xCC,
+0x3A,0xCA,0x36,0xC8,0x3E,0xC4,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x20,0x2B,0xA2,0x47,
+0x2A,0xC2,0x83,0xD5,0x07,0x10,0x03,0xD5,0x27,0x10,0x97,0xB0,0xFF,0x1F,0xE7,0x80,
+0xE0,0x29,0x12,0x43,0x33,0x05,0xA5,0x02,0x33,0x03,0x63,0x02,0x1A,0x95,0xEF,0xC0,
+0x4F,0x8B,0x2A,0xC2,0x83,0x55,0x41,0x00,0x52,0x47,0xA2,0x47,0xC2,0x46,0x62,0x46,
+0x63,0xF3,0xE5,0x00,0xBA,0x85,0x7D,0x16,0x13,0x97,0x05,0x01,0x13,0x76,0xF6,0x0F,
+0x41,0x83,0xF9,0x17,0x4D,0xF2,0x83,0x55,0xC4,0x09,0x03,0x55,0x24,0x0A,0x3A,0xCA,
+0x36,0xC8,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x60,0x25,0x2A,0xC4,0x83,0x55,0xC4,0x0F,
+0x03,0x55,0x24,0x10,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x40,0x24,0xA2,0x47,0x33,0x05,
+0xA5,0x02,0xB3,0x87,0xF7,0x02,0x3E,0x95,0xEF,0xC0,0xAF,0x85,0x52,0x47,0x13,0x16,
+0x05,0x01,0x41,0x82,0xAA,0x87,0xC2,0x46,0x63,0x73,0xE6,0x00,0xBA,0x87,0xC2,0x07,
+0xC1,0x83,0x3E,0xC8,0xB7,0x57,0x00,0x20,0x83,0xA5,0x07,0x01,0x32,0x46,0x93,0x07,
+0x00,0x40,0x03,0xC7,0xB5,0x04,0x33,0x86,0xC7,0x40,0xA5,0x67,0xB3,0x07,0xF7,0x02,
+0x93,0x02,0x40,0x06,0x93,0x93,0x16,0x00,0xB3,0xD7,0x57,0x02,0xB3,0xD7,0xC7,0x02,
+0x3E,0xC4,0xB1,0x67,0xB3,0x07,0xF7,0x02,0xB3,0xD7,0x57,0x02,0x33,0xD3,0xC7,0x02,
+0xBD,0x67,0xB3,0x07,0xF7,0x02,0x37,0xA7,0x00,0x20,0x13,0x07,0xC7,0xB5,0xB3,0x83,
+0xE3,0x40,0x03,0xD7,0x83,0x01,0xB3,0xD7,0x57,0x02,0xB3,0xD7,0xC7,0x02,0x03,0xD6,
+0x04,0x15,0xB2,0x82,0x63,0x6B,0xC7,0x00,0x8D,0x42,0xB3,0x02,0x57,0x02,0xB2,0x92,
+0x93,0xD2,0x22,0x40,0xC2,0x02,0x93,0xD2,0x02,0x01,0x23,0x9C,0x53,0x00,0x03,0xC7,
+0x95,0x04,0x83,0xC3,0x85,0x04,0x22,0x07,0x33,0x67,0x77,0x00,0x11,0x83,0x93,0x13,
+0x17,0x00,0x63,0xD5,0x53,0x04,0x63,0x75,0xE6,0x0C,0x93,0x12,0x16,0x00,0xBA,0x92,
+0x0D,0x46,0xB3,0xD2,0xC2,0x02,0x03,0xC6,0x05,0x16,0x83,0xC5,0xA5,0x04,0x93,0x03,
+0x40,0x06,0x33,0x06,0xB6,0x02,0xB3,0x02,0x56,0x02,0x0D,0x46,0xB3,0x82,0xC2,0x02,
+0x13,0x06,0x80,0x0C,0x33,0xD7,0xE2,0x02,0xB3,0x53,0x77,0x02,0x33,0x57,0xC7,0x02,
+0x22,0x46,0x1E,0x93,0x86,0x03,0x9E,0x97,0x32,0x97,0x3A,0xC4,0x42,0x47,0x63,0x78,
+0x67,0x08,0x42,0x05,0x41,0x81,0x63,0x74,0xF5,0x08,0x83,0xC7,0xC6,0x15,0x13,0x07,
+0x30,0x06,0x63,0x65,0xF7,0x00,0x85,0x07,0x23,0x8E,0xF6,0x14,0x83,0xC7,0xC6,0x15,
+0x29,0x47,0x63,0x79,0xF7,0x06,0x03,0x53,0x41,0x00,0xA2,0x47,0x63,0x77,0xF3,0x06,
+0x83,0x57,0xE4,0x09,0x23,0x90,0xF4,0x12,0x83,0x57,0xE4,0x0F,0x23,0x9C,0xF4,0x12,
+0x83,0xD7,0x04,0x12,0x23,0x1E,0xF4,0x08,0x83,0xD7,0x84,0x13,0x23,0x1E,0xF4,0x0E,
+0x82,0x47,0x89,0x04,0x21,0x04,0x85,0x07,0x3E,0xC0,0x02,0x47,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x47,0x41,0x85,0x06,0xE3,0x9B,0xE7,0xDA,0x92,0x50,0x02,0x54,0xF2,0x44,
+0x13,0x01,0x81,0x02,0x82,0x80,0xB3,0x87,0xD7,0x02,0x13,0x07,0xB0,0x04,0xBD,0xBB,
+0x95,0x42,0xB3,0x02,0x57,0x02,0xE3,0x70,0x56,0xF4,0xB2,0x82,0x2D,0xBF,0x23,0x8E,
+0x06,0x14,0x69,0xB7,0x15,0x47,0xE3,0x75,0xF7,0xFA,0x03,0x57,0xE4,0x09,0x83,0x57,
+0xC4,0x09,0xBA,0x97,0x85,0x87,0x23,0x90,0xF4,0x12,0x03,0x57,0xE4,0x0F,0x83,0x57,
+0xC4,0x0F,0xBA,0x97,0x85,0x87,0x59,0xB7,0x23,0x8E,0x06,0x14,0x51,0xBF,0x82,0x80,
+0x13,0x01,0x41,0xFD,0x37,0xF7,0x00,0x20,0x93,0x07,0xC7,0x2D,0x06,0xD4,0x22,0xD2,
+0x26,0xD0,0x83,0xC7,0xF7,0x0A,0x13,0x07,0xC7,0x2D,0x3A,0xC6,0xA1,0x8B,0xC9,0xCF,
+0xB7,0xF7,0x00,0x20,0x13,0x87,0x87,0x4E,0x03,0x47,0xB7,0x00,0x93,0x87,0x87,0x4E,
+0x3E,0xC8,0x09,0xE7,0xB7,0x57,0x00,0x20,0xA3,0x85,0x07,0x3E,0x37,0x57,0x00,0x20,
+0x93,0x07,0x87,0x40,0x3E,0xC0,0x37,0xA6,0x00,0x20,0xB7,0xA7,0x00,0x20,0x93,0x86,
+0x07,0xCD,0x13,0x06,0xC6,0xB5,0x93,0x87,0x07,0xCD,0x32,0xC4,0x3E,0xC2,0x13,0x04,
+0x87,0x40,0x82,0x47,0x83,0xC7,0xA7,0x16,0x63,0x88,0x07,0x34,0x92,0x47,0x83,0x55,
+0x04,0x12,0x83,0xC7,0x07,0x06,0xB9,0xE7,0x83,0x57,0x84,0x13,0x12,0x47,0x23,0x90,
+0xB6,0x00,0x23,0x9C,0xF6,0x00,0x23,0x94,0xF6,0x04,0x23,0x98,0xB6,0x02,0x85,0x47,
+0x23,0x00,0xF7,0x06,0x82,0x47,0x89,0x06,0x09,0x04,0x85,0x07,0x3E,0xC0,0x92,0x47,
+0x02,0x47,0x85,0x07,0x3E,0xC2,0xA2,0x47,0x85,0x07,0x3E,0xC4,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x47,0x41,0xE3,0x97,0xE7,0xFA,0xA2,0x50,0x12,0x54,0x82,0x54,0x13,0x01,
+0xC1,0x02,0x82,0x80,0x13,0x06,0x30,0x06,0x63,0x66,0xF6,0x00,0x12,0x47,0x85,0x07,
+0x23,0x00,0xF7,0x06,0x03,0xD5,0x06,0x03,0x36,0xCA,0x97,0xB0,0xFF,0x1F,0xE7,0x80,
+0xE0,0xF9,0xD2,0x46,0xAA,0x84,0x83,0x55,0x84,0x13,0x03,0xD5,0x86,0x04,0xB3,0x84,
+0x94,0x02,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x60,0xF8,0x33,0x05,0xA5,0x02,0x26,0x95,
+0xEF,0xB0,0x3F,0xDA,0x13,0x06,0xF0,0x03,0x93,0x07,0x00,0x04,0xD2,0x46,0x63,0x77,
+0xA6,0x00,0x93,0x07,0x05,0xFC,0x8D,0x83,0x93,0x87,0x07,0x04,0x13,0x06,0x40,0x06,
+0xB3,0x87,0xC7,0x02,0x09,0x66,0x13,0x06,0x06,0x90,0x13,0x05,0xC0,0x5D,0xB2,0x97,
+0xB3,0xD7,0xA7,0x02,0x13,0x06,0xC0,0x03,0xD1,0x07,0x63,0x74,0xF6,0x00,0x93,0x07,
+0xC0,0x03,0x32,0x47,0x03,0x46,0xF7,0x08,0x22,0x47,0x11,0x8A,0x83,0x45,0x87,0x07,
+0x11,0xCE,0x09,0x46,0x63,0x6C,0xB6,0x00,0x03,0x46,0x87,0x16,0x3D,0x43,0xB3,0x87,
+0x67,0x02,0x63,0x73,0x66,0x00,0x3D,0x46,0xB3,0xD7,0xC7,0x02,0xB7,0xF4,0x00,0x20,
+0x09,0x46,0x03,0x55,0x04,0x12,0x93,0x84,0x84,0x6D,0x63,0x7D,0xB6,0x10,0x02,0x47,
+0x03,0x46,0x27,0x18,0x32,0x47,0x83,0x45,0xB7,0x08,0x63,0x75,0xB6,0x10,0x63,0x03,
+0x06,0x10,0xAA,0x85,0x03,0xD5,0x06,0x00,0x3E,0xCE,0x36,0xCA,0x97,0xB0,0xFF,0x1F,
+0xE7,0x80,0xC0,0xED,0xD2,0x46,0x2A,0xCC,0x83,0x55,0x84,0x13,0x03,0xD5,0x86,0x01,
+0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x80,0xEC,0x62,0x46,0x33,0x05,0xA5,0x02,0x33,0x06,
+0xC6,0x02,0x32,0x95,0xEF,0xB0,0xFF,0xCD,0x13,0x06,0x00,0x60,0xD2,0x46,0xF2,0x47,
+0x63,0x7F,0xA6,0x02,0x83,0x55,0x84,0x13,0x03,0x55,0x04,0x12,0x36,0xCC,0x3E,0xCA,
+0xEF,0xF0,0x2F,0xFE,0x13,0x06,0xF0,0x17,0xE2,0x46,0x93,0x07,0x40,0x06,0x63,0x70,
+0xA6,0x02,0xB2,0x47,0x05,0x46,0x83,0xC5,0xB7,0x08,0xD2,0x47,0x63,0x79,0xB6,0x00,
+0x02,0x47,0x83,0x45,0x27,0x18,0x63,0x94,0xC5,0x00,0x93,0x07,0x10,0x04,0xD0,0x5C,
+0x11,0xCE,0x93,0x05,0x40,0x06,0x26,0x06,0x33,0x56,0xB6,0x02,0x93,0x05,0x00,0x50,
+0x33,0x86,0xC5,0x40,0xB3,0x07,0xF6,0x02,0xB3,0xD7,0xB7,0x02,0x37,0x57,0x00,0x20,
+0x03,0x26,0x07,0x01,0x03,0x06,0x86,0x0E,0x63,0x05,0x06,0x10,0x83,0x55,0x04,0x12,
+0x03,0xD5,0x06,0x00,0x3E,0xCC,0x36,0xCA,0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x00,0xE3,
+0xD2,0x46,0x83,0x55,0x84,0x13,0xAA,0x84,0x03,0xD5,0x86,0x01,0x97,0xB0,0xFF,0x1F,
+0xE7,0x80,0xC0,0xE1,0xB7,0x55,0x00,0x20,0x03,0xC6,0xB5,0x3E,0xD2,0x46,0x93,0x85,
+0xB5,0x3E,0xE2,0x47,0x51,0xEE,0xAA,0x94,0x13,0x05,0x00,0x60,0x63,0x73,0x95,0x0C,
+0x42,0x47,0x05,0x45,0x03,0x43,0xB7,0x00,0x63,0x6D,0x65,0x0A,0x05,0x06,0x23,0x80,
+0xC5,0x00,0x51,0xA0,0x37,0x57,0x00,0x20,0x03,0x26,0x07,0x01,0x03,0x46,0x36,0x15,
+0x09,0x82,0x05,0x8A,0x2D,0xD6,0x83,0xD5,0x06,0x00,0x13,0x06,0xF0,0x5F,0x63,0x79,
+0xB6,0x00,0x32,0x47,0x03,0x56,0x47,0x09,0x13,0x06,0x16,0xA0,0xE3,0xC9,0xC5,0xF4,
+0x83,0x55,0x84,0x13,0x36,0xCC,0x3E,0xCA,0xEF,0xF0,0xAF,0xEF,0x13,0x06,0xF0,0x1F,
+0xD2,0x47,0xE2,0x46,0x63,0x7B,0xA6,0x02,0x13,0x06,0xF0,0x5F,0x63,0x68,0xA6,0x00,
+0x33,0x85,0xA7,0x02,0x93,0x07,0x00,0x60,0xB3,0x57,0xF5,0x02,0x83,0xC5,0x04,0x04,
+0xD0,0x5C,0x63,0x73,0xB6,0x00,0x2E,0x86,0x93,0x05,0xD0,0x07,0x33,0x86,0xC5,0x40,
+0xB3,0x07,0xF6,0x02,0xB3,0xD7,0xB7,0x02,0x19,0xB7,0x13,0x05,0x00,0x20,0xC9,0xBF,
+0x25,0x45,0xE3,0x7D,0xC5,0xF6,0x37,0x57,0x00,0x20,0x03,0x26,0x07,0x01,0x1D,0x55,
+0x83,0xC5,0x05,0x00,0x03,0x06,0x86,0x0E,0x63,0x5E,0xA6,0x06,0x33,0x86,0xF5,0x02,
+0x93,0x05,0x20,0x03,0x33,0x06,0xB6,0x02,0x93,0x05,0x80,0x3E,0x33,0x56,0xB6,0x02,
+0x91,0x8F,0x02,0x47,0x03,0x46,0x27,0x18,0x29,0xC6,0x13,0x06,0x40,0x06,0x63,0x74,
+0xF6,0x00,0x93,0x07,0x40,0x06,0x03,0x56,0x04,0x12,0x83,0xD5,0x06,0x03,0x13,0x05,
+0x40,0x06,0xB3,0x02,0xF5,0x40,0x33,0x06,0xF6,0x02,0x03,0x53,0x84,0x13,0xB3,0x85,
+0x55,0x02,0xB2,0x95,0x03,0xD6,0x86,0x04,0xB3,0x07,0xF3,0x02,0x33,0x06,0x56,0x02,
+0xB2,0x97,0xB3,0xD5,0xA5,0x02,0xB3,0xD7,0xA7,0x02,0x23,0x10,0xB4,0x12,0x23,0x1C,
+0xF4,0x12,0x83,0x57,0x04,0x12,0x23,0x98,0xF6,0x02,0x83,0x57,0x84,0x13,0x23,0x94,
+0xF6,0x04,0xCD,0xB9,0x33,0x06,0xF6,0x02,0x33,0x06,0xB6,0x02,0x93,0x05,0x40,0x1F,
+0x33,0x46,0xB6,0x02,0xB2,0x97,0x71,0xB7,0x92,0x47,0x23,0x80,0x07,0x06,0x23,0x90,
+0x06,0x00,0x23,0x9C,0x06,0x00,0xF9,0xB1,0x51,0x11,0x06,0xC4,0xEF,0xF0,0xAF,0xB3,
+0xEF,0xF0,0x2F,0xE6,0xEF,0xF0,0xDF,0x90,0xA2,0x40,0x31,0x01,0x15,0xB1,0xB7,0xA7,
+0x00,0x20,0x93,0x87,0xC7,0xAC,0x13,0x87,0x07,0x03,0xFD,0x56,0x23,0x90,0xD7,0x00,
+0x91,0x07,0xE3,0x9D,0xE7,0xFE,0x82,0x80,0x11,0x11,0xB7,0xF7,0x00,0x20,0x13,0x87,
+0xC7,0x2D,0x06,0xCC,0x22,0xCA,0x26,0xC8,0x37,0xF3,0x00,0x20,0x03,0x46,0xE7,0x08,
+0x13,0x07,0x83,0x6D,0x03,0x47,0x77,0x06,0x93,0x87,0xC7,0x2D,0x3E,0xC2,0x3A,0xC0,
+0xB7,0x77,0x00,0x20,0xB7,0x86,0x00,0x20,0x13,0x76,0xF6,0x0F,0x13,0x03,0x83,0x6D,
+0x37,0x57,0x00,0x20,0x93,0x87,0x07,0xD8,0x93,0x86,0x06,0xD8,0x63,0x00,0x06,0x3E,
+0x02,0x46,0x63,0x0F,0x06,0x3A,0x03,0x46,0x23,0x04,0x63,0x0B,0x06,0x3A,0x83,0x53,
+0xA3,0x04,0x13,0x06,0x40,0x06,0x03,0x54,0x23,0x05,0xB3,0x83,0xC3,0x02,0x83,0x50,
+0xA3,0x05,0x83,0x55,0x63,0x04,0x33,0x04,0xC4,0x02,0xB3,0x80,0xC0,0x02,0x03,0x56,
+0x63,0x05,0xB3,0xC3,0xB3,0x02,0x83,0x55,0xE3,0x04,0xB3,0xC0,0xC0,0x02,0x33,0x44,
+0xB4,0x02,0x03,0x27,0x07,0x01,0x93,0x02,0x40,0x06,0x03,0x46,0x37,0x11,0x83,0x45,
+0x27,0x11,0x22,0x06,0x4D,0x8E,0x33,0x06,0x76,0x02,0x33,0x56,0x56,0x02,0x23,0x9B,
+0xC7,0x02,0x03,0x46,0x57,0x11,0x83,0x45,0x47,0x11,0x22,0x06,0x4D,0x8E,0x33,0x06,
+0x76,0x02,0x33,0x56,0x56,0x02,0x23,0x9C,0xC7,0x02,0x03,0x45,0x77,0x11,0x03,0x46,
+0x67,0x11,0x22,0x05,0x51,0x8D,0x33,0x05,0x85,0x02,0x33,0x55,0x55,0x02,0x23,0x9F,
+0xA7,0x02,0x83,0x45,0x97,0x11,0x03,0x46,0x87,0x11,0xA2,0x05,0xD1,0x8D,0xB3,0x85,
+0x85,0x02,0xB3,0xD5,0x55,0x02,0x23,0x90,0xB7,0x04,0x03,0x46,0xB7,0x11,0x03,0x44,
+0xA7,0x11,0x22,0x06,0x41,0x8E,0x33,0x06,0x16,0x02,0x33,0x56,0x56,0x02,0x32,0xC4,
+0x23,0x9D,0xC7,0x02,0x03,0x46,0xD7,0x11,0x03,0x44,0xC7,0x11,0x22,0x06,0x41,0x8E,
+0x33,0x06,0x16,0x02,0x03,0x44,0x87,0x15,0x33,0x56,0x56,0x02,0x23,0x9E,0xC7,0x02,
+0x83,0x40,0xF7,0x11,0x83,0x44,0xE7,0x11,0xA2,0x00,0xB3,0xE0,0x90,0x00,0xB3,0x80,
+0x70,0x02,0xB3,0xD0,0x50,0x02,0x23,0x91,0x17,0x04,0x83,0x40,0x17,0x12,0x83,0x44,
+0x07,0x12,0xA2,0x00,0xB3,0xE0,0x90,0x00,0xB3,0x80,0x70,0x02,0xC1,0x63,0xFD,0x13,
+0xB3,0xF5,0x75,0x00,0xA9,0x44,0x33,0x75,0x75,0x00,0x33,0x76,0x76,0x00,0xB3,0xD0,
+0x50,0x02,0x23,0x92,0x17,0x04,0x93,0x70,0xF4,0x00,0xB3,0x85,0x15,0x02,0x11,0x80,
+0xB3,0xC5,0x95,0x02,0x23,0x96,0xB7,0x04,0xA2,0x45,0x33,0x06,0x86,0x02,0xB3,0xF5,
+0x75,0x00,0x33,0x05,0x15,0x02,0xB3,0x85,0x85,0x02,0x33,0x45,0x95,0x02,0xB3,0xC5,
+0x95,0x02,0x23,0x95,0xA7,0x04,0xB3,0x44,0x96,0x02,0x23,0x93,0xB7,0x04,0x23,0x94,
+0x97,0x04,0x02,0x46,0x63,0x05,0x06,0x26,0x03,0x46,0x23,0x04,0x63,0x01,0x06,0x26,
+0x83,0x53,0xC3,0x04,0x03,0x56,0x83,0x04,0x03,0x54,0x43,0x05,0xB3,0x83,0x53,0x02,
+0x83,0x55,0x03,0x05,0xB3,0xC3,0xC3,0x02,0x03,0x56,0xC3,0x05,0x33,0x04,0x54,0x02,
+0xB3,0x02,0x56,0x02,0x03,0x56,0x83,0x05,0x33,0x44,0xB4,0x02,0xB3,0xC2,0xC2,0x02,
+0x03,0x46,0x37,0x12,0x83,0x45,0x27,0x12,0x93,0x00,0x40,0x06,0x22,0x06,0x4D,0x8E,
+0x33,0x06,0x76,0x02,0x33,0x56,0x16,0x02,0x23,0x9A,0xC6,0x6C,0x03,0x46,0x57,0x12,
+0x83,0x45,0x47,0x12,0x22,0x06,0x4D,0x8E,0x33,0x06,0x76,0x02,0x33,0x56,0x16,0x02,
+0x23,0x9B,0xC6,0x6C,0x03,0x45,0x77,0x12,0x03,0x46,0x67,0x12,0x22,0x05,0x51,0x8D,
+0x33,0x05,0x85,0x02,0x33,0x55,0x15,0x02,0x23,0x9E,0xA6,0x6C,0x83,0x45,0x97,0x12,
+0x03,0x46,0x87,0x12,0xA2,0x05,0xD1,0x8D,0xB3,0x85,0x85,0x02,0xB3,0xD5,0x15,0x02,
+0x23,0x9F,0xB6,0x6C,0x03,0x46,0xB7,0x12,0x03,0x43,0xA7,0x12,0x22,0x06,0x33,0x66,
+0x66,0x00,0x33,0x06,0x56,0x02,0x33,0x56,0x16,0x02,0x23,0x9C,0xC6,0x6C,0x03,0x43,
+0xD7,0x12,0x03,0x44,0xC7,0x12,0x22,0x03,0x33,0x63,0x83,0x00,0xB3,0x02,0x53,0x02,
+0xB3,0xD2,0x12,0x02,0x23,0x9D,0x56,0x6C,0x03,0x43,0xF7,0x12,0x83,0x44,0xE7,0x12,
+0x03,0x44,0x97,0x15,0x22,0x03,0x33,0x63,0x93,0x00,0x33,0x03,0x73,0x02,0x33,0x53,
+0x13,0x02,0x23,0x90,0x66,0x6E,0x03,0x43,0x17,0x13,0x83,0x44,0x07,0x13,0x22,0x03,
+0x33,0x63,0x93,0x00,0xB3,0x03,0x73,0x02,0x29,0x43,0xB3,0xD0,0x13,0x02,0xC1,0x63,
+0xFD,0x13,0x33,0x75,0x75,0x00,0xB3,0xF5,0x75,0x00,0x33,0x76,0x76,0x00,0xB3,0xF2,
+0x72,0x00,0x23,0x91,0x16,0x6E,0x93,0x70,0xF4,0x00,0x11,0x80,0x33,0x05,0x15,0x02,
+0xB3,0x85,0x15,0x02,0x33,0x06,0x86,0x02,0xB3,0x82,0x82,0x02,0x33,0x45,0x65,0x02,
+0xB3,0xC5,0x65,0x02,0x23,0x94,0xA6,0x6E,0x33,0x46,0x66,0x02,0x23,0x95,0xB6,0x6E,
+0xB3,0xC2,0x62,0x02,0x23,0x92,0xC6,0x6E,0x23,0x93,0x56,0x6E,0x03,0x47,0xA7,0x15,
+0x12,0x46,0x93,0x76,0xF7,0x00,0x11,0x83,0x05,0x07,0x23,0x05,0xD6,0x08,0xA3,0x05,
+0xE6,0x08,0x3E,0x84,0xB7,0x54,0x00,0x20,0x83,0x57,0x64,0x03,0x13,0x05,0x04,0x15,
+0xA3,0x04,0x04,0x14,0x23,0x1F,0xF4,0x00,0x83,0x57,0x84,0x03,0xA3,0x05,0x04,0x14,
+0x23,0x05,0x04,0x14,0x23,0x10,0xF4,0x02,0x83,0x57,0xE4,0x03,0xA3,0x07,0x04,0x14,
+0x23,0x07,0x04,0x14,0x23,0x13,0xF4,0x02,0x83,0x57,0x04,0x04,0x13,0x06,0x00,0x50,
+0x81,0x45,0x23,0x14,0xF4,0x02,0x83,0x57,0xA4,0x03,0x23,0xA8,0x84,0xFE,0x23,0x11,
+0xF4,0x02,0x83,0x57,0xC4,0x03,0x23,0x12,0xF4,0x02,0x83,0x57,0x24,0x04,0x23,0x15,
+0xF4,0x02,0x83,0x57,0x44,0x04,0x23,0x16,0xF4,0x02,0x83,0x57,0xA4,0x04,0x23,0x19,
+0xF4,0x02,0x83,0x57,0xC4,0x04,0x23,0x1A,0xF4,0x02,0x83,0x57,0x64,0x04,0x23,0x17,
+0xF4,0x02,0x83,0x57,0x84,0x04,0x23,0x18,0xF4,0x02,0xEF,0xA0,0xCF,0xEF,0x03,0xA5,
+0x04,0xFF,0x13,0x06,0x00,0x50,0x81,0x45,0x13,0x05,0x05,0x65,0xEF,0xA0,0xAF,0xEE,
+0x83,0xA7,0x04,0xFF,0x05,0x67,0xBA,0x97,0x23,0x98,0x07,0xB4,0x23,0x99,0x07,0xB4,
+0x23,0x9A,0x07,0xB4,0x23,0x8B,0x07,0xB4,0x23,0x9C,0x07,0xB4,0x23,0x9D,0x07,0xB4,
+0x23,0x9E,0x07,0xB4,0x23,0x91,0x07,0xB6,0x23,0x92,0x07,0xB6,0x23,0x93,0x07,0xB6,
+0xA3,0x86,0x07,0xC0,0x13,0x07,0xE7,0x69,0xB7,0xA7,0x00,0x20,0x3A,0x94,0x93,0x86,
+0xC7,0xAB,0xE3,0x93,0x86,0xF2,0xE2,0x40,0x52,0x44,0xC2,0x44,0x71,0x01,0x82,0x80,
+0x93,0x00,0x40,0x06,0x13,0x04,0x40,0x06,0x93,0x03,0x40,0x06,0x9D,0xB9,0x93,0x02,
+0x40,0x06,0x13,0x04,0x40,0x06,0x93,0x03,0x40,0x06,0xD9,0xB3,0xB7,0xF5,0x00,0x20,
+0x93,0x85,0x85,0x68,0x03,0xC5,0x45,0x04,0x85,0x42,0x13,0x06,0x00,0x05,0x63,0x8B,
+0xA2,0x00,0x83,0xC5,0x45,0x04,0x09,0x45,0x13,0x06,0x80,0x07,0x63,0x04,0xB5,0x00,
+0x13,0x06,0x40,0x06,0x82,0x45,0x63,0x80,0x05,0x34,0x83,0x45,0x23,0x04,0x63,0x8C,
+0x05,0x32,0x83,0x50,0xA3,0x04,0x03,0x55,0x23,0x05,0x03,0x54,0xA3,0x05,0x93,0x05,
+0x40,0x06,0xB3,0x80,0xB0,0x02,0x83,0x53,0x63,0x04,0x83,0x52,0xE3,0x04,0x33,0x05,
+0xB5,0x02,0x33,0x04,0xB4,0x02,0x83,0x55,0x63,0x05,0xB3,0xC0,0x70,0x02,0x33,0x45,
+0x55,0x02,0x33,0x44,0xB4,0x02,0x03,0x27,0x07,0x01,0x89,0x63,0x93,0x83,0x03,0x71,
+0x83,0x45,0xB7,0x00,0x83,0x42,0xA7,0x00,0xA2,0x05,0xB3,0xE5,0x55,0x00,0xB3,0x85,
+0xC5,0x02,0xB3,0x85,0x15,0x02,0xB3,0xD5,0x75,0x02,0x23,0x9B,0xB7,0x02,0x83,0x45,
+0xD7,0x00,0x83,0x42,0xC7,0x00,0xA2,0x05,0xB3,0xE5,0x55,0x00,0xB3,0x85,0xC5,0x02,
+0xB3,0x85,0x15,0x02,0xB3,0xD5,0x75,0x02,0x23,0x9C,0xB7,0x02,0x83,0x45,0x17,0x03,
+0x83,0x42,0x07,0x03,0xA2,0x05,0xB3,0xE5,0x55,0x00,0xB3,0x85,0xC5,0x02,0xB3,0x85,
+0xA5,0x02,0xB3,0xD5,0x75,0x02,0x2E,0xC4,0x23,0x9F,0xB7,0x02,0x83,0x45,0x37,0x03,
+0x83,0x42,0x27,0x03,0xA2,0x05,0xB3,0xE5,0x55,0x00,0xB3,0x85,0xC5,0x02,0xB3,0x85,
+0xA5,0x02,0xB3,0xD5,0x75,0x02,0x2E,0xC6,0x23,0x90,0xB7,0x04,0x03,0x45,0xD7,0x02,
+0x83,0x45,0xC7,0x02,0x22,0x05,0x4D,0x8D,0x33,0x05,0xC5,0x02,0x33,0x05,0x85,0x02,
+0x33,0x55,0x75,0x02,0x23,0x9D,0xA7,0x02,0x83,0x42,0xF7,0x02,0x83,0x45,0xE7,0x02,
+0xA2,0x02,0xB3,0xE5,0xB2,0x00,0xB3,0x85,0xC5,0x02,0xB3,0x85,0x85,0x02,0x03,0x44,
+0x27,0x08,0xB3,0xD5,0x75,0x02,0x23,0x9E,0xB7,0x02,0x83,0x42,0x17,0x06,0x83,0x44,
+0x07,0x06,0xA2,0x02,0xB3,0xE2,0x92,0x00,0xB3,0x82,0xC2,0x02,0xB3,0x82,0x12,0x02,
+0xB3,0xD2,0x72,0x02,0x23,0x91,0x57,0x04,0x83,0x42,0x37,0x06,0x83,0x44,0x27,0x06,
+0xA2,0x02,0xB3,0xE2,0x92,0x00,0xB3,0x82,0xC2,0x02,0xA2,0x44,0xB3,0x82,0x12,0x02,
+0x93,0x70,0xF4,0x00,0x11,0x80,0xB3,0xD2,0x72,0x02,0xC1,0x63,0xFD,0x13,0x33,0x75,
+0x75,0x00,0xB3,0xF5,0x75,0x00,0x23,0x92,0x57,0x04,0xB3,0xF2,0x74,0x00,0xB3,0x82,
+0x12,0x02,0x93,0x04,0x80,0x3E,0xB3,0x82,0xC2,0x02,0xB3,0xD2,0x92,0x02,0x23,0x95,
+0x57,0x04,0xB2,0x42,0x33,0x05,0x85,0x02,0xB3,0xF2,0x72,0x00,0xB3,0x80,0x12,0x02,
+0xB3,0x85,0x85,0x02,0xB3,0x80,0xC0,0x02,0x33,0x05,0xC5,0x02,0xB3,0x85,0xC5,0x02,
+0xB3,0xD0,0x90,0x02,0x33,0x55,0x95,0x02,0x23,0x96,0x17,0x04,0xB3,0xD4,0x95,0x02,
+0x23,0x93,0xA7,0x04,0x82,0x45,0x23,0x94,0x97,0x04,0x63,0x85,0x05,0x1A,0x83,0x45,
+0x23,0x04,0x63,0x81,0x05,0x1A,0x83,0x50,0xC3,0x04,0x83,0x54,0x43,0x05,0x03,0x54,
+0xC3,0x05,0x93,0x05,0x40,0x06,0xB3,0x80,0xB0,0x02,0x83,0x53,0x83,0x04,0x03,0x55,
+0x03,0x05,0xB3,0x84,0xB4,0x02,0x33,0x04,0xB4,0x02,0x83,0x55,0x83,0x05,0xB3,0xC0,
+0x70,0x02,0xB3,0xC4,0xA4,0x02,0x33,0x44,0xB4,0x02,0x83,0x45,0x57,0x08,0x03,0x45,
+0x47,0x08,0x89,0x63,0xA2,0x05,0xC9,0x8D,0x93,0x83,0x03,0x71,0xB3,0x85,0xC5,0x02,
+0xB3,0x85,0x15,0x02,0xB3,0xD5,0x75,0x02,0x23,0x9A,0xB6,0x6C,0x83,0x45,0x77,0x08,
+0x03,0x45,0x67,0x08,0xA2,0x05,0xC9,0x8D,0xB3,0x85,0xC5,0x02,0xB3,0x85,0x15,0x02,
+0xB3,0xD5,0x75,0x02,0x23,0x9B,0xB6,0x6C,0x03,0x43,0xD7,0x08,0x83,0x45,0xC7,0x08,
+0x22,0x03,0x33,0x63,0xB3,0x00,0x33,0x03,0xC3,0x02,0x33,0x03,0x93,0x02,0x33,0x53,
+0x73,0x02,0x23,0x9E,0x66,0x6C,0x03,0x45,0xF7,0x08,0x83,0x45,0xE7,0x08,0x22,0x05,
+0x4D,0x8D,0x33,0x05,0xC5,0x02,0x33,0x05,0x95,0x02,0x33,0x55,0x75,0x02,0x23,0x9F,
+0xA6,0x6C,0x83,0x45,0x97,0x08,0x83,0x42,0x87,0x08,0xA2,0x05,0xB3,0xE5,0x55,0x00,
+0xB3,0x85,0xC5,0x02,0xB3,0x85,0x85,0x02,0xB3,0xD5,0x75,0x02,0x23,0x9C,0xB6,0x6C,
+0x2E,0xC0,0x83,0x42,0xB7,0x08,0x83,0x45,0xA7,0x08,0xA2,0x02,0xB3,0xE5,0xB2,0x00,
+0xB3,0x85,0xC5,0x02,0xB3,0x85,0x85,0x02,0xB3,0xD5,0x75,0x02,0x23,0x9D,0xB6,0x6C,
+0x83,0x42,0xD7,0x06,0x83,0x44,0xC7,0x06,0x03,0x44,0x37,0x08,0xA2,0x02,0xB3,0xE2,
+0x92,0x00,0xB3,0x82,0xC2,0x02,0xB3,0x82,0x12,0x02,0xB3,0xD2,0x72,0x02,0x23,0x90,
+0x56,0x6E,0x83,0x42,0xF7,0x06,0x83,0x44,0xE7,0x06,0xA2,0x02,0xB3,0xE2,0x92,0x00,
+0xB3,0x82,0xC2,0x02,0xB3,0x82,0x12,0x02,0x93,0x00,0x80,0x3E,0xB3,0xD3,0x72,0x02,
+0xC1,0x62,0xFD,0x12,0x33,0x75,0x55,0x00,0x33,0x73,0x53,0x00,0xB3,0xF5,0x55,0x00,
+0x23,0x91,0x76,0x6E,0x93,0x73,0xF4,0x00,0x33,0x03,0x73,0x02,0x11,0x80,0xB3,0x03,
+0x75,0x02,0x02,0x45,0x33,0x75,0x55,0x00,0x33,0x05,0x85,0x02,0xB3,0x85,0x85,0x02,
+0x33,0x03,0xC3,0x02,0xB3,0x83,0xC3,0x02,0x33,0x05,0xC5,0x02,0x33,0x86,0xC5,0x02,
+0x33,0x53,0x13,0x02,0xB3,0xD3,0x13,0x02,0x23,0x94,0x66,0x6E,0x33,0x55,0x15,0x02,
+0x23,0x95,0x76,0x6E,0xB3,0x50,0x16,0x02,0x23,0x92,0xA6,0x6E,0x23,0x93,0x16,0x6E,
+0x03,0x47,0x87,0x01,0xB5,0xBE,0x13,0x04,0x40,0x06,0x13,0x05,0x40,0x06,0x93,0x00,
+0x40,0x06,0xD5,0xB9,0x13,0x04,0x40,0x06,0x93,0x04,0x40,0x06,0x93,0x00,0x40,0x06,
+0x69,0xB5,0xB7,0xF7,0x00,0x20,0x83,0xC7,0xF7,0x6B,0x05,0x89,0x63,0x8A,0xA7,0x06,
+0xB7,0xB7,0x00,0x20,0x93,0x87,0xC7,0x82,0xB7,0xF6,0x00,0x20,0x37,0xB7,0x00,0x20,
+0x93,0x86,0xC6,0x2D,0x23,0x24,0xF7,0x2C,0x03,0xD7,0x86,0x01,0x83,0xC6,0x26,0x01,
+0xB7,0xF5,0x00,0x20,0x13,0x16,0x17,0x00,0x36,0x97,0x06,0x07,0x3E,0x96,0xBA,0x97,
+0x37,0xF7,0x00,0x20,0x23,0x20,0xF7,0x12,0x85,0x67,0x93,0x87,0x07,0xA0,0xB3,0x07,
+0xF5,0x02,0xB7,0xE6,0x00,0x20,0x37,0x57,0x00,0x20,0x93,0x86,0x06,0xD2,0x13,0x07,
+0x47,0x00,0x23,0xA4,0xC5,0x12,0xB6,0x97,0x1C,0xC3,0x93,0x07,0x00,0x0A,0x33,0x05,
+0xF5,0x02,0xB7,0xF7,0x00,0x20,0x93,0x87,0x07,0x13,0x3E,0x95,0x48,0xC3,0x82,0x80,
+0xB7,0xA7,0x00,0x20,0x93,0x87,0x47,0xD9,0x41,0xBF,0x05,0x67,0x93,0x07,0x07,0xA9,
+0x05,0x89,0xB3,0x06,0xF5,0x02,0xB7,0xF5,0x00,0x20,0x93,0x85,0xC5,0x2D,0x03,0xD6,
+0x85,0x01,0xB7,0xB7,0x00,0x20,0x93,0x87,0xC7,0x2C,0x13,0x13,0x16,0x00,0xB6,0x97,
+0xB7,0xF6,0x00,0x20,0xB3,0x82,0x67,0x00,0x23,0xA2,0xF6,0x12,0xB7,0xA6,0x00,0x20,
+0x23,0xA6,0x56,0xD8,0x83,0xC6,0x25,0x01,0xB2,0x96,0x86,0x06,0xBE,0x96,0xB7,0xE7,
+0x00,0x20,0x23,0xAE,0xD7,0xD0,0x93,0x07,0xE7,0x69,0x33,0x05,0xF5,0x02,0x13,0x07,
+0xE7,0xC0,0xB7,0x77,0x00,0x20,0x93,0x87,0x07,0xD8,0x3A,0x95,0x3E,0x95,0xB7,0x57,
+0x00,0x20,0x23,0xA6,0xA7,0x00,0x2A,0x93,0xB7,0xF7,0x00,0x20,0x23,0xA6,0x67,0x12,
+0x83,0xC7,0x25,0x01,0xB2,0x97,0x86,0x07,0x3E,0x95,0xB7,0xA7,0x00,0x20,0x23,0xA2,
+0xA7,0xD8,0x82,0x80,0xB7,0xF7,0x00,0x20,0x83,0xC7,0xF7,0x6B,0x05,0x89,0x63,0x91,
+0xA7,0x04,0xB7,0xC7,0x00,0x20,0x93,0x87,0xC7,0x7E,0xB7,0xF6,0x00,0x20,0x37,0xB7,
+0x00,0x20,0x93,0x86,0xC6,0x2D,0x23,0x22,0xF7,0x2C,0x03,0xD7,0x86,0x01,0x83,0xC6,
+0x26,0x01,0xB7,0xA5,0x00,0x20,0x13,0x16,0x17,0x00,0x36,0x97,0x06,0x07,0x3E,0x96,
+0xBA,0x97,0x37,0xA7,0x00,0x20,0x23,0xA8,0xC5,0xD8,0x23,0x24,0xF7,0xD8,0x82,0x80,
+0xB7,0xD7,0x00,0x20,0x93,0x87,0x47,0x28,0xC9,0xB7,0x37,0x56,0x00,0x20,0x83,0x27,
+0x06,0x01,0x51,0x11,0x22,0xC2,0x06,0xC4,0x26,0xC0,0x03,0xC7,0xD7,0x01,0xB7,0xF5,
+0x00,0x20,0x03,0xC3,0x97,0x01,0x13,0x85,0xC5,0x2D,0x83,0xC2,0xA7,0x01,0xA3,0x08,
+0xE5,0x00,0x83,0xC6,0xB7,0x01,0x23,0x09,0x65,0x00,0x03,0xC7,0xC7,0x01,0xA3,0x09,
+0x55,0x00,0x83,0xC3,0x17,0x02,0x23,0x0A,0xD5,0x00,0xA3,0x0A,0xE5,0x00,0x13,0x84,
+0xC5,0x2D,0x63,0x86,0x03,0x00,0x03,0xC5,0x27,0x02,0x63,0x13,0x05,0x34,0x0D,0x45,
+0xA3,0x02,0xA4,0x00,0x19,0x45,0x23,0x03,0xA4,0x00,0x03,0xC5,0x87,0x02,0xC2,0x06,
+0x42,0x07,0xA3,0x07,0xA4,0x00,0x03,0xC5,0x97,0x02,0xC1,0x82,0x41,0x83,0x23,0x08,
+0xA4,0x00,0x03,0xC5,0x47,0x02,0x33,0x03,0x53,0x02,0xA3,0x04,0xA4,0x00,0x03,0xC5,
+0x47,0x03,0x23,0x05,0xA4,0x00,0x03,0xC5,0x67,0x02,0x93,0x73,0xF5,0x00,0xA3,0x01,
+0x74,0x00,0x11,0x81,0x23,0x01,0xA4,0x00,0x03,0xC5,0x77,0x02,0x23,0x1C,0x64,0x00,
+0x23,0x02,0xA4,0x00,0x03,0xC5,0x57,0x02,0x93,0x73,0xF5,0x00,0x23,0x8E,0x75,0x2C,
+0x83,0xC5,0x37,0x02,0x11,0x81,0xA3,0x00,0xA4,0x00,0xA3,0x03,0xB4,0x00,0x83,0xC5,
+0xB7,0x02,0x23,0x04,0xB4,0x00,0x83,0xC5,0x47,0x16,0xA3,0x05,0xB4,0x00,0x83,0xC5,
+0x67,0x16,0x23,0x06,0xB4,0x00,0x83,0xC5,0x87,0x16,0xA3,0x06,0xB4,0x00,0x83,0xC5,
+0xA7,0x16,0x23,0x07,0xB4,0x00,0xB3,0x85,0xE6,0x02,0xA6,0x06,0x23,0x1A,0xD4,0x08,
+0x26,0x07,0x23,0x1D,0xB4,0x00,0x23,0x1B,0xE4,0x08,0x03,0xC7,0x77,0x00,0x83,0xC6,
+0x67,0x00,0x22,0x07,0x55,0x8F,0x23,0x1C,0xE4,0x08,0x03,0xC7,0x97,0x00,0x83,0xC6,
+0x87,0x00,0x22,0x07,0x55,0x8F,0x23,0x1D,0xE4,0x08,0x03,0xC7,0x77,0x0E,0xF5,0x46,
+0x63,0xEB,0xE6,0x26,0x79,0x47,0x23,0x0E,0xE4,0x08,0x03,0xC7,0xB7,0x00,0x83,0xC6,
+0xA7,0x00,0xB7,0xF4,0x00,0x20,0x22,0x07,0x55,0x8F,0x23,0x18,0xE4,0x0A,0x03,0xC7,
+0xD7,0x00,0x83,0xC6,0xC7,0x00,0x22,0x07,0x55,0x8F,0x23,0x19,0xE4,0x0A,0x03,0xC7,
+0x07,0x01,0xA3,0x07,0xE4,0x0A,0x83,0xC6,0xF7,0x00,0x19,0x87,0x05,0x8B,0xA3,0x07,
+0xD4,0x08,0x83,0xC6,0x17,0x01,0x23,0x08,0xD4,0x08,0x93,0x86,0x84,0x68,0xA3,0x80,
+0xE6,0x00,0x83,0xC6,0xB7,0x03,0x25,0x47,0x93,0x84,0x84,0x68,0x63,0x64,0xD7,0x22,
+0x13,0x07,0x80,0x3E,0x23,0x11,0xE4,0x0A,0x83,0xC6,0xC7,0x04,0xA5,0x45,0x13,0x07,
+0x80,0x3E,0x63,0xF7,0xD5,0x00,0x09,0x67,0x13,0x07,0x07,0x71,0x33,0x47,0xD7,0x02,
+0x23,0x12,0xE4,0x0A,0x83,0xC6,0xD7,0x04,0xA5,0x45,0x13,0x07,0x80,0x3E,0x63,0xF7,
+0xD5,0x00,0x09,0x67,0x13,0x07,0x07,0x71,0x33,0x47,0xD7,0x02,0x23,0x10,0xE4,0x0A,
+0x03,0xC7,0xE7,0x04,0x93,0x07,0x80,0x3E,0x19,0xC3,0xB3,0x07,0xF7,0x02,0x23,0x2A,
+0xF4,0x0A,0x83,0x57,0x24,0x0A,0x23,0x1F,0xF4,0x08,0x89,0x67,0x93,0x87,0xC7,0xD4,
+0x23,0x15,0xF4,0x0A,0x23,0x16,0xF4,0x0A,0x83,0x57,0xA4,0x0A,0xC2,0x07,0xC1,0x83,
+0x23,0x13,0xF4,0x0A,0x83,0x57,0xC4,0x0A,0xC2,0x07,0xC1,0x83,0x23,0x14,0xF4,0x0A,
+0x23,0x07,0x04,0x08,0xEF,0xF0,0x4F,0xCE,0xB7,0x77,0x00,0x20,0x37,0x57,0x00,0x20,
+0x93,0x87,0x07,0xD8,0x37,0x56,0x00,0x20,0x23,0x28,0xF7,0xFE,0x83,0x27,0x06,0x01,
+0x03,0xC7,0x87,0x01,0x93,0x76,0xF7,0x00,0x11,0x83,0x05,0x07,0xA3,0x05,0xE4,0x08,
+0x23,0x05,0xD4,0x08,0x83,0xC6,0xE7,0x00,0x29,0x47,0x63,0x74,0xD7,0x00,0x23,0x87,
+0xE7,0x00,0x83,0xC6,0xA7,0x02,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x67,0xC1,0x8A,
+0x63,0x80,0x06,0x16,0x85,0x46,0x23,0x04,0xD7,0x00,0x83,0xC6,0xA7,0x02,0x8D,0x8A,
+0x63,0x8B,0x06,0x14,0x85,0x46,0xA3,0x03,0xD7,0x00,0x83,0xC6,0xA7,0x02,0xB1,0x8A,
+0x63,0x86,0x06,0x14,0x85,0x46,0x23,0x03,0xD7,0x00,0x23,0x2C,0x04,0x0A,0x83,0xC5,
+0x97,0x01,0xBE,0x86,0x01,0x45,0xBE,0x95,0x01,0x46,0x05,0x43,0x63,0x9B,0xB6,0x12,
+0x19,0xC1,0x23,0x2C,0xC4,0x0A,0x83,0x26,0x84,0x0B,0xA3,0x04,0x07,0x00,0x23,0x9B,
+0x04,0x02,0x93,0xE6,0x16,0x00,0x93,0xC6,0xF6,0xFF,0x23,0x2C,0xD4,0x0A,0x85,0x46,
+0x23,0x02,0xD7,0x00,0xA3,0x02,0xD7,0x00,0x23,0x82,0x04,0x00,0x03,0x47,0xF4,0x08,
+0x03,0xC6,0x34,0x03,0x19,0x83,0x05,0x8B,0x51,0x8F,0xA3,0x89,0xE4,0x02,0x03,0x47,
+0xF4,0x08,0x03,0xC6,0x34,0x03,0x1D,0x83,0x06,0x07,0x51,0x8F,0xA3,0x89,0xE4,0x02,
+0xA3,0x8A,0xD4,0x02,0x03,0x47,0x04,0x09,0x83,0x46,0x04,0x09,0x11,0x8B,0x85,0x8A,
+0x55,0x8F,0x23,0x02,0xE4,0x0C,0x03,0x47,0x44,0x0C,0x13,0x77,0xF7,0x0F,0x25,0xCB,
+0x03,0xC7,0x17,0x15,0x0D,0x83,0x05,0x8B,0x3D,0xC3,0x03,0xC7,0xD7,0x17,0x93,0x76,
+0xF7,0x00,0x9D,0xC6,0x83,0x47,0xF4,0x08,0xE2,0x07,0xE1,0x87,0x63,0xD2,0x07,0x02,
+0x85,0x47,0x95,0x45,0x03,0x45,0x04,0x01,0x33,0x93,0xF6,0x00,0x13,0xF6,0xF7,0x0F,
+0x63,0x14,0xA3,0x0A,0x83,0x47,0x34,0x00,0x63,0xED,0xC7,0x08,0x23,0x06,0xC4,0x08,
+0x11,0x83,0x15,0xC7,0x83,0x47,0xF4,0x08,0x93,0xF7,0x07,0x04,0x8D,0xC3,0x85,0x47,
+0x15,0x46,0x83,0x45,0xE4,0x00,0x33,0x15,0xF7,0x00,0x93,0xF6,0xF7,0x0F,0x63,0x14,
+0xB5,0x08,0x83,0x47,0x24,0x00,0x63,0xED,0xD7,0x06,0xA3,0x06,0xD4,0x08,0xEF,0xC0,
+0x7F,0xC0,0xEF,0xA0,0xFF,0xFA,0xEF,0x20,0x20,0x49,0x25,0x25,0x01,0x45,0x11,0x3E,
+0x01,0x45,0x0D,0x31,0x12,0x44,0xA2,0x40,0x82,0x44,0x01,0x45,0x31,0x01,0x71,0xB6,
+0xA3,0x02,0x74,0x00,0xC9,0xB1,0x93,0x06,0xA0,0x05,0xE3,0xF6,0xE6,0xD8,0x23,0x0E,
+0xD4,0x08,0x61,0xB3,0x09,0x67,0x13,0x07,0x07,0x71,0x33,0x47,0xD7,0x02,0xD9,0xBB,
+0x23,0x04,0x07,0x00,0x5D,0xB5,0xA3,0x03,0x07,0x00,0x45,0xBD,0x23,0x03,0x07,0x00,
+0x6D,0xBD,0x03,0xC5,0x06,0x09,0x85,0x06,0x33,0x15,0xA3,0x00,0x49,0x8E,0x05,0x45,
+0x75,0xBD,0x23,0x06,0x04,0x08,0xAD,0xB7,0x85,0x07,0xE3,0x95,0xB7,0xF4,0x8D,0xB7,
+0xA3,0x06,0x04,0x08,0x69,0xB7,0x85,0x07,0xE3,0x95,0xC7,0xF6,0x49,0xB7,0x51,0x11,
+0x22,0xC2,0x37,0x54,0x00,0x20,0x03,0x25,0x04,0x01,0x13,0x06,0x00,0x20,0xE1,0x65,
+0x06,0xC4,0x97,0xA0,0xFF,0x1F,0xE7,0x80,0xC0,0xF4,0x03,0x25,0x04,0x01,0x83,0x47,
+0x75,0x00,0x03,0x47,0x65,0x00,0xA2,0x07,0xD9,0x8F,0x85,0xE3,0x83,0x27,0x04,0x01,
+0x7D,0x57,0x23,0x80,0xE7,0x00,0xB7,0x57,0x00,0x20,0x03,0xA7,0x07,0x02,0xB7,0x57,
+0x46,0x43,0x93,0x87,0x27,0xF5,0x1C,0xCF,0x01,0xA0,0x93,0x05,0x00,0x20,0x97,0xA0,
+0xFF,0x1F,0xE7,0x80,0x80,0xF3,0x79,0xF9,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,
+0x51,0x11,0x06,0xC4,0x22,0xC2,0xB7,0x87,0x00,0x40,0x13,0x07,0x00,0x20,0xD8,0xC7,
+0x97,0xC0,0xFF,0x1F,0xE7,0x80,0xA0,0x22,0xB7,0x57,0x00,0x20,0x83,0xA7,0x47,0x01,
+0x85,0x66,0x93,0x86,0x06,0x80,0xD8,0x43,0x37,0x54,0x00,0x20,0x03,0x25,0x04,0x02,
+0x55,0x8F,0xD8,0xC3,0xD8,0x43,0xFD,0x76,0x93,0x86,0xF6,0x7F,0x75,0x8F,0xD8,0xC3,
+0xD8,0x47,0x13,0x06,0x80,0x03,0x93,0x05,0xF0,0x0F,0x13,0x67,0x07,0x20,0xD8,0xC7,
+0xB7,0xA7,0x00,0x20,0x93,0x87,0x47,0xD9,0x23,0x10,0xF5,0x02,0xB7,0xC7,0x00,0x20,
+0x93,0x87,0xC7,0x7E,0x23,0x11,0xF5,0x02,0xB7,0x07,0x01,0x20,0x93,0x87,0xC7,0x9C,
+0x23,0x12,0xF5,0x02,0x23,0x2C,0x05,0x00,0x13,0x05,0xC5,0x02,0xEF,0x90,0xBF,0xCB,
+0x83,0x27,0x04,0x02,0x03,0x57,0xE0,0x03,0xD8,0xCB,0x03,0x57,0xC0,0x03,0x23,0x93,
+0xE7,0x02,0x37,0x57,0x8D,0xAB,0x13,0x07,0x27,0x47,0x98,0xD7,0xEF,0x90,0x1F,0xBC,
+0x97,0xB0,0xFF,0x1F,0xE7,0x80,0x60,0xD5,0xEF,0xA0,0x8F,0xCF,0x97,0xD0,0xFF,0x1F,
+0xE7,0x80,0x60,0x8D,0x09,0xC9,0x03,0x27,0x04,0x02,0xB7,0x57,0x52,0x4F,0x93,0x87,
+0x57,0x24,0x1C,0xCF,0x01,0xA0,0xE1,0x3D,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,
+0x03,0xC7,0x26,0x00,0x83,0xC7,0x16,0x00,0x22,0x07,0x5D,0x8F,0x83,0xC7,0x36,0x00,
+0xC2,0x07,0x5D,0x8F,0x83,0xC7,0x46,0x00,0xE2,0x07,0xD9,0x8F,0x03,0x27,0x04,0x02,
+0x5C,0xCF,0xB7,0x57,0x53,0x43,0x93,0x87,0x37,0x84,0x1C,0xCF,0x7D,0x34,0x97,0xC0,
+0xFF,0x1F,0xE7,0x80,0x20,0x1B,0xEF,0x60,0xC0,0x49,0xEF,0xA0,0xAF,0x9A,0xEF,0xF0,
+0x0F,0x97,0x85,0x45,0x0D,0x45,0xEF,0xA0,0x1F,0xC2,0x97,0xA0,0xFF,0x1F,0xE7,0x80,
+0x80,0xE6,0x73,0x60,0x04,0x30,0xEF,0x10,0xE0,0x66,0x03,0x25,0x04,0x02,0x12,0x44,
+0xA2,0x40,0x13,0x06,0x80,0x03,0x93,0x05,0xF0,0x0F,0x13,0x05,0xC5,0x02,0x31,0x01,
+0x6F,0x90,0x7F,0xBF,0xB7,0xF7,0x00,0x20,0x83,0xD7,0xA7,0x37,0x05,0x67,0x93,0x06,
+0x07,0x90,0xB3,0x87,0xD7,0x02,0x93,0x06,0x40,0x06,0x13,0x01,0xC1,0xFD,0x22,0xD0,
+0x37,0x54,0x00,0x20,0x26,0xCE,0x93,0x02,0x84,0x40,0xB3,0xD7,0xD7,0x02,0x81,0x46,
+0xB3,0x87,0xF7,0x02,0x3E,0xC4,0xB7,0x57,0x00,0x20,0x93,0x87,0x47,0x7E,0xBA,0x97,
+0x3E,0xC8,0xC2,0x47,0x83,0xC7,0x57,0x36,0x63,0xE7,0xF6,0x00,0x02,0x54,0xF2,0x44,
+0x13,0x01,0x41,0x02,0x82,0x80,0xE1,0x47,0x33,0x85,0xF6,0x02,0xA2,0x47,0x93,0x04,
+0x84,0x40,0x93,0x05,0x84,0x40,0x3E,0xC2,0x3E,0xC0,0x93,0x87,0x86,0x00,0x86,0x07,
+0x96,0x97,0x3E,0xCA,0x93,0x87,0x86,0x01,0x86,0x07,0x96,0x97,0x26,0x95,0x01,0x46,
+0x3E,0xCC,0xB3,0x83,0xD2,0x00,0x83,0xD7,0x04,0x15,0xF9,0xC7,0x03,0xC7,0xA5,0x19,
+0x93,0x07,0xF0,0x0F,0x63,0x02,0xF7,0x0C,0xD2,0x47,0x03,0xC3,0xE5,0x18,0x05,0x83,
+0x83,0xD7,0x87,0x00,0x9D,0x83,0xBA,0x97,0x13,0x17,0x23,0x00,0x33,0x07,0xE3,0x40,
+0x09,0x43,0x33,0x47,0x67,0x02,0xBA,0x97,0x62,0x47,0xC2,0x07,0xC1,0x83,0x03,0x57,
+0x07,0x00,0x3E,0xC6,0x13,0x53,0x77,0x00,0x03,0xC7,0xE5,0x1B,0x05,0x83,0x1A,0x97,
+0x03,0xC3,0x25,0x1B,0x93,0x17,0x23,0x00,0x33,0x03,0xF3,0x40,0x89,0x47,0x33,0x43,
+0xF3,0x02,0xB2,0x47,0x3A,0x93,0x42,0x03,0x13,0x53,0x03,0x01,0xB3,0x87,0xF7,0x02,
+0x02,0x47,0x33,0x03,0x63,0x02,0x9A,0x97,0xC2,0x07,0xC1,0x83,0x23,0x1C,0xF5,0x2A,
+0x63,0xF5,0xE7,0x04,0x03,0xC7,0x03,0x00,0x23,0x80,0xC3,0x00,0x23,0x86,0xE3,0x00,
+0x02,0x47,0x3E,0xC0,0x3A,0xC2,0x05,0x06,0x13,0x76,0xF6,0x0F,0xB1,0x47,0x89,0x04,
+0x09,0x05,0x85,0x05,0xE3,0x11,0xF6,0xF6,0xB3,0x87,0xD2,0x00,0x83,0xC7,0x07,0x00,
+0x2D,0x47,0x63,0x68,0xF7,0x00,0x96,0x97,0x03,0xC7,0x47,0x08,0x05,0x07,0x23,0x82,
+0xE7,0x08,0x85,0x06,0x93,0xF6,0xF6,0x0F,0xED,0xBD,0x12,0x47,0xE3,0xF5,0xE7,0xFC,
+0x23,0x86,0xC3,0x00,0x3E,0xC2,0xC1,0xB7,0xFD,0x57,0x23,0x1C,0xF5,0x2A,0x65,0xBF,
+0x37,0x67,0x00,0x20,0xB7,0x57,0x00,0x20,0x01,0x46,0x93,0x02,0xF0,0x0F,0x13,0x07,
+0x47,0x7E,0x93,0x87,0x87,0x40,0x93,0x05,0xF0,0x0F,0x83,0x46,0x57,0x36,0x63,0x67,
+0xD6,0x0C,0x13,0x06,0xF0,0x0F,0x33,0x87,0x57,0x00,0x03,0x43,0xC7,0x00,0x13,0x07,
+0xF0,0x0F,0x63,0x07,0xE3,0x00,0x33,0x87,0x67,0x00,0x03,0x47,0x47,0x08,0x09,0xCF,
+0x33,0x87,0xC7,0x00,0x03,0x47,0xC7,0x00,0x93,0x06,0xF0,0x0F,0x63,0x03,0xD7,0x0E,
+0x3E,0x97,0x03,0x47,0x47,0x08,0x71,0xEF,0x31,0x47,0xB3,0x86,0xE2,0x02,0x71,0x11,
+0x22,0xC0,0x33,0x07,0xE6,0x02,0xB3,0x85,0xA6,0x00,0x93,0x85,0x85,0x15,0x86,0x05,
+0xBE,0x95,0x03,0xD4,0x85,0x00,0xB3,0x05,0xA7,0x00,0x93,0x85,0x85,0x15,0x86,0x05,
+0xBE,0x95,0x83,0xD3,0x85,0x00,0x93,0x05,0xF0,0x0F,0x63,0x07,0xB3,0x00,0xB3,0x85,
+0x67,0x00,0x83,0xC5,0x45,0x08,0xB5,0xC5,0xC1,0x66,0xFD,0x16,0xB6,0x93,0xB3,0x86,
+0xC7,0x00,0x83,0xC5,0xC6,0x00,0x93,0x06,0xF0,0x0F,0x63,0x87,0xD5,0x00,0xB3,0x86,
+0xB7,0x00,0x83,0xC6,0x46,0x08,0xB1,0xCE,0x41,0x67,0x7D,0x17,0x3E,0x95,0x83,0x46,
+0x45,0x08,0x3A,0x94,0xFD,0x16,0x93,0xF6,0xF6,0x0F,0x63,0x7D,0x74,0x04,0x33,0x87,
+0xC7,0x00,0x23,0x00,0xB7,0x00,0x23,0x02,0xD5,0x08,0xAE,0x97,0x03,0xC7,0x47,0x08,
+0x05,0x07,0x23,0x82,0xE7,0x08,0x02,0x44,0x11,0x01,0x82,0x80,0xB3,0x86,0xC7,0x00,
+0x83,0xC6,0x06,0x00,0x63,0x95,0xA6,0x00,0xE3,0x97,0xB2,0xF2,0xB2,0x82,0x05,0x06,
+0x29,0xBF,0x9A,0x96,0x93,0x86,0x86,0x15,0x86,0x06,0xBE,0x96,0x83,0xD6,0x86,0x00,
+0x71,0xB7,0xB3,0x06,0xB7,0x00,0x93,0x86,0x86,0x15,0x86,0x06,0xBE,0x96,0x03,0xD7,
+0x86,0x00,0x69,0xBF,0xBE,0x92,0x23,0x80,0x62,0x00,0x23,0x02,0xD5,0x08,0x9A,0x97,
+0x75,0xB7,0x82,0x80,0x37,0x57,0x00,0x20,0x93,0x07,0x87,0x40,0x61,0x11,0x93,0x16,
+0x15,0x00,0xB7,0x65,0x00,0x20,0x37,0x66,0x00,0x20,0x22,0xC2,0xBE,0x96,0x26,0xC0,
+0xFD,0x53,0x01,0x43,0x81,0x47,0x13,0x07,0x87,0x40,0x93,0x85,0x45,0x7E,0x13,0x06,
+0x46,0x7E,0x61,0x44,0x83,0xC2,0x55,0x36,0x63,0xEF,0x57,0x00,0x81,0x47,0x61,0x44,
+0xFD,0x52,0xB3,0x03,0xA7,0x00,0x83,0x45,0x56,0x36,0x63,0xE7,0xB7,0x02,0x12,0x44,
+0x82,0x44,0x21,0x01,0x82,0x80,0xB3,0x02,0xF7,0x00,0x83,0xC2,0x02,0x00,0x63,0x9B,
+0xA2,0x00,0xB3,0x82,0x87,0x02,0xB6,0x92,0x83,0xD2,0x82,0x2B,0x63,0xF4,0x72,0x00,
+0x96,0x83,0x3E,0x83,0x85,0x07,0x7D,0xBF,0xB3,0x04,0xF7,0x00,0x83,0xC5,0x04,0x00,
+0x63,0x90,0xA5,0x02,0x63,0x8E,0x67,0x00,0xB3,0x85,0x87,0x02,0xB6,0x95,0x23,0x9C,
+0x55,0x2A,0x23,0x80,0x54,0x00,0x83,0xC5,0x43,0x08,0xFD,0x15,0x23,0x82,0xB3,0x08,
+0x85,0x07,0x55,0xB7,0x19,0x47,0x33,0x05,0xE5,0x02,0xB7,0x57,0x00,0x20,0x71,0x11,
+0x93,0x87,0x47,0x7E,0x22,0xC0,0x01,0x47,0x3E,0x95,0x83,0x45,0x95,0x00,0x03,0x43,
+0x85,0x00,0x93,0x96,0x05,0x01,0xC1,0x82,0x89,0xC5,0x13,0x87,0xF6,0xFF,0x42,0x07,
+0x41,0x83,0x37,0xF6,0x00,0x20,0x93,0x07,0xC6,0x2D,0x83,0xC7,0x37,0x01,0x13,0x06,
+0xC6,0x2D,0xFD,0x17,0x63,0xD5,0xF5,0x00,0x85,0x06,0xC2,0x06,0xC1,0x82,0xB7,0xB7,
+0x00,0x20,0x13,0x15,0x03,0x01,0x83,0xA2,0x47,0x2C,0x41,0x81,0x93,0x03,0xF5,0xFF,
+0x13,0x77,0xF7,0x0F,0x81,0x45,0x05,0x05,0x93,0x17,0x07,0x01,0xC1,0x83,0x63,0xF9,
+0xF6,0x02,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,0x02,0x44,0x03,0xD5,0x67,0x03,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,0x17,0x16,0x11,0x01,0x33,0x05,
+0xF5,0x02,0x93,0x07,0x40,0x06,0x33,0x55,0xF5,0x02,0x33,0xB5,0xA5,0x00,0x82,0x80,
+0x03,0x44,0x26,0x01,0xB3,0x87,0x87,0x02,0x03,0x44,0x26,0x01,0x05,0x80,0xC2,0x07,
+0xC1,0x83,0x63,0x76,0x83,0x02,0xAA,0x97,0xC2,0x07,0xC1,0x83,0x86,0x07,0x96,0x97,
+0x83,0xD7,0x07,0x00,0x13,0x94,0x07,0x01,0x41,0x84,0x63,0x53,0xB4,0x00,0xAE,0x87,
+0x93,0x95,0x07,0x01,0x05,0x07,0xC1,0x85,0x13,0x77,0xF7,0x0F,0x71,0xB7,0x9E,0x97,
+0xE1,0xBF,0xB7,0x57,0x00,0x20,0x03,0xA6,0x07,0x01,0xB7,0xF7,0x00,0x20,0x93,0x86,
+0x07,0x27,0x85,0x45,0x23,0x8A,0xB6,0x04,0xB1,0x45,0x23,0x98,0xB6,0x02,0x83,0x45,
+0x16,0x15,0x83,0x46,0x06,0x15,0x03,0x45,0xC6,0x16,0xA2,0x05,0xD5,0x8D,0x83,0x46,
+0x26,0x15,0x03,0x47,0xD6,0x16,0x93,0x87,0x07,0x27,0xC2,0x06,0xD5,0x8D,0x83,0x46,
+0x36,0x15,0xE2,0x06,0xCD,0x8E,0x13,0x96,0xF6,0x00,0x63,0x55,0x06,0x00,0x71,0x46,
+0x23,0x98,0xC7,0x02,0x13,0x96,0xE6,0x00,0x63,0x58,0x06,0x00,0x03,0xD6,0x07,0x03,
+0x13,0x66,0x06,0x02,0x23,0x98,0xC7,0x02,0x13,0x96,0xD6,0x00,0x63,0x58,0x06,0x00,
+0x03,0xD6,0x07,0x03,0x13,0x66,0x06,0x04,0x23,0x98,0xC7,0x02,0x13,0x96,0xC6,0x00,
+0x63,0x58,0x06,0x00,0x83,0xD6,0x07,0x03,0x93,0xE6,0x06,0x08,0x23,0x98,0xD7,0x02,
+0x37,0xF6,0x00,0x20,0x13,0x06,0xC6,0x2D,0x83,0x55,0x86,0x09,0x03,0x56,0xA6,0x09,
+0x42,0x07,0x41,0x83,0xB3,0x86,0xE5,0x40,0x23,0x9E,0xE7,0x02,0x23,0x96,0xE7,0x04,
+0x23,0x97,0xE7,0x04,0x23,0x90,0xE7,0x04,0x33,0x07,0xE6,0x40,0xC2,0x06,0x42,0x07,
+0xC1,0x82,0x41,0x83,0x23,0x99,0xA7,0x02,0x23,0x9B,0xD7,0x02,0x23,0x9F,0xB7,0x02,
+0x23,0x94,0xE7,0x04,0x23,0x98,0xC7,0x04,0x23,0x9D,0xD7,0x02,0x23,0x91,0xB7,0x04,
+0x23,0x95,0xE7,0x04,0x23,0x99,0xC7,0x04,0x82,0x80,0x13,0x01,0x81,0xFD,0xB7,0xF7,
+0x00,0x20,0x26,0xCE,0x06,0xD2,0x22,0xD0,0x13,0x87,0x07,0x27,0xAA,0x84,0x03,0x45,
+0x47,0x05,0x63,0x07,0x05,0x22,0x93,0x87,0x07,0x27,0x33,0x87,0x97,0x00,0x83,0x46,
+0x57,0x05,0x13,0x07,0xF0,0x0F,0x01,0x45,0x63,0x8C,0xE6,0x20,0x37,0x54,0x00,0x20,
+0x13,0x07,0x84,0x40,0xB3,0x06,0x97,0x00,0x03,0xC3,0x86,0x23,0x93,0x86,0x04,0x09,
+0x36,0xC4,0x86,0x06,0xBA,0x96,0x03,0xD6,0x06,0x00,0x93,0x86,0x84,0x09,0x36,0xC6,
+0x86,0x06,0x36,0x97,0x83,0x56,0x87,0x00,0x13,0x04,0x84,0x40,0x63,0x0E,0x03,0x02,
+0x13,0x87,0x44,0x07,0x0A,0x07,0x22,0x97,0x08,0x47,0x13,0x87,0x04,0x08,0x0A,0x07,
+0x22,0x97,0x18,0x47,0x33,0x55,0x65,0x02,0x8D,0x45,0x33,0x57,0x67,0x02,0x06,0x05,
+0x2A,0x96,0x06,0x07,0x36,0x97,0x33,0x56,0xB6,0x02,0x33,0x57,0xB7,0x02,0x42,0x06,
+0x41,0x82,0x93,0x16,0x07,0x01,0xC1,0x82,0x32,0x85,0x81,0x45,0x36,0xC2,0xEF,0x10,
+0xA0,0x65,0x92,0x46,0x2A,0xC0,0x85,0x45,0x36,0x85,0xEF,0x10,0xE0,0x64,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0x07,0x27,0x03,0xD7,0x07,0x03,0x2A,0x86,0x63,0x08,0x07,0x18,
+0x93,0x76,0xF7,0x00,0xB1,0xC6,0x83,0x52,0x01,0x00,0x93,0xF6,0xF6,0x0F,0x93,0x13,
+0x05,0x01,0x36,0xC2,0x93,0xD3,0x03,0x01,0xBE,0x86,0x81,0x45,0x11,0x43,0x12,0x45,
+0x33,0x55,0xB5,0x40,0x05,0x89,0x0D,0xC1,0x03,0xD5,0x46,0x03,0x63,0xEE,0xA2,0x00,
+0x03,0xD5,0xC6,0x03,0x63,0x6A,0x55,0x00,0x03,0xD5,0x46,0x04,0x63,0xE6,0xA3,0x00,
+0x03,0xD5,0xC6,0x04,0x63,0x76,0x75,0x12,0x85,0x05,0x89,0x06,0xE3,0x99,0x65,0xFC,
+0x93,0x76,0x07,0x0F,0x63,0x8C,0x06,0x12,0x11,0x83,0x13,0x77,0xF7,0x0F,0x93,0x75,
+0x17,0x00,0x83,0xD6,0x27,0x03,0x81,0xC9,0x13,0x15,0x06,0x01,0x93,0x85,0x16,0x00,
+0x41,0x81,0x63,0xD4,0xA5,0x04,0x93,0x75,0x27,0x00,0x99,0xC9,0xB7,0xF5,0x00,0x20,
+0x83,0xD5,0x65,0x37,0x13,0x15,0x06,0x01,0x41,0x81,0x95,0x8D,0x63,0x57,0xB5,0x02,
+0x93,0x75,0x47,0x00,0x99,0xC5,0x03,0x55,0x01,0x00,0x93,0x85,0x16,0x00,0x63,0xDE,
+0xA5,0x00,0x21,0x8B,0x65,0xC7,0x37,0xF7,0x00,0x20,0x03,0x57,0x47,0x37,0xB3,0x06,
+0xD7,0x40,0x03,0x57,0x01,0x00,0x63,0x4B,0xD7,0x0C,0x13,0x87,0x04,0x06,0x06,0x07,
+0x22,0x97,0x03,0x55,0x07,0x00,0x81,0x45,0x32,0xCA,0xEF,0x10,0xE0,0x56,0x13,0x87,
+0x84,0x06,0x06,0x07,0x22,0x97,0x2A,0xC8,0x03,0x55,0x87,0x00,0x85,0x45,0xEF,0x10,
+0xA0,0x55,0xC2,0x42,0x82,0x47,0x41,0x67,0x7D,0x17,0xB3,0xF5,0xE7,0x00,0x2A,0xC2,
+0x33,0xF5,0xE2,0x00,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x40,0x72,0x52,0x46,0x12,0x43,
+0xC1,0x67,0x13,0x87,0xF7,0xFF,0xB3,0x75,0xE6,0x00,0x2A,0xC0,0x33,0x75,0xE3,0x00,
+0x97,0x90,0xFF,0x1F,0xE7,0x80,0x80,0x70,0x82,0x46,0xC1,0x67,0x13,0x87,0xF7,0xFF,
+0xF9,0x8E,0x69,0x8F,0xB3,0x86,0xD6,0x02,0x33,0x07,0xE7,0x02,0x33,0x85,0xE6,0x00,
+0xEF,0xA0,0x2F,0xD1,0x2A,0xC0,0x28,0x08,0x97,0xA0,0xFF,0x1F,0xE7,0x80,0xA0,0x7E,
+0xB7,0xF7,0x00,0x20,0x93,0x96,0x24,0x00,0x93,0x87,0x07,0x27,0xBE,0x96,0x02,0x47,
+0x90,0x42,0xE2,0x46,0x42,0x07,0x41,0x83,0x91,0x8E,0x13,0x06,0xB0,0x03,0x63,0x77,
+0xE6,0x00,0x05,0x67,0x13,0x07,0x17,0x39,0x63,0x75,0xD7,0x0A,0x09,0x45,0x11,0xA0,
+0x05,0x45,0xA6,0x97,0x26,0x94,0xA3,0x8A,0xA7,0x04,0x83,0x47,0x64,0x17,0xC1,0xCF,
+0x92,0x50,0x02,0x54,0xF2,0x44,0x13,0x01,0x81,0x02,0x82,0x80,0x01,0x47,0xB3,0x86,
+0x97,0x00,0x83,0xC6,0x56,0x05,0x09,0x46,0x63,0x97,0xC6,0x06,0x63,0x15,0xD7,0x06,
+0x22,0x47,0x93,0x86,0x84,0x06,0x86,0x06,0x06,0x07,0x22,0x97,0x03,0x56,0x07,0x00,
+0x13,0x87,0x04,0x06,0x06,0x07,0x22,0x97,0x23,0x10,0xC7,0x00,0x32,0x47,0xA2,0x96,
+0x13,0x85,0x04,0x08,0x06,0x07,0x22,0x97,0x03,0x57,0x87,0x00,0x23,0x94,0xE6,0x00,
+0x93,0x86,0x84,0x07,0x86,0x06,0xA2,0x96,0x23,0x90,0xC6,0x00,0x93,0x16,0x15,0x00,
+0xA2,0x96,0x23,0x94,0xE6,0x00,0xB3,0x06,0x94,0x00,0x83,0xC5,0x86,0x23,0x93,0x86,
+0x44,0x07,0x8A,0x06,0x33,0x06,0xB6,0x02,0x0A,0x05,0xA2,0x96,0x2A,0x94,0x33,0x07,
+0xB7,0x02,0x90,0xC6,0x18,0xC4,0xBE,0x94,0xFD,0x57,0xA3,0x8A,0xF4,0x04,0x01,0x45,
+0x85,0xBF,0x09,0x47,0xAD,0xBF,0x85,0x47,0x23,0x0B,0xF4,0x16,0x95,0xB7,0x11,0x11,
+0x22,0xCA,0x37,0x54,0x00,0x20,0x13,0x06,0x84,0x40,0x06,0xCC,0x26,0xC8,0x2A,0x96,
+0x83,0x45,0x66,0x17,0x63,0x84,0x05,0x32,0xB7,0xF6,0x00,0x20,0x93,0x87,0x86,0x6D,
+0xDC,0x5F,0x03,0x47,0x76,0x2A,0x13,0x04,0x84,0x40,0x93,0x86,0x86,0x6D,0x63,0x74,
+0xF7,0x00,0xA3,0x03,0xF6,0x2A,0x33,0x07,0xA4,0x00,0x83,0x42,0x77,0x2A,0x13,0x03,
+0x30,0x02,0x37,0x56,0x00,0x20,0x63,0x79,0x53,0x10,0x83,0x42,0x64,0x27,0x09,0x43,
+0x63,0x74,0x53,0x10,0x8D,0x46,0xB3,0x87,0xD7,0x02,0x93,0x06,0x40,0x06,0xB3,0xD7,
+0xD7,0x02,0xA3,0x08,0xF7,0x24,0x03,0x57,0x84,0x16,0x85,0x47,0xB3,0x97,0xA7,0x00,
+0x93,0xC7,0xF7,0xFF,0xF9,0x8F,0x23,0x14,0xF4,0x16,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0x87,0x4E,0x03,0xC7,0xC7,0x00,0xB3,0x02,0xA4,0x00,0xFD,0x15,0x05,0x07,0x03,0xC3,
+0x82,0x23,0x23,0x86,0xE7,0x00,0x93,0xF5,0xF5,0x0F,0x13,0x07,0x45,0x07,0x93,0x04,
+0x85,0x09,0x0A,0x07,0x23,0x8B,0xB2,0x16,0x23,0x85,0x02,0x16,0x93,0x03,0x30,0x06,
+0x26,0xC2,0x93,0x06,0x05,0x09,0x93,0x07,0x05,0x08,0x22,0x97,0x63,0xEA,0x63,0x0C,
+0x93,0x93,0x16,0x00,0xA2,0x93,0x83,0xD4,0x03,0x00,0x83,0x23,0x87,0x00,0x8A,0x07,
+0xA2,0x97,0xA6,0x93,0x23,0x24,0x77,0x00,0x13,0x07,0x85,0x09,0x06,0x07,0x22,0x97,
+0x83,0x53,0x87,0x00,0x98,0x47,0x05,0x03,0x23,0x8C,0x62,0x22,0x1E,0x97,0x98,0xC7,
+0x37,0xF3,0x00,0x20,0x93,0x07,0xC3,0x2D,0x03,0xC7,0xA7,0x08,0x83,0x47,0x04,0x25,
+0x13,0x03,0xC3,0x2D,0x3E,0x97,0xB3,0x07,0xA4,0x00,0x83,0xC2,0x17,0x25,0x16,0x97,
+0x81,0xE9,0x83,0xC5,0x87,0x23,0x63,0xF5,0xE5,0x00,0x85,0x45,0x23,0x8B,0xB7,0x16,
+0xB7,0x57,0x00,0x20,0x83,0xC5,0x67,0x3F,0x85,0x47,0x63,0x93,0xF5,0x0A,0xB3,0x07,
+0xA4,0x00,0xB1,0x45,0xA3,0x8D,0xB7,0x28,0xB3,0x07,0xA4,0x00,0x31,0x07,0x83,0xC5,
+0x87,0x23,0x42,0x07,0x41,0x83,0x63,0xFC,0xE5,0x08,0x83,0xC5,0x67,0x17,0xC1,0xE9,
+0x85,0x45,0x23,0x8B,0xB7,0x16,0x61,0xA0,0x03,0x23,0x06,0x01,0x03,0xC7,0x46,0x03,
+0x83,0x47,0xB3,0x07,0x83,0x42,0xA3,0x07,0x0D,0x43,0xA2,0x07,0xB3,0xE7,0x57,0x00,
+0xB3,0xD7,0x67,0x02,0x21,0x07,0x0A,0x07,0x36,0x97,0x18,0x47,0xE3,0x75,0xF7,0xEE,
+0x33,0x07,0xA4,0x00,0x83,0x47,0x17,0x25,0xB3,0x87,0x67,0x02,0x89,0x87,0xD1,0xBD,
+0x93,0x92,0x16,0x00,0xA2,0x92,0x83,0x23,0x87,0x00,0x83,0xD2,0x02,0x00,0x8A,0x07,
+0xA2,0x97,0x9E,0x92,0xB3,0xD3,0x63,0x02,0xB3,0x83,0x72,0x40,0x83,0xA2,0x87,0x00,
+0x23,0x24,0x77,0x00,0x13,0x07,0x85,0x09,0x33,0xD3,0x62,0x02,0x06,0x07,0x22,0x97,
+0x03,0x57,0x87,0x00,0x16,0x97,0x33,0x03,0x67,0x40,0x23,0xA4,0x67,0x00,0x0D,0xB7,
+0xB3,0x07,0xA4,0x00,0x83,0xC5,0xB7,0x29,0xB1,0x47,0xE3,0x8F,0xF5,0xF4,0x83,0x45,
+0x03,0x09,0x02,0xC0,0xAA,0x84,0xA1,0x89,0xC1,0xCD,0xB3,0x02,0xA4,0x00,0x03,0xC5,
+0x72,0x27,0xB7,0x55,0x00,0x20,0x93,0x85,0x45,0x7E,0x05,0x63,0xAA,0x95,0x9A,0x95,
+0x03,0xC3,0x15,0x38,0x85,0x45,0x63,0xF7,0x65,0x00,0x89,0x45,0x85,0x47,0xA3,0x81,
+0xB2,0x28,0x3E,0xC0,0xB3,0x05,0x94,0x00,0x83,0xC3,0x35,0x28,0x8D,0x42,0x63,0x94,
+0x53,0x08,0x13,0x85,0x04,0x06,0x86,0x06,0x06,0x05,0xA2,0x96,0x22,0x95,0x83,0xD5,
+0x06,0x00,0x03,0x55,0x05,0x00,0x3A,0xC6,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x00,0x3C,
+0x92,0x47,0x2A,0xC4,0x13,0x85,0x84,0x06,0x93,0x96,0x17,0x00,0x06,0x05,0xA2,0x96,
+0x22,0x95,0x83,0xD5,0x86,0x00,0x03,0x55,0x85,0x00,0x97,0x90,0xFF,0x1F,0xE7,0x80,
+0xE0,0x39,0x22,0x43,0x33,0x05,0xA5,0x02,0x33,0x03,0x63,0x02,0x1A,0x95,0xEF,0xA0,
+0x4F,0x9B,0x93,0x06,0xF0,0x17,0x32,0x47,0x37,0x56,0x00,0x20,0x63,0xFF,0xA6,0x06,
+0x83,0x26,0x06,0x01,0x83,0xC6,0x16,0x15,0x91,0x82,0x85,0x8A,0xC1,0xEA,0x33,0x05,
+0x94,0x00,0x83,0x47,0x85,0x23,0x63,0xFA,0xE7,0x08,0x01,0x45,0xE2,0x40,0x52,0x44,
+0xC2,0x44,0x71,0x01,0x82,0x80,0x89,0x46,0x63,0x87,0xD3,0x06,0x85,0x46,0x63,0x1F,
+0xD3,0x04,0x83,0xC3,0x85,0x23,0xBD,0x46,0x63,0xEA,0x76,0x04,0x83,0x26,0x06,0x01,
+0x83,0xC6,0x06,0x15,0xA3,0x81,0x65,0x28,0x93,0xF6,0x06,0x02,0x9D,0xC6,0x3A,0xC2,
+0x2E,0xC4,0xEF,0xF0,0x3F,0x88,0x12,0x47,0x37,0x56,0x00,0x20,0x19,0xCD,0xA2,0x45,
+0x29,0x45,0x83,0xC6,0xF5,0x28,0x85,0x06,0x93,0xF6,0xF6,0x0F,0xA3,0x87,0xD5,0x28,
+0x63,0x75,0xD5,0x00,0x8D,0x42,0xA3,0x81,0x55,0x28,0xB3,0x06,0x94,0x00,0x83,0xC5,
+0x66,0x17,0xBD,0xFD,0x85,0x45,0x23,0x8B,0xB6,0x16,0x9D,0xBF,0xB3,0x06,0x94,0x00,
+0xA3,0x81,0x06,0x28,0xB5,0xB7,0x85,0x47,0x3E,0xC0,0xC5,0xB7,0x26,0x85,0x3A,0xC2,
+0xEF,0xF0,0xBF,0x9F,0x12,0x47,0x25,0xD5,0x8D,0xBF,0x03,0x47,0x35,0x28,0x89,0x47,
+0xE3,0x05,0xF7,0xF6,0x82,0x47,0x13,0xC5,0x17,0x00,0x8D,0xB7,0x05,0x45,0xB9,0xBF,
+0x13,0x01,0xC1,0xFC,0x37,0x57,0x00,0x20,0x26,0xD4,0x06,0xD8,0x22,0xD6,0x93,0x07,
+0x87,0x40,0xB7,0xF6,0x00,0x20,0xB7,0x54,0x00,0x20,0x23,0x8B,0x07,0x26,0x93,0x87,
+0x86,0x4E,0x13,0x86,0x44,0x7E,0x23,0x86,0x07,0x00,0x85,0x67,0xB2,0x97,0x83,0xC7,
+0x57,0x36,0xB7,0x55,0x00,0x20,0x13,0x85,0x44,0x7E,0x93,0xF7,0xF7,0x0F,0x3E,0xC2,
+0x83,0xA7,0x05,0x01,0x93,0x86,0x86,0x4E,0x03,0xC6,0x17,0x15,0x2A,0xC4,0x37,0x65,
+0x00,0x20,0x15,0x82,0x13,0x05,0x45,0x7E,0x05,0x8A,0x2A,0xC0,0x2E,0xC8,0x93,0x07,
+0x87,0x40,0x09,0xCE,0xD0,0x46,0xB7,0x05,0x00,0x01,0x93,0x85,0x05,0xF0,0x6D,0x8E,
+0x11,0xC6,0x03,0x46,0x55,0x36,0x02,0xC2,0x23,0x86,0xC6,0x00,0x37,0xF6,0x00,0x20,
+0x93,0x05,0x86,0x68,0x83,0xC5,0x75,0x04,0x13,0x06,0x86,0x68,0x32,0xCA,0x99,0xC5,
+0x02,0x46,0x02,0xC2,0x03,0x46,0x56,0x36,0x23,0x86,0xC6,0x00,0x3E,0x84,0x13,0x86,
+0xC7,0x00,0x13,0x07,0x87,0x40,0xFD,0x56,0x23,0x00,0xD7,0x00,0x23,0x06,0xD7,0x00,
+0x23,0x02,0x07,0x08,0x05,0x07,0xE3,0x19,0xC7,0xFE,0x12,0x47,0x63,0x1E,0x07,0x14,
+0x37,0x55,0x00,0x20,0x31,0x46,0x93,0x05,0xF0,0x0F,0x13,0x05,0xF5,0x67,0xEF,0x90,
+0x8F,0x80,0xB7,0x57,0x00,0x20,0x01,0x47,0xAD,0x45,0x31,0x46,0x93,0x87,0x87,0x40,
+0xB3,0x06,0xF7,0x00,0x83,0xC6,0x06,0x00,0x13,0x75,0xF7,0x0F,0x63,0xE5,0xD5,0x00,
+0xBE,0x96,0xA3,0x8B,0xA6,0x26,0x05,0x07,0xE3,0x14,0xC7,0xFE,0xB7,0xF6,0x00,0x20,
+0x13,0x87,0x86,0x6D,0x58,0x5F,0x93,0x86,0x86,0x6D,0x23,0x88,0x07,0x24,0x36,0xC2,
+0x1D,0xC3,0x03,0xC6,0x67,0x27,0x89,0x46,0x63,0xFF,0xC6,0x00,0x92,0x46,0x83,0xC6,
+0x46,0x03,0x93,0xF6,0xF6,0x0F,0x63,0x90,0x06,0x54,0x93,0x06,0x30,0x02,0x33,0x57,
+0xD7,0x02,0x23,0x88,0xE7,0x24,0x37,0xF3,0x00,0x20,0x13,0x07,0xC3,0x2D,0x03,0x47,
+0xA7,0x08,0x83,0xC6,0x07,0x25,0x13,0x03,0xC3,0x2D,0x36,0x97,0x13,0x77,0xF7,0x0F,
+0x3A,0xC6,0x19,0xE3,0x05,0x47,0x3A,0xC6,0x37,0xA7,0x00,0x20,0xB7,0x54,0x00,0x20,
+0x13,0x07,0xC7,0xB5,0x93,0x84,0x84,0x46,0x3A,0xC4,0xBE,0x82,0x01,0x46,0x03,0xC7,
+0x44,0x02,0x13,0x75,0xF6,0x0F,0x63,0x0E,0x07,0x68,0x03,0xC7,0x64,0x11,0x63,0x07,
+0x07,0x4E,0x16,0xCC,0x32,0xCA,0x25,0x3E,0xB7,0x57,0x00,0x20,0x37,0xF7,0x00,0x20,
+0x52,0x46,0xE2,0x42,0x93,0x87,0x87,0x40,0x13,0x03,0xC7,0x2D,0x31,0xCD,0x83,0x55,
+0x04,0x12,0x03,0x55,0x04,0x0C,0x16,0xCE,0x32,0xCC,0x97,0x90,0xFF,0x1F,0xE7,0x80,
+0xE0,0x10,0x2A,0xCA,0x83,0x55,0x84,0x13,0x03,0x55,0x84,0x0D,0x97,0x90,0xFF,0x1F,
+0xE7,0x80,0xC0,0x0F,0x52,0x47,0x33,0x05,0xA5,0x02,0x33,0x07,0xE7,0x02,0x3A,0x95,
+0xEF,0x90,0x3F,0xF1,0xB7,0x57,0x00,0x20,0x93,0x87,0x87,0x40,0x03,0xC7,0x07,0x25,
+0xB7,0xF6,0x00,0x20,0x62,0x46,0x19,0x07,0x1A,0x07,0xF2,0x42,0x13,0x83,0xC6,0x2D,
+0x63,0x74,0xA7,0x00,0x23,0x8B,0x04,0x10,0x22,0x47,0x05,0x06,0x85,0x04,0x05,0x07,
+0x3A,0xC4,0x31,0x47,0x09,0x04,0x91,0x02,0xE3,0x13,0xE6,0xF6,0xC2,0x50,0x32,0x54,
+0xA2,0x54,0x13,0x01,0x41,0x03,0x82,0x80,0xEF,0xF0,0xCF,0xAC,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x87,0x40,0xBE,0x86,0x81,0x44,0x83,0xC5,0x46,0x08,0x05,0x46,0x63,0x7A,
+0xB6,0x00,0x09,0x45,0x63,0x85,0xA5,0x06,0x26,0x85,0x36,0xC6,0xEF,0xF0,0x8F,0xD3,
+0xB2,0x46,0x85,0x04,0x31,0x46,0x85,0x06,0xE3,0x90,0xC4,0xFE,0x97,0xB0,0xFF,0x1F,
+0xE7,0x80,0x00,0x47,0xA2,0x47,0x02,0xC4,0x3E,0xC6,0xB7,0x57,0x00,0x20,0x93,0x87,
+0x87,0x40,0xBE,0x84,0x03,0x47,0x81,0x00,0x92,0x46,0xE3,0x7B,0xD7,0xE4,0x32,0x47,
+0x03,0x57,0xC7,0x04,0x63,0x02,0x07,0x12,0xA2,0x46,0x2D,0x46,0xB3,0x85,0xF6,0x00,
+0x83,0xC6,0x05,0x00,0x63,0x64,0xD6,0x1A,0x42,0x47,0x03,0x27,0x07,0x01,0x83,0x42,
+0xE7,0x00,0x63,0xE2,0x56,0x12,0x3E,0x86,0x3E,0x85,0x01,0x47,0x09,0xAA,0x26,0x85,
+0x36,0xC6,0xEF,0xF0,0xEF,0xB9,0xB2,0x46,0x05,0x46,0x83,0xC5,0x46,0x08,0xE3,0x7A,
+0xB6,0xF8,0x59,0xB7,0x83,0x53,0x05,0x15,0x63,0x98,0x03,0x0E,0x83,0x43,0x66,0x17,
+0x63,0x94,0x03,0x0E,0x83,0x43,0x26,0x18,0x63,0x90,0x03,0x0E,0x23,0x80,0x65,0x00,
+0x03,0xD3,0x84,0x01,0x93,0x06,0x07,0x09,0x86,0x06,0xBE,0x96,0x23,0x90,0x66,0x00,
+0x03,0xD5,0x04,0x03,0x93,0x06,0x87,0x09,0x86,0x06,0xBE,0x96,0x23,0x94,0xA6,0x00,
+0x03,0xD6,0x84,0x04,0x93,0x06,0x87,0x0A,0x86,0x06,0xBE,0x96,0x05,0x06,0x23,0x90,
+0xC6,0x00,0xB3,0x86,0xE7,0x00,0x05,0x46,0x23,0x85,0xC6,0x16,0x23,0x82,0xC6,0x08,
+0x13,0x56,0x75,0x00,0x13,0x76,0xF6,0x0F,0x23,0x89,0xC6,0x1A,0x23,0x8F,0xC6,0x1A,
+0x23,0x85,0xC6,0x1C,0x13,0x06,0x07,0x06,0x06,0x06,0x3E,0x96,0x23,0x10,0x66,0x00,
+0x13,0x06,0x87,0x06,0x06,0x06,0x3E,0x96,0x23,0x14,0xA6,0x00,0x37,0xF6,0x00,0x20,
+0x03,0x46,0x66,0x36,0x93,0x55,0x73,0x00,0x93,0xF5,0xF5,0x0F,0x23,0x8B,0xC6,0x16,
+0x03,0xC6,0x67,0x27,0x23,0x87,0xB6,0x18,0x23,0x8D,0xB6,0x18,0x05,0x06,0x23,0x8B,
+0xC7,0x26,0x13,0x06,0x47,0x07,0x0A,0x06,0x3E,0x96,0x23,0x24,0x06,0x00,0x23,0x83,
+0xB6,0x1A,0x13,0x06,0x07,0x08,0x23,0x8C,0x06,0x22,0x23,0x82,0x06,0x24,0xB7,0xA6,
+0x00,0x20,0x93,0x86,0xC6,0xAC,0x0A,0x06,0x0A,0x07,0x36,0x97,0x3E,0x96,0xFD,0x56,
+0x23,0x24,0x06,0x00,0x23,0x10,0xD7,0x00,0x22,0x47,0x89,0x04,0x05,0x07,0x3A,0xC4,
+0x32,0x47,0x09,0x07,0x3A,0xC6,0x7D,0xBD,0x05,0x07,0x09,0x05,0x05,0x06,0x13,0x73,
+0xF7,0x0F,0xE3,0x61,0x53,0xF0,0x83,0xD5,0x84,0x01,0x13,0x87,0x06,0x09,0x06,0x07,
+0x3E,0x97,0x23,0x10,0xB7,0x00,0x03,0xD6,0x04,0x03,0x13,0x87,0x86,0x09,0x06,0x07,
+0x3E,0x97,0x23,0x14,0xC7,0x00,0x05,0x45,0x33,0x87,0xD7,0x00,0x23,0x05,0xA7,0x16,
+0x03,0xD3,0x84,0x04,0x93,0x86,0x86,0x0A,0x86,0x06,0xBE,0x96,0x23,0x90,0x66,0x00,
+0x83,0x46,0xA7,0x19,0x9D,0x81,0x1D,0x82,0x23,0x03,0xD7,0x1A,0x83,0x46,0xE7,0x1B,
+0x23,0x02,0xA7,0x08,0x23,0x05,0xD7,0x1C,0x83,0x46,0xE7,0x18,0x23,0x07,0xB7,0x18,
+0x23,0x0D,0xD7,0x18,0x83,0x46,0x27,0x1B,0x23,0x09,0xC7,0x1A,0x23,0x0F,0xD7,0x1A,
+0x03,0xC7,0x67,0x27,0x05,0x07,0x23,0x8B,0xE7,0x26,0xBD,0xB7,0xB7,0x56,0x00,0x20,
+0x83,0xA6,0x06,0xFF,0x83,0xD6,0xE6,0x01,0xE3,0xF0,0xE6,0xF6,0x03,0xD3,0x87,0x16,
+0xBE,0x86,0x01,0x47,0x31,0x45,0x03,0xD6,0x06,0x15,0x93,0x72,0xF7,0x0F,0x63,0x17,
+0x06,0x20,0x33,0x56,0xE3,0x40,0x05,0x8A,0x63,0x12,0x06,0x20,0x23,0x80,0x55,0x00,
+0x03,0xD5,0x84,0x01,0x93,0x06,0x07,0x09,0x86,0x06,0xBE,0x96,0x23,0x90,0xA6,0x00,
+0x83,0xD5,0x04,0x03,0x93,0x06,0x87,0x09,0x86,0x06,0x33,0x86,0xE7,0x00,0x85,0x42,
+0xBE,0x96,0x23,0x94,0xB6,0x00,0x23,0x05,0x56,0x16,0x03,0xD3,0x84,0x04,0x93,0x06,
+0x87,0x0A,0x86,0x06,0xBE,0x96,0x23,0x90,0x66,0x00,0x93,0xD6,0x75,0x00,0x93,0xF6,
+0xF6,0x0F,0x23,0x09,0xD6,0x1A,0x23,0x0F,0xD6,0x1A,0x23,0x05,0xD6,0x1C,0x93,0x06,
+0x07,0x06,0x86,0x06,0xBE,0x96,0x23,0x90,0xA6,0x00,0x93,0x06,0x87,0x06,0x86,0x06,
+0xBE,0x96,0x23,0x94,0xB6,0x00,0x93,0x06,0x87,0x04,0x23,0x02,0x56,0x08,0x23,0x00,
+0x56,0x06,0x86,0x06,0xD2,0x42,0xBE,0x96,0x13,0x53,0x75,0x00,0x23,0x90,0xA6,0x00,
+0x93,0x06,0x07,0x05,0x13,0x73,0xF3,0x0F,0x86,0x06,0x83,0xD3,0xE2,0x02,0xBE,0x96,
+0x23,0x07,0x66,0x18,0x23,0x0D,0x66,0x18,0x23,0x03,0x66,0x1A,0x37,0xF3,0x00,0x20,
+0x23,0x94,0xB6,0x00,0x93,0x02,0x30,0x06,0x93,0x06,0xC3,0x2D,0x83,0xC6,0xA6,0x08,
+0x13,0x03,0xC3,0x2D,0x63,0xEA,0x72,0x00,0x82,0x42,0x85,0x43,0x83,0xC2,0x52,0x36,
+0x63,0xF4,0x53,0x00,0x85,0x06,0xE5,0xA8,0x52,0x46,0x85,0x42,0x83,0x43,0xC6,0x04,
+0x36,0x86,0x63,0xE8,0x72,0x00,0x63,0xF6,0xD2,0x00,0x13,0x86,0xF6,0xFF,0x13,0x76,
+0xF6,0x0F,0xB7,0xF3,0x00,0x20,0x83,0xC0,0x53,0x3A,0xB3,0x82,0xE7,0x00,0x23,0x8B,
+0xC2,0x16,0x89,0x43,0x63,0x96,0x70,0x0A,0x45,0xC6,0x83,0x46,0x03,0x09,0x85,0x8A,
+0xC1,0xEE,0x23,0x8B,0x02,0x16,0x83,0xC6,0x67,0x27,0x33,0x83,0xE7,0x00,0x83,0x42,
+0x63,0x17,0x85,0x06,0x13,0x06,0x47,0x07,0x23,0x8B,0xD7,0x26,0x0A,0x06,0xA3,0x08,
+0x03,0x24,0x23,0x0F,0x03,0x24,0x23,0x05,0x03,0x26,0x93,0x06,0x07,0x08,0x3E,0x96,
+0x63,0x8E,0x02,0x0A,0x8A,0x06,0xBE,0x96,0x23,0x24,0x06,0x00,0x23,0xA4,0x06,0x00,
+0x23,0x0C,0x03,0x22,0xB3,0x86,0xE7,0x00,0x23,0x82,0x06,0x24,0xA3,0x83,0x06,0x2A,
+0x93,0x06,0x87,0x07,0x86,0x06,0xBE,0x96,0x7D,0x56,0x23,0x90,0xC6,0x00,0xC2,0x46,
+0x83,0xA6,0x06,0x01,0x83,0xC6,0x16,0x15,0x91,0x82,0x85,0x8A,0xE3,0x86,0x06,0xDC,
+0xB7,0xF6,0x00,0x20,0x93,0x86,0x06,0x27,0x13,0x15,0x27,0x00,0x33,0x86,0xE6,0x00,
+0x36,0x95,0xA3,0x0A,0x06,0x04,0x97,0xA0,0xFF,0x1F,0xE7,0x80,0xC0,0xDD,0xB7,0x57,
+0x00,0x20,0x93,0x87,0x87,0x40,0x4D,0xB3,0x85,0x46,0x23,0x8B,0xD2,0x16,0xA5,0xB7,
+0x02,0x46,0x11,0x43,0x03,0x46,0x56,0x36,0x63,0x68,0xC3,0x00,0x52,0x46,0x19,0x43,
+0x03,0x56,0x06,0x03,0x63,0x78,0xC3,0x00,0x33,0x86,0xE7,0x00,0x89,0x06,0x23,0x0B,
+0xD6,0x16,0x91,0xB7,0x02,0x43,0x89,0x42,0x03,0x43,0x53,0x36,0x63,0xED,0x62,0x00,
+0x0D,0x43,0x63,0x6A,0xC3,0x00,0x37,0xA6,0x00,0x20,0x13,0x06,0xC6,0xB5,0x3A,0x96,
+0x03,0x46,0x06,0x09,0x0D,0xD2,0x33,0x86,0xE7,0x00,0xE9,0xBD,0x8A,0x06,0xBE,0x96,
+0x8C,0xC6,0x85,0x46,0x08,0xC6,0x23,0x0C,0xD3,0x22,0xA9,0xB7,0x05,0x07,0x89,0x06,
+0xE3,0x13,0xA7,0xDE,0x15,0xBB,0x93,0x06,0x70,0x03,0xD1,0xB4,0x03,0xD7,0x87,0x16,
+0x33,0x57,0xC7,0x40,0x05,0x8B,0x63,0x12,0x07,0x16,0x83,0x55,0x04,0x12,0x03,0x55,
+0x04,0x0C,0x16,0xCE,0x32,0xCC,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x20,0xC3,0x83,0x55,
+0x84,0x13,0x2A,0xCA,0x03,0x55,0x84,0x0D,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x00,0xC2,
+0x52,0x47,0x33,0x05,0xA5,0x02,0x33,0x07,0xE7,0x02,0x3A,0x95,0xEF,0x90,0x7F,0xA3,
+0xB7,0x57,0x00,0x20,0xA3,0x81,0x04,0x22,0x93,0x87,0x87,0x40,0x83,0xC6,0x07,0x25,
+0x31,0x47,0xB7,0xF5,0x00,0x20,0xB1,0x06,0xA2,0x06,0xB3,0xC6,0xE6,0x02,0x62,0x46,
+0x05,0x47,0xF2,0x42,0x13,0x83,0xC5,0x2D,0x63,0xE2,0xA6,0x04,0x93,0x06,0x00,0x0A,
+0x01,0x47,0x63,0xFD,0xA6,0x02,0x83,0x55,0x84,0x0D,0x93,0x06,0xF0,0x7F,0x05,0x47,
+0x63,0xF6,0xB6,0x02,0x83,0x56,0x63,0x09,0x93,0x86,0x16,0xE0,0x63,0xD0,0xD5,0x02,
+0x83,0x56,0x04,0x0C,0x93,0x05,0xF0,0x1F,0x63,0xFA,0xD5,0x00,0x03,0x57,0x43,0x09,
+0x13,0x07,0x17,0xE0,0x33,0xA7,0xE6,0x00,0x13,0x47,0x17,0x00,0x83,0xC5,0x74,0x24,
+0x93,0x06,0x10,0x03,0x63,0xF9,0xB6,0x00,0x82,0x46,0x85,0x45,0x83,0xC6,0x56,0x36,
+0x63,0xF3,0xD5,0x00,0x01,0x47,0x83,0xC6,0x84,0x1D,0x81,0xEE,0x83,0x56,0x04,0x12,
+0x23,0xAC,0xD2,0x1C,0x83,0x56,0x84,0x13,0x23,0xA4,0xD2,0x20,0x85,0x46,0x23,0x8C,
+0xD4,0x1C,0x31,0xCB,0x03,0x57,0x04,0x0C,0xA2,0x46,0x23,0x10,0xE4,0x12,0x03,0x57,
+0x84,0x0D,0x23,0x1C,0xE4,0x12,0x05,0x47,0x23,0x88,0xE6,0x08,0x83,0x56,0x04,0x12,
+0x03,0x57,0x84,0x13,0x23,0x10,0xD4,0x0C,0x23,0x1C,0xE4,0x0C,0x23,0x18,0xD4,0x0E,
+0x23,0x14,0xE4,0x10,0x83,0xD6,0x87,0x16,0x05,0x47,0x33,0x17,0xC7,0x00,0x55,0x8F,
+0x23,0x94,0xE7,0x16,0x03,0x47,0xB3,0x08,0x23,0x8F,0x04,0x1E,0x23,0x85,0x04,0x20,
+0x23,0x81,0xE4,0x12,0x91,0xBC,0x03,0x47,0xA3,0x08,0x69,0xD3,0x03,0xC7,0x84,0x1D,
+0x83,0xA5,0x82,0x1D,0x93,0x06,0x17,0x00,0x03,0x57,0x04,0x12,0x2E,0x97,0x33,0x57,
+0xD7,0x02,0x83,0xA5,0x82,0x20,0x23,0x10,0xE4,0x12,0x03,0x57,0x84,0x13,0x2E,0x97,
+0x33,0x57,0xD7,0x02,0x23,0x1C,0xE4,0x12,0x51,0xBF,0x03,0xC7,0xC4,0x00,0x09,0xCB,
+0x03,0x57,0x04,0x0C,0x23,0x10,0xE4,0x12,0x03,0x57,0x84,0x0D,0x23,0x1C,0xE4,0x12,
+0x03,0x57,0x04,0x0C,0x23,0x18,0xE4,0x0E,0x03,0x57,0x84,0x0D,0x23,0x14,0xE4,0x10,
+0x03,0x57,0x04,0x12,0x23,0x10,0xE4,0x0C,0x03,0x57,0x84,0x13,0x23,0x1C,0xE4,0x0C,
+0x95,0xBF,0x03,0x47,0xF3,0x0A,0x41,0x8B,0x05,0xCB,0x12,0x47,0x93,0x06,0x20,0x03,
+0x58,0x5F,0x63,0xF3,0xE6,0x02,0x83,0xC5,0x67,0x27,0x89,0x46,0x63,0xFE,0xB6,0x00,
+0xA2,0x46,0xB9,0x45,0x83,0xC6,0xC6,0x15,0x63,0xF5,0xD5,0x0C,0xBD,0x46,0x33,0x57,
+0xD7,0x02,0x05,0x07,0x23,0x8F,0xE4,0x1E,0x42,0x47,0x83,0x25,0x07,0x01,0x12,0x47,
+0x83,0xC6,0xB5,0x07,0x03,0xC5,0xA5,0x07,0x03,0x47,0x47,0x03,0xA2,0x06,0xC9,0x8E,
+0x0D,0x45,0xB3,0xD6,0xA6,0x02,0x12,0x45,0x21,0x07,0x0A,0x07,0x2A,0x97,0x18,0x47,
+0x63,0x77,0xD7,0x00,0x03,0xC7,0xE4,0x1F,0x05,0x83,0x23,0x8F,0xE4,0x1E,0x12,0x47,
+0x03,0x47,0x47,0x04,0x11,0xCB,0x92,0x46,0x83,0xC6,0x76,0x06,0x91,0xC6,0x83,0xC6,
+0xE4,0x1F,0x36,0x97,0x23,0x8F,0xE4,0x1E,0x03,0xC7,0x34,0x22,0x85,0x46,0x63,0x1A,
+0xD7,0x06,0x83,0xC6,0x64,0x11,0xB5,0xC6,0x83,0xC6,0x24,0x12,0xBD,0xE2,0x83,0xC6,
+0x84,0x1D,0x3D,0x45,0x63,0x6F,0xD5,0x04,0x32,0x45,0x63,0x7C,0xD5,0x04,0x83,0xD5,
+0x87,0x16,0xB3,0x16,0xC7,0x00,0xCD,0x8E,0x23,0x94,0xD7,0x16,0x83,0x46,0xB3,0x08,
+0x23,0x8F,0x04,0x1E,0x23,0x85,0x04,0x20,0x23,0x81,0xD4,0x12,0xA3,0x81,0x04,0x22,
+0x23,0x8B,0x04,0x10,0x23,0x85,0xE4,0x10,0x83,0x56,0x04,0x0C,0x03,0x57,0x84,0x0D,
+0x23,0x10,0xD4,0x12,0x23,0x1C,0xE4,0x12,0x23,0x18,0xD4,0x0E,0x23,0x14,0xE4,0x10,
+0xE5,0xB8,0x91,0x45,0x63,0xF5,0xD5,0x00,0x93,0x06,0xD0,0x02,0x0D,0xBF,0x05,0x47,
+0x15,0xBF,0x03,0xC7,0x15,0x15,0x11,0x83,0x05,0x8B,0x35,0xC3,0x37,0xF7,0x00,0x20,
+0x13,0x07,0x07,0x27,0x32,0x97,0x03,0x47,0x57,0x05,0x85,0x46,0x7D,0x17,0x13,0x77,
+0xF7,0x0F,0x63,0xE6,0xE6,0x04,0x03,0xC7,0x64,0x11,0x31,0xC3,0x03,0xC7,0x24,0x12,
+0x1D,0xEF,0x03,0xC7,0x84,0x1D,0xBD,0x45,0x63,0xEB,0xE5,0x02,0xB2,0x45,0x63,0xF8,
+0xE5,0x02,0x83,0xD5,0x87,0x16,0x33,0x97,0xC6,0x00,0x4D,0x8F,0x23,0x94,0xE7,0x16,
+0x03,0x47,0xB3,0x08,0x23,0x8F,0x04,0x1E,0x23,0x85,0x04,0x20,0x23,0x81,0xE4,0x12,
+0xA3,0x81,0x04,0x22,0x23,0x8B,0x04,0x10,0x23,0x85,0xD4,0x10,0xB5,0xB7,0x03,0x57,
+0x04,0x15,0x63,0x05,0x07,0x12,0x03,0xC7,0x24,0x12,0x63,0x01,0x07,0x12,0x83,0xC6,
+0xA4,0x20,0x7D,0x17,0x13,0x77,0xF7,0x0F,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x23,0x81,
+0xE4,0x12,0x23,0x85,0xD4,0x20,0x19,0xEB,0x03,0x47,0xB3,0x08,0x83,0xC5,0xE4,0x1F,
+0x2E,0x97,0x63,0xF5,0xE6,0x00,0x05,0x47,0x23,0x81,0xE4,0x12,0x83,0x55,0x04,0x0F,
+0x41,0x65,0x7D,0x15,0x03,0x57,0x04,0x0C,0x83,0x56,0x84,0x0D,0x63,0x85,0xA5,0x08,
+0x3A,0x85,0x36,0xD2,0x16,0xD0,0x32,0xCE,0x3A,0xCC,0x97,0x90,0xFF,0x1F,0xE7,0x80,
+0xE0,0x8D,0x2A,0xCA,0x83,0x55,0x84,0x10,0x03,0x55,0x84,0x0D,0x97,0x90,0xFF,0x1F,
+0xE7,0x80,0xC0,0x8C,0xD2,0x43,0x33,0x05,0xA5,0x02,0xB7,0x57,0x00,0x20,0xA5,0x65,
+0x62,0x47,0x72,0x46,0x82,0x52,0x92,0x56,0x93,0x87,0x87,0x40,0xB3,0x83,0x73,0x02,
+0xAA,0x93,0x37,0xF5,0x00,0x20,0x13,0x03,0xC5,0x2D,0x63,0xFE,0x75,0x02,0x83,0x56,
+0x04,0x0C,0x03,0x57,0x04,0x0F,0xA9,0x45,0x33,0x87,0xE6,0x40,0x0E,0x07,0x33,0x47,
+0xB7,0x02,0x36,0x97,0x63,0x53,0x07,0x00,0x01,0x47,0x03,0x55,0x84,0x0D,0x83,0x55,
+0x84,0x10,0xA9,0x46,0xB3,0x05,0xB5,0x40,0x8E,0x05,0xB3,0xC6,0xD5,0x02,0xAA,0x96,
+0x63,0xD3,0x06,0x00,0x81,0x46,0x83,0x55,0x04,0x0C,0x42,0x07,0xC2,0x06,0x23,0x18,
+0xB4,0x0E,0x83,0x55,0x84,0x0D,0x41,0x83,0xC1,0x82,0x23,0x10,0xE4,0x0C,0x23,0x1C,
+0xD4,0x0C,0x23,0x10,0xE4,0x12,0x23,0x1C,0xD4,0x12,0x1D,0x83,0x9D,0x82,0x23,0x14,
+0xB4,0x10,0x13,0x77,0xF7,0x0F,0x93,0xF6,0xF6,0x0F,0x85,0x45,0x23,0x85,0xB4,0x10,
+0x23,0x87,0xE4,0x12,0x23,0x89,0xD4,0x14,0x23,0x8D,0xE4,0x12,0x23,0x8F,0xD4,0x14,
+0x23,0x83,0xE4,0x14,0x23,0x85,0xD4,0x16,0x6F,0xF0,0x0F,0xF5,0x37,0xA7,0x00,0x20,
+0x13,0x07,0xC7,0xAC,0x93,0x16,0x26,0x00,0x23,0x18,0x04,0x14,0xBA,0x96,0x7D,0x57,
+0x23,0x87,0xE4,0x12,0x23,0x89,0xE4,0x14,0x23,0x8D,0xE4,0x12,0x23,0x8F,0xE4,0x14,
+0x23,0x83,0xE4,0x14,0x23,0x85,0xE4,0x16,0x23,0x8B,0x04,0x10,0x23,0x81,0x04,0x12,
+0x23,0x80,0x04,0x00,0x23,0x85,0x04,0x10,0xA3,0x88,0x04,0x1E,0x23,0x8F,0x04,0x1E,
+0x23,0x85,0x04,0x20,0xA3,0x81,0x04,0x22,0xA3,0x87,0x04,0x22,0xA3,0x8D,0x04,0x22,
+0x23,0x18,0xE4,0x0E,0x23,0x90,0xE6,0x00,0x83,0xD6,0x87,0x16,0x05,0x47,0x33,0x17,
+0xC7,0x00,0x13,0x47,0xF7,0xFF,0x75,0x8F,0x23,0x94,0xE7,0x16,0x23,0xAC,0x02,0x1C,
+0x23,0xA4,0x02,0x20,0x23,0x8C,0x04,0x1C,0x23,0x82,0x04,0x1E,0xA3,0x83,0x04,0x24,
+0x6F,0xF0,0x8F,0xEC,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x4E,0xA3,0x86,0x07,0x00,
+0x23,0x97,0x07,0x00,0x82,0x80,0x13,0x01,0xC1,0xFC,0x22,0xD6,0x37,0x54,0x00,0x20,
+0x83,0x47,0xF4,0x3E,0x06,0xD8,0x26,0xD4,0x13,0x04,0xF4,0x3E,0x9D,0xE3,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0x37,0xF7,0x00,0x20,0x13,0x07,0x47,0x2D,0x03,0xC6,
+0x27,0x05,0x81,0x47,0x93,0xF6,0xF7,0x0F,0x63,0xE1,0xC6,0x04,0x85,0x47,0x23,0x00,
+0xF4,0x00,0x83,0x47,0x14,0x00,0x85,0xE7,0xB7,0xF7,0x00,0x20,0x2A,0xD0,0x03,0xA5,
+0x87,0x6A,0x4C,0x10,0x97,0xA0,0xFF,0x1F,0xE7,0x80,0x00,0x88,0x12,0x57,0xE1,0x67,
+0x93,0x87,0x07,0x6A,0x63,0xF1,0xE7,0x02,0x85,0x47,0xA3,0x00,0xF4,0x00,0xC2,0x50,
+0x32,0x54,0xA2,0x54,0x13,0x01,0x41,0x03,0x82,0x80,0xB3,0x86,0xE7,0x00,0x23,0x80,
+0x06,0x00,0x85,0x07,0x45,0xBF,0x83,0x46,0x14,0x00,0xF5,0xF2,0x37,0x57,0x00,0x20,
+0x03,0x27,0x07,0xFF,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x3A,0xCC,0x37,0xB7,
+0x00,0x20,0x03,0x27,0x87,0x2C,0x37,0xF5,0x00,0x20,0x13,0x05,0x45,0x2D,0x3A,0xC0,
+0x37,0xF7,0x00,0x20,0x03,0x27,0x47,0x12,0x3A,0xC2,0x37,0xB7,0x00,0x20,0x03,0x27,
+0x47,0x2C,0x3A,0xC4,0x37,0xF7,0x00,0x20,0x03,0x27,0x07,0x12,0x3A,0xC6,0x37,0xE7,
+0x00,0x20,0x03,0x27,0xC7,0xD1,0x3A,0xC8,0x37,0xA7,0x00,0x20,0x03,0x27,0x87,0xD8,
+0x3A,0xCA,0x37,0xF7,0x00,0x20,0x83,0x22,0x87,0x12,0x37,0xA7,0x00,0x20,0x83,0x23,
+0xC7,0xD8,0x37,0xA7,0x00,0x20,0x03,0x24,0x07,0xD9,0x37,0x67,0x00,0x20,0x13,0x07,
+0x47,0x7E,0x3A,0xCE,0x03,0xC7,0x27,0x05,0xE3,0xF3,0xE6,0xF6,0x02,0x57,0x13,0x93,
+0x16,0x00,0x3A,0x93,0x62,0x47,0x03,0x16,0x03,0x00,0x03,0x17,0x27,0x05,0x63,0x4E,
+0xC7,0x14,0x33,0x06,0xD5,0x00,0x03,0x47,0x06,0x00,0x85,0x45,0x05,0x07,0x13,0x77,
+0xF7,0x0F,0x63,0xE8,0xE5,0x00,0x23,0x00,0xE6,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,
+0xD1,0xB7,0x72,0x47,0x23,0x00,0x06,0x00,0x03,0x47,0x57,0x36,0x13,0x77,0xF7,0x0F,
+0x6D,0xF7,0x03,0xC6,0x37,0x05,0xB3,0x85,0xD7,0x00,0x03,0xC7,0x97,0x01,0x05,0x8A,
+0x83,0xC4,0x45,0x06,0x41,0xEA,0x03,0xC6,0xC7,0x01,0x33,0x07,0xE6,0x02,0x12,0x46,
+0xBA,0x94,0x02,0x47,0x86,0x04,0x26,0x97,0x03,0x17,0x07,0x00,0xB2,0x94,0x23,0x90,
+0xE4,0x00,0x03,0xC6,0x97,0x01,0x03,0xC7,0xC7,0x01,0xC2,0x44,0x33,0x07,0xE6,0x02,
+0x03,0xC6,0x45,0x06,0x32,0x97,0x22,0x46,0x06,0x07,0x32,0x97,0x23,0x10,0x07,0x00,
+0x03,0xC7,0x45,0x06,0x06,0x07,0x33,0x86,0xE2,0x00,0x03,0x16,0x06,0x00,0x1E,0x97,
+0x23,0x10,0xC7,0x00,0x03,0xC7,0x45,0x06,0x37,0x06,0x00,0x80,0x13,0x46,0xF6,0xFF,
+0x06,0x07,0x22,0x97,0x23,0x10,0x07,0x00,0x03,0xC7,0xA7,0x01,0xB2,0x45,0x32,0x97,
+0x06,0x07,0xBA,0x95,0x83,0x95,0x05,0x00,0x26,0x97,0x23,0x10,0xB7,0x00,0x03,0xC7,
+0xA7,0x01,0x3A,0x96,0x52,0x47,0x06,0x06,0x3A,0x96,0x23,0x10,0x06,0x00,0x23,0x10,
+0x03,0x00,0xA1,0xB7,0x33,0x07,0x97,0x02,0x83,0xC4,0xB7,0x01,0x02,0x46,0x26,0x97,
+0x06,0x07,0x3A,0x96,0x92,0x44,0x03,0x16,0x06,0x00,0x26,0x97,0x23,0x10,0xC7,0x00,
+0x03,0xC6,0x97,0x01,0x03,0xC7,0x45,0x06,0xC2,0x44,0x33,0x07,0xE6,0x02,0x03,0xC6,
+0xB7,0x01,0x32,0x97,0x22,0x46,0x06,0x07,0x32,0x97,0x23,0x10,0x07,0x00,0x03,0xC7,
+0x45,0x06,0x32,0x46,0x06,0x07,0x3A,0x96,0x03,0x16,0x06,0x00,0x26,0x97,0x23,0x10,
+0xC7,0x00,0x03,0xC7,0x45,0x06,0x52,0x46,0x06,0x07,0x32,0x97,0x23,0x10,0x07,0x00,
+0x03,0xC7,0x97,0x01,0x37,0x06,0x00,0x80,0x13,0x46,0xF6,0xFF,0x32,0x97,0x06,0x07,
+0xB3,0x85,0xE2,0x00,0x83,0x95,0x05,0x00,0x1E,0x97,0x23,0x10,0xB7,0x00,0x03,0xC7,
+0x97,0x01,0x3A,0x96,0x06,0x06,0x22,0x96,0x8D,0xBF,0x33,0x07,0xD5,0x00,0x23,0x00,
+0x07,0x00,0x65,0xBD,0x21,0x11,0x26,0xC6,0xB7,0x54,0x00,0x20,0x83,0xA7,0x04,0x01,
+0x06,0xCA,0x22,0xC8,0x83,0xC7,0x47,0x15,0x85,0x8B,0x63,0x80,0x07,0x18,0x37,0xF4,
+0x00,0x20,0x93,0x07,0x84,0x6D,0x83,0xC6,0x47,0x03,0x93,0x84,0x04,0x01,0x01,0x47,
+0x93,0xF6,0xF6,0x0F,0x13,0x04,0x84,0x6D,0x23,0x01,0xE4,0x04,0x81,0x47,0x23,0x0A,
+0xF4,0x02,0x03,0x45,0x44,0x03,0x85,0x45,0x36,0xC4,0x3A,0xC2,0x3E,0xC0,0xEF,0x40,
+0xD0,0x2C,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x80,0x17,0x97,0xC0,0xFF,0x1F,0xE7,0x80,
+0x60,0xCA,0x01,0x45,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x00,0x8A,0x05,0x45,0x97,0x90,
+0xFF,0x1F,0xE7,0x80,0x60,0x89,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x20,0x76,0x12,0x47,
+0x82,0x47,0xBA,0x85,0x3E,0x85,0xEF,0x80,0x6F,0xC0,0x82,0x47,0x12,0x47,0xA2,0x46,
+0x63,0x8C,0x07,0x10,0x63,0x18,0xF7,0x10,0x23,0x0A,0xD4,0x02,0x03,0x45,0x44,0x03,
+0x85,0x45,0x23,0x01,0x04,0x04,0xEF,0x40,0x50,0x27,0x9C,0x40,0x03,0x57,0xA4,0x04,
+0x93,0x06,0x80,0x3E,0x03,0xC5,0x37,0x02,0x83,0xC7,0xB7,0x17,0x33,0x07,0xD7,0x02,
+0x83,0x55,0x64,0x04,0x8D,0x8B,0x8A,0x07,0xAA,0x97,0xB3,0x87,0xD7,0x02,0xB3,0x45,
+0xB7,0x02,0x33,0xC5,0xA7,0x02,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x20,0x42,0x42,0x05,
+0x41,0x81,0x93,0x07,0xF0,0x0F,0x63,0xE3,0xA7,0x0C,0xD1,0x47,0x63,0xF5,0xA7,0x00,
+0x85,0x47,0x23,0x03,0xF4,0x06,0x9C,0x40,0x23,0x05,0xA4,0x06,0x03,0x57,0xC4,0x04,
+0x03,0xC5,0x07,0x07,0x83,0xC7,0xC7,0x17,0x93,0x06,0x80,0x3E,0x33,0x07,0xD7,0x02,
+0x8D,0x8B,0x8A,0x07,0xAA,0x97,0x83,0x55,0x84,0x04,0xB3,0x87,0xD7,0x02,0xB3,0x45,
+0xB7,0x02,0x33,0xC5,0xA7,0x02,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x20,0x3D,0x42,0x05,
+0x41,0x81,0x93,0x07,0xF0,0x0F,0x63,0xEE,0xA7,0x06,0xBD,0x47,0x63,0xF5,0xA7,0x00,
+0x85,0x47,0x23,0x03,0xF4,0x06,0x9C,0x40,0xA3,0x05,0xA4,0x06,0x83,0xC7,0x47,0x15,
+0x89,0x8B,0x81,0xC7,0x85,0x47,0x23,0x01,0xF4,0x04,0x03,0x57,0x64,0x04,0xB7,0x07,
+0x01,0x20,0x93,0x87,0xC7,0x9C,0x23,0x9A,0xE7,0x00,0x03,0x57,0xA4,0x04,0x23,0x9F,
+0xA7,0x00,0x23,0x9B,0xE7,0x00,0x03,0x57,0x84,0x04,0x23,0x9C,0xE7,0x00,0x03,0x57,
+0xC4,0x04,0x23,0x9D,0xE7,0x00,0x03,0x47,0xA4,0x06,0x23,0x9E,0xE7,0x00,0x03,0x47,
+0x64,0x06,0x13,0x37,0x17,0x00,0x23,0x90,0xE7,0x02,0xD2,0x40,0x42,0x44,0xB2,0x44,
+0x61,0x01,0x82,0x80,0x05,0x47,0x49,0xBD,0x85,0x47,0x51,0xBD,0x13,0x05,0xF0,0x0F,
+0x81,0xB7,0x13,0x05,0xF0,0x0F,0x69,0xB7,0x21,0x11,0x28,0x00,0x22,0xC8,0x06,0xCA,
+0x26,0xC6,0x37,0x54,0x00,0x20,0x97,0x90,0xFF,0x1F,0xE7,0x80,0xC0,0x43,0x93,0x07,
+0x04,0x01,0xDC,0x43,0x85,0x64,0x93,0x86,0x04,0x80,0xD8,0x43,0x7D,0x76,0x13,0x06,
+0xF6,0x7F,0x55,0x8F,0xD8,0xC3,0xD8,0x43,0x0D,0x45,0x71,0x8F,0xD8,0xC3,0xEF,0x80,
+0xEF,0x8F,0x22,0x45,0x4C,0x00,0x97,0x90,0xFF,0x1F,0xE7,0x80,0xE0,0x45,0x12,0x47,
+0x93,0x87,0x84,0x38,0x85,0x66,0x93,0x04,0x04,0x01,0x93,0x86,0x06,0x80,0x63,0xE5,
+0xE7,0x00,0xEF,0x80,0x7F,0x9C,0x65,0xBF,0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x68,
+0x83,0xC7,0x87,0x04,0x13,0x07,0xA0,0x05,0x13,0x04,0x84,0x68,0x63,0x9A,0xE7,0x02,
+0x36,0xC0,0xDC,0x40,0x82,0x46,0x29,0x45,0xD8,0x43,0x55,0x8F,0xD8,0xC3,0xD8,0x43,
+0xFD,0x76,0x93,0x86,0xF6,0x7F,0x75,0x8F,0xD8,0xC3,0xEF,0x80,0x2F,0x8A,0x03,0x47,
+0x84,0x04,0x93,0x07,0xA0,0x05,0x63,0x1D,0xF7,0x00,0xEF,0x80,0xFF,0x97,0xD1,0xBF,
+0x13,0x07,0x00,0x05,0x63,0x9D,0xE7,0x00,0x97,0x90,0xFF,0x1F,0xE7,0x80,0xE0,0x4F,
+0x23,0x04,0x04,0x04,0xD2,0x40,0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,0x13,0x07,
+0xB0,0x05,0xE3,0x97,0xE7,0xFE,0x97,0x90,0xFF,0x1F,0xE7,0x80,0xE0,0x59,0xCD,0xB7,
+0x51,0x11,0x06,0xC4,0xEF,0xE0,0xCF,0xB4,0xEF,0x40,0xD0,0x2B,0x37,0xF5,0x00,0x20,
+0x13,0x05,0x05,0x69,0x97,0x90,0xFF,0x1F,0xE7,0x80,0xE0,0x35,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x45,0x47,0x83,0xC7,0x07,0x15,0xC5,0x8B,0x63,0x95,0xE7,0x00,
+0x05,0x45,0xEF,0xB0,0xDF,0x94,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x40,0xF0,0x97,0xC0,
+0xFF,0x1F,0xE7,0x80,0x20,0xA3,0x3D,0x33,0x97,0x90,0xFF,0x1F,0xE7,0x80,0x20,0xEF,
+0x97,0xC0,0xFF,0x1F,0xE7,0x80,0x00,0xA2,0x01,0x45,0x97,0x80,0xFF,0x1F,0xE7,0x80,
+0xA0,0x61,0x05,0x45,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x00,0x61,0x97,0x80,0xFF,0x1F,
+0xE7,0x80,0xC0,0x4D,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x98,0x47,0x98,0xD3,
+0x97,0xB0,0xFF,0x1F,0xE7,0x80,0xC0,0xCD,0xB7,0x57,0x00,0x20,0x03,0xA6,0x07,0x01,
+0x42,0x05,0xB7,0xF7,0x00,0x20,0x41,0x81,0x93,0x87,0xC7,0x2D,0xD1,0xC1,0x83,0xD6,
+0xA7,0x09,0x03,0xD7,0x67,0x09,0x33,0x57,0xD7,0x02,0x83,0x06,0x86,0x03,0x05,0x83,
+0x36,0x97,0x2A,0x97,0x42,0x07,0x41,0x87,0xBA,0x86,0x63,0x53,0x07,0x00,0x81,0x46,
+0x93,0x92,0x06,0x01,0x93,0xD2,0x02,0x41,0xB5,0xC5,0x03,0x45,0x36,0x01,0x83,0x46,
+0x26,0x01,0x03,0xD3,0xA7,0x09,0x13,0x17,0x15,0x00,0x03,0xD5,0x67,0x09,0x86,0x06,
+0x19,0x8D,0x96,0x87,0x63,0x73,0x55,0x00,0xAA,0x87,0x36,0x87,0x63,0xF3,0xF6,0x00,
+0x3E,0x87,0xB3,0x07,0xD7,0x40,0xB3,0x87,0x67,0x02,0xB3,0x06,0xD5,0x40,0xB3,0xD7,
+0xD7,0x02,0xA9,0xC5,0x03,0x45,0x76,0x01,0x13,0x57,0x45,0x00,0x3D,0x89,0x63,0x73,
+0xF7,0x00,0x3E,0x87,0x33,0x05,0xA3,0x40,0x63,0x73,0xA7,0x00,0x3A,0x85,0x82,0x80,
+0x83,0xD6,0x87,0x09,0x03,0xD7,0x47,0x09,0x33,0x57,0xD7,0x02,0x83,0x06,0x76,0x03,
+0x05,0x83,0xBD,0xBF,0x03,0x45,0x56,0x01,0x83,0x46,0x46,0x01,0x03,0xD3,0x87,0x09,
+0x13,0x17,0x15,0x00,0x86,0x06,0x03,0xD5,0x47,0x09,0x59,0xBF,0x03,0x45,0x66,0x01,
+0x65,0xBF,0xB7,0xF7,0x00,0x20,0x23,0x88,0x07,0x3A,0xB7,0xF7,0x00,0x20,0x23,0x8B,
+0x07,0x50,0xB7,0xF7,0x00,0x20,0x23,0xA2,0x07,0x50,0xB7,0xF7,0x00,0x20,0x23,0xAA,
+0x07,0x54,0xB7,0xF7,0x00,0x20,0x23,0xAC,0x07,0x50,0xB7,0xF7,0x00,0x20,0x23,0xAA,
+0x07,0x3A,0xB7,0xF7,0x00,0x20,0x23,0x8C,0x07,0x3A,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0x87,0x68,0xA3,0x80,0x07,0x04,0x82,0x80,0xB7,0x56,0x00,0x20,0x03,0xA6,0x06,0x01,
+0x03,0x47,0x26,0x05,0x09,0xEB,0x01,0x45,0x82,0x80,0x01,0x45,0xE2,0x40,0x52,0x44,
+0xC2,0x44,0x71,0x01,0x82,0x80,0x11,0x11,0x06,0xCC,0x22,0xCA,0x26,0xC8,0xA1,0x47,
+0x63,0xF4,0xE7,0x00,0x23,0x09,0xF6,0x04,0x83,0x45,0x26,0x05,0x95,0x47,0x63,0xF4,
+0xB7,0x10,0x0A,0x86,0x85,0x47,0x23,0x10,0xF6,0x00,0x85,0x07,0x13,0x87,0xF7,0xFF,
+0x13,0x77,0xF7,0x0F,0x09,0x06,0xE3,0x68,0xB7,0xFE,0x35,0xA0,0x93,0x07,0x87,0x02,
+0x86,0x07,0xB2,0x97,0x83,0xC2,0x67,0x00,0x83,0xC7,0x77,0x00,0x13,0x13,0x17,0x00,
+0x0A,0x93,0xA2,0x07,0xB3,0xE7,0x57,0x00,0x23,0x10,0xF3,0x00,0x05,0x07,0x93,0x77,
+0xF7,0x0F,0xE3,0xED,0xB7,0xFC,0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x4E,0x83,0xC7,
+0xE7,0x00,0x13,0x04,0x84,0x4E,0xD1,0xD3,0x13,0x06,0x80,0x03,0x93,0x05,0xF0,0x0F,
+0xAA,0x84,0xEF,0x70,0x5F,0xE5,0x83,0xC7,0x64,0x00,0xB7,0x56,0x00,0x20,0xC1,0x9B,
+0x23,0x83,0xF4,0x00,0x83,0xA7,0x06,0x01,0x03,0x47,0xF4,0x00,0x83,0xC6,0x37,0x05,
+0x03,0xC6,0x47,0x05,0x83,0xC7,0x57,0x05,0x89,0x8A,0xC1,0xC2,0xA2,0x07,0xB3,0xE6,
+0xC7,0x00,0x06,0x07,0x1C,0x08,0x3E,0x97,0x83,0x57,0x07,0xFF,0x23,0x81,0xD4,0x00,
+0xA3,0x81,0xF4,0x00,0xA1,0x82,0xA1,0x83,0x92,0x07,0xBD,0x8A,0xD5,0x8F,0xA3,0x82,
+0xF4,0x00,0x23,0x82,0x04,0x00,0x83,0x47,0x04,0x01,0x13,0x07,0xF0,0x0F,0x63,0x9E,
+0xE7,0x04,0x23,0x08,0x04,0x00,0x03,0x47,0x04,0x01,0x83,0xC7,0x64,0x00,0x93,0x16,
+0x47,0x00,0xBD,0x8B,0xD5,0x8F,0x23,0x83,0xF4,0x00,0x91,0x47,0x63,0x1C,0xF7,0x04,
+0xA3,0x80,0x04,0x00,0xFD,0x57,0x23,0x08,0xF4,0x00,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0x87,0x68,0x05,0x47,0x23,0x83,0xE7,0x00,0x83,0x47,0xC4,0x00,0x05,0x45,0x85,0x07,
+0x23,0x06,0xF4,0x00,0xE1,0xBD,0x01,0x47,0x1D,0xBF,0x14,0x08,0x06,0x07,0x36,0x97,
+0xA2,0x07,0x83,0x56,0x07,0xFF,0xD1,0x8F,0x51,0xB7,0x89,0xE7,0xA1,0x47,0x23,0x08,
+0xF4,0x00,0x55,0xB7,0x1C,0x48,0x21,0x47,0xA2,0x07,0xA1,0x83,0xE3,0x9D,0xE7,0xF8,
+0x91,0x47,0xF5,0xB7,0x85,0x47,0xA3,0x80,0xF4,0x00,0x45,0xBF,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x83,0xC7,0x17,0x15,0x85,0x8B,0xE5,0xC7,0x21,0x11,0x22,0xC8,
+0x06,0xCA,0x26,0xC6,0x83,0x47,0x15,0x00,0x2A,0x84,0x37,0xF3,0x00,0x20,0x9D,0xC3,
+0x13,0x07,0xC3,0x51,0x03,0x47,0x17,0x00,0x93,0x02,0xC3,0x51,0x63,0x1C,0xF7,0x00,
+0x03,0x47,0xC3,0x51,0x83,0x47,0x05,0x00,0x81,0x44,0xF9,0x8F,0x13,0x07,0xF0,0x0F,
+0x63,0x8F,0xE7,0x08,0x13,0x05,0xC3,0x51,0x13,0x06,0x80,0x03,0xA2,0x85,0x97,0x80,
+0xFF,0x1F,0xE7,0x80,0x60,0xEB,0x01,0x45,0x41,0xA8,0x95,0x47,0xB3,0x87,0xF4,0x02,
+0xA1,0x46,0x33,0x05,0xF4,0x00,0x03,0x47,0x65,0x00,0x11,0x83,0xE3,0x1C,0xD7,0xFC,
+0x96,0x97,0x83,0xC5,0x57,0x00,0x03,0xC7,0x37,0x00,0x83,0x43,0x35,0x00,0x13,0xD6,
+0x45,0x00,0x22,0x06,0x3A,0x96,0x32,0xC4,0x03,0x47,0x55,0x00,0x83,0xC7,0x27,0x00,
+0x03,0x45,0x25,0x00,0x93,0x56,0x47,0x00,0xBD,0x89,0x3D,0x8B,0x22,0x07,0xA2,0x06,
+0xA2,0x05,0x9E,0x96,0xBE,0x95,0x3A,0x95,0x36,0xC2,0x97,0x80,0xFF,0x1F,0xE7,0x80,
+0xE0,0xEA,0x22,0x46,0x92,0x46,0x2A,0xC0,0xB2,0x85,0x36,0x85,0x97,0x80,0xFF,0x1F,
+0xE7,0x80,0xC0,0xE9,0x82,0x47,0x37,0xF7,0x00,0x20,0x93,0x02,0xC7,0x51,0x3A,0x83,
+0x63,0xF3,0xA7,0x00,0xAA,0x87,0xBD,0xF7,0x85,0x04,0x93,0xF4,0xF4,0x0F,0x83,0x47,
+0x14,0x00,0xE3,0xEC,0xF4,0xF6,0x05,0x45,0xD2,0x40,0x42,0x44,0xB2,0x44,0x61,0x01,
+0x82,0x80,0x01,0x45,0x82,0x80,0x37,0xB7,0x00,0x20,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x03,0x23,0x47,0x2C,0x37,0x57,0x00,0x20,0x83,0xD5,0x87,0x01,0x83,0x92,
+0x27,0x0C,0x13,0x07,0x47,0x7E,0x81,0x46,0x81,0x47,0x13,0x96,0x06,0x01,0x41,0x82,
+0x63,0x64,0xB6,0x00,0x3E,0x85,0x82,0x80,0x03,0x56,0x47,0x06,0x69,0x8E,0x19,0xCA,
+0x13,0x96,0x16,0x00,0x1A,0x96,0x03,0x16,0x06,0x00,0x63,0x45,0x56,0x00,0x85,0x07,
+0xC2,0x07,0xC1,0x83,0x85,0x06,0x09,0x07,0xC9,0xBF,0x37,0x57,0x00,0x20,0x93,0x07,
+0x47,0x7E,0x85,0x65,0xAE,0x97,0x03,0xC5,0x67,0x36,0x6D,0xC5,0xB7,0x57,0x00,0x20,
+0x03,0xA6,0x07,0x01,0x31,0x11,0x22,0xC8,0x26,0xC6,0x83,0x46,0xD6,0x02,0x83,0x47,
+0xC6,0x02,0x03,0x43,0x06,0x03,0xA2,0x06,0xDD,0x8E,0x83,0x47,0x16,0x03,0x13,0x07,
+0x47,0x7E,0x93,0x84,0xC5,0x2B,0xA2,0x07,0xB3,0xE7,0x67,0x00,0x37,0xA3,0x00,0x20,
+0x03,0x24,0x83,0xD8,0x37,0xA3,0x00,0x20,0x93,0x85,0xE5,0x2B,0x22,0xC0,0x03,0x24,
+0x03,0xD9,0x19,0x43,0x33,0x05,0x65,0x02,0x22,0xC2,0x3A,0x95,0x2A,0xC4,0x01,0x45,
+0x22,0x44,0x63,0x16,0xE4,0x00,0x42,0x44,0xB2,0x44,0x51,0x01,0x82,0x80,0xC1,0xC2,
+0x33,0x03,0xB7,0x00,0x83,0x53,0x03,0x00,0x02,0x44,0x13,0x93,0x13,0x00,0x22,0x93,
+0x83,0x12,0x03,0x00,0x63,0xC5,0x56,0x06,0x63,0x86,0x03,0x00,0x83,0x12,0xE3,0xFF,
+0x63,0xCF,0x56,0x04,0x83,0x42,0xA6,0x01,0xFD,0x12,0x63,0xD6,0x53,0x00,0x03,0x13,
+0x23,0x00,0x63,0xC6,0x66,0x04,0x8D,0xCF,0x01,0x44,0x33,0x03,0x97,0x00,0x83,0x53,
+0x03,0x00,0x92,0x42,0x13,0x93,0x13,0x00,0x16,0x93,0x83,0x12,0x03,0x00,0x63,0xC3,
+0x57,0x02,0x63,0x86,0x03,0x00,0x83,0x12,0xE3,0xFF,0x63,0xCD,0x57,0x00,0x83,0x42,
+0x96,0x01,0xFD,0x12,0x63,0xD6,0x53,0x00,0x03,0x13,0x23,0x00,0x63,0xC4,0x67,0x00,
+0x19,0x07,0xBD,0xBF,0x75,0xDC,0x05,0x05,0x13,0x75,0xF5,0x0F,0xD5,0xBF,0x05,0x44,
+0xCD,0xFF,0xD5,0xBF,0x82,0x80,0x55,0xC9,0x37,0x53,0x00,0x20,0x13,0x07,0x43,0x7E,
+0x85,0x67,0xBA,0x97,0x83,0xC3,0x67,0x36,0x13,0x03,0x43,0x7E,0x63,0x8D,0x03,0x08,
+0x51,0x11,0x26,0xC2,0x93,0x94,0x03,0x01,0xB7,0xF7,0x00,0x20,0xC1,0x80,0x22,0xC4,
+0x81,0x46,0x03,0xD4,0x47,0x2F,0x81,0x42,0x01,0x47,0x81,0x47,0x26,0xC0,0x63,0x63,
+0x87,0x04,0x99,0xC2,0x63,0x88,0x57,0x00,0x85,0x06,0x02,0x47,0xC2,0x06,0xC1,0x82,
+0x63,0xE0,0xE6,0x06,0x23,0x90,0xF5,0x00,0xAA,0x86,0x41,0x47,0x81,0x47,0x93,0xF5,
+0x16,0x00,0x81,0xC5,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x7D,0x17,0x85,0x82,0x42,0x07,
+0xC2,0x06,0x41,0x83,0xC1,0x82,0x65,0xF7,0x22,0x44,0x23,0x00,0xF6,0x00,0x92,0x44,
+0x31,0x01,0x82,0x80,0x93,0x03,0x07,0x03,0x86,0x03,0x9A,0x93,0x83,0xD3,0x43,0x00,
+0xB3,0xF4,0xA3,0x00,0x91,0xC4,0x85,0x07,0xC2,0x07,0x33,0xE5,0xA3,0x00,0xC1,0x83,
+0x05,0x07,0x42,0x07,0xBE,0x83,0x41,0x83,0x96,0x87,0xBE,0x82,0x9E,0x87,0x41,0xBF,
+0x01,0x47,0x81,0x43,0xDD,0xBF,0x01,0x45,0x82,0x80,0x82,0x80,0xB7,0xF7,0x00,0x20,
+0x93,0x87,0xC7,0x2D,0x83,0xC7,0x07,0x09,0x01,0x45,0x93,0xF7,0x07,0x04,0xC9,0xC7,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x03,0x03,0xC5,0x17,0x00,0x35,0xCD,0x03,0xC5,
+0x07,0x00,0x3D,0xC9,0xB7,0x57,0x00,0x20,0x83,0xA5,0x07,0xFF,0xB7,0x57,0x00,0x20,
+0x03,0xA3,0x07,0x01,0x03,0xD6,0xE5,0x03,0x37,0xA7,0x00,0x20,0x83,0x47,0xB3,0x01,
+0x83,0x22,0x07,0xD9,0x05,0x82,0x81,0x46,0x01,0x47,0x13,0xF5,0xF6,0x0F,0x63,0x66,
+0xF5,0x04,0x8D,0x46,0xB3,0x87,0xD7,0x02,0x01,0x45,0x89,0x87,0x63,0x4E,0xF7,0x02,
+0xB7,0x56,0x00,0x20,0x13,0x87,0x46,0x7E,0x85,0x67,0xBA,0x97,0x83,0xC7,0x57,0x36,
+0x37,0x66,0x00,0x20,0x93,0x86,0x46,0x7E,0x93,0xF7,0xF7,0x0F,0x13,0x06,0x46,0x7E,
+0x81,0xCF,0xB7,0xB7,0x00,0x20,0x03,0xA5,0x47,0x2C,0x83,0x47,0x56,0x36,0x01,0x47,
+0x99,0x42,0x63,0x62,0xF7,0x02,0x01,0x45,0x82,0x80,0x13,0x95,0x16,0x00,0x16,0x95,
+0x03,0x15,0x05,0x00,0x63,0x55,0xA6,0x00,0x05,0x07,0x13,0x77,0xF7,0x0F,0x85,0x06,
+0x69,0xBF,0x05,0x45,0x3D,0xA8,0x71,0x11,0x22,0xC0,0xB3,0x03,0x57,0x02,0x03,0x44,
+0x93,0x01,0xB6,0x93,0x83,0xC7,0x93,0x00,0x83,0xC3,0x83,0x00,0xB3,0x87,0x87,0x02,
+0x9E,0x97,0x86,0x07,0xAA,0x97,0x83,0x93,0x07,0x00,0x83,0xD7,0x65,0x03,0xE3,0xDA,
+0xF3,0xFC,0x83,0x47,0x56,0x36,0x05,0x07,0x13,0x77,0xF7,0x0F,0xE3,0x67,0xF7,0xFC,
+0x01,0x45,0x02,0x44,0x11,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x93,0x87,0x27,0x3F,
+0x23,0x80,0x07,0x00,0xA3,0x80,0x07,0x00,0xB7,0xF7,0x00,0x20,0x37,0x57,0x00,0x20,
+0xFD,0x56,0x93,0x87,0x07,0x5F,0x23,0x06,0xD7,0x02,0x13,0x87,0x87,0x02,0x23,0xA0,
+0x07,0x00,0x91,0x07,0xE3,0x9D,0xE7,0xFE,0x82,0x80,0xB7,0xF7,0x00,0x20,0x03,0xC7,
+0xF7,0x6B,0xB7,0x57,0x00,0x20,0x93,0x87,0xC7,0x02,0x83,0xC6,0x07,0x00,0x63,0x88,
+0xE6,0x00,0x23,0x80,0xE7,0x00,0xB7,0x57,0x00,0x20,0x23,0x89,0x07,0x3E,0xB7,0x57,
+0x00,0x20,0x03,0xA6,0x07,0x01,0xB7,0xF7,0x00,0x20,0x03,0xA5,0x87,0x12,0x83,0x45,
+0xB6,0x01,0x81,0x47,0x01,0x47,0x93,0xF6,0xF7,0x0F,0x63,0xED,0xB6,0x08,0x03,0x46,
+0xC6,0x01,0xB7,0xF7,0x00,0x20,0x83,0xA5,0x07,0x12,0x81,0x47,0x93,0xF6,0xF7,0x0F,
+0x63,0xEA,0xC6,0x08,0xB7,0x56,0x00,0x20,0x03,0xC6,0x26,0x3F,0xB7,0xF7,0x00,0x20,
+0x93,0x86,0x26,0x3F,0x93,0x85,0x07,0x5F,0x19,0xEE,0x93,0x87,0x07,0x5F,0x13,0x86,
+0x85,0x02,0x98,0xC3,0x91,0x07,0xE3,0x9E,0xC7,0xFE,0xA5,0x47,0xA3,0x80,0xF6,0x00,
+0x85,0x47,0x23,0x80,0xF6,0x00,0x83,0xC7,0x16,0x00,0x25,0x46,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0x63,0x73,0xF6,0x00,0x81,0x47,0x13,0x93,0x27,0x00,0x33,0x06,0xB3,0x00,
+0x10,0x42,0x01,0x45,0x63,0x73,0xC7,0x02,0x37,0x55,0x00,0x20,0x83,0x22,0x05,0xFF,
+0x19,0x8E,0x03,0xD5,0xA2,0x03,0x83,0xD2,0xE2,0x03,0x16,0x95,0x95,0x42,0x33,0x05,
+0x55,0x02,0x33,0x35,0xA6,0x00,0x13,0x45,0x15,0x00,0x9A,0x95,0x98,0xC1,0xA3,0x80,
+0xF6,0x00,0x82,0x80,0x93,0x96,0x17,0x00,0xAA,0x96,0x83,0x96,0x06,0x00,0x85,0x07,
+0x36,0x97,0x91,0xBF,0x93,0x96,0x17,0x00,0xAE,0x96,0x83,0x96,0x06,0x00,0x85,0x07,
+0x36,0x97,0xA9,0xBF,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x37,0xB7,0x00,0x20,
+0x03,0xD6,0x87,0x01,0x03,0x93,0x27,0x0C,0xB7,0x57,0x00,0x20,0x83,0x25,0x47,0x2C,
+0x93,0x87,0x47,0x7E,0x01,0x47,0x01,0x45,0x93,0x16,0x07,0x01,0xC1,0x82,0x63,0xE3,
+0xC6,0x00,0x82,0x80,0x83,0xD6,0x47,0x06,0x99,0xCA,0x93,0x16,0x17,0x00,0xAE,0x96,
+0x83,0x96,0x06,0x00,0x63,0xC5,0x66,0x00,0x05,0x05,0x42,0x05,0x41,0x81,0x05,0x07,
+0x89,0x07,0xD9,0xBF,0xB7,0x57,0x00,0x20,0x03,0xC7,0x87,0x3D,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x27,0x3F,0x1D,0xC7,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,0x83,0x56,
+0x27,0x0A,0x61,0x67,0x13,0x07,0x07,0x6A,0x33,0x57,0xD7,0x02,0x23,0x91,0xE7,0x00,
+0x03,0xC7,0x47,0x00,0x01,0x45,0x09,0xE7,0x03,0xD5,0x27,0x00,0x33,0x35,0xA0,0x00,
+0x82,0x80,0x03,0xD7,0x27,0x00,0x6D,0xD7,0x7D,0x17,0xCD,0xB7,0x13,0x01,0x41,0xFD,
+0x26,0xD0,0xB7,0xF4,0x00,0x20,0x93,0x87,0xC4,0x2D,0x06,0xD4,0x22,0xD2,0x03,0xC7,
+0xF7,0x0A,0x3E,0xC0,0xB7,0x57,0x00,0x20,0x13,0x77,0x07,0x02,0x93,0x84,0x27,0x3F,
+0x19,0xEB,0x23,0x82,0x04,0x00,0xA3,0x82,0x04,0x00,0xA2,0x50,0x12,0x54,0x82,0x54,
+0x13,0x01,0xC1,0x02,0x82,0x80,0x15,0x3D,0x2A,0x84,0xAD,0x3F,0x37,0x77,0x00,0x20,
+0x03,0x47,0xC7,0xB7,0x59,0x8D,0x13,0x75,0xF5,0x0F,0x71,0xFD,0x3D,0x3E,0x2A,0xC2,
+0xF5,0x31,0x12,0x47,0x83,0xC5,0x44,0x00,0x05,0x46,0x59,0x8D,0x93,0x76,0xF5,0x0F,
+0x63,0x74,0xB6,0x06,0x09,0xE8,0x23,0x83,0x04,0x00,0x99,0xEA,0x03,0xC7,0xA4,0x00,
+0x39,0xC7,0x7D,0x17,0x29,0xA8,0x89,0x45,0x63,0xFE,0xE5,0x00,0x23,0x83,0x04,0x00,
+0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x47,0xB7,0x15,0x11,0x83,0x23,0x85,
+0xE4,0x00,0x61,0xBF,0x36,0xC0,0xF9,0x35,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,
+0x82,0x46,0x05,0x46,0x03,0x47,0x67,0x03,0xE3,0x6F,0xA7,0xFA,0x03,0xC7,0x64,0x00,
+0x05,0x07,0x13,0x77,0xF7,0x0F,0x23,0x83,0xE4,0x00,0xE3,0x78,0xE6,0xFA,0x23,0x82,
+0x04,0x00,0x23,0x94,0x04,0x00,0x85,0xB7,0x23,0x83,0x04,0x00,0xED,0xDA,0x37,0x54,
+0x00,0x20,0x93,0x06,0x44,0x7E,0x05,0x67,0x36,0x97,0x83,0x45,0x67,0x36,0x13,0x04,
+0x44,0x7E,0x89,0xE5,0x81,0x46,0x01,0x47,0x01,0x46,0x21,0xAA,0x2E,0xC2,0x9D,0x3D,
+0x92,0x45,0x2A,0x86,0x81,0x46,0xC2,0x05,0x01,0x43,0x01,0x47,0x85,0x42,0xC1,0x81,
+0x33,0x95,0xD2,0x00,0x93,0x93,0x06,0x01,0x42,0x05,0x93,0xD3,0x03,0x01,0x41,0x81,
+0x2E,0xCC,0x3A,0xCA,0x32,0xC8,0x1A,0xC6,0x36,0xC2,0x1E,0xC4,0xEF,0xF0,0xBF,0xA1,
+0x52,0x47,0x85,0x42,0x92,0x46,0x32,0x43,0x42,0x46,0xE2,0x45,0x63,0x75,0xA7,0x00,
+0xA2,0x43,0x2A,0x87,0x1E,0x83,0x85,0x06,0x13,0x95,0x06,0x01,0x41,0x81,0xE3,0x61,
+0xB5,0xFC,0x05,0x45,0x33,0x15,0x65,0x00,0x37,0x53,0x00,0x20,0x83,0x25,0x03,0x01,
+0x42,0x05,0x41,0x81,0x83,0xC6,0x65,0x03,0x63,0xE8,0xE6,0x08,0x82,0x47,0x83,0xC5,
+0x55,0x03,0x83,0xD6,0xA7,0x01,0xB3,0x86,0xB6,0x02,0x93,0x05,0x40,0x06,0xB3,0xC6,
+0xB6,0x02,0x63,0xCA,0xC6,0x06,0x3D,0xD7,0x13,0x06,0xD1,0x01,0x93,0x05,0xE1,0x01,
+0x19,0x36,0x2A,0x87,0x25,0xD1,0x37,0x53,0x00,0x20,0x83,0x26,0x03,0x01,0x03,0x56,
+0xE1,0x01,0x83,0xC5,0x66,0x03,0x93,0x96,0x15,0x00,0x63,0xD1,0xC6,0x02,0x03,0x46,
+0xD1,0x01,0x89,0x46,0x63,0xFC,0xC6,0x00,0x82,0x47,0x01,0x46,0x81,0x46,0x03,0xD5,
+0x87,0x01,0x63,0x17,0xC5,0x00,0x8A,0x05,0x63,0xCF,0xD5,0x02,0x81,0x46,0x2D,0xB7,
+0x03,0x53,0x44,0x06,0x63,0x05,0x03,0x00,0x85,0x06,0xC2,0x06,0xC1,0x82,0x05,0x06,
+0x42,0x06,0x41,0x82,0x09,0x04,0xF1,0xBF,0x33,0x36,0xC0,0x00,0xA1,0xA0,0x91,0x81,
+0x23,0x85,0xB4,0x00,0x81,0xA0,0x01,0xCB,0x13,0x06,0xD1,0x01,0x93,0x05,0xE1,0x01,
+0xEF,0xF0,0x7F,0xA9,0x2A,0x87,0x83,0xC6,0x54,0x00,0x09,0x46,0x85,0x06,0x93,0xF6,
+0xF6,0x0F,0xB7,0x55,0x00,0x20,0x83,0xA5,0x05,0x01,0xA3,0x82,0xD4,0x00,0x83,0xC5,
+0xB5,0x15,0x13,0xF5,0xF5,0x00,0xE3,0xE1,0xA6,0xFC,0xA3,0x82,0x04,0x00,0x89,0x46,
+0xE3,0x0F,0xD6,0xFA,0x23,0x82,0xC4,0x00,0x23,0x94,0xE4,0x00,0xFD,0xBB,0xB7,0x57,
+0x00,0x20,0x83,0xA6,0x07,0x03,0x83,0xC5,0x46,0x0A,0xFD,0xCD,0xB7,0x57,0x00,0x20,
+0x03,0xA6,0x07,0x01,0x03,0x47,0x16,0x15,0x83,0x47,0x06,0x15,0x22,0x07,0x5D,0x8F,
+0x83,0x47,0x26,0x15,0xC2,0x07,0x5D,0x8F,0x83,0x47,0x36,0x15,0xE2,0x07,0xD9,0x8F,
+0x13,0x97,0x27,0x00,0x63,0x5A,0x07,0x0C,0x37,0xF7,0x00,0x20,0x03,0x47,0xE7,0x6B,
+0x21,0x11,0x22,0xCA,0x26,0xC8,0x39,0xE7,0x83,0x42,0x56,0x17,0x37,0xF7,0x00,0x20,
+0x03,0x57,0xC7,0x61,0x86,0x05,0x01,0x45,0x3A,0xC4,0x37,0xF7,0x00,0x20,0x83,0x53,
+0x87,0x61,0x37,0xB7,0x00,0x20,0x03,0x27,0x47,0x2C,0x13,0x04,0x40,0x06,0x3A,0xC2,
+0x33,0x87,0xB6,0x00,0x3A,0xC0,0x37,0x07,0x00,0x40,0xF9,0x8F,0x3E,0xC6,0x82,0x47,
+0x63,0x9D,0xF6,0x00,0x35,0xCD,0x52,0x44,0xC2,0x44,0x61,0x01,0x17,0xB3,0xFF,0x1F,
+0x67,0x00,0xC3,0xB5,0x83,0x42,0x76,0x17,0x55,0xBF,0x83,0x45,0xC6,0x01,0x03,0xC3,
+0x36,0x06,0x83,0xC4,0x26,0x06,0xFD,0x15,0x9E,0x87,0x63,0x06,0x03,0x00,0xA2,0x47,
+0x63,0x13,0xB3,0x00,0x9E,0x87,0x32,0x47,0x29,0xC3,0x33,0x87,0x65,0x40,0x33,0x07,
+0x57,0x02,0x33,0x07,0xF7,0x02,0x33,0x57,0xB7,0x02,0x33,0x57,0x87,0x02,0xBA,0x97,
+0x03,0x47,0x96,0x01,0xC2,0x07,0xC1,0x83,0x33,0x03,0x67,0x02,0x12,0x47,0x26,0x93,
+0x06,0x03,0x3A,0x93,0x03,0x17,0x03,0x00,0x63,0x57,0xF7,0x00,0x05,0x05,0x13,0x75,
+0xF5,0x0F,0x23,0x91,0x06,0x08,0x89,0x06,0x59,0xB7,0x33,0x07,0x53,0x02,0xD1,0xB7,
+0x52,0x44,0xC2,0x44,0x61,0x01,0x82,0x80,0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x83,0xC7,0xE7,0x08,0x93,0xF7,0xF7,0x0F,0xC1,0xCF,0xB7,0x57,0x00,0x20,
+0x03,0xA6,0x07,0x03,0x85,0x47,0x83,0x45,0x46,0x0A,0x63,0xF4,0xB7,0x08,0xB7,0xB7,
+0x00,0x20,0x83,0xA2,0x47,0x2C,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,0x71,0x11,
+0x22,0xC0,0x83,0xC3,0x96,0x01,0x83,0x47,0x36,0x06,0x03,0x47,0x26,0x06,0x13,0x03,
+0x46,0x06,0xB3,0x87,0x77,0x02,0x05,0x45,0xBA,0x97,0x86,0x07,0x96,0x97,0x03,0x97,
+0x07,0x00,0x83,0xC7,0xA6,0x14,0x81,0x46,0x33,0x07,0xF7,0x02,0xA9,0x47,0x33,0x47,
+0xF7,0x02,0x42,0x07,0x41,0x87,0x83,0x47,0x13,0x00,0x03,0x44,0x03,0x00,0xB3,0x87,
+0x77,0x02,0xA2,0x97,0x86,0x07,0x96,0x97,0x83,0x97,0x07,0x00,0x63,0xD5,0xE7,0x00,
+0x85,0x06,0x93,0xF6,0xF6,0x0F,0x05,0x05,0x13,0x75,0xF5,0x0F,0x09,0x03,0xE3,0x9C,
+0xA5,0xFC,0x89,0xC6,0xB3,0x86,0xD5,0x40,0x23,0x02,0xD6,0x0A,0x02,0x44,0x11,0x01,
+0x82,0x80,0x82,0x80,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x03,0x05,0x47,0x83,0xC7,
+0x46,0x0A,0x63,0x73,0xF7,0x0A,0x37,0xB7,0x00,0x20,0x03,0x23,0x47,0x2C,0x37,0x57,
+0x00,0x20,0x03,0x27,0x07,0x01,0x01,0x11,0x93,0x86,0x26,0x06,0x83,0x42,0x97,0x01,
+0x0A,0x85,0xB6,0x85,0x01,0x46,0x03,0xC7,0x15,0x00,0x83,0xC3,0x05,0x00,0x05,0x06,
+0x33,0x07,0x57,0x02,0x13,0x76,0xF6,0x0F,0x89,0x05,0x09,0x05,0x1E,0x97,0x06,0x07,
+0x1A,0x97,0x03,0x57,0x07,0x00,0x23,0x1F,0xE5,0xFE,0xE3,0x9E,0xC7,0xFC,0xFD,0x17,
+0x93,0xF7,0xF7,0x0F,0x36,0x87,0x0A,0x86,0x81,0x45,0x03,0x15,0x06,0x00,0x03,0x13,
+0x26,0x00,0x63,0x56,0x65,0x02,0x83,0x42,0x27,0x00,0x23,0x10,0x66,0x00,0x23,0x11,
+0xA6,0x00,0x03,0x43,0x07,0x00,0x03,0x45,0x17,0x00,0x23,0x00,0x57,0x00,0x83,0x42,
+0x37,0x00,0x23,0x01,0x67,0x00,0xA3,0x01,0xA7,0x00,0xA3,0x00,0x57,0x00,0x85,0x05,
+0x93,0xF5,0xF5,0x0F,0x09,0x06,0x09,0x07,0xE3,0xE1,0xF5,0xFC,0xFD,0x17,0x93,0xF7,
+0xF7,0x0F,0xCD,0xFB,0x05,0x61,0x82,0x80,0x82,0x80,0x13,0x01,0x81,0xFD,0x26,0xCE,
+0xB7,0x54,0x00,0x20,0x22,0xD0,0x13,0x84,0x04,0x03,0x1C,0x40,0x06,0xD2,0x37,0x65,
+0x00,0x20,0x23,0x82,0x07,0x0A,0xB7,0xF7,0x00,0x20,0x03,0xD6,0x47,0x2F,0x81,0x45,
+0x13,0x05,0x85,0x55,0x23,0x1D,0x01,0x00,0xEF,0x70,0xEF,0xAE,0x08,0x40,0x13,0x06,
+0x00,0x02,0x81,0x45,0x13,0x05,0x25,0x08,0xEF,0x70,0xEF,0xAD,0x37,0xF7,0x00,0x20,
+0x13,0x07,0x87,0x4E,0x83,0x47,0xD7,0x00,0x85,0xC3,0x1C,0x40,0x23,0x82,0x07,0x0A,
+0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,0xA3,0x83,0x07,0x36,0x92,0x50,0x02,0x54,
+0xF2,0x44,0x13,0x01,0x81,0x02,0x82,0x80,0x37,0x56,0x00,0x20,0x03,0x26,0x06,0xFF,
+0x03,0x47,0xC7,0x00,0xB7,0xB7,0x00,0x20,0x32,0xC8,0x93,0x86,0x04,0x03,0x83,0xA7,
+0x47,0x2C,0x25,0xCB,0x03,0x57,0x86,0x03,0x3A,0xC2,0x12,0x46,0x1D,0x47,0x33,0x07,
+0xE6,0x02,0x29,0x46,0x94,0x42,0x23,0x0A,0x01,0x00,0x02,0xC4,0x36,0xC0,0x92,0x46,
+0x85,0x65,0x93,0xD2,0x16,0x00,0x33,0x47,0xC7,0x02,0x12,0x46,0xB7,0x56,0x00,0x20,
+0x93,0x86,0x46,0x7E,0x42,0x07,0x41,0x83,0x3A,0xC6,0x37,0xF7,0x00,0x20,0x23,0x1E,
+0xC7,0x60,0x32,0x46,0x37,0xF7,0x00,0x20,0x23,0x1C,0xC7,0x60,0x37,0x57,0x00,0x20,
+0x03,0x27,0x07,0x01,0x03,0x46,0x41,0x01,0x03,0x45,0xC7,0x01,0x63,0x61,0xA6,0x02,
+0x03,0x57,0xA1,0x01,0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,0xA3,0x83,0xE7,0x36,
+0xB5,0xB7,0x42,0x47,0x03,0x57,0x67,0x03,0x3A,0xC2,0x0E,0x07,0x59,0xBF,0x37,0x05,
+0x00,0x80,0xA3,0x0A,0x01,0x00,0x13,0x45,0xF5,0xFF,0x83,0x43,0xB7,0x01,0x03,0x46,
+0x51,0x01,0x63,0x6A,0x76,0x00,0x03,0x46,0x41,0x01,0x05,0x06,0x13,0x76,0xF6,0x0F,
+0x23,0x0A,0xC1,0x00,0x45,0xBF,0x03,0x43,0x41,0x01,0x03,0x46,0x97,0x01,0x03,0x44,
+0x51,0x01,0x33,0x03,0x66,0x02,0x22,0x93,0x42,0x03,0x13,0x53,0x03,0x01,0x23,0x1C,
+0x61,0x00,0x23,0x0B,0x01,0x00,0x03,0x43,0x41,0x01,0x13,0x73,0xF3,0x0F,0x63,0x05,
+0x03,0x02,0x03,0x43,0xC7,0x01,0x03,0x44,0x41,0x01,0x7D,0x13,0x63,0x0E,0x83,0x00,
+0x03,0x43,0x51,0x01,0x13,0x73,0xF3,0x0F,0x63,0x08,0x03,0x00,0x03,0x43,0x51,0x01,
+0x13,0x84,0xF3,0xFF,0x63,0x13,0x64,0x1E,0x05,0x43,0xA3,0x0B,0x61,0x00,0x03,0x53,
+0x81,0x01,0x12,0x44,0x06,0x03,0x3E,0x93,0x03,0x13,0x03,0x00,0x63,0x51,0x83,0x02,
+0x03,0x43,0x71,0x01,0x13,0x73,0xF3,0x0F,0x63,0x0D,0x03,0x18,0x03,0x53,0x81,0x01,
+0x32,0x44,0x06,0x03,0x3E,0x93,0x03,0x13,0x03,0x00,0x63,0x44,0x83,0x18,0x03,0x43,
+0x41,0x01,0x13,0x73,0xF3,0x0F,0x63,0x02,0x03,0x02,0x03,0x54,0x81,0x01,0x03,0x53,
+0x81,0x01,0x06,0x04,0x33,0x03,0xC3,0x40,0x06,0x03,0x3E,0x94,0x3E,0x93,0x03,0x14,
+0x04,0x00,0x03,0x13,0x03,0x00,0x63,0x4E,0x64,0x14,0x03,0x43,0x51,0x01,0x13,0x73,
+0xF3,0x0F,0x63,0x01,0x03,0x02,0x03,0x54,0x81,0x01,0x03,0x53,0x81,0x01,0x06,0x04,
+0x2A,0x93,0x06,0x03,0x3E,0x94,0x3E,0x93,0x03,0x14,0x04,0x00,0x03,0x13,0x03,0x00,
+0x63,0x49,0x64,0x12,0x03,0x44,0xC7,0x01,0x03,0x43,0x41,0x01,0x7D,0x14,0x63,0x01,
+0x64,0x02,0x83,0x54,0x81,0x01,0x03,0x53,0x81,0x01,0x86,0x04,0x32,0x93,0x06,0x03,
+0xBE,0x94,0x3E,0x93,0x83,0x94,0x04,0x00,0x03,0x13,0x03,0x00,0x63,0xC3,0x64,0x10,
+0x03,0x43,0x51,0x01,0xFD,0x13,0x63,0x81,0x63,0x02,0x83,0x54,0x81,0x01,0x03,0x53,
+0x81,0x01,0x86,0x04,0x05,0x03,0x06,0x03,0xBE,0x94,0x3E,0x93,0x83,0x94,0x04,0x00,
+0x03,0x13,0x03,0x00,0x63,0xCF,0x64,0x0C,0x03,0x43,0x41,0x01,0x13,0x73,0xF3,0x0F,
+0x63,0x09,0x03,0x02,0x03,0x43,0x51,0x01,0x13,0x73,0xF3,0x0F,0x63,0x03,0x03,0x02,
+0x83,0x54,0x81,0x01,0x03,0x53,0x81,0x01,0x86,0x04,0x33,0x03,0xC3,0x40,0x2A,0x93,
+0x06,0x03,0xBE,0x94,0x3E,0x93,0x83,0x94,0x04,0x00,0x03,0x13,0x03,0x00,0x63,0xC2,
+0x64,0x0A,0x03,0x43,0x41,0x01,0x63,0x08,0x64,0x02,0x03,0x43,0x51,0x01,0x13,0x73,
+0xF3,0x0F,0x63,0x02,0x03,0x02,0x83,0x54,0x81,0x01,0x03,0x53,0x81,0x01,0x86,0x04,
+0x32,0x93,0x2A,0x93,0x06,0x03,0xBE,0x94,0x3E,0x93,0x83,0x94,0x04,0x00,0x03,0x13,
+0x03,0x00,0x63,0xC8,0x64,0x06,0x03,0x43,0x41,0x01,0x13,0x73,0xF3,0x0F,0x63,0x07,
+0x03,0x02,0x03,0x43,0x51,0x01,0x63,0x83,0x63,0x02,0x83,0x54,0x81,0x01,0x03,0x53,
+0x81,0x01,0x86,0x04,0x33,0x03,0xC3,0x40,0x05,0x03,0x06,0x03,0xBE,0x94,0x3E,0x93,
+0x83,0x94,0x04,0x00,0x03,0x13,0x03,0x00,0x63,0xCD,0x64,0x02,0x03,0x43,0x41,0x01,
+0x63,0x06,0x64,0x02,0x03,0x43,0x51,0x01,0x63,0x82,0x63,0x02,0x03,0x53,0x81,0x01,
+0x83,0x53,0x81,0x01,0x06,0x03,0x1E,0x96,0x05,0x06,0x06,0x06,0x3E,0x93,0x3E,0x96,
+0x03,0x13,0x03,0x00,0x03,0x16,0x06,0x00,0x63,0x45,0xC3,0x00,0x05,0x46,0x23,0x0B,
+0xC1,0x00,0x03,0x46,0x61,0x01,0x13,0x76,0xF6,0x0F,0x35,0xCE,0x02,0x46,0x3D,0x43,
+0x03,0x46,0x46,0x0A,0x63,0x61,0xC3,0x48,0x01,0xEE,0x03,0x56,0x81,0x01,0x06,0x06,
+0x3E,0x96,0x03,0x16,0x06,0x00,0x32,0xC4,0x29,0xA8,0xA3,0x0B,0x01,0x00,0x05,0xB5,
+0x03,0x56,0x81,0x01,0x22,0x44,0x06,0x06,0x3E,0x96,0x03,0x16,0x06,0x00,0xE3,0x4E,
+0xC4,0xFC,0x03,0x56,0x81,0x01,0x02,0x44,0x83,0x43,0x51,0x01,0x06,0x06,0x3E,0x96,
+0x03,0x53,0x06,0x00,0x05,0x03,0x23,0x10,0x66,0x00,0x02,0x46,0x03,0x46,0x46,0x0A,
+0x13,0x13,0x16,0x00,0x22,0x93,0x23,0x01,0x73,0x06,0x83,0x43,0x41,0x01,0xA3,0x01,
+0x73,0x06,0x13,0x03,0x06,0x04,0x06,0x03,0x22,0x93,0x85,0x43,0x23,0x11,0x73,0x00,
+0x05,0x06,0x23,0x02,0xC4,0x0A,0x03,0x56,0x81,0x01,0x06,0x06,0x3E,0x96,0x03,0x13,
+0x06,0x00,0x42,0x46,0x03,0x16,0x26,0x05,0x63,0x47,0x66,0x3E,0x03,0x56,0xA1,0x01,
+0x41,0x43,0x63,0x62,0xC3,0x3E,0x03,0x56,0x81,0x01,0x36,0x96,0x2E,0x96,0x03,0x46,
+0x46,0xD7,0x63,0x1A,0x06,0x3C,0x23,0x0B,0x01,0x00,0x03,0x46,0x41,0x01,0x13,0x76,
+0xF6,0x0F,0x1D,0xC2,0x03,0x53,0x81,0x01,0x83,0x43,0x97,0x01,0x03,0x56,0x81,0x01,
+0x06,0x03,0x3E,0x93,0x33,0x06,0x76,0x40,0x06,0x06,0x3E,0x96,0x03,0x13,0x03,0x00,
+0x03,0x16,0x06,0x00,0x63,0x43,0x66,0x16,0x03,0x46,0x51,0x01,0x13,0x76,0xF6,0x0F,
+0x05,0xC2,0x03,0x53,0x81,0x01,0x03,0x56,0x81,0x01,0x06,0x03,0x2A,0x96,0x06,0x06,
+0x3E,0x93,0x3E,0x96,0x03,0x13,0x03,0x00,0x03,0x16,0x06,0x00,0x63,0x4F,0x66,0x12,
+0x83,0x43,0xC7,0x01,0x03,0x46,0x41,0x01,0xFD,0x13,0x63,0x83,0xC3,0x02,0x03,0x53,
+0x81,0x01,0x03,0x46,0x97,0x01,0x03,0x54,0x81,0x01,0x06,0x03,0x3E,0x93,0x22,0x96,
+0x06,0x06,0x3E,0x96,0x03,0x13,0x03,0x00,0x03,0x16,0x06,0x00,0x63,0x47,0x66,0x10,
+0x03,0x43,0xB7,0x01,0x03,0x46,0x51,0x01,0x7D,0x13,0x63,0x01,0xC3,0x02,0x03,0x54,
+0x81,0x01,0x03,0x56,0x81,0x01,0x06,0x04,0x05,0x06,0x06,0x06,0x3E,0x94,0x3E,0x96,
+0x03,0x14,0x04,0x00,0x03,0x16,0x06,0x00,0x63,0x41,0x86,0x0E,0x03,0x46,0x41,0x01,
+0x13,0x76,0xF6,0x0F,0x05,0xCA,0x03,0x46,0x51,0x01,0x13,0x76,0xF6,0x0F,0x1D,0xC2,
+0x03,0x54,0x81,0x01,0x83,0x44,0x97,0x01,0x03,0x56,0x81,0x01,0x06,0x04,0x3E,0x94,
+0x05,0x8E,0x2A,0x96,0x06,0x06,0x3E,0x96,0x03,0x14,0x04,0x00,0x03,0x16,0x06,0x00,
+0x63,0x45,0x86,0x0A,0x03,0x46,0x41,0x01,0x63,0x89,0xC3,0x02,0x03,0x46,0x51,0x01,
+0x13,0x76,0xF6,0x0F,0x1D,0xC2,0x03,0x54,0x81,0x01,0x03,0x46,0x97,0x01,0x83,0x54,
+0x81,0x01,0x06,0x04,0x3E,0x94,0x26,0x96,0x2A,0x96,0x06,0x06,0x3E,0x96,0x03,0x14,
+0x04,0x00,0x03,0x16,0x06,0x00,0x63,0x4A,0x86,0x06,0x03,0x46,0x41,0x01,0x13,0x76,
+0xF6,0x0F,0x1D,0xC6,0x03,0x46,0x51,0x01,0x63,0x04,0xC3,0x02,0x03,0x54,0x81,0x01,
+0x83,0x44,0x97,0x01,0x03,0x56,0x81,0x01,0x06,0x04,0x3E,0x94,0x05,0x8E,0x05,0x06,
+0x06,0x06,0x3E,0x96,0x03,0x14,0x04,0x00,0x03,0x16,0x06,0x00,0x63,0x4F,0x86,0x02,
+0x03,0x46,0x41,0x01,0x63,0x88,0xC3,0x02,0x03,0x46,0x51,0x01,0x63,0x04,0xC3,0x02,
+0x03,0x53,0x81,0x01,0x03,0x46,0x97,0x01,0x83,0x53,0x81,0x01,0x06,0x03,0x3E,0x93,
+0x1E,0x96,0x05,0x06,0x06,0x06,0x3E,0x96,0x03,0x13,0x03,0x00,0x03,0x16,0x06,0x00,
+0x63,0x45,0x66,0x00,0x05,0x46,0x23,0x0B,0xC1,0x00,0x03,0x46,0x61,0x01,0x13,0x76,
+0xF6,0x0F,0x63,0x0A,0x06,0x22,0x83,0x43,0x51,0x01,0x03,0x53,0xA1,0x01,0x0D,0x46,
+0x05,0x64,0x33,0x03,0x66,0x02,0x93,0x04,0x04,0x98,0x13,0x04,0x14,0x98,0x26,0x93,
+0x06,0x03,0x36,0x93,0x23,0x12,0x73,0x00,0x83,0x43,0x41,0x01,0x03,0x53,0xA1,0x01,
+0x33,0x03,0x66,0x02,0x22,0x93,0x06,0x03,0x36,0x93,0x23,0x12,0x73,0x00,0x03,0x53,
+0x81,0x01,0x83,0x53,0xA1,0x01,0x06,0x03,0x33,0x06,0x76,0x02,0x3E,0x93,0x93,0x83,
+0x25,0x98,0x03,0x13,0x03,0x00,0x1E,0x96,0x06,0x06,0x36,0x96,0x23,0x12,0x66,0x00,
+0x03,0x56,0xA1,0x01,0x05,0x06,0x42,0x06,0x41,0x82,0x23,0x1D,0xC1,0x00,0x03,0x53,
+0xA1,0x01,0x03,0x56,0x81,0x01,0x36,0x96,0x2E,0x96,0x23,0x0A,0x66,0xD6,0x03,0x46,
+0x51,0x01,0x13,0x76,0xF6,0x0F,0x15,0xC2,0x03,0x56,0x81,0x01,0x2A,0x96,0x06,0x06,
+0x3E,0x96,0x03,0x16,0x06,0x00,0x63,0x5A,0x56,0x00,0x03,0x53,0xA1,0x01,0x03,0x56,
+0x81,0x01,0x36,0x96,0x2E,0x96,0xA3,0x09,0x66,0xD6,0x03,0x43,0xB7,0x01,0x03,0x46,
+0x51,0x01,0x7D,0x13,0x63,0x53,0x66,0x02,0x03,0x56,0x81,0x01,0x05,0x06,0x06,0x06,
+0x3E,0x96,0x03,0x16,0x06,0x00,0x63,0x5A,0x56,0x00,0x83,0x53,0xA1,0x01,0x03,0x56,
+0x81,0x01,0x36,0x96,0x2E,0x96,0xA3,0x0A,0x76,0xD6,0x03,0x46,0x41,0x01,0x13,0x76,
+0xF6,0x0F,0x1D,0xC6,0x03,0x56,0x81,0x01,0x83,0x43,0x97,0x01,0x33,0x06,0x76,0x40,
+0x06,0x06,0x3E,0x96,0x03,0x16,0x06,0x00,0x63,0x5C,0x56,0x00,0x03,0x54,0xA1,0x01,
+0x03,0x56,0x81,0x01,0x33,0x06,0x76,0x40,0x36,0x96,0x2E,0x96,0x23,0x0A,0x86,0xD6,
+0x83,0x43,0xC7,0x01,0x03,0x46,0x41,0x01,0xFD,0x13,0x63,0x56,0x76,0x02,0x03,0x54,
+0x81,0x01,0x03,0x46,0x97,0x01,0x32,0x94,0x06,0x04,0x3E,0x94,0x03,0x14,0x04,0x00,
+0x63,0x5B,0x54,0x00,0x03,0x54,0xA1,0x01,0x83,0x54,0x81,0x01,0x36,0x96,0x26,0x96,
+0x2E,0x96,0x23,0x0A,0x86,0xD6,0x03,0x46,0x41,0x01,0x13,0x76,0xF6,0x0F,0x1D,0xCA,
+0x03,0x46,0x51,0x01,0x13,0x76,0xF6,0x0F,0x15,0xC6,0x03,0x56,0x81,0x01,0x03,0x44,
+0x97,0x01,0x01,0x8E,0x2A,0x96,0x06,0x06,0x3E,0x96,0x03,0x16,0x06,0x00,0x63,0x5B,
+0x56,0x00,0x83,0x54,0xA1,0x01,0x03,0x56,0x81,0x01,0x01,0x8E,0x36,0x96,0x2E,0x96,
+0xA3,0x09,0x96,0xD6,0x03,0x46,0x41,0x01,0x13,0x76,0xF6,0x0F,0x15,0xCA,0x03,0x46,
+0x51,0x01,0x63,0x57,0x66,0x02,0x03,0x56,0x81,0x01,0x03,0x44,0x97,0x01,0x01,0x8E,
+0x05,0x06,0x06,0x06,0x3E,0x96,0x03,0x16,0x06,0x00,0x63,0x5B,0x56,0x00,0x83,0x54,
+0xA1,0x01,0x03,0x56,0x81,0x01,0x01,0x8E,0x36,0x96,0x2E,0x96,0xA3,0x0A,0x96,0xD6,
+0x03,0x46,0x41,0x01,0x63,0x5C,0x76,0x02,0x03,0x46,0x51,0x01,0x13,0x76,0xF6,0x0F,
+0x15,0xC6,0x03,0x54,0x81,0x01,0x03,0x46,0x97,0x01,0x32,0x94,0x2A,0x94,0x06,0x04,
+0x3E,0x94,0x03,0x14,0x04,0x00,0x63,0x5B,0x54,0x00,0x03,0x54,0xA1,0x01,0x83,0x54,
+0x81,0x01,0x36,0x96,0x26,0x96,0x2E,0x96,0xA3,0x09,0x86,0xD6,0x03,0x46,0x41,0x01,
+0x63,0x5B,0x76,0x02,0x03,0x46,0x51,0x01,0x63,0x57,0x66,0x02,0x03,0x53,0x81,0x01,
+0x03,0x46,0x97,0x01,0x32,0x93,0x05,0x03,0x06,0x03,0x3E,0x93,0x03,0x13,0x03,0x00,
+0x63,0x5B,0x53,0x00,0x03,0x53,0xA1,0x01,0x83,0x53,0x81,0x01,0x36,0x96,0x1E,0x96,
+0x2E,0x96,0xA3,0x0A,0x66,0xD6,0x03,0x46,0x51,0x01,0x05,0x06,0x13,0x76,0xF6,0x0F,
+0xA3,0x0A,0xC1,0x00,0x99,0xB2,0x03,0x56,0x81,0x01,0x22,0x44,0x06,0x06,0x3E,0x96,
+0x03,0x16,0x06,0x00,0xE3,0x51,0xC4,0xBE,0x03,0x56,0x81,0x01,0x02,0x44,0x06,0x06,
+0x3E,0x96,0x03,0x16,0x06,0x00,0x32,0xC4,0x03,0x56,0x81,0x01,0x06,0x06,0x3E,0x96,
+0x03,0x53,0x06,0x00,0x05,0x03,0x23,0x10,0x66,0x00,0x03,0x46,0x51,0x01,0x23,0x01,
+0xC4,0x06,0x03,0x46,0x41,0x01,0xA3,0x01,0xC4,0x06,0x75,0xB6,0xB7,0x57,0x00,0x20,
+0x13,0x87,0x47,0x7E,0x85,0x66,0xBA,0x96,0x37,0x57,0x00,0x20,0x03,0x26,0x07,0x03,
+0xA3,0x82,0x06,0x36,0x23,0x11,0x06,0x0A,0x83,0xC6,0x66,0x36,0xD9,0xEE,0x82,0x80,
+0x10,0x43,0x93,0x06,0x04,0x04,0x86,0x06,0xB2,0x96,0x83,0xD6,0x26,0x00,0xB5,0xCA,
+0x83,0xC6,0x54,0x36,0x85,0x45,0xB3,0x95,0x85,0x00,0x93,0x86,0x06,0x04,0x86,0x06,
+0xB2,0x96,0x23,0x91,0xB6,0x00,0x83,0xC6,0x54,0x36,0x83,0x55,0x26,0x0A,0x93,0x86,
+0x06,0x04,0x86,0x06,0xB2,0x96,0x83,0xD6,0x26,0x00,0xCD,0x8E,0x23,0x11,0xD6,0x0A,
+0x03,0xC5,0x54,0x36,0x99,0x45,0x33,0x85,0xA5,0x02,0xB3,0x05,0xB4,0x02,0x11,0x05,
+0x3E,0x95,0x91,0x05,0xBE,0x95,0x63,0x0F,0xB5,0x00,0x19,0x46,0x97,0x70,0xFF,0x1F,
+0xE7,0x80,0x80,0xC1,0xB7,0x57,0x00,0x20,0x13,0x87,0x07,0x03,0xB7,0x57,0x00,0x20,
+0x93,0x87,0x47,0x7E,0x83,0xC6,0x54,0x36,0x85,0x06,0x93,0xF6,0xF6,0x0F,0xA3,0x82,
+0xD4,0x36,0x05,0x04,0x13,0x74,0xF4,0x0F,0x83,0xC6,0x64,0x36,0xE3,0x6A,0xD4,0xF6,
+0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x51,0x11,0x26,0xC0,0xB7,0x64,
+0x00,0x20,0x22,0xC2,0x06,0xC4,0x93,0x87,0x47,0x7E,0x93,0x84,0x44,0x7E,0x13,0x07,
+0x07,0x03,0x01,0x44,0xD1,0xBF,0xA9,0x42,0x13,0x13,0x37,0x00,0x33,0x43,0x53,0x02,
+0x01,0x11,0x22,0xCE,0x26,0xCC,0x23,0x00,0x06,0x00,0x93,0x17,0x03,0x01,0xC1,0x83,
+0x3E,0xC2,0x9D,0x47,0xB3,0x07,0xF7,0x02,0x01,0x43,0xB3,0xC7,0x57,0x02,0xAA,0x82,
+0xC2,0x07,0xC1,0x83,0x3E,0xC8,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x4E,0x3E,0xC4,
+0x93,0x87,0xF5,0xFF,0x3E,0xC6,0x13,0x74,0xF3,0x0F,0x63,0x66,0xB4,0x00,0x72,0x44,
+0xE2,0x44,0x05,0x61,0x82,0x80,0x83,0x47,0x06,0x00,0xAD,0x44,0x3E,0xC0,0xE3,0xE8,
+0xF4,0xFE,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x03,0xA3,0x0B,0x01,0x00,0x85,0x44,
+0x83,0xC3,0x47,0x0A,0x81,0x47,0x63,0x9A,0x93,0x04,0x01,0xC4,0xB2,0x44,0x63,0x96,
+0x64,0x04,0x85,0x47,0xA3,0x0B,0xF1,0x00,0x83,0x43,0x71,0x01,0x92,0x47,0x93,0xF3,
+0xF3,0x0F,0x63,0x89,0x03,0x00,0xA2,0x47,0x83,0xC3,0xC7,0x00,0x92,0x47,0x63,0x83,
+0x03,0x00,0xC2,0x47,0xB7,0xA4,0x00,0x20,0x83,0xA3,0x04,0xD9,0x63,0x9F,0xA3,0x00,
+0xA2,0x44,0x83,0xC3,0xC4,0x00,0x63,0x88,0x03,0x06,0x9D,0x43,0xB3,0x87,0x77,0x02,
+0xA9,0x43,0xB3,0xC7,0x77,0x02,0xC2,0x07,0xC1,0x83,0x83,0x93,0x02,0x00,0x63,0x49,
+0x77,0x00,0x83,0x44,0x71,0x01,0x93,0xF4,0xF4,0x0F,0xB9,0xC0,0x63,0xD2,0x77,0x04,
+0x09,0xC4,0x83,0x97,0xE2,0xFF,0x63,0xCD,0xF3,0x02,0xB2,0x47,0x63,0x56,0xF3,0x00,
+0x83,0x97,0x22,0x00,0x63,0xD6,0x77,0x02,0x82,0x47,0x85,0x07,0x93,0xF7,0xF7,0x0F,
+0x23,0x00,0xF6,0x00,0xFD,0x17,0x8A,0x07,0xB6,0x97,0x23,0x90,0x67,0x00,0x83,0x47,
+0x06,0x00,0x83,0x93,0x02,0x00,0xFD,0x17,0x8A,0x07,0xB6,0x97,0x23,0x91,0x77,0x00,
+0x05,0x03,0x89,0x02,0x0D,0xB7,0x8E,0x07,0x61,0xBF,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0x47,0x7E,0x03,0xC7,0x07,0x00,0x01,0xC7,0x7D,0x17,0x23,0x80,0xE7,0x00,0x03,0xC7,
+0x27,0x00,0x01,0xC7,0x7D,0x17,0x23,0x81,0xE7,0x00,0xB7,0x56,0x00,0x20,0x03,0xA6,
+0x06,0x01,0x03,0xC7,0x17,0x00,0x83,0x46,0xB6,0x01,0xFD,0x16,0x63,0x55,0xD7,0x00,
+0x05,0x07,0xA3,0x80,0xE7,0x00,0x83,0x46,0xC6,0x01,0x03,0xC7,0x37,0x00,0xFD,0x16,
+0x63,0x55,0xD7,0x00,0x05,0x07,0xA3,0x81,0xE7,0x00,0x82,0x80,0x37,0x57,0x00,0x20,
+0x13,0x01,0xC1,0xFD,0x93,0x06,0x47,0x7E,0x85,0x67,0xB6,0x97,0x06,0xD0,0x22,0xCE,
+0x26,0xCC,0x83,0xC7,0x57,0x36,0x85,0x46,0x3A,0xC4,0x63,0x91,0xF6,0x08,0xB7,0x57,
+0x00,0x20,0x13,0x04,0x47,0x7E,0x03,0xA7,0x07,0xFF,0x83,0x46,0xE7,0x0F,0x09,0x47,
+0x63,0x96,0xE6,0x06,0x23,0x1A,0x01,0x00,0x81,0x44,0x83,0xA5,0x07,0xFF,0x03,0xC7,
+0xE5,0x0F,0x63,0xE3,0xE4,0x06,0x03,0x47,0x41,0x01,0x83,0x47,0x51,0x01,0x63,0x07,
+0xF7,0x04,0x63,0x6B,0xF7,0x0A,0x81,0x46,0x05,0x47,0x19,0x46,0xB3,0x87,0xC6,0x02,
+0x33,0x06,0xC7,0x02,0xAE,0x97,0x03,0xC5,0x37,0x10,0x85,0x47,0x2E,0x96,0x03,0x46,
+0x36,0x10,0x63,0x66,0xA6,0x00,0xB3,0x37,0xC5,0x00,0xB3,0x07,0xF0,0x40,0x19,0x46,
+0xB3,0x86,0xC6,0x02,0x33,0x07,0xC7,0x02,0xAE,0x96,0x83,0xC6,0x46,0x10,0x2E,0x97,
+0x03,0x47,0x47,0x10,0x63,0x6D,0xD7,0x06,0x63,0xE5,0xE6,0x1A,0x82,0x50,0x72,0x44,
+0xE2,0x44,0x13,0x01,0x41,0x02,0x82,0x80,0x19,0x47,0x33,0x87,0xE4,0x02,0x03,0x45,
+0x84,0x00,0xBA,0x95,0x83,0xC5,0x35,0x10,0x3A,0xC8,0x97,0x70,0xFF,0x1F,0xE7,0x80,
+0xE0,0x9D,0x3C,0x08,0x33,0x83,0x97,0x00,0xB7,0x57,0x00,0x20,0x83,0xA5,0x07,0xFF,
+0x42,0x47,0x83,0x46,0xC3,0xFF,0x2A,0xC6,0x2E,0x97,0x83,0x45,0x47,0x10,0x03,0x45,
+0x94,0x00,0x1A,0xC2,0x36,0xC0,0x97,0x70,0xFF,0x1F,0xE7,0x80,0x20,0x9B,0x32,0x46,
+0x82,0x46,0x12,0x43,0x32,0x95,0xAA,0x96,0x85,0x04,0x23,0x0E,0xD3,0xFE,0x93,0xF4,
+0xF4,0x0F,0xB7,0x57,0x00,0x20,0x15,0xBF,0x85,0x46,0x01,0x47,0xB9,0xB7,0x85,0x46,
+0xD1,0xD7,0x03,0x47,0x84,0x00,0x93,0xF7,0xF7,0x0F,0xB3,0x03,0xF7,0x00,0x93,0xF3,
+0xF3,0x0F,0x13,0x96,0x83,0x01,0x3A,0xC0,0x61,0x86,0xE3,0x49,0x06,0xF6,0x37,0x57,
+0x00,0x20,0x83,0x24,0x07,0x01,0x03,0xC7,0xB4,0x01,0xE3,0x51,0xE6,0xF6,0x9E,0x97,
+0xE2,0x07,0xE1,0x87,0xE3,0xCC,0x07,0xF4,0xE3,0xDA,0xE7,0xF4,0x03,0x47,0x94,0x00,
+0x93,0xF6,0xF6,0x0F,0xB3,0x02,0xD7,0x00,0x93,0xF2,0xF2,0x0F,0x13,0x93,0x82,0x01,
+0x3A,0xC2,0x13,0x53,0x83,0x41,0xE3,0x4B,0x03,0xF2,0x03,0xC5,0xC4,0x01,0xE3,0x57,
+0xA3,0xF2,0x96,0x96,0xE2,0x06,0xE1,0x86,0xE3,0xC2,0x06,0xF2,0xE3,0xD0,0xA6,0xF2,
+0x37,0xB7,0x00,0x20,0x03,0x25,0x47,0x2C,0x03,0xC7,0x94,0x01,0x83,0xD5,0xE5,0x01,
+0x33,0x03,0xE3,0x02,0xB3,0x04,0x66,0x00,0x86,0x04,0xAA,0x94,0x83,0x94,0x04,0x00,
+0xE3,0xCE,0xB4,0xEE,0x33,0x87,0xE6,0x02,0x3A,0x96,0x06,0x06,0x2A,0x96,0x83,0x16,
+0x06,0x00,0xE3,0xC5,0xD4,0xEE,0x3E,0x97,0x06,0x07,0x2A,0x97,0x03,0x17,0x07,0x00,
+0xE3,0xCE,0xE4,0xEC,0x9A,0x97,0x86,0x07,0xAA,0x97,0x83,0x97,0x07,0x00,0xE3,0xC7,
+0xF4,0xEC,0xB7,0x67,0x00,0x20,0x09,0x47,0x93,0x87,0x47,0x7E,0xA3,0x82,0xE7,0x36,
+0x82,0x47,0x22,0x47,0x23,0x07,0x74,0x00,0x23,0x02,0xF4,0x00,0x92,0x47,0xA3,0x07,
+0x54,0x00,0x23,0x03,0xF4,0x00,0x82,0x47,0xA3,0x02,0xF4,0x00,0x92,0x47,0xA3,0x03,
+0xF4,0x00,0xB7,0x57,0x00,0x20,0x93,0x87,0x87,0x7E,0x23,0x22,0xF7,0x7E,0x71,0x3B,
+0x03,0x47,0xE4,0x00,0x83,0x47,0xF4,0x00,0x82,0x50,0x23,0x05,0xE4,0x00,0xA3,0x05,
+0xE4,0x00,0x22,0x47,0x23,0x06,0xF4,0x00,0xA3,0x06,0xF4,0x00,0x72,0x44,0xB7,0x57,
+0x00,0x20,0xE2,0x44,0x93,0x87,0xE7,0x7E,0x23,0x22,0xF7,0x7E,0x13,0x01,0x41,0x02,
+0xAD,0xB3,0xFD,0x56,0xF1,0xB5,0x11,0x11,0xB7,0xB7,0x00,0x20,0x22,0xCA,0x03,0xA4,
+0x47,0x2C,0x02,0xC6,0x26,0xC8,0x06,0xCC,0x02,0xC2,0xB7,0x54,0x00,0x20,0x03,0xA7,
+0x04,0x01,0x92,0x47,0x03,0x47,0xC7,0x01,0x63,0xEA,0xE7,0x00,0x32,0x47,0xB7,0x67,
+0x00,0x20,0x93,0x87,0x47,0x7E,0x13,0x77,0xF7,0x0F,0xA1,0xA2,0x02,0xC4,0x37,0x57,
+0x00,0x20,0x83,0xA5,0x04,0x01,0xA2,0x47,0x03,0xC6,0xB5,0x01,0x63,0xE6,0xC7,0x00,
+0x92,0x47,0x85,0x07,0x3E,0xC2,0xE1,0xB7,0x92,0x46,0x83,0xC7,0x95,0x01,0x22,0x45,
+0xB3,0x86,0xD7,0x02,0xAA,0x96,0x37,0xF5,0x00,0x20,0x03,0x45,0x45,0x4F,0x36,0xC0,
+0x83,0x26,0x07,0xFF,0x63,0x0E,0x05,0x10,0x03,0xD5,0x06,0x02,0x82,0x46,0x86,0x06,
+0xA2,0x96,0x83,0x96,0x06,0x00,0x63,0xC8,0xA6,0x10,0x92,0x46,0x91,0xCE,0x02,0x45,
+0x82,0x46,0x06,0x05,0x9D,0x8E,0x86,0x06,0x22,0x95,0xA2,0x96,0x03,0x15,0x05,0x00,
+0x83,0x96,0x06,0x00,0x63,0x49,0xD5,0x0E,0xA2,0x46,0x89,0xCE,0x02,0x45,0x82,0x46,
+0x06,0x05,0x86,0x06,0x22,0x95,0xA2,0x96,0x03,0x15,0x05,0x00,0x83,0x96,0xE6,0xFF,
+0x63,0x4B,0xD5,0x0C,0x83,0xC6,0xC5,0x01,0x12,0x45,0xFD,0x16,0x63,0x8F,0xA6,0x00,
+0x82,0x46,0x82,0x45,0x86,0x06,0xAE,0x97,0x86,0x07,0xA2,0x96,0xA2,0x97,0x83,0x96,
+0x06,0x00,0x83,0x97,0x07,0x00,0x63,0xC8,0xF6,0x0A,0xA2,0x47,0x7D,0x16,0x63,0x0F,
+0xF6,0x00,0x82,0x46,0x82,0x47,0x86,0x06,0x85,0x07,0x86,0x07,0xA2,0x96,0xA2,0x97,
+0x83,0x96,0x06,0x00,0x83,0x97,0x07,0x00,0x63,0xC7,0xF6,0x08,0xB2,0x46,0x99,0x47,
+0xB7,0x55,0x00,0x20,0xB3,0x87,0xF6,0x02,0x13,0x86,0x45,0x7E,0x93,0x86,0x47,0x00,
+0xB2,0x96,0x23,0xA2,0xD5,0x7E,0xB2,0x46,0xB2,0x97,0x85,0x06,0x36,0xC6,0x82,0x46,
+0x86,0x06,0xA2,0x96,0x83,0xD5,0x06,0x00,0x85,0x05,0x23,0x90,0xB6,0x00,0xA2,0x46,
+0x23,0x82,0xD7,0x00,0xA2,0x46,0xA3,0x82,0xD7,0x00,0x92,0x46,0x23,0x83,0xD7,0x00,
+0x92,0x46,0xA3,0x83,0xD7,0x00,0xA2,0x46,0x23,0x84,0xD7,0x00,0x92,0x46,0xA3,0x84,
+0xD7,0x00,0x21,0x31,0xB2,0x46,0x37,0x57,0x00,0x20,0xAD,0x47,0x13,0x06,0x47,0x7E,
+0x37,0x57,0x00,0x20,0x63,0xF1,0xD7,0x02,0x32,0x47,0x85,0x67,0xB2,0x97,0x13,0x77,
+0xF7,0x0F,0xA3,0x82,0xE7,0x36,0xE2,0x40,0x52,0x44,0xC2,0x44,0x71,0x01,0x82,0x80,
+0x03,0xD5,0xE6,0x01,0xE5,0xB5,0xA2,0x47,0x85,0x07,0x3E,0xC4,0x5D,0xB5,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x47,0x7E,0x03,0x47,0x05,0x00,0x83,0xC6,0x07,0x00,0x63,0x74,
+0xD7,0x00,0x23,0x80,0xE7,0x00,0x03,0x47,0x15,0x00,0x83,0xC6,0x17,0x00,0x63,0xF4,
+0xE6,0x00,0xA3,0x80,0xE7,0x00,0x03,0x47,0x25,0x00,0x83,0xC6,0x27,0x00,0x63,0x74,
+0xD7,0x00,0x23,0x81,0xE7,0x00,0x03,0x47,0x35,0x00,0x83,0xC6,0x37,0x00,0x63,0xF4,
+0xE6,0x00,0xA3,0x81,0xE7,0x00,0x82,0x80,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,
+0x41,0x11,0x37,0x55,0x00,0x20,0x3E,0xC0,0x13,0x05,0x45,0x7E,0x85,0x67,0xAA,0x97,
+0x22,0xC6,0x26,0xC4,0x81,0x46,0x3E,0xC2,0x85,0x43,0x92,0x47,0x83,0xC7,0x57,0x36,
+0x63,0xE6,0xF6,0x00,0x32,0x44,0xA2,0x44,0x41,0x01,0x82,0x80,0x99,0x47,0x33,0x87,
+0xF6,0x02,0x33,0x93,0xD3,0x00,0x42,0x03,0x13,0x53,0x03,0x41,0x2A,0x97,0x03,0x46,
+0x67,0x00,0x03,0x44,0x77,0x00,0x63,0x76,0xC4,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,
+0xE9,0xB7,0x83,0x45,0x47,0x00,0x83,0x44,0x57,0x00,0x63,0xF6,0xB4,0x00,0x05,0x06,
+0x13,0x76,0xF6,0x0F,0xCD,0xB7,0x82,0x47,0x83,0xC7,0x97,0x01,0xB3,0x87,0xC7,0x02,
+0xAE,0x97,0x93,0x87,0x07,0x03,0x86,0x07,0xAA,0x97,0x83,0xD2,0x47,0x00,0x85,0x05,
+0x93,0xF5,0xF5,0x0F,0xB3,0x62,0x53,0x00,0x23,0x92,0x57,0x00,0xF9,0xB7,0x37,0x57,
+0x00,0x20,0x13,0x01,0xC1,0xFD,0x93,0x06,0x47,0x7E,0x85,0x67,0x22,0xCE,0xB6,0x97,
+0x06,0xD0,0x26,0xCC,0x3A,0xC2,0x13,0x04,0x47,0x7E,0x83,0xC7,0x57,0x36,0x37,0x67,
+0x00,0x20,0x13,0x07,0x47,0x7E,0x85,0x46,0x3A,0xC0,0x63,0x98,0xF6,0x2A,0xB7,0xF7,
+0x00,0x20,0x83,0xC7,0x37,0x4F,0x3E,0xC4,0x22,0x47,0x89,0x47,0x63,0x1F,0xF7,0x28,
+0xB7,0xB5,0x00,0x20,0x83,0xA7,0x45,0x2C,0x12,0x47,0x37,0x56,0x00,0x20,0x3E,0xC6,
+0x93,0x07,0x86,0x7E,0x23,0x22,0xF7,0x7E,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,
+0x03,0x43,0x54,0x00,0x83,0x42,0x44,0x00,0x83,0x43,0x74,0x00,0x83,0x44,0x64,0x00,
+0x13,0x06,0x86,0x7E,0x03,0xC5,0xE7,0x0F,0x01,0x47,0x93,0x87,0xF7,0x0F,0x81,0x46,
+0x2E,0xC8,0x32,0xCA,0x63,0xE1,0xA6,0x26,0x85,0x44,0x63,0xF8,0xE4,0x24,0xE5,0x39,
+0x82,0x47,0x83,0xC7,0x57,0x36,0x63,0xE8,0xF4,0x14,0x83,0x45,0x54,0x00,0x03,0x45,
+0x44,0x00,0x81,0x44,0x97,0x60,0xFF,0x1F,0xE7,0x80,0x40,0x53,0x91,0x47,0x63,0xF7,
+0xA7,0x08,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x03,0x47,0x94,0x00,0x81,0x46,
+0x83,0xC7,0x97,0x01,0x01,0x46,0xA9,0x43,0xB3,0x87,0xE7,0x02,0x03,0x47,0x84,0x00,
+0x99,0x40,0x95,0x42,0xBA,0x97,0xC2,0x07,0x32,0x47,0xC1,0x83,0x86,0x07,0xBA,0x97,
+0xBE,0x85,0x01,0x47,0x09,0x45,0x63,0x06,0xA6,0x02,0x03,0x95,0xC5,0xFF,0x03,0x93,
+0x07,0x00,0xB3,0x04,0x75,0x02,0x33,0x03,0x13,0x02,0x63,0x55,0x93,0x00,0x85,0x06,
+0x93,0xF6,0xF6,0x0F,0x2A,0x83,0x63,0x53,0xE5,0x00,0x3A,0x83,0x13,0x17,0x03,0x01,
+0x41,0x87,0x05,0x06,0x42,0x06,0x41,0x82,0x89,0x05,0xE3,0x15,0x56,0xFC,0x0D,0x46,
+0x85,0x44,0x63,0x6D,0xD6,0x00,0x81,0x44,0x63,0x9A,0xC6,0x00,0xA9,0x44,0x33,0x07,
+0x97,0x02,0x83,0x94,0x07,0x00,0x8E,0x04,0xB3,0xA4,0xE4,0x00,0x83,0x45,0x74,0x00,
+0x03,0x45,0x64,0x00,0x97,0x60,0xFF,0x1F,0xE7,0x80,0x40,0x49,0x91,0x47,0x63,0xF4,
+0xA7,0x1C,0x63,0x94,0x04,0x1C,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0x42,
+0x94,0x00,0x83,0x43,0x84,0x00,0x03,0xC6,0x97,0x01,0x32,0x47,0x81,0x46,0xB3,0x87,
+0xC2,0x02,0x06,0x06,0x9E,0x97,0xC2,0x07,0xC1,0x83,0x93,0x95,0x17,0x00,0x91,0x8F,
+0x86,0x07,0xBA,0x95,0xBA,0x97,0x01,0x47,0x09,0x45,0x63,0x8A,0xA6,0x02,0x03,0x95,
+0x07,0x00,0x29,0x43,0x99,0x40,0x33,0x03,0x65,0x02,0x1A,0xC6,0x03,0x93,0x05,0x00,
+0x33,0x03,0x13,0x02,0xB2,0x40,0x63,0x55,0x13,0x00,0x85,0x04,0x93,0xF4,0xF4,0x0F,
+0x2A,0x83,0x63,0x53,0xE5,0x00,0x3A,0x83,0x13,0x17,0x03,0x01,0x41,0x87,0x85,0x06,
+0xC2,0x06,0xC1,0x82,0x15,0x45,0xB2,0x97,0xE3,0x90,0xA6,0xFC,0x8D,0x47,0x63,0xE6,
+0x97,0x1C,0x63,0x9A,0xF4,0x00,0xA9,0x47,0x33,0x07,0xF7,0x02,0x83,0x97,0x05,0x00,
+0x8E,0x07,0x63,0xCC,0xE7,0x1A,0xEF,0xF0,0x7F,0x95,0xB7,0xF7,0x00,0x20,0x03,0xD6,
+0x47,0x2F,0x37,0x65,0x00,0x20,0x81,0x45,0x06,0x06,0x13,0x05,0x85,0x84,0xEF,0x60,
+0x8F,0x9F,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x03,0xC2,0x47,0x05,0x66,0x93,0x04,
+0x66,0x2B,0x83,0xA7,0x47,0x2C,0x93,0x03,0x86,0x2B,0x23,0x82,0x06,0x0A,0x3E,0xC2,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x01,0x47,0x13,0x06,0xA6,0x2B,0x3E,0xC4,
+0x85,0x40,0xA2,0x87,0x82,0x45,0x99,0x07,0x83,0xC5,0x55,0x36,0x63,0x6C,0xB7,0x16,
+0x82,0x47,0x02,0x47,0x83,0xC7,0x57,0x36,0x23,0x03,0xF7,0x36,0x31,0x3B,0x82,0x47,
+0x09,0x47,0x83,0xC7,0x57,0x36,0x63,0x12,0xF7,0x08,0x83,0x45,0xE4,0x00,0x03,0x45,
+0x84,0x00,0x97,0x60,0xFF,0x1F,0xE7,0x80,0x60,0x37,0xAA,0x84,0x83,0x45,0xF4,0x00,
+0x03,0x45,0x94,0x00,0x97,0x60,0xFF,0x1F,0xE7,0x80,0x40,0x36,0x93,0xF7,0xF4,0x0F,
+0x05,0x47,0x63,0x9C,0xE7,0x04,0x13,0x75,0xF5,0x0F,0x63,0x18,0xF5,0x04,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0x03,0x47,0xE4,0x00,0x83,0xC6,0x97,0x01,0x83,0x47,
+0xF4,0x00,0xB3,0x87,0xD7,0x02,0xBA,0x97,0x93,0x87,0x07,0x03,0x86,0x07,0xA2,0x97,
+0x03,0xD7,0x47,0x00,0x79,0x9B,0x23,0x92,0xE7,0x00,0x83,0x47,0x94,0x00,0x03,0x47,
+0x84,0x00,0xB3,0x87,0xD7,0x02,0xBA,0x97,0x93,0x87,0x07,0x03,0x86,0x07,0x3E,0x94,
+0x83,0x57,0x44,0x00,0xF5,0x9B,0x23,0x12,0xF4,0x00,0x82,0x50,0x72,0x44,0xE2,0x44,
+0x13,0x01,0x41,0x02,0x82,0x80,0x03,0xC6,0x07,0x00,0x63,0x61,0xC3,0x02,0x03,0xC6,
+0x17,0x00,0x63,0x6D,0x56,0x00,0x03,0xC6,0x27,0x00,0x63,0xE9,0xC3,0x00,0x03,0xC6,
+0x37,0x00,0x63,0x65,0x96,0x00,0x05,0x07,0x13,0x77,0xF7,0x0F,0x85,0x06,0xC2,0x06,
+0xC1,0x82,0x99,0x07,0x85,0xBB,0xE3,0x88,0x04,0xEC,0x83,0x47,0x84,0x00,0x85,0x07,
+0x23,0x07,0xF4,0x00,0x83,0x47,0x94,0x00,0xA3,0x07,0xF4,0x00,0x85,0x47,0x3E,0xC4,
+0x83,0x47,0xE4,0x00,0x12,0x47,0x23,0x05,0xF4,0x00,0xA3,0x05,0xF4,0x00,0x83,0x47,
+0xF4,0x00,0x23,0x06,0xF4,0x00,0xA3,0x06,0xF4,0x00,0xB7,0x57,0x00,0x20,0x93,0x87,
+0xE7,0x7E,0x23,0x22,0xF7,0x7E,0xEF,0xF0,0x4F,0xF9,0x22,0x47,0x85,0x47,0x63,0x15,
+0xF7,0x04,0x83,0x47,0x84,0x00,0xFD,0x17,0x23,0x04,0xF4,0x00,0x83,0x47,0x84,0x00,
+0x52,0x47,0x23,0x02,0xF4,0x00,0xA3,0x02,0xF4,0x00,0x83,0x47,0x94,0x00,0x23,0x03,
+0xF4,0x00,0xA3,0x03,0xF4,0x00,0x92,0x47,0x23,0xA2,0xE7,0x7E,0xEF,0xF0,0xEF,0xF5,
+0x02,0x47,0x89,0x47,0xA3,0x02,0xF7,0x36,0xB9,0xB5,0x93,0x87,0x12,0x00,0x23,0x07,
+0x74,0x00,0xA3,0x07,0xF4,0x00,0x69,0xB7,0x83,0x47,0x94,0x00,0xFD,0x17,0xA3,0x04,
+0xF4,0x00,0x6D,0xBF,0x83,0xC2,0x27,0x00,0xB3,0x85,0x97,0x00,0x12,0x45,0x23,0x90,
+0x55,0x00,0x03,0xC3,0x37,0x00,0xB3,0x85,0x77,0x00,0x05,0x07,0x23,0x90,0x65,0x00,
+0xA2,0x45,0x42,0x07,0x41,0x83,0x83,0xC5,0x95,0x01,0xB3,0x85,0x65,0x02,0x96,0x95,
+0x86,0x05,0xAA,0x95,0x03,0x95,0x05,0x00,0xB3,0x85,0xC7,0x00,0x23,0x90,0xA5,0x00,
+0x83,0xC5,0x46,0x0A,0x13,0x85,0x05,0x04,0x06,0x05,0x36,0x95,0x23,0x11,0x15,0x00,
+0x13,0x95,0x15,0x00,0x36,0x95,0x23,0x01,0x55,0x06,0xA3,0x01,0x65,0x06,0x85,0x05,
+0x23,0x82,0xB6,0x0A,0x05,0xB5,0xB7,0x55,0x00,0x20,0x41,0x11,0x13,0x87,0x45,0x7E,
+0x85,0x67,0x22,0xC4,0x26,0xC2,0xBA,0x97,0x06,0xC6,0x83,0xC6,0x57,0x36,0xB7,0x57,
+0x00,0x20,0x03,0xA7,0x07,0xFF,0x93,0x85,0x45,0x7E,0x01,0x44,0x23,0x0F,0xD7,0x0E,
+0xBE,0x84,0x03,0xA5,0x04,0xFF,0x13,0x87,0x65,0x00,0x83,0x47,0xE5,0x0F,0x63,0x67,
+0xF4,0x00,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0x99,0x47,0xB3,0x07,
+0xF4,0x02,0x91,0x05,0x19,0x46,0x3A,0xC0,0x05,0x04,0x93,0x87,0xF7,0x0F,0x3E,0x95,
+0x97,0x60,0xFF,0x1F,0xE7,0x80,0x40,0x11,0x02,0x47,0xBA,0x85,0xD9,0xB7,0xB7,0x57,
+0x00,0x20,0x03,0xA7,0x07,0x01,0x13,0x01,0x41,0xFB,0xA2,0xC4,0xA6,0xC2,0x03,0x46,
+0xB7,0x01,0x83,0x46,0xC7,0x01,0x93,0x17,0x86,0x01,0x63,0xE4,0xC6,0x00,0x93,0x97,
+0x86,0x01,0xE1,0x87,0x3E,0xDC,0x85,0x47,0x33,0x95,0xA7,0x00,0xB7,0x57,0x00,0x20,
+0x83,0xA4,0x47,0x7E,0x42,0x05,0x3D,0x66,0x83,0x87,0x04,0x00,0x13,0x06,0x86,0xE3,
+0x41,0x81,0x3E,0xCE,0x83,0x87,0x24,0x00,0x32,0xC0,0x37,0x06,0x00,0x80,0x3E,0xD0,
+0x82,0x56,0x83,0x47,0x97,0x01,0x01,0x43,0x81,0x45,0xB3,0x87,0xD7,0x02,0xF2,0x46,
+0x13,0x44,0xF6,0xFF,0xF9,0x53,0xB6,0x97,0xB7,0xB6,0x00,0x20,0x83,0xA6,0x46,0x2C,
+0x86,0x07,0xBE,0x96,0x36,0xC4,0xB7,0x66,0x00,0x20,0x93,0x86,0x86,0x84,0xB6,0x97,
+0x3E,0xC2,0x83,0xD7,0x07,0x00,0x92,0x46,0xC9,0x8F,0x23,0x90,0xF6,0x00,0x81,0x46,
+0x93,0x07,0xF0,0x0F,0xB3,0xD2,0x67,0x40,0x13,0x16,0x83,0x01,0x93,0xF2,0x12,0x00,
+0x61,0x86,0x63,0x86,0x02,0x04,0x7D,0x16,0x13,0x76,0xF6,0x0F,0x99,0x42,0x63,0xE7,
+0xC2,0x00,0x82,0x42,0x0A,0x06,0x16,0x96,0x10,0x42,0x02,0x86,0x03,0x46,0xB7,0x01,
+0xF2,0x42,0x7D,0x16,0x63,0xD5,0xC2,0x10,0x22,0x46,0x03,0x16,0x26,0x00,0x63,0x4D,
+0x06,0x0E,0x12,0x46,0x92,0x42,0x93,0xE6,0x16,0x00,0x03,0x56,0x26,0x00,0x49,0x8E,
+0x23,0x91,0xC2,0x00,0x03,0xC6,0x14,0x00,0x05,0x06,0xA3,0x80,0xC4,0x00,0x05,0x03,
+0x21,0x46,0xE3,0x11,0xC3,0xFA,0x93,0xC6,0xF6,0xFF,0xF5,0x8D,0x93,0xF6,0x15,0x00,
+0x91,0xC6,0x83,0xC6,0x14,0x00,0x85,0x06,0xA3,0x80,0xD4,0x00,0x93,0xF6,0x25,0x00,
+0x91,0xC6,0x83,0xC6,0x24,0x00,0xFD,0x16,0x23,0x81,0xD4,0x00,0x93,0xF6,0x45,0x00,
+0x91,0xC6,0x83,0xC6,0x04,0x00,0xFD,0x16,0x23,0x80,0xD4,0x00,0xA1,0x89,0x91,0xC5,
+0x83,0xC6,0x34,0x00,0x85,0x06,0xA3,0x81,0xD4,0x00,0x63,0x80,0x07,0x28,0xB7,0x76,
+0x00,0x20,0x83,0xC6,0xC6,0xB7,0x05,0x46,0x32,0xCC,0x36,0xD4,0xB7,0xF6,0x00,0x20,
+0x83,0x96,0xC6,0x39,0x3D,0x66,0x13,0x06,0x46,0xE5,0x36,0xC8,0xB7,0x56,0x00,0x20,
+0x83,0x96,0x46,0x03,0xB2,0xC0,0x36,0xC0,0x03,0x46,0x81,0x01,0x93,0x05,0x16,0x00,
+0x93,0x96,0x85,0x01,0xE2,0x55,0xE1,0x86,0x36,0xCA,0x63,0xD0,0xB6,0x24,0xE2,0x45,
+0x37,0x04,0x00,0x80,0x13,0x43,0xF4,0xFF,0x85,0x05,0x2E,0xC6,0xE2,0x45,0x33,0x06,
+0xC0,0x40,0x62,0x06,0xB3,0x85,0x65,0x02,0x61,0x86,0x02,0xD2,0x32,0xD6,0xA2,0x95,
+0x2E,0xDE,0x92,0x55,0x03,0x06,0x41,0x02,0xB3,0xD5,0xB7,0x40,0x85,0x89,0x63,0x8C,
+0x05,0x1E,0x7D,0x16,0x13,0x76,0xF6,0x0F,0x99,0x45,0x63,0xE5,0xC5,0x1A,0x86,0x45,
+0x0A,0x06,0x2E,0x96,0x10,0x42,0x02,0x86,0x93,0xF7,0xE7,0x0F,0x0D,0xB7,0x93,0xF7,
+0xE7,0x06,0x31,0xBF,0x02,0x56,0x63,0x50,0xC0,0x04,0x03,0x46,0x97,0x01,0xA2,0x42,
+0x06,0x06,0x33,0x06,0xC0,0x40,0xB2,0x92,0x83,0x92,0x02,0x00,0x63,0xC2,0x02,0x02,
+0x92,0x42,0x93,0xE6,0x26,0x00,0x16,0x96,0x83,0x52,0x06,0x00,0xB3,0x62,0x55,0x00,
+0x23,0x10,0x56,0x00,0x03,0xC6,0x24,0x00,0x7D,0x16,0x23,0x81,0xC4,0x00,0xC5,0xB5,
+0x93,0xF7,0xD7,0x0F,0xE9,0xBD,0x93,0xF7,0xD7,0x0C,0xD1,0xBD,0x72,0x46,0x63,0x59,
+0xC0,0x02,0x22,0x46,0x03,0x16,0xE6,0xFF,0x63,0x41,0x06,0x02,0x12,0x46,0x92,0x42,
+0x93,0xE6,0x46,0x00,0x03,0x56,0xE6,0xFF,0x49,0x8E,0x23,0x9F,0xC2,0xFE,0x03,0xC6,
+0x04,0x00,0x7D,0x16,0x23,0x80,0xC4,0x00,0x5D,0xB5,0x93,0xF7,0xB7,0x0F,0x45,0xB5,
+0x93,0xF7,0xB7,0x09,0x69,0xBD,0x03,0x46,0xC7,0x01,0x82,0x52,0x7D,0x16,0x63,0xDE,
+0xC2,0x02,0x03,0x46,0x97,0x01,0xA2,0x42,0x06,0x06,0xB2,0x92,0x83,0x92,0x02,0x00,
+0x63,0xC2,0x02,0x02,0x92,0x42,0x93,0xE6,0x86,0x00,0x16,0x96,0x83,0x52,0x06,0x00,
+0xB3,0x62,0x55,0x00,0x23,0x10,0x56,0x00,0x03,0xC6,0x34,0x00,0x05,0x06,0xA3,0x81,
+0xC4,0x00,0xB1,0xBD,0x93,0xF7,0x77,0x0F,0x99,0xBD,0x93,0xF7,0x77,0x03,0x81,0xBD,
+0x03,0x46,0x97,0x01,0xA2,0x42,0x33,0x06,0x76,0x02,0x09,0x06,0xB2,0x92,0x83,0x92,
+0x02,0x00,0x63,0xCD,0x02,0x00,0x92,0x42,0x93,0xE5,0x35,0x00,0x16,0x96,0x83,0x52,
+0x06,0x00,0xB3,0x62,0x55,0x00,0x23,0x10,0x56,0x00,0x15,0xB5,0x93,0xF7,0xF7,0x0E,
+0x39,0xBD,0x03,0x46,0x97,0x01,0xA2,0x42,0x05,0x06,0x33,0x06,0x76,0x02,0xB2,0x92,
+0x83,0x92,0x02,0x00,0x63,0xCD,0x02,0x00,0x92,0x42,0x93,0xE5,0x65,0x00,0x16,0x96,
+0x83,0x52,0x06,0x00,0xB3,0x62,0x55,0x00,0x23,0x10,0x56,0x00,0xCD,0xBB,0x93,0xF7,
+0xF7,0x0D,0xF5,0xB3,0x03,0x46,0x97,0x01,0xA2,0x42,0x22,0x96,0x06,0x06,0xB2,0x92,
+0x83,0x92,0x02,0x00,0x63,0xCD,0x02,0x00,0x92,0x42,0x93,0xE5,0xC5,0x00,0x16,0x96,
+0x83,0x52,0x06,0x00,0xB3,0x62,0x55,0x00,0x23,0x10,0x56,0x00,0xC9,0xB3,0x93,0xF7,
+0xF7,0x0B,0x75,0xBB,0x03,0x46,0x97,0x01,0xA2,0x42,0x05,0x06,0x06,0x06,0xB2,0x92,
+0x83,0x92,0x02,0x00,0x63,0xCD,0x02,0x00,0x92,0x42,0x93,0xE5,0x95,0x00,0x16,0x96,
+0x83,0x52,0x06,0x00,0xB3,0x62,0x55,0x00,0x23,0x10,0x56,0x00,0x49,0xBB,0x93,0xF7,
+0xF7,0x07,0x71,0xB3,0xB2,0x45,0x03,0x46,0xB7,0x01,0x0D,0x8E,0xF2,0x45,0x63,0xDF,
+0xC5,0x0A,0xE2,0x45,0x03,0x46,0x97,0x01,0x62,0x44,0x32,0x53,0x33,0x06,0xB6,0x02,
+0xB2,0x45,0x33,0x86,0xC5,0x40,0xA2,0x45,0x06,0x06,0xB3,0x82,0xC5,0x00,0x92,0x45,
+0x2E,0x96,0x82,0x55,0xB3,0x83,0x85,0x40,0x81,0x45,0xD2,0x46,0x63,0x44,0xD3,0x02,
+0xA5,0xED,0x93,0xF7,0xE7,0x0F,0x92,0x56,0x21,0x46,0x85,0x06,0x36,0xD2,0xE3,0x9A,
+0xC6,0xDE,0xB2,0x46,0x36,0xCC,0xE3,0x99,0x07,0xDA,0x26,0x44,0x96,0x44,0x13,0x01,
+0xC1,0x04,0x82,0x80,0x63,0xCF,0x03,0x02,0x03,0x44,0xC7,0x01,0x63,0xDB,0x83,0x02,
+0x03,0x54,0xE6,0xFF,0x69,0x8C,0x15,0xC4,0x03,0x94,0x02,0x00,0xC2,0x46,0x22,0xD8,
+0x63,0x41,0xD4,0x02,0x82,0x46,0x03,0x94,0xE2,0xFF,0x36,0x94,0xC2,0x56,0x63,0xDA,
+0x86,0x00,0x03,0x54,0x06,0x00,0x85,0x05,0xE2,0x05,0x49,0x8C,0xE1,0x85,0x23,0x10,
+0x86,0x00,0x03,0x44,0x97,0x01,0x05,0x03,0x62,0x03,0x06,0x04,0xA2,0x92,0x22,0x96,
+0x13,0x53,0x83,0x41,0x85,0x03,0x51,0xB7,0xD2,0x46,0x09,0x46,0xE3,0x95,0xC6,0xF8,
+0x03,0xC6,0x14,0x00,0x05,0x06,0xA3,0x80,0xC4,0x00,0xB5,0xBF,0x93,0xF7,0xE7,0x06,
+0x9D,0xBF,0xD2,0x46,0x02,0x56,0x63,0x49,0xD6,0x0A,0xB2,0x46,0x03,0x46,0x97,0x01,
+0xE2,0x45,0xB2,0x52,0x33,0x06,0xD6,0x02,0xF2,0x56,0x01,0x43,0x33,0x86,0xC6,0x40,
+0xA2,0x46,0x06,0x06,0xB3,0x83,0xC6,0x00,0x92,0x46,0x36,0x96,0xF2,0x46,0x33,0x84,
+0xB6,0x40,0xD2,0x46,0x63,0xC7,0xD2,0x00,0x63,0x16,0x03,0x06,0x93,0xF7,0xD7,0x0F,
+0x1D,0xBF,0x63,0x49,0x04,0x04,0x83,0x45,0xB7,0x01,0x63,0x55,0xB4,0x04,0x83,0x45,
+0x97,0x01,0x93,0x96,0x15,0x00,0x36,0xD8,0xB2,0x96,0x83,0xD6,0x06,0x00,0xE9,0x8E,
+0x95,0xCA,0x83,0x96,0x03,0x00,0xC2,0x45,0x36,0xDA,0x63,0xC5,0xB6,0x02,0xC2,0x56,
+0xB3,0x85,0xD3,0x00,0x83,0x95,0x05,0x00,0x82,0x46,0xB6,0x95,0xD2,0x56,0x63,0xDB,
+0xB6,0x00,0x83,0x55,0x06,0x00,0x05,0x03,0x62,0x03,0xC9,0x8D,0x13,0x53,0x83,0x41,
+0x23,0x10,0xB6,0x00,0x85,0x02,0xE2,0x02,0x89,0x03,0x09,0x06,0x93,0xD2,0x82,0x41,
+0x05,0x04,0x41,0xBF,0xD2,0x46,0x09,0x46,0xE3,0x97,0xC6,0xEC,0x03,0xC6,0x24,0x00,
+0x7D,0x16,0x23,0x81,0xC4,0x00,0xC1,0xB5,0x93,0xF7,0xD7,0x0C,0x6D,0xBD,0xD2,0x46,
+0x72,0x46,0x63,0x42,0xD6,0x0A,0xE2,0x46,0x03,0x46,0x97,0x01,0xE2,0x45,0x32,0x53,
+0x33,0x06,0xD6,0x02,0xB2,0x46,0x36,0x96,0xA2,0x46,0x06,0x06,0x33,0x06,0xC0,0x40,
+0xB3,0x82,0xC6,0x00,0x92,0x46,0x36,0x96,0x82,0x56,0xB3,0x83,0xB6,0x40,0x81,0x45,
+0xD2,0x46,0x63,0x46,0xD3,0x00,0xB1,0xED,0x93,0xF7,0xB7,0x0F,0xAD,0xBD,0x63,0xCF,
+0x03,0x02,0x03,0x44,0xC7,0x01,0x63,0xDB,0x83,0x02,0x03,0x54,0x26,0x00,0x69,0x8C,
+0x15,0xC4,0x83,0x96,0x02,0x00,0x42,0x44,0x36,0xD8,0x63,0xC1,0x86,0x02,0x82,0x46,
+0x03,0x94,0x22,0x00,0x36,0x94,0xC2,0x56,0x63,0xDA,0x86,0x00,0x03,0x54,0x06,0x00,
+0x85,0x05,0xE2,0x05,0x49,0x8C,0xE1,0x85,0x23,0x10,0x86,0x00,0x03,0x44,0x97,0x01,
+0x05,0x03,0x62,0x03,0x06,0x04,0xA2,0x92,0x22,0x96,0x13,0x53,0x83,0x41,0x85,0x03,
+0x45,0xB7,0xD2,0x46,0x09,0x46,0xE3,0x90,0xC6,0xE2,0x03,0xC6,0x04,0x00,0x7D,0x16,
+0x23,0x80,0xC4,0x00,0x09,0xBD,0x93,0xF7,0xB7,0x09,0x31,0xB5,0xB2,0x46,0x03,0x46,
+0xC7,0x01,0x15,0x8E,0x82,0x56,0x63,0xD9,0xC6,0x0A,0xB2,0x46,0x03,0x46,0x97,0x01,
+0xE2,0x45,0xB2,0x52,0x33,0x06,0xD6,0x02,0xF2,0x56,0x01,0x43,0x36,0x96,0xA2,0x46,
+0x06,0x06,0x33,0x84,0xC6,0x00,0x92,0x46,0x36,0x96,0xF2,0x46,0xB3,0x83,0xB6,0x40,
+0xD2,0x46,0x63,0xC7,0xD2,0x00,0x63,0x17,0x03,0x06,0x93,0xF7,0x77,0x0F,0xE1,0xB3,
+0x63,0xCA,0x03,0x04,0x83,0x45,0xB7,0x01,0x63,0xD6,0xB3,0x04,0x83,0x45,0x97,0x01,
+0x86,0x05,0xB3,0x06,0xB0,0x40,0x36,0xD8,0xB2,0x96,0x83,0xD6,0x06,0x00,0xE9,0x8E,
+0x95,0xCA,0x83,0x16,0x04,0x00,0xC2,0x45,0x36,0xDA,0x63,0xC5,0xB6,0x02,0xC2,0x56,
+0xB3,0x05,0xD4,0x00,0x83,0x95,0x05,0x00,0x82,0x46,0xB6,0x95,0xD2,0x56,0x63,0xDB,
+0xB6,0x00,0x83,0x55,0x06,0x00,0x05,0x03,0x62,0x03,0xC9,0x8D,0x13,0x53,0x83,0x41,
+0x23,0x10,0xB6,0x00,0x85,0x02,0xE2,0x02,0x09,0x04,0x09,0x06,0x93,0xD2,0x82,0x41,
+0x85,0x03,0x79,0xB7,0xD2,0x46,0x09,0x46,0xE3,0x9F,0xC6,0xD4,0x03,0xC6,0x34,0x00,
+0x05,0x06,0xA3,0x81,0xC4,0x00,0x81,0xBB,0x93,0xF7,0x77,0x03,0xA9,0xB3,0xB2,0x46,
+0x83,0x45,0x97,0x01,0x33,0x86,0xB6,0x02,0x33,0x86,0xC6,0x40,0xA2,0x46,0x06,0x06,
+0x33,0x83,0xC6,0x00,0x92,0x46,0x36,0x96,0x83,0x52,0xE6,0xFF,0xA2,0x56,0xB3,0x72,
+0x55,0x00,0xB9,0xC2,0x63,0x88,0x02,0x06,0x86,0x05,0xB3,0x02,0xB6,0x00,0x83,0xD2,
+0x02,0x00,0xB3,0x72,0x55,0x00,0x63,0x8F,0x02,0x04,0x83,0x12,0x03,0x00,0xC2,0x46,
+0x63,0xCA,0xD2,0x04,0x83,0x13,0xE3,0xFF,0x82,0x46,0xB6,0x93,0x63,0xC8,0x72,0x00,
+0x9A,0x95,0x83,0x95,0x05,0x00,0xB6,0x95,0x63,0xDE,0xB2,0x02,0x83,0x55,0x06,0x00,
+0xC9,0x8D,0x23,0x10,0xB6,0x00,0xC5,0xB1,0x63,0x86,0x02,0x02,0x86,0x05,0xB3,0x02,
+0xB6,0x00,0x83,0xD2,0x02,0x00,0xB3,0x72,0x55,0x00,0x63,0x8D,0x02,0x00,0x83,0x12,
+0x03,0x00,0xC2,0x46,0x63,0xC8,0xD2,0x00,0x83,0x13,0xE3,0xFF,0x82,0x46,0xB6,0x93,
+0xE3,0xC0,0x72,0xFC,0x93,0xF7,0xF7,0x0E,0x7D,0xB1,0xB2,0x46,0x83,0x45,0x97,0x01,
+0x33,0x86,0xD5,0x02,0x36,0x96,0xA2,0x46,0x06,0x06,0x33,0x06,0xC0,0x40,0x33,0x83,
+0xC6,0x00,0x92,0x46,0x36,0x96,0x83,0x52,0x26,0x00,0xA2,0x56,0xB3,0x72,0x55,0x00,
+0x95,0xCE,0x63,0x83,0x02,0x06,0x86,0x05,0xB3,0x02,0xB6,0x00,0x83,0xD2,0x02,0x00,
+0xB3,0x72,0x55,0x00,0x63,0x8A,0x02,0x04,0x83,0x12,0x03,0x00,0xC2,0x46,0x63,0xC5,
+0xD2,0x04,0x83,0x13,0x23,0x00,0x82,0x46,0xB6,0x93,0xE3,0xC9,0x72,0xF6,0x9A,0x95,
+0x83,0x95,0x05,0x00,0xB6,0x95,0x63,0xD9,0xB2,0x02,0x8D,0xB7,0x63,0x86,0x02,0x02,
+0x86,0x05,0xB3,0x02,0xB6,0x00,0x83,0xD2,0x02,0x00,0xB3,0x72,0x55,0x00,0x63,0x8D,
+0x02,0x00,0x83,0x12,0x03,0x00,0xC2,0x46,0x63,0xC8,0xD2,0x00,0x83,0x13,0x23,0x00,
+0x82,0x46,0xB6,0x93,0xE3,0xC5,0x72,0xFC,0x93,0xF7,0xF7,0x0D,0x29,0xB9,0xB2,0x46,
+0x03,0x46,0x97,0x01,0x33,0x03,0xD6,0x02,0x33,0x03,0xD3,0x40,0xA2,0x46,0x06,0x03,
+0xB3,0x82,0x66,0x00,0x92,0x46,0x36,0x93,0x83,0x55,0x23,0x00,0xA2,0x56,0xE9,0x8D,
+0xB1,0xC2,0xB5,0xC9,0x06,0x06,0xB3,0x05,0xC0,0x40,0x33,0x06,0xB3,0x00,0x03,0x56,
+0x06,0x00,0x69,0x8E,0x2D,0xC2,0x83,0x93,0x02,0x00,0xC2,0x46,0x63,0xCD,0xD3,0x04,
+0x03,0x96,0x22,0x00,0x82,0x46,0x36,0x96,0x63,0xC8,0xC3,0x00,0x96,0x95,0x03,0x96,
+0x05,0x00,0x36,0x96,0x63,0xD1,0xC3,0x04,0x03,0x56,0x03,0x00,0x49,0x8E,0x23,0x10,
+0xC3,0x00,0x55,0xBE,0x8D,0xC9,0x06,0x06,0x33,0x06,0xC0,0x40,0xB3,0x05,0xC3,0x00,
+0x83,0xD5,0x05,0x00,0xE9,0x8D,0x85,0xC1,0x83,0x93,0x02,0x00,0xC2,0x46,0x63,0xCC,
+0xD3,0x00,0x83,0x95,0x22,0x00,0x82,0x46,0xB6,0x95,0x63,0xD6,0xB3,0x00,0x16,0x96,
+0x03,0x16,0x06,0x00,0x7D,0xBF,0x93,0xF7,0xF7,0x0B,0xB5,0xBE,0xB2,0x46,0x03,0x46,
+0x97,0x01,0x33,0x83,0xC6,0x02,0x36,0x93,0xA2,0x46,0x06,0x03,0xB3,0x82,0x66,0x00,
+0x92,0x46,0x36,0x93,0x83,0x55,0xE3,0xFF,0xA2,0x56,0xE9,0x8D,0x9D,0xCE,0x9D,0xC9,
+0x06,0x06,0xB3,0x05,0xC0,0x40,0x33,0x06,0xB3,0x00,0x03,0x56,0x06,0x00,0x69,0x8E,
+0x15,0xC2,0x83,0x93,0x02,0x00,0xC2,0x46,0x63,0xCE,0xD3,0x00,0x03,0x96,0xE2,0xFF,
+0x82,0x46,0x36,0x96,0xE3,0xCA,0xC3,0xF6,0x96,0x95,0x03,0x96,0x05,0x00,0x36,0x96,
+0xE3,0xC4,0xC3,0xF6,0x93,0xF7,0xF7,0x07,0x39,0xBE,0xED,0xDD,0x06,0x06,0x33,0x06,
+0xC0,0x40,0xB3,0x05,0xC3,0x00,0x83,0xD5,0x05,0x00,0xE9,0x8D,0xE5,0xD5,0x83,0x93,
+0x02,0x00,0xC2,0x46,0xE3,0xC0,0xD3,0xFE,0x83,0x95,0xE2,0xFF,0x82,0x46,0xB6,0x95,
+0xE3,0xDA,0xB3,0xFC,0x16,0x96,0x03,0x16,0x06,0x00,0xD1,0xB7,0x11,0x11,0xB7,0xB7,
+0x00,0x20,0x22,0xCA,0x03,0xA4,0x47,0x2C,0xB7,0xF7,0x00,0x20,0x03,0xD6,0x47,0x2F,
+0x37,0x65,0x00,0x20,0x81,0x45,0x06,0x06,0x13,0x05,0x85,0x84,0x06,0xCC,0x26,0xC8,
+0x23,0x17,0x01,0x00,0xEF,0x50,0x2F,0xE9,0xB7,0x52,0x00,0x20,0xA3,0x03,0x01,0x00,
+0x83,0xA6,0x02,0x03,0x83,0x47,0x71,0x00,0xB7,0x54,0x00,0x20,0x03,0xC7,0x46,0x0A,
+0x63,0xE2,0xE7,0x0A,0x03,0x57,0xE1,0x00,0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,
+0x13,0x77,0xF7,0x0F,0xA3,0x82,0xE7,0x36,0x03,0x57,0xE1,0x00,0x23,0x83,0xE7,0x36,
+0x37,0xF7,0x00,0x20,0x03,0x47,0x47,0x4F,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,
+0x63,0x07,0x07,0x18,0x83,0xD5,0x07,0x04,0x03,0xD4,0xC7,0x03,0x05,0x45,0xEF,0x70,
+0x5F,0xC0,0x2A,0xC0,0xA2,0x85,0x01,0x45,0xEF,0x70,0xBF,0xBF,0xB7,0x57,0x00,0x20,
+0x13,0x83,0x07,0x03,0x83,0xA7,0x04,0x01,0x03,0x26,0x03,0x00,0x2A,0x84,0x83,0xC5,
+0xB7,0x01,0xB7,0xA7,0x00,0x20,0x02,0x47,0x03,0xA5,0x07,0xD9,0x93,0x06,0x26,0x03,
+0x05,0x06,0xEF,0xE0,0x5F,0xBD,0xB7,0x57,0x00,0x20,0x13,0x83,0x07,0x03,0x83,0xA7,
+0x04,0x01,0x03,0x26,0x03,0x00,0x22,0x87,0x83,0xC5,0xC7,0x01,0x52,0x44,0xB7,0xA7,
+0x00,0x20,0xE2,0x40,0xC2,0x44,0x03,0xA5,0x87,0xD8,0x93,0x06,0x26,0x00,0x71,0x01,
+0x6F,0xE0,0x7F,0xBA,0x03,0x47,0x71,0x00,0x06,0x07,0x36,0x97,0x83,0x47,0x27,0x06,
+0x23,0x16,0xF1,0x00,0x83,0x47,0x71,0x00,0x86,0x07,0xB6,0x97,0x83,0xC7,0x37,0x06,
+0x83,0xA6,0x04,0x01,0x23,0x15,0xF1,0x00,0x83,0x57,0xA1,0x00,0x83,0xC6,0x96,0x01,
+0x03,0x57,0xC1,0x00,0xB3,0x87,0xD7,0x02,0xBA,0x97,0xC2,0x07,0xC1,0x83,0x23,0x14,
+0xF1,0x00,0x83,0x57,0xE1,0x00,0x2D,0x47,0x63,0x63,0xF7,0x0C,0x03,0x55,0xC1,0x00,
+0x83,0x56,0xE1,0x00,0x0D,0x47,0x85,0x65,0xB3,0x06,0xD7,0x02,0x93,0x87,0x85,0x95,
+0x37,0x56,0x00,0x20,0x13,0x83,0x95,0x95,0x93,0x85,0xA5,0x95,0xBE,0x96,0x86,0x06,
+0x93,0x07,0x46,0x7E,0xBE,0x96,0x23,0x96,0xA6,0x00,0x03,0x55,0xA1,0x00,0x83,0x56,
+0xE1,0x00,0xB3,0x06,0xD7,0x02,0x9A,0x96,0x86,0x06,0xBE,0x96,0x23,0x96,0xA6,0x00,
+0x83,0x56,0x81,0x00,0x03,0x55,0xE1,0x00,0x86,0x06,0x33,0x07,0xA7,0x02,0xA2,0x96,
+0x83,0x96,0x06,0x00,0x2E,0x97,0x06,0x07,0x3E,0x97,0x23,0x16,0xD7,0x00,0x03,0x57,
+0xE1,0x00,0x99,0x46,0xB3,0x86,0xE6,0x02,0x13,0x87,0x46,0x00,0x3E,0x97,0x23,0x22,
+0xE6,0x7E,0x03,0x57,0xE1,0x00,0xB6,0x97,0x05,0x07,0x42,0x07,0x41,0x83,0x23,0x17,
+0xE1,0x00,0x03,0x57,0xC1,0x00,0x23,0x82,0xE7,0x00,0x03,0x57,0xC1,0x00,0xA3,0x82,
+0xE7,0x00,0x03,0x57,0xA1,0x00,0x23,0x83,0xE7,0x00,0x03,0x57,0xA1,0x00,0xA3,0x83,
+0xE7,0x00,0x03,0x57,0xC1,0x00,0x23,0x84,0xE7,0x00,0x03,0x57,0xA1,0x00,0x03,0x45,
+0x71,0x00,0xA3,0x84,0xE7,0x00,0xEF,0xF0,0x8F,0xD5,0xB7,0x52,0x00,0x20,0x83,0x47,
+0x71,0x00,0x85,0x07,0x93,0xF7,0xF7,0x0F,0xA3,0x03,0xF1,0x00,0x15,0xBD,0x83,0xD5,
+0xE7,0x03,0x03,0xD4,0xA7,0x03,0x9D,0xBD,0x37,0x57,0x00,0x20,0x63,0x1D,0xC5,0x04,
+0x63,0xD5,0xB6,0x00,0xAE,0x87,0xB6,0x85,0xBE,0x86,0x83,0x27,0x07,0x01,0x37,0xB6,
+0x00,0x20,0x83,0xC7,0x97,0x01,0x33,0x87,0xB7,0x02,0x86,0x07,0x3A,0x95,0x13,0x17,
+0x15,0x00,0x03,0x25,0x46,0x2C,0x3A,0x95,0x03,0x17,0x05,0x00,0x85,0x05,0xE2,0x05,
+0xE1,0x85,0x3E,0x95,0x63,0xC4,0xD5,0x00,0x3A,0x85,0x82,0x80,0x03,0x56,0x05,0x00,
+0x13,0x13,0x06,0x01,0x13,0x53,0x03,0x41,0x63,0x53,0x67,0x00,0x3A,0x86,0x13,0x17,
+0x06,0x01,0x41,0x87,0xE1,0xBF,0x63,0x9A,0xD5,0x04,0x63,0x55,0xA6,0x00,0xAA,0x87,
+0x32,0x85,0x3E,0x86,0x83,0x27,0x07,0x01,0x83,0xC7,0x97,0x01,0xB3,0x85,0xB7,0x02,
+0xB3,0x87,0xA5,0x00,0x93,0x95,0x17,0x00,0xB7,0xB7,0x00,0x20,0x83,0xA7,0x47,0x2C,
+0xAE,0x97,0x03,0x97,0x07,0x00,0x05,0x05,0x62,0x05,0x61,0x85,0x89,0x07,0xE3,0x55,
+0xC5,0xFA,0x83,0xD6,0x07,0x00,0x93,0x95,0x06,0x01,0xC1,0x85,0x63,0x53,0xB7,0x00,
+0xBA,0x86,0x13,0x97,0x06,0x01,0x41,0x87,0xF9,0xBF,0x13,0x01,0x81,0xFC,0x22,0xDA,
+0x26,0xD8,0x13,0x73,0xF5,0x0F,0x93,0x77,0xF6,0x0F,0x63,0x55,0xC5,0x0A,0xB3,0x87,
+0x67,0x40,0xE2,0x07,0xE1,0x87,0x05,0x44,0x03,0x27,0x07,0x01,0x22,0xC0,0x93,0xF2,
+0xF6,0x0F,0x83,0x43,0x97,0x01,0x13,0xF4,0xF5,0x0F,0x63,0xDB,0xD5,0x08,0x13,0x97,
+0x83,0x01,0x61,0x87,0x3A,0xC2,0xB3,0x82,0x82,0x40,0xE2,0x02,0x99,0x44,0x93,0xD2,
+0x82,0x41,0x01,0x47,0x63,0xC1,0xF4,0x0C,0x63,0xCF,0x54,0x0A,0xB3,0x83,0x75,0x02,
+0x82,0x44,0x37,0xB7,0x00,0x20,0x03,0x27,0x47,0x2C,0x86,0x04,0x26,0xC4,0x92,0x44,
+0x86,0x04,0xAA,0x93,0x86,0x03,0xBA,0x93,0x26,0xC6,0x03,0x97,0x03,0x00,0x63,0x92,
+0x57,0x0A,0x02,0x46,0x92,0x45,0x85,0x46,0x2E,0x96,0x63,0xD9,0xF6,0x02,0x93,0x12,
+0x16,0x00,0x1E,0x85,0x81,0x46,0x13,0x83,0xF7,0xFF,0x16,0x95,0x83,0x55,0x05,0x00,
+0x13,0x94,0x05,0x01,0x41,0x84,0x63,0x53,0x87,0x00,0xBA,0x85,0x85,0x06,0xE2,0x06,
+0x13,0x97,0x05,0x01,0xE1,0x86,0x41,0x87,0xE3,0xC1,0x66,0xFE,0x06,0x06,0x81,0x45,
+0x09,0x45,0x81,0xA8,0xB3,0x07,0xF3,0x40,0xE2,0x07,0xE1,0x87,0x7D,0x54,0xA9,0xBF,
+0x33,0x07,0x70,0x40,0x62,0x07,0x61,0x87,0x3A,0xC2,0xB3,0x02,0x54,0x40,0xB5,0xB7,
+0xB2,0x46,0x22,0x44,0x9E,0x96,0x33,0x83,0x83,0x00,0x03,0x13,0x03,0x00,0x83,0x96,
+0x06,0x00,0x9A,0x96,0xB3,0xC6,0xA6,0x02,0x36,0x83,0xC2,0x06,0xC1,0x86,0x63,0x53,
+0xD7,0x00,0x3A,0x83,0x85,0x05,0x13,0x17,0x03,0x01,0xE2,0x05,0x41,0x87,0xB2,0x93,
+0xE1,0x85,0xE3,0xC7,0xF5,0xFC,0x52,0x54,0xC2,0x54,0x3A,0x85,0x13,0x01,0x81,0x03,
+0x82,0x80,0x63,0xDD,0xF2,0x12,0x86,0x07,0x93,0xF7,0xF7,0x0F,0x13,0x86,0xF7,0xFF,
+0x62,0x06,0x61,0x86,0x85,0x02,0x32,0xD0,0x13,0xD6,0x17,0x00,0x32,0xCE,0x13,0xF6,
+0xF2,0x0F,0x32,0xCA,0xB2,0x84,0x03,0x46,0x41,0x00,0x81,0x42,0x32,0xCC,0x22,0x96,
+0x32,0xD2,0x02,0x56,0xE3,0xD1,0xC2,0xFC,0x33,0xD5,0xF4,0x02,0x72,0x44,0x13,0x96,
+0x34,0x00,0x22,0x96,0x33,0x03,0xF5,0x02,0x0E,0x03,0x33,0x06,0x66,0x40,0x33,0x46,
+0xF6,0x02,0x13,0x74,0xF6,0x0F,0x22,0xC8,0x62,0x44,0x33,0x03,0xA4,0x02,0x12,0x54,
+0x22,0x93,0x12,0x44,0x62,0x03,0x13,0x53,0x83,0x41,0x63,0x5A,0x80,0x06,0x01,0x44,
+0x63,0x46,0xB3,0x00,0x33,0xA3,0x66,0x00,0x13,0x44,0x13,0x00,0x13,0xF3,0xF2,0x0F,
+0x1A,0xC8,0x02,0x43,0x93,0xD2,0x12,0x40,0xB3,0x82,0x62,0x02,0x12,0x43,0x33,0x05,
+0xA3,0x02,0x42,0x43,0x13,0x73,0x13,0x00,0x63,0x09,0x03,0x04,0x02,0x43,0x9A,0x92,
+0x16,0x95,0x06,0x05,0x1E,0x95,0x93,0x72,0xF6,0x0F,0x03,0x13,0x05,0x00,0x63,0x8D,
+0x02,0x04,0x39,0xC8,0x32,0x44,0x13,0x76,0xF6,0x0F,0x22,0x95,0x03,0x15,0x05,0x00,
+0x21,0x44,0x33,0x05,0xC5,0x02,0x33,0x06,0xC4,0x40,0x33,0x06,0x66,0x02,0x33,0x03,
+0xC5,0x00,0x13,0x53,0x33,0x40,0x42,0x03,0x13,0x53,0x03,0x41,0x35,0xA0,0x01,0x44,
+0xE3,0x4E,0xD3,0xF8,0x33,0xA3,0x65,0x00,0x41,0xBF,0xAA,0x92,0x22,0x45,0x86,0x02,
+0x9E,0x92,0x16,0x95,0x03,0x13,0x05,0x00,0x13,0x75,0xF6,0x0F,0x05,0xE9,0x03,0x96,
+0x02,0x00,0x32,0x93,0x13,0x53,0x13,0x40,0x3A,0x86,0x63,0x53,0xE3,0x00,0x1A,0x86,
+0x13,0x17,0x06,0x01,0x52,0x46,0x41,0x87,0x26,0x96,0x93,0x74,0xF6,0x0F,0x42,0x46,
+0x93,0x02,0x16,0x00,0xE2,0x02,0x93,0xD2,0x82,0x41,0x21,0xB7,0x71,0xDC,0x32,0x45,
+0x13,0x76,0xF6,0x0F,0xAA,0x92,0x03,0x95,0x02,0x00,0x59,0xB7,0x93,0x96,0x12,0x00,
+0x85,0x07,0x93,0xF7,0xF7,0x0F,0x93,0xF6,0xF6,0x0F,0x93,0x85,0xF6,0xFF,0x3E,0xCC,
+0xBE,0x84,0x83,0x47,0x01,0x00,0xE2,0x05,0xE1,0x85,0x2E,0xD4,0x3E,0xD0,0x93,0xD5,
+0x16,0x00,0x9A,0x97,0x2E,0xD2,0x81,0x42,0x3E,0xD6,0xA2,0x57,0xE3,0xD5,0xF2,0xE8,
+0xB3,0xD5,0xD4,0x02,0x12,0x54,0x93,0x97,0x34,0x00,0xA2,0x97,0x33,0x83,0xD5,0x02,
+0x0E,0x03,0xB3,0x87,0x67,0x40,0xB3,0xC7,0xD7,0x02,0x3E,0xC8,0x03,0x44,0x01,0x01,
+0x85,0x47,0x22,0xCE,0x02,0x54,0x33,0x03,0xB4,0x02,0x32,0x54,0x22,0x93,0x02,0x44,
+0x62,0x03,0x13,0x53,0x83,0x41,0x63,0x19,0xF4,0x06,0x01,0x44,0x63,0x46,0xA3,0x00,
+0x33,0x23,0x66,0x00,0x13,0x44,0x13,0x00,0x93,0xF7,0xF2,0x0F,0x3E,0xCA,0x92,0x47,
+0x93,0xD2,0x12,0x40,0xB3,0x82,0xF2,0x02,0x82,0x47,0xB3,0x85,0xB7,0x02,0xD2,0x47,
+0x13,0xF3,0x17,0x00,0x63,0x08,0x03,0x04,0x92,0x47,0xBE,0x92,0x96,0x95,0xF2,0x47,
+0x86,0x05,0x9E,0x95,0x03,0x93,0x05,0x00,0xA9,0xCF,0x21,0xCC,0x22,0x44,0xC2,0x47,
+0xA2,0x95,0x83,0x95,0x05,0x00,0x93,0xF7,0xF7,0x0F,0x21,0x44,0xB3,0x85,0xF5,0x02,
+0xB3,0x07,0xF4,0x40,0xB3,0x87,0x67,0x02,0x33,0x83,0xF5,0x00,0x13,0x53,0x33,0x40,
+0x42,0x03,0x13,0x53,0x03,0x41,0x35,0xA0,0x01,0x44,0xE3,0x4F,0xC3,0xF8,0x33,0x23,
+0x65,0x00,0x49,0xBF,0xAE,0x92,0xB2,0x47,0x86,0x02,0x9E,0x92,0xB3,0x85,0xF2,0x00,
+0xF2,0x47,0x03,0x93,0x05,0x00,0x85,0xEB,0x83,0x97,0x02,0x00,0x3E,0x93,0x13,0x53,
+0x13,0x40,0xBA,0x87,0x63,0x53,0xE3,0x00,0x9A,0x87,0x13,0x97,0x07,0x01,0xE2,0x47,
+0x41,0x87,0xA6,0x97,0x93,0xF4,0xF7,0x0F,0xD2,0x47,0x93,0x82,0x17,0x00,0xE2,0x02,
+0x93,0xD2,0x82,0x41,0x19,0xB7,0x71,0xDC,0xA2,0x45,0xC2,0x47,0xAE,0x92,0x93,0xF7,
+0xF7,0x0F,0x83,0x95,0x02,0x00,0x51,0xB7,0x21,0x11,0x06,0xCA,0x22,0xC8,0x26,0xC6,
+0x2E,0xC2,0xB2,0x84,0x36,0xC0,0x2A,0xC4,0x45,0x3E,0x82,0x47,0x12,0x43,0x22,0x47,
+0xBE,0x85,0x2A,0x84,0x9A,0x86,0x3A,0x86,0x26,0x85,0x79,0x3E,0xCD,0x47,0x63,0x5B,
+0x85,0x00,0x63,0xC3,0x87,0x00,0x01,0x44,0x22,0x85,0xD2,0x40,0x42,0x44,0xB2,0x44,
+0x61,0x01,0x82,0x80,0x2A,0x84,0xF5,0xB7,0x99,0x46,0xB3,0x07,0xD5,0x02,0x37,0x56,
+0x00,0x20,0x13,0x07,0x46,0x7E,0x61,0x11,0x22,0xC2,0x26,0xC0,0x13,0x06,0x46,0x7E,
+0xB3,0x86,0xD5,0x02,0xBA,0x97,0x83,0xC7,0x87,0x00,0x36,0x97,0x83,0x42,0x87,0x00,
+0x63,0xF5,0xF2,0x00,0x3E,0x87,0x96,0x87,0xBA,0x82,0x33,0x87,0xF2,0x40,0x13,0x77,
+0xF7,0x0F,0x85,0x46,0x63,0xFF,0xE6,0x04,0x37,0xA7,0x00,0x20,0x03,0x27,0x07,0xD9,
+0x93,0x96,0x17,0x00,0x13,0x93,0x12,0x00,0x3A,0x93,0xBA,0x96,0x83,0xD3,0x06,0x00,
+0x03,0x53,0x03,0x00,0x13,0x94,0x03,0x01,0x93,0x14,0x03,0x01,0xC1,0x84,0x41,0x84,
+0x63,0x53,0x94,0x00,0x1E,0x83,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x83,0x96,0x26,0x00,
+0x42,0x03,0x93,0x93,0x17,0x00,0x13,0x53,0x03,0x41,0x1E,0x97,0x63,0xE6,0x57,0x0A,
+0xA5,0x47,0xB3,0x07,0xF3,0x02,0x29,0x47,0xB3,0xC7,0xE7,0x02,0x01,0x47,0x63,0xC8,
+0xF6,0x08,0x19,0x47,0xB3,0x85,0xE5,0x02,0x33,0x05,0xE5,0x02,0x32,0x95,0x2E,0x96,
+0x83,0x47,0x95,0x00,0x83,0x45,0x96,0x00,0x63,0xF5,0xF5,0x00,0x3E,0x87,0xAE,0x87,
+0xBA,0x85,0xB3,0x86,0xF5,0x40,0x93,0xF6,0xF6,0x0F,0x05,0x46,0x05,0x47,0x63,0x70,
+0xD6,0x06,0x37,0xA7,0x00,0x20,0x83,0x26,0x87,0xD8,0x13,0x96,0x17,0x00,0x13,0x97,
+0x15,0x00,0x36,0x97,0x36,0x96,0x03,0x55,0x07,0x00,0x03,0x53,0x06,0x00,0x93,0x12,
+0x05,0x01,0x13,0x17,0x03,0x01,0x93,0xD2,0x02,0x41,0x41,0x87,0x63,0x53,0x57,0x00,
+0x1A,0x85,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x42,0x05,0x03,0x17,0x26,0x00,0x13,0x96,
+0x17,0x00,0x41,0x85,0xB2,0x96,0x63,0xE1,0xB7,0x04,0xA5,0x47,0x33,0x05,0xF5,0x02,
+0xA9,0x47,0x33,0x45,0xF5,0x02,0x33,0x27,0xA7,0x00,0x13,0x47,0x17,0x00,0x12,0x44,
+0x82,0x44,0x3A,0x85,0x21,0x01,0x82,0x80,0x83,0x53,0x07,0x00,0x13,0x94,0x03,0x01,
+0x41,0x84,0x63,0xD3,0x86,0x00,0xB6,0x83,0x93,0x96,0x03,0x01,0x85,0x07,0xC1,0x86,
+0x93,0xF7,0xF7,0x0F,0x09,0x07,0x1D,0xBF,0x03,0xD6,0x06,0x00,0x13,0x13,0x06,0x01,
+0x13,0x53,0x03,0x41,0x63,0x53,0x67,0x00,0x3A,0x86,0x13,0x17,0x06,0x01,0x85,0x07,
+0x41,0x87,0x93,0xF7,0xF7,0x0F,0x89,0x06,0x79,0xBF,0xB7,0x55,0x00,0x20,0x13,0x01,
+0xC1,0xFC,0x13,0x87,0x45,0x7E,0x85,0x67,0xBA,0x97,0x06,0xD8,0x22,0xD6,0x26,0xD4,
+0x83,0xC6,0x57,0x36,0x37,0x55,0x00,0x20,0x37,0x56,0x00,0x20,0x2E,0xC6,0xB7,0x65,
+0x00,0x20,0x23,0x00,0x05,0x40,0x03,0x27,0x06,0x03,0x13,0x05,0x05,0x40,0x93,0x85,
+0x45,0x7E,0x13,0x06,0x06,0x03,0x93,0xF6,0xF6,0x0F,0x2A,0xC0,0x2E,0xC2,0x32,0xC4,
+0x89,0xEA,0xA3,0x02,0x07,0x0A,0xC2,0x50,0x32,0x54,0xA2,0x54,0x13,0x01,0x41,0x03,
+0x82,0x80,0x83,0xC6,0x57,0x36,0x85,0x47,0x63,0xE5,0xD7,0x00,0xA3,0x02,0xF7,0x0A,
+0xDD,0xB7,0x03,0x47,0x57,0x0A,0x8D,0x46,0x36,0xCC,0x63,0x04,0xF7,0x00,0x9D,0x47,
+0x3E,0xCC,0x81,0x44,0x92,0x47,0x83,0xC7,0x57,0x36,0xFD,0x17,0x63,0xCB,0xF4,0x04,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,0x07,0x15,0x93,0xF7,0x07,0x08,
+0x95,0xCF,0xA2,0x47,0x01,0x47,0x90,0x43,0x81,0x47,0x92,0x46,0x83,0xC6,0x56,0x36,
+0x63,0x68,0xD7,0x32,0x03,0x47,0x56,0x0A,0x63,0x72,0xF7,0x02,0x82,0x46,0x83,0xC6,
+0x06,0x00,0x89,0xCE,0x99,0x8F,0x93,0xF7,0xF7,0x0F,0x3E,0xD0,0x02,0xC6,0x81,0x44,
+0x82,0x47,0x32,0x47,0x83,0xC7,0x07,0x00,0x63,0x62,0xF7,0x32,0x01,0x44,0x81,0x44,
+0x81,0xAB,0x93,0x87,0x14,0x00,0x93,0xF7,0xF7,0x0F,0x3E,0xCA,0x99,0x47,0xB3,0x87,
+0xF4,0x02,0x37,0x57,0x00,0x20,0x13,0x07,0x47,0x7E,0x52,0x44,0x91,0x07,0xBA,0x97,
+0x3E,0xC8,0x92,0x47,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x83,0xC7,0x57,0x36,
+0x63,0x64,0xF4,0x00,0xD2,0x44,0xBD,0xB7,0xB7,0xB7,0x00,0x20,0x99,0x46,0x83,0xA2,
+0x47,0x2C,0xB3,0x87,0xD4,0x02,0x37,0x56,0x00,0x20,0x93,0x05,0x46,0x7E,0x13,0x06,
+0x46,0x7E,0x03,0x43,0x97,0x01,0xB3,0x06,0xD4,0x02,0xAE,0x97,0x83,0xC5,0x97,0x00,
+0x03,0xC5,0x87,0x00,0xB2,0x96,0x03,0xC6,0x86,0x00,0x83,0xC6,0x96,0x00,0xB3,0x87,
+0x65,0x02,0x33,0x83,0x66,0x02,0xAA,0x97,0x86,0x07,0x96,0x97,0x83,0x97,0x07,0x00,
+0x32,0x93,0x06,0x03,0x9A,0x92,0x83,0x92,0x02,0x00,0x09,0x43,0x63,0xC4,0x57,0x00,
+0x96,0x87,0x05,0x43,0xE2,0x06,0x62,0x06,0xE2,0x05,0x62,0x05,0x61,0x86,0xE1,0x85,
+0xE1,0x86,0x61,0x85,0x3A,0xD2,0x3E,0xCE,0x1A,0xD0,0xF9,0x31,0x62,0x47,0xF2,0x47,
+0xA9,0x45,0x33,0x06,0xF7,0x02,0x12,0x57,0x33,0x46,0xB6,0x02,0x42,0x06,0x41,0x86,
+0x63,0x4A,0xC5,0x12,0xA2,0x47,0x93,0x96,0x14,0x00,0x13,0x17,0x14,0x00,0x88,0x43,
+0x02,0x53,0xB3,0x05,0xD5,0x00,0x03,0xD6,0x25,0x08,0xB3,0x02,0xE5,0x00,0x83,0xD3,
+0x22,0x08,0x3D,0xE6,0x63,0x82,0x03,0x06,0xB7,0xF5,0x00,0x20,0x93,0x85,0x05,0x62,
+0xAE,0x96,0x03,0xD3,0x06,0x00,0x93,0x76,0xF3,0x0F,0x63,0x07,0xD4,0x04,0x93,0x97,
+0x16,0x00,0x3E,0x95,0x03,0x56,0x25,0x08,0x21,0xC2,0x33,0x66,0x76,0x00,0x23,0x11,
+0xC5,0x08,0x19,0x45,0xB3,0x86,0xA6,0x02,0x2E,0x97,0xB7,0x57,0x00,0x20,0x13,0x73,
+0xF3,0x0F,0x23,0x10,0x67,0x00,0x13,0x87,0x47,0x7E,0x93,0x87,0x47,0x7E,0x23,0x91,
+0x02,0x08,0x33,0x05,0xA4,0x02,0x91,0x06,0xBA,0x96,0x32,0x47,0x23,0x22,0xD7,0x7E,
+0x11,0x05,0x3E,0x95,0xEF,0xE0,0xAF,0xFC,0x05,0x04,0x13,0x74,0xF4,0x0F,0xD1,0xBD,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0x07,0x62,0x63,0x99,0x03,0x04,0x3E,0x97,0x03,0x53,
+0x07,0x00,0x13,0x77,0xF3,0x0F,0xE3,0x81,0xE4,0xFE,0x93,0x12,0x17,0x00,0x16,0x95,
+0x83,0x52,0x25,0x08,0xE3,0x8A,0x02,0xFC,0xB6,0x97,0x13,0x73,0xF3,0x0F,0x23,0x90,
+0x67,0x00,0x99,0x47,0x33,0x07,0xF7,0x02,0xB7,0x57,0x00,0x20,0x93,0x87,0x47,0x7E,
+0x33,0x66,0x56,0x00,0x23,0x11,0xC5,0x08,0x23,0x91,0x05,0x08,0x11,0x07,0x3E,0x97,
+0xB2,0x47,0x23,0xA2,0xE7,0x7E,0x42,0x45,0x71,0xBF,0x19,0x45,0x33,0x05,0xA4,0x02,
+0xB7,0x50,0x00,0x20,0x93,0x80,0x40,0x7E,0x33,0x66,0x76,0x00,0x85,0x43,0x11,0x05,
+0x06,0x95,0x63,0x1E,0x73,0x00,0xBA,0x97,0x23,0x90,0x97,0x00,0x42,0x47,0xB2,0x47,
+0x23,0x91,0xC5,0x08,0x23,0x91,0x02,0x08,0x23,0xA2,0xE7,0x7E,0xA5,0xB7,0xB6,0x97,
+0x23,0x90,0x87,0x00,0xB2,0x47,0x23,0x91,0xC2,0x08,0x23,0x91,0x05,0x08,0x23,0xA2,
+0xA7,0x7E,0x55,0xBF,0x2A,0xD2,0x03,0x46,0x07,0x15,0x3A,0xD0,0x13,0x76,0x06,0x08,
+0x21,0xD6,0x3E,0xCE,0xE3,0x52,0xF0,0xF4,0xA2,0x85,0x26,0x85,0x75,0x36,0x0D,0xDD,
+0xF2,0x47,0x92,0x56,0x13,0x05,0x40,0x06,0x02,0x57,0x63,0xC8,0xD7,0x00,0x33,0x85,
+0xA6,0x02,0x33,0x45,0xF5,0x02,0x13,0x75,0xF5,0x0F,0x83,0x47,0x97,0x0E,0xE3,0x6D,
+0xF5,0xF0,0x82,0x47,0xB7,0xF6,0x00,0x20,0x03,0xC7,0x07,0x00,0x93,0x87,0x06,0x64,
+0x01,0xEF,0x02,0x47,0xA3,0x80,0x87,0x00,0x23,0x81,0xA7,0x00,0x85,0x47,0x23,0x80,
+0x96,0x64,0x23,0x00,0xF7,0x00,0xCD,0xBD,0x09,0x43,0x81,0x45,0x93,0x06,0x33,0x00,
+0x33,0x86,0xD7,0x00,0x03,0x46,0xD6,0xFF,0x93,0x02,0xE3,0xFF,0x63,0x71,0xA6,0x06,
+0xCD,0x46,0x13,0x76,0xF7,0x0F,0x63,0xF3,0xE6,0x00,0x4D,0x46,0x8D,0x46,0xB3,0x06,
+0xD6,0x02,0xBE,0x96,0xF5,0x16,0x63,0xE4,0xC5,0x02,0xBE,0x92,0x23,0x80,0x92,0x00,
+0x9A,0x97,0xA3,0x8F,0x87,0xFE,0x23,0x80,0xA7,0x00,0xCD,0x47,0xE3,0xE6,0xE7,0xEA,
+0x82,0x47,0x05,0x07,0x23,0x80,0xE7,0x00,0x45,0xB5,0xB2,0x85,0x45,0xBF,0x83,0xC3,
+0x06,0x00,0x7D,0x16,0x13,0x76,0xF6,0x0F,0xA3,0x81,0x76,0x00,0x83,0xC3,0x16,0x00,
+0x23,0x82,0x76,0x00,0x83,0xC3,0x26,0x00,0xA3,0x82,0x76,0x00,0x65,0xBF,0x13,0x86,
+0x15,0x00,0x13,0x76,0xF6,0x0F,0x36,0x83,0xE3,0x19,0xC7,0xFC,0xD1,0x46,0xE3,0x05,
+0xD7,0xE6,0x8D,0x46,0x33,0x07,0xD7,0x02,0x89,0x05,0xBA,0x97,0x23,0x80,0x97,0x00,
+0xA3,0x80,0x87,0x00,0x23,0x81,0xA7,0x00,0x82,0x47,0x23,0x80,0xB7,0x00,0xA9,0xB5,
+0x93,0x06,0x07,0x04,0x86,0x06,0xB2,0x96,0x83,0xD6,0x26,0x00,0x81,0xC6,0x85,0x07,
+0x93,0xF7,0xF7,0x0F,0x05,0x07,0x13,0x77,0xF7,0x0F,0x45,0xB9,0x32,0x47,0x8D,0x47,
+0x19,0x45,0xB3,0x07,0xF7,0x02,0x37,0xF7,0x00,0x20,0x13,0x07,0x07,0x64,0x37,0x56,
+0x00,0x20,0xBA,0x97,0x83,0xC3,0x07,0x00,0x83,0xC7,0x17,0x00,0x33,0x87,0xA3,0x02,
+0x3E,0xC8,0xB7,0xB7,0x00,0x20,0x83,0xA6,0x47,0x2C,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0x07,0x01,0x83,0xC5,0x97,0x01,0xB3,0x87,0xA3,0x02,0x3E,0xCE,0x93,0x07,0x46,0x7E,
+0x3E,0x97,0x83,0x47,0x97,0x00,0x03,0x47,0x87,0x00,0xB3,0x87,0xB7,0x02,0xBA,0x97,
+0x42,0x47,0x86,0x07,0xB6,0x97,0x33,0x07,0xA7,0x02,0x3A,0xCC,0x13,0x07,0x46,0x7E,
+0x62,0x46,0x3A,0x96,0x03,0x47,0x96,0x00,0x33,0x07,0xB7,0x02,0x83,0x45,0x86,0x00,
+0x13,0x96,0x13,0x00,0xBA,0x95,0x86,0x05,0xAE,0x96,0x83,0x95,0x07,0x00,0x83,0x97,
+0x06,0x00,0xB3,0xA5,0xF5,0x00,0xA2,0x47,0x85,0x05,0x80,0x43,0x33,0x03,0xC4,0x00,
+0x83,0x57,0x23,0x08,0x3E,0xCA,0xC2,0x47,0x13,0x97,0x17,0x00,0xD2,0x47,0xB3,0x02,
+0xE4,0x00,0x83,0xD6,0x22,0x08,0xAD,0xEF,0xBD,0xC2,0xB7,0xF5,0x00,0x20,0x93,0x85,
+0x05,0x62,0x2E,0x96,0x03,0x53,0x06,0x00,0xC2,0x47,0x13,0x76,0xF3,0x0F,0x63,0x88,
+0xC7,0x04,0x93,0x17,0x16,0x00,0x3E,0x94,0x83,0x57,0x24,0x08,0xA9,0xC3,0x33,0x06,
+0xA6,0x02,0xDD,0x8E,0x2E,0x97,0xB7,0x57,0x00,0x20,0x13,0x73,0xF3,0x0F,0x23,0x10,
+0x67,0x00,0x13,0x87,0x47,0x7E,0x23,0x11,0xD4,0x08,0x23,0x91,0x02,0x08,0x11,0x06,
+0x3A,0x96,0x62,0x47,0x23,0xA2,0xC7,0x7E,0x93,0x87,0x47,0x7E,0x13,0x05,0x47,0x00,
+0x3E,0x95,0xEF,0xE0,0xCF,0xCE,0x93,0x87,0x14,0x00,0x93,0xF4,0xF7,0x0F,0x82,0x57,
+0xE3,0xF6,0xF4,0xBC,0xB2,0x47,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x3E,0xC6,0x4D,0xBE,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0x07,0x62,0xB1,0xE6,0x3E,0x97,0x83,0x55,0x07,0x00,
+0x13,0xF7,0xF5,0x0F,0xE3,0x8D,0xE3,0xFC,0x93,0x16,0x17,0x00,0x36,0x94,0x83,0x56,
+0x24,0x08,0xF1,0xD6,0x33,0x07,0xA7,0x02,0xD2,0x42,0xB2,0x97,0x93,0xF5,0xF5,0x0F,
+0xB3,0xE6,0xD2,0x00,0x23,0x90,0xB7,0x00,0xB7,0x57,0x00,0x20,0x23,0x11,0xD4,0x08,
+0x93,0x86,0x47,0x7E,0x23,0x11,0x03,0x08,0x11,0x07,0x36,0x97,0x23,0xA2,0xE7,0x7E,
+0x72,0x47,0x59,0xB7,0x52,0x45,0xB7,0x50,0x00,0x20,0x13,0x84,0x40,0x7E,0xC9,0x8E,
+0x62,0x45,0x93,0x80,0x40,0x7E,0x85,0x04,0x11,0x05,0x22,0x95,0x72,0x44,0x93,0xF4,
+0xF4,0x0F,0x11,0x04,0x06,0x94,0x85,0x40,0x63,0x90,0x15,0x02,0xBA,0x97,0x23,0x11,
+0xD3,0x08,0x23,0x90,0x77,0x00,0xB7,0x57,0x00,0x20,0x23,0x91,0x02,0x08,0x23,0xA2,
+0x87,0x7E,0xEF,0xE0,0xCF,0xC3,0xA1,0xBF,0x42,0x47,0xB2,0x97,0x23,0x91,0xD2,0x08,
+0x23,0x90,0xE7,0x00,0xB7,0x57,0x00,0x20,0x23,0xA2,0xA7,0x7E,0x23,0x11,0x03,0x08,
+0x22,0x85,0xC5,0xB7,0x93,0x87,0x04,0x04,0x86,0x07,0x3E,0x97,0x03,0x57,0x27,0x00,
+0x29,0xC7,0x19,0x45,0xB3,0x85,0xA4,0x02,0x3E,0xC0,0xB7,0x57,0x00,0x20,0x13,0x87,
+0x47,0x7E,0x93,0x87,0x47,0x7E,0x19,0x46,0x33,0x05,0xA4,0x02,0x91,0x05,0xBA,0x95,
+0x11,0x05,0x3E,0x95,0x97,0x50,0xFF,0x1F,0xE7,0x80,0x00,0xA5,0xA2,0x47,0x98,0x43,
+0x82,0x47,0xBA,0x97,0x83,0xD6,0x27,0x00,0x93,0x07,0x04,0x04,0x86,0x07,0x3E,0x97,
+0x05,0x04,0x23,0x11,0xD7,0x00,0x13,0x74,0xF4,0x0F,0x85,0x04,0x93,0xF4,0xF4,0x0F,
+0x92,0x47,0x22,0x47,0x83,0xC7,0x57,0x36,0x18,0x43,0xE3,0xED,0xF4,0xF8,0x92,0x47,
+0xA3,0x82,0x87,0x36,0xA3,0x02,0x87,0x0A,0x39,0xB4,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x83,0xC7,0x07,0x09,0xA1,0x8B,0x63,0x8B,0x07,0x12,0x37,0x75,0x00,0x20,
+0x01,0x11,0x31,0x46,0x81,0x45,0x13,0x05,0x55,0xB6,0x26,0xCA,0x06,0xCE,0x22,0xCC,
+0xEF,0x40,0x7F,0x85,0xB7,0x57,0x00,0x20,0x83,0xA4,0x07,0x01,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x03,0xB7,0x56,0x00,0x20,0x01,0x47,0x3E,0xC4,0xB7,0xB7,0x00,0x20,
+0x83,0xA7,0x47,0x2C,0x93,0x86,0x46,0x7E,0x3E,0xC0,0xB7,0x67,0x00,0x20,0x93,0x87,
+0x47,0x7E,0x83,0xC7,0x57,0x36,0x63,0x67,0xF7,0x00,0xF2,0x40,0x62,0x44,0xD2,0x44,
+0x05,0x61,0x82,0x80,0x99,0x47,0xB3,0x07,0xF7,0x02,0xB6,0x97,0x83,0xC2,0x87,0x00,
+0x63,0x81,0x02,0x0A,0x83,0xC7,0xB4,0x01,0xFD,0x17,0x63,0x98,0x57,0x08,0xFD,0x57,
+0x51,0xA8,0x83,0xC7,0x94,0x01,0x42,0x44,0xB3,0x07,0xF3,0x02,0x03,0x54,0x24,0x00,
+0x96,0x97,0xC2,0x07,0xC1,0x87,0x93,0x83,0x07,0x03,0x86,0x03,0xB6,0x93,0x83,0xD3,
+0x43,0x00,0xB3,0xF3,0x83,0x00,0x63,0x84,0x03,0x02,0x02,0x44,0x93,0x93,0x17,0x00,
+0x05,0x05,0xA2,0x93,0x12,0x44,0x83,0x93,0x03,0x00,0x13,0x75,0xF5,0x0F,0xA2,0x97,
+0x02,0x44,0x86,0x07,0x1E,0x96,0xA2,0x97,0x83,0x97,0x07,0x00,0xBE,0x95,0x05,0x03,
+0x32,0x44,0x93,0x77,0xF3,0x0F,0xE3,0xE6,0x87,0xFA,0x91,0xE1,0x85,0x45,0xAD,0x47,
+0x63,0xE5,0xE7,0x02,0x95,0x47,0x63,0xF6,0xA7,0x04,0xA9,0x47,0x33,0x06,0xF6,0x02,
+0x93,0x07,0x20,0x03,0xB3,0x45,0xB6,0x02,0x63,0xDD,0xB7,0x02,0x05,0x66,0xB3,0x87,
+0xE6,0x00,0xB2,0x97,0x09,0x46,0xA3,0x80,0xC7,0x38,0x05,0x07,0x13,0x77,0xF7,0x0F,
+0x2D,0xBF,0x85,0x47,0x3E,0xC2,0x83,0xC7,0xC4,0x01,0x22,0x44,0x01,0x43,0x3E,0xC6,
+0x93,0x07,0x07,0x04,0x86,0x07,0xA2,0x97,0x81,0x45,0x01,0x46,0x01,0x45,0x3E,0xC8,
+0x45,0xB7,0x05,0x66,0xB3,0x87,0xE6,0x00,0xB2,0x97,0x05,0x46,0xE9,0xB7,0x82,0x80,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,0x47,0x15,0xC1,0x8B,0xED,0xC3,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x83,0xC7,0x67,0x04,0x93,0xF7,0xF7,0x0F,
+0xE1,0xCB,0xB7,0x57,0x00,0x20,0x03,0xA7,0x07,0x03,0x83,0x47,0x47,0x0A,0x85,0xC3,
+0x13,0x07,0x37,0x06,0x81,0x46,0x09,0x46,0x09,0x07,0x83,0x45,0xE7,0xFF,0x63,0x72,
+0xB6,0x04,0x85,0x06,0x93,0xF6,0xF6,0x0F,0xE3,0x98,0xD7,0xFE,0x81,0x47,0xB7,0xF6,
+0x00,0x20,0x03,0xC6,0xA6,0x61,0x37,0x57,0x00,0x20,0x89,0x45,0x13,0x07,0x07,0x40,
+0x63,0x05,0xB6,0x06,0xB9,0xC7,0x83,0x47,0x17,0x00,0x85,0x07,0x93,0xF7,0xF7,0x0F,
+0xA3,0x00,0xF7,0x00,0x63,0xFD,0xF5,0x06,0xA3,0x00,0x07,0x00,0x23,0x8D,0xB6,0x60,
+0x82,0x80,0xB7,0xA7,0x00,0x20,0x03,0xA7,0x87,0xD8,0x13,0x06,0x30,0x06,0x81,0x47,
+0x93,0x06,0xE7,0x00,0x83,0x15,0x07,0x00,0x63,0x55,0xB6,0x00,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0x09,0x07,0xE3,0x18,0xD7,0xFE,0x93,0xB7,0x47,0x00,0x93,0xC7,0x17,0x00,
+0x79,0xBF,0xA3,0x00,0x07,0x00,0x85,0x47,0x63,0x1C,0xF6,0x02,0x23,0x8D,0x06,0x60,
+0x82,0x80,0x85,0x47,0x23,0x8D,0xF6,0x60,0x82,0x80,0x99,0xEF,0x83,0x47,0x17,0x00,
+0x11,0x46,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x63,0x65,0xF6,0x00,0xA3,0x00,0xF7,0x00,
+0x82,0x80,0xA3,0x00,0x07,0x00,0xD9,0xBF,0xA3,0x00,0x07,0x00,0x82,0x80,0x71,0xDA,
+0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x03,0xC7,0x57,0x03,0xB7,0x57,
+0x00,0x20,0x93,0x87,0x07,0x40,0x13,0x77,0xF7,0x0F,0x15,0xC3,0x37,0xF7,0x00,0x20,
+0x83,0x26,0x47,0x71,0x13,0x06,0x10,0x03,0x03,0xC7,0x27,0x00,0x63,0x61,0xD6,0x06,
+0x93,0x06,0x30,0x06,0x63,0xE5,0xE6,0x00,0x05,0x07,0x23,0x81,0xE7,0x00,0x03,0xC7,
+0x47,0x00,0x3D,0xC3,0x13,0x07,0x40,0x06,0x23,0x82,0x07,0x00,0xA3,0x82,0xE7,0x00,
+0x37,0x67,0x00,0x20,0x13,0x07,0x47,0x7E,0x03,0x45,0x77,0x36,0x37,0x57,0x00,0x20,
+0x83,0x26,0x07,0x03,0x03,0xC3,0x46,0x0A,0x35,0xC1,0x63,0x01,0x03,0x06,0x37,0x76,
+0x00,0x20,0x13,0x06,0xC6,0xAE,0x01,0x47,0x93,0x05,0x80,0xC1,0x19,0x06,0x83,0x12,
+0xA6,0xFF,0x63,0xD0,0xB2,0x04,0x05,0x47,0xA3,0x81,0xE7,0x00,0x82,0x80,0x25,0x46,
+0x63,0x79,0xE6,0x00,0x13,0x07,0x30,0x06,0x63,0x75,0xD7,0x00,0x05,0x47,0xA3,0x81,
+0xE7,0x00,0x23,0x81,0x07,0x00,0x61,0xBF,0x03,0xC7,0x57,0x00,0x01,0xE7,0xA3,0x81,
+0x07,0x00,0x82,0x80,0x7D,0x17,0x13,0x77,0xF7,0x0F,0xA3,0x82,0xE7,0x00,0x49,0xFB,
+0xFD,0xB7,0x05,0x07,0x13,0x77,0xF7,0x0F,0xE3,0x1A,0xE5,0xFA,0x41,0x11,0x37,0x57,
+0x00,0x20,0x22,0xC6,0x26,0xC4,0x03,0x26,0x07,0x01,0x63,0x02,0x03,0x04,0x37,0xB7,
+0x00,0x20,0x83,0x23,0x47,0x2C,0x85,0x62,0x93,0x86,0x26,0x06,0x81,0x45,0x93,0x82,
+0x42,0x9C,0x03,0xC7,0x16,0x00,0x83,0x44,0x96,0x01,0x36,0x84,0x03,0x44,0x04,0x00,
+0x33,0x07,0x97,0x02,0x89,0x06,0x22,0x97,0x06,0x07,0x1E,0x97,0x03,0x17,0x07,0x00,
+0x63,0xCF,0xE2,0x0A,0x85,0x05,0x93,0xF5,0xF5,0x0F,0xE3,0x1C,0xB3,0xFC,0x37,0xA7,
+0x00,0x20,0x83,0x22,0x87,0xD8,0x83,0x43,0xC6,0x01,0x81,0x46,0x03,0x97,0x02,0x00,
+0x85,0x06,0x93,0xF5,0xF6,0x0F,0x63,0xE3,0x75,0x0A,0x85,0x66,0x93,0x86,0x86,0xBB,
+0x63,0xD4,0xE6,0x02,0x37,0xF7,0x00,0x20,0x83,0x52,0x67,0x2F,0x37,0xB7,0x00,0x20,
+0x83,0x23,0x47,0x2C,0x81,0x46,0x01,0x47,0x13,0x04,0x80,0x3E,0xB9,0x44,0x93,0x95,
+0x06,0x01,0xC1,0x81,0x63,0xEB,0x55,0x08,0x63,0x06,0x03,0x06,0x25,0xC5,0x37,0x57,
+0x00,0x20,0x03,0x27,0x07,0xFF,0xB7,0x75,0x00,0x20,0x93,0x85,0xC5,0xAE,0x03,0x57,
+0x87,0x03,0x81,0x46,0x33,0x07,0xE0,0x40,0x42,0x07,0x41,0x87,0x99,0x05,0x03,0x93,
+0xA5,0xFF,0x63,0x52,0xE3,0x08,0x83,0x46,0xB6,0x01,0x01,0x43,0x36,0xC2,0xB7,0xB6,
+0x00,0x20,0x83,0xA6,0x46,0x2C,0x36,0xC0,0x92,0x45,0x93,0x76,0xF3,0x0F,0x63,0xF3,
+0xB6,0x02,0x82,0x46,0x83,0x44,0xA6,0x01,0x13,0x15,0x13,0x00,0x36,0x95,0x01,0x44,
+0x81,0x45,0x81,0x46,0x63,0x9F,0x95,0x04,0x85,0x45,0x63,0xF6,0xD5,0x08,0x05,0x47,
+0xA3,0x81,0xE7,0x00,0x32,0x44,0xA2,0x44,0x41,0x01,0x82,0x80,0x93,0x95,0x16,0x00,
+0x96,0x95,0x83,0xD5,0x05,0x00,0x13,0x94,0x05,0x01,0x41,0x84,0x63,0x53,0xE4,0x00,
+0xBA,0x85,0x13,0x97,0x05,0x01,0x41,0x87,0x25,0xBF,0x93,0x95,0x16,0x00,0x9E,0x95,
+0x83,0x95,0x05,0x00,0x63,0x57,0xB4,0x00,0x05,0x07,0x42,0x07,0x41,0x83,0xE3,0xE0,
+0xE4,0xFC,0x85,0x06,0xA9,0xB7,0x85,0x06,0x93,0xF6,0xF6,0x0F,0xE3,0x18,0xD5,0xF6,
+0x55,0xBF,0x83,0x12,0x05,0x00,0x93,0x03,0x10,0x03,0x63,0xC6,0x53,0x02,0x63,0xCE,
+0x02,0x00,0x85,0x42,0x63,0x01,0x54,0x02,0x05,0x44,0x83,0x42,0x96,0x01,0x85,0x05,
+0x93,0xF5,0xF5,0x0F,0x86,0x02,0x16,0x95,0xB5,0xBF,0xE3,0xD8,0xE2,0xFE,0x85,0x06,
+0xC2,0x06,0xC1,0x82,0xDD,0xB7,0x05,0x03,0x81,0xBF,0x41,0x11,0x06,0xC6,0x22,0xC4,
+0x26,0xC2,0xEF,0xD0,0x8F,0x8C,0xEF,0xD0,0xEF,0x80,0x37,0x57,0x00,0x20,0x83,0x27,
+0x07,0x01,0x83,0xC7,0x47,0x15,0x3A,0xC0,0xA1,0x8B,0x91,0xC3,0x59,0x33,0x97,0x80,
+0xFF,0x1F,0xE7,0x80,0x60,0xA8,0xB7,0x54,0x00,0x20,0xEF,0xC0,0x5F,0xE3,0xEF,0xC0,
+0xDF,0xF3,0x93,0x87,0x04,0x03,0x13,0x07,0x20,0x03,0x23,0x92,0xE7,0x00,0x37,0xF4,
+0x00,0x20,0xEF,0xE0,0xBF,0xCE,0x93,0x07,0x84,0x68,0x83,0xC7,0x57,0x03,0x93,0x84,
+0x04,0x03,0x13,0x04,0x84,0x68,0x93,0xF7,0xF7,0x0F,0x99,0xC3,0xEF,0x10,0xE0,0x4F,
+0xB7,0x77,0x00,0x20,0x83,0xC7,0xC7,0xB7,0x99,0xCB,0xEF,0x70,0x6F,0x98,0xEF,0x70,
+0x6F,0x96,0x93,0x07,0x20,0x03,0x23,0x92,0xF4,0x00,0xEF,0xE0,0x3F,0xCB,0x83,0x47,
+0x54,0x03,0x93,0xF7,0xF7,0x0F,0x85,0xC7,0xEF,0x10,0x30,0x00,0xEF,0x10,0xB0,0x3C,
+0xEF,0xC0,0xDF,0xB9,0x82,0x47,0x83,0xA7,0x07,0x01,0x83,0xC7,0x47,0x15,0xC1,0x8B,
+0x99,0xC7,0x83,0x47,0x64,0x04,0x93,0xF7,0xF7,0x0F,0x91,0xC3,0x11,0x31,0xB7,0x54,
+0x00,0x20,0x83,0xC6,0x64,0x3F,0x85,0x47,0x37,0x57,0x00,0x20,0x63,0xE8,0xD7,0x06,
+0xEF,0xD0,0xFF,0xF2,0xEF,0xE0,0x2F,0xB4,0x37,0x57,0x00,0x20,0xA3,0x0E,0x07,0x3E,
+0xEF,0x60,0x1F,0x85,0xEF,0x70,0x2F,0xC5,0xEF,0xD0,0x5F,0x80,0xB7,0x67,0x00,0x20,
+0x93,0x87,0x47,0x7E,0x03,0xC7,0x57,0x36,0x83,0xC6,0x64,0x3F,0x23,0x84,0xE7,0x36,
+0x05,0x47,0x63,0x7C,0xD7,0x00,0xA3,0x82,0x07,0x36,0x23,0x83,0x07,0x36,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0xFF,0x23,0x8F,0x07,0x0E,0xEF,0xF0,0x0F,0xC2,0xEF,0xF0,
+0xDF,0xA5,0x83,0x47,0x54,0x03,0x93,0xF7,0xF7,0x0F,0x95,0xC3,0x22,0x44,0xB2,0x40,
+0x92,0x44,0x41,0x01,0x17,0x73,0xFF,0x1F,0x67,0x00,0x43,0xB8,0x83,0x47,0xD7,0x3F,
+0xBD,0x46,0xE3,0xEF,0xF6,0xF8,0x85,0x07,0xA3,0x0E,0xF7,0x3E,0x51,0xBF,0xB2,0x40,
+0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,
+0x83,0xC7,0x96,0x01,0x83,0xC6,0xA6,0x01,0x13,0x87,0x17,0x00,0x33,0x07,0xD7,0x02,
+0x81,0x46,0xBA,0x97,0xC2,0x07,0x37,0xB7,0x00,0x20,0x03,0x26,0x87,0x2C,0xC1,0x83,
+0x01,0x47,0x93,0x15,0x07,0x01,0xC1,0x81,0x63,0xE8,0xF5,0x06,0x13,0x95,0x17,0x00,
+0x33,0x07,0xA6,0x00,0x23,0x10,0xD7,0x00,0x13,0x87,0x17,0x00,0x06,0x07,0xB3,0x05,
+0xE6,0x00,0x93,0xC6,0xF6,0xFF,0x23,0x90,0xD5,0x00,0xB7,0xF5,0x00,0x20,0x93,0x86,
+0x85,0x4E,0x83,0xD6,0x46,0x01,0x13,0x03,0x27,0x00,0x1A,0x96,0x23,0x10,0xD6,0x00,
+0xB7,0xB6,0x00,0x20,0x83,0xA6,0x46,0x2C,0x81,0x42,0x01,0x46,0x93,0x85,0x85,0x4E,
+0x93,0x93,0x02,0x01,0x93,0xD3,0x03,0x01,0x63,0xEA,0xF3,0x02,0x36,0x95,0x23,0x10,
+0xC5,0x00,0x36,0x97,0x13,0x46,0xF6,0xFF,0x23,0x10,0xC7,0x00,0x83,0xD7,0x45,0x01,
+0x9A,0x96,0x23,0x90,0xF6,0x00,0x82,0x80,0x93,0x15,0x17,0x00,0xB2,0x95,0x83,0xD5,
+0x05,0x00,0x05,0x07,0xAE,0x96,0xC2,0x06,0xC1,0x82,0xA5,0xBF,0x93,0x93,0x12,0x00,
+0xB6,0x93,0x83,0xD3,0x03,0x00,0x85,0x02,0x1E,0x96,0x42,0x06,0x41,0x82,0x4D,0xBF,
+0x51,0x11,0x22,0xC2,0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x68,0x06,0xC4,0x26,0xC0,
+0x03,0xC7,0x57,0x03,0x13,0x04,0x84,0x68,0x13,0x77,0xF7,0x0F,0x4D,0xC7,0x03,0xC7,
+0xC7,0x03,0x8D,0x46,0x63,0xFC,0xE6,0x02,0x15,0x47,0x23,0x8E,0xE7,0x02,0x37,0xF7,
+0x00,0x20,0x83,0x46,0x57,0x3A,0x09,0x47,0x63,0x97,0xE6,0x02,0x03,0xC7,0x17,0x04,
+0x13,0x77,0xF7,0x0F,0x0D,0xC3,0x37,0x67,0x00,0x20,0x13,0x07,0x47,0x7E,0x03,0x47,
+0x57,0x36,0x13,0x77,0xF7,0x0F,0x19,0xE3,0xA3,0x80,0x07,0x04,0xA2,0x40,0x12,0x44,
+0x82,0x44,0x31,0x01,0x82,0x80,0x83,0x47,0x94,0x03,0x05,0x47,0xE3,0x18,0xF7,0xFE,
+0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,0x83,0xC7,0x57,0x36,0x01,0x45,0x93,0xF7,
+0xF7,0x0F,0x99,0xE7,0x03,0x45,0x64,0x03,0x97,0x60,0xFF,0x1F,0xE7,0x80,0x40,0x12,
+0xB7,0x54,0x00,0x20,0x83,0xA7,0x04,0x03,0x83,0xC7,0x47,0x0A,0x5D,0x8D,0x13,0x75,
+0xF5,0x0F,0x4D,0xDD,0x97,0x80,0xFF,0x1F,0xE7,0x80,0xC0,0xB1,0x97,0x80,0xFF,0x1F,
+0xE7,0x80,0xA0,0xAE,0x83,0xA7,0x04,0x03,0x83,0xC7,0x47,0x0A,0x95,0xEF,0x89,0x47,
+0x23,0x0A,0xF4,0x02,0x61,0xBF,0xB7,0xF7,0x00,0x20,0x03,0xC7,0x57,0x3A,0x89,0x47,
+0x63,0x17,0xF7,0x00,0x83,0x47,0x14,0x04,0x93,0xF7,0xF7,0x0F,0xC1,0xF3,0x03,0x45,
+0x64,0x03,0x97,0x60,0xFF,0x1F,0xE7,0x80,0xA0,0x0C,0x2D,0xD9,0xB7,0xF7,0x00,0x20,
+0x05,0x47,0xA3,0x88,0xE7,0x70,0x9D,0xB7,0x9D,0x47,0xA3,0x0E,0xF4,0x02,0xB9,0xBF,
+0x41,0x11,0x22,0xC4,0x37,0xF4,0x00,0x20,0x06,0xC6,0x93,0x07,0x84,0x68,0x83,0xC7,
+0x07,0x04,0x93,0xF7,0xF7,0x0F,0xC5,0xCB,0x13,0x04,0x84,0x68,0x83,0x47,0x74,0x00,
+0x93,0xF7,0xF7,0x0F,0xCD,0xC3,0x83,0x47,0x24,0x04,0x13,0x07,0x10,0x03,0x63,0x6C,
+0xF7,0x08,0x48,0x4C,0x8A,0x85,0x97,0x50,0xFF,0x1F,0xE7,0x80,0xE0,0x3D,0x83,0x47,
+0x24,0x04,0x02,0x47,0x85,0x8B,0x8D,0xCB,0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,
+0x03,0x46,0x24,0x04,0x83,0xC7,0x26,0x16,0xB2,0x97,0x51,0x46,0xB3,0x87,0xC7,0x02,
+0x63,0xF1,0xE7,0x06,0x83,0xC7,0x06,0x15,0x93,0xF7,0x07,0x04,0x85,0xCB,0x97,0x40,
+0xFF,0x1F,0xE7,0x80,0x00,0x29,0x3D,0xA0,0x83,0x46,0x24,0x04,0xD1,0x47,0xB3,0x87,
+0xD7,0x02,0x93,0x87,0x87,0x0C,0x63,0xFE,0xE7,0x02,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0x07,0x01,0x83,0xC7,0x07,0x15,0x93,0xF7,0x07,0x04,0xF1,0xDB,0x97,0x40,0xFF,0x1F,
+0xE7,0x80,0x60,0x28,0x37,0xF5,0x00,0x20,0x13,0x05,0x45,0x6A,0x97,0x50,0xFF,0x1F,
+0xE7,0x80,0x60,0x31,0x83,0x47,0x24,0x04,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x23,0x01,
+0xF4,0x04,0x1C,0x44,0x1C,0xC8,0xB2,0x40,0x22,0x44,0x41,0x01,0x82,0x80,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0x47,0x0C,0x93,0xF7,0xF7,0x0F,0xC5,0xC3,
+0x41,0x11,0x22,0xC4,0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x68,0x06,0xC6,0x83,0xC7,
+0x27,0x03,0x13,0x04,0x84,0x68,0x93,0xF7,0xF7,0x0F,0x95,0xEF,0x08,0x50,0x8A,0x85,
+0x97,0x50,0xFF,0x1F,0xE7,0x80,0x40,0x31,0x02,0x47,0xBD,0x67,0x93,0x87,0x07,0xA6,
+0x63,0xF3,0xE7,0x02,0x89,0x47,0x23,0x09,0xF4,0x02,0x85,0x47,0x23,0x00,0xF4,0x04,
+0x97,0x40,0xFF,0x1F,0xE7,0x80,0x20,0x20,0x05,0x45,0xEF,0x30,0x3F,0xF8,0x97,0x40,
+0xFF,0x1F,0xE7,0x80,0x00,0x1D,0x83,0x47,0x24,0x03,0x09,0x47,0x63,0x1D,0xF7,0x02,
+0xB7,0xF7,0x00,0x20,0x83,0xC7,0x87,0x4D,0x99,0xCB,0x23,0x00,0x04,0x04,0x8D,0x47,
+0x23,0x09,0xF4,0x02,0x97,0x40,0xFF,0x1F,0xE7,0x80,0xE0,0x1C,0x29,0xA8,0x08,0x50,
+0x8A,0x85,0x97,0x50,0xFF,0x1F,0xE7,0x80,0x20,0x2B,0x02,0x47,0xC5,0x67,0x93,0x87,
+0x07,0x17,0xE3,0xEC,0xE7,0xFC,0xB2,0x40,0x22,0x44,0x41,0x01,0x82,0x80,0x82,0x80,
+0x11,0x11,0xB7,0xF7,0x00,0x20,0x13,0x86,0x87,0x6D,0x22,0xCC,0x26,0xCA,0x83,0x07,
+0x96,0x06,0xB7,0xF5,0x00,0x20,0x13,0x17,0x25,0x00,0x3E,0xC2,0x93,0x87,0xC5,0x2D,
+0x83,0xD7,0x87,0x01,0x13,0x07,0x67,0x04,0x83,0x06,0x86,0x06,0x3E,0xC0,0x93,0x07,
+0x15,0x00,0x85,0x8B,0x8A,0x07,0x32,0x97,0xB2,0x97,0x02,0x45,0x37,0xB6,0x00,0x20,
+0x13,0x03,0xC6,0x2C,0x13,0x06,0xC6,0x2C,0x32,0xC8,0x05,0x66,0x06,0x05,0x13,0x06,
+0x06,0xA9,0x2A,0xC4,0x81,0x43,0x93,0x85,0xC5,0x2D,0x32,0xC6,0x99,0xEE,0xB2,0x46,
+0x09,0x07,0x89,0x07,0x36,0x93,0x85,0x46,0x63,0x96,0xD3,0x00,0x62,0x44,0xD2,0x44,
+0x71,0x01,0x82,0x80,0x85,0x43,0x92,0x46,0xD5,0xB7,0x83,0x56,0x07,0x00,0x03,0xD6,
+0x67,0x04,0x9A,0x82,0xBE,0x06,0xB3,0xD6,0xC6,0x02,0x01,0x45,0x85,0x06,0x85,0x82,
+0x02,0x46,0x63,0x1B,0xC5,0x06,0x83,0x56,0x87,0x00,0x03,0xD6,0xE7,0x04,0x13,0x04,
+0x80,0x54,0xBE,0x06,0xB3,0xD6,0xC6,0x02,0x22,0x46,0x83,0xC4,0x25,0x01,0x01,0x45,
+0xB3,0x02,0xC3,0x00,0x33,0x84,0x83,0x02,0x85,0x06,0x85,0x82,0x63,0x63,0x95,0x06,
+0x83,0x56,0x07,0x01,0x83,0xD2,0x67,0x05,0x03,0xC5,0x35,0x01,0xBE,0x06,0x03,0xC6,
+0x25,0x01,0x82,0x44,0xB3,0xD6,0x56,0x02,0x81,0x42,0x26,0x96,0x32,0x94,0x42,0x46,
+0x06,0x04,0x32,0x94,0x85,0x06,0x85,0x82,0xE3,0xFB,0xA2,0xF6,0x03,0x16,0x04,0x00,
+0x85,0x02,0xC2,0x02,0x33,0x06,0xD6,0x02,0x93,0xD2,0x02,0x01,0x09,0x04,0x05,0x06,
+0x39,0x82,0x23,0x1F,0xC4,0xFE,0xCD,0xB7,0x03,0x96,0x02,0x00,0x05,0x05,0x42,0x05,
+0x33,0x06,0xD6,0x02,0x41,0x81,0x89,0x02,0x05,0x06,0x39,0x82,0x23,0x9F,0xC2,0xFE,
+0x85,0xBF,0x03,0x96,0x02,0x00,0x05,0x05,0x42,0x05,0x33,0x06,0xD6,0x02,0x41,0x81,
+0x89,0x02,0x05,0x06,0x39,0x82,0x23,0x9F,0xC2,0xFE,0x49,0xB7,0x51,0x11,0x22,0xC2,
+0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x6D,0x06,0xC4,0x83,0xC7,0x67,0x06,0x13,0x04,
+0x84,0x6D,0x8D,0xEF,0x03,0x45,0x24,0x04,0x65,0x35,0x83,0x47,0x24,0x04,0x03,0x45,
+0x44,0x03,0x85,0x45,0xA3,0x01,0xF4,0x04,0xCD,0x2B,0x97,0x50,0xFF,0x1F,0xE7,0x80,
+0x00,0xCA,0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x68,0x83,0x47,0x47,0x00,0x93,0xF7,
+0xF7,0x0F,0xE5,0xDF,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0x83,0x07,0x84,0x06,
+0x89,0xCB,0xB7,0x77,0x00,0x20,0x93,0x87,0x07,0xD8,0xA3,0x84,0x07,0x14,0x23,0x95,
+0x07,0x14,0x83,0x07,0x94,0x06,0xD5,0xDB,0xB7,0x87,0x00,0x20,0x93,0x87,0x07,0xD8,
+0xA3,0x83,0x07,0x7E,0x23,0x94,0x07,0x7E,0x4D,0xB7,0x21,0x11,0x26,0xC6,0xB7,0xB4,
+0x00,0x20,0x22,0xC8,0x2A,0x84,0x03,0xA5,0x44,0x2C,0x05,0x66,0x13,0x06,0x06,0xA9,
+0x81,0x45,0x06,0xCA,0xEF,0x30,0x5F,0xDA,0x42,0x04,0x41,0x80,0x93,0x17,0x04,0x01,
+0xC1,0x87,0x63,0x47,0xF0,0x00,0xD2,0x40,0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,
+0xB7,0xF7,0x00,0x20,0x13,0x85,0x07,0x69,0x97,0x50,0xFF,0x1F,0xE7,0x80,0xA0,0x04,
+0x97,0x50,0xFF,0x1F,0xE7,0x80,0xA0,0xC0,0x97,0x70,0xFF,0x1F,0xE7,0x80,0x80,0x73,
+0x01,0x45,0x97,0x40,0xFF,0x1F,0xE7,0x80,0x20,0x33,0x05,0x45,0x97,0x40,0xFF,0x1F,
+0xE7,0x80,0x80,0x32,0x97,0x40,0xFF,0x1F,0xE7,0x80,0x40,0x1F,0xB7,0xF7,0x00,0x20,
+0x03,0xD6,0x47,0x2F,0x01,0x47,0xB7,0xF5,0x00,0x20,0x93,0x17,0x07,0x01,0xC1,0x83,
+0x63,0xEE,0xC7,0x04,0x37,0x57,0x00,0x20,0x83,0x27,0x07,0x01,0x81,0x46,0x37,0xF3,
+0x00,0x20,0x83,0xC5,0x97,0x01,0x93,0x97,0x06,0x01,0xC1,0x83,0x63,0xE7,0xB7,0x08,
+0x83,0x27,0x07,0x01,0xB7,0xF5,0x00,0x20,0x01,0x47,0x03,0xC6,0xA7,0x01,0x93,0x17,
+0x07,0x01,0xC1,0x83,0x63,0xE6,0xC7,0x0C,0xB7,0x57,0x00,0x20,0x83,0xA7,0x47,0x01,
+0x85,0x66,0x93,0x86,0x06,0x80,0xD8,0x43,0x7D,0x14,0x55,0x8F,0xD8,0xC3,0xD8,0x43,
+0xFD,0x76,0x93,0x86,0xF6,0x7F,0x75,0x8F,0xD8,0xC3,0x3D,0xBF,0xB7,0xB6,0x00,0x20,
+0x03,0xA5,0x45,0x12,0x83,0xA6,0x86,0x2C,0x93,0x17,0x17,0x00,0x3E,0x95,0xBE,0x96,
+0x83,0xD6,0x06,0x00,0x03,0x55,0x05,0x00,0x32,0xC4,0x3A,0xC2,0x15,0x8D,0x42,0x05,
+0x41,0x85,0x3E,0xC0,0xEF,0x30,0x7F,0xCC,0x83,0xA6,0x44,0x2C,0x82,0x47,0xB7,0xF5,
+0x00,0x20,0x12,0x47,0xB6,0x97,0x83,0x96,0x07,0x00,0x22,0x46,0x63,0xD3,0xA6,0x00,
+0xAA,0x86,0x23,0x90,0xD7,0x00,0x05,0x07,0x89,0xBF,0x37,0xA6,0x00,0x20,0x03,0x25,
+0x83,0x12,0x03,0x26,0xC6,0xD8,0x93,0x97,0x16,0x00,0x3E,0x95,0x3E,0x96,0x03,0x56,
+0x06,0x00,0x03,0x55,0x05,0x00,0x2E,0xC4,0x36,0xC2,0x11,0x8D,0x42,0x05,0x41,0x85,
+0x3E,0xC0,0xEF,0x30,0x9F,0xC7,0x37,0xA6,0x00,0x20,0x03,0x26,0x06,0xD9,0x82,0x47,
+0x37,0xF3,0x00,0x20,0x92,0x46,0xB2,0x97,0x03,0x96,0x07,0x00,0xA2,0x45,0x37,0x57,
+0x00,0x20,0x63,0x53,0xA6,0x00,0x2A,0x86,0x23,0x90,0xC7,0x00,0x85,0x06,0x21,0xBF,
+0xB7,0xE6,0x00,0x20,0x03,0xA5,0x05,0x12,0x83,0xA6,0xC6,0xD1,0x93,0x17,0x17,0x00,
+0x3E,0x95,0xBE,0x96,0x83,0xD6,0x06,0x00,0x03,0x55,0x05,0x00,0x32,0xC4,0x3A,0xC2,
+0x15,0x8D,0x42,0x05,0x41,0x85,0x3E,0xC0,0xEF,0x30,0x3F,0xC2,0xB7,0xA6,0x00,0x20,
+0x83,0xA6,0x86,0xD8,0x82,0x47,0xB7,0xF5,0x00,0x20,0x12,0x47,0xB6,0x97,0x83,0x96,
+0x07,0x00,0x22,0x46,0x63,0xD3,0xA6,0x00,0xAA,0x86,0x23,0x90,0xD7,0x00,0x05,0x07,
+0xF9,0xBD,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0xA1,0x8B,
+0x63,0x82,0x07,0x20,0x13,0x01,0xC1,0xFD,0x26,0xCC,0xB7,0xF4,0x00,0x20,0x93,0x87,
+0x84,0x6D,0x06,0xD0,0x22,0xCE,0x03,0xC4,0x37,0x03,0x37,0xF7,0x00,0x20,0x13,0x07,
+0xC7,0x67,0x05,0x88,0x22,0x97,0x03,0x46,0x47,0x00,0xB7,0xF6,0x00,0x20,0xB7,0x77,
+0x00,0x20,0x13,0x76,0xF6,0x0F,0x93,0x84,0x84,0x6D,0x93,0x86,0xC6,0x74,0x93,0x87,
+0x47,0xBA,0x63,0x11,0x06,0x14,0x13,0x07,0x00,0x14,0x33,0x07,0xE4,0x02,0x93,0x87,
+0x07,0x05,0x3E,0x85,0x93,0x03,0x00,0x05,0x36,0x97,0x3A,0xC0,0x03,0xC7,0x24,0x04,
+0x81,0x46,0x3A,0xC2,0x03,0xC7,0x64,0x06,0x3A,0xC4,0x13,0x07,0xA4,0x02,0x06,0x07,
+0x26,0x97,0x3A,0xC8,0x13,0x07,0x84,0x02,0x06,0x07,0x26,0x97,0x3A,0xCA,0x03,0xC7,
+0x24,0x03,0x13,0x03,0x05,0xFB,0x1A,0x86,0x33,0x57,0xD7,0x40,0x05,0x8B,0x63,0x05,
+0x07,0x16,0x33,0x87,0x76,0x02,0x02,0x46,0xB3,0x00,0xE6,0x00,0x12,0x47,0x01,0xC7,
+0x22,0x47,0x63,0x07,0x07,0x10,0x01,0x47,0xB3,0x05,0xE3,0x00,0xB3,0x82,0xE0,0x00,
+0x03,0xD6,0x05,0x00,0x83,0xD2,0x02,0x00,0x09,0x07,0x33,0x06,0x56,0x40,0x23,0x90,
+0xC5,0x00,0xE3,0x13,0x77,0xFE,0x85,0x06,0x11,0x47,0x13,0x05,0x05,0x05,0xE3,0x98,
+0xE6,0xFA,0x81,0x45,0x01,0x45,0x01,0x43,0x91,0x42,0x03,0xC7,0x24,0x03,0x33,0x57,
+0xB7,0x40,0x05,0x8B,0x0D,0xCF,0x13,0x86,0x07,0xFB,0x83,0x16,0x06,0x00,0x03,0x17,
+0x46,0x00,0x83,0x10,0x26,0x00,0x83,0x13,0x66,0x00,0xB3,0x86,0xD6,0x02,0x33,0x07,
+0xE7,0x02,0xB3,0x80,0x10,0x02,0x36,0x97,0xB3,0x83,0x73,0x02,0x06,0x97,0x1E,0x97,
+0x3A,0x93,0x63,0x73,0xE5,0x00,0x3A,0x85,0x21,0x06,0xE3,0x98,0xC7,0xFC,0x85,0x05,
+0x93,0x87,0x07,0x05,0xE3,0x9B,0x55,0xFA,0x1A,0xC2,0xEF,0x40,0x9F,0xA9,0x12,0x43,
+0x2A,0xC0,0x1A,0x85,0xEF,0x40,0xFF,0xA8,0xA1,0x67,0x02,0x47,0x63,0x64,0xF5,0x00,
+0x13,0x85,0xF7,0xFF,0xA1,0x67,0x63,0x64,0xF7,0x00,0x13,0x87,0xF7,0xFF,0x93,0x17,
+0x14,0x00,0x13,0x16,0x24,0x00,0x21,0x04,0xB7,0x06,0x01,0x20,0x0A,0x04,0x26,0x94,
+0x93,0x86,0xC6,0x9C,0x85,0x07,0x08,0xC0,0x18,0xC4,0x82,0x50,0x72,0x44,0x36,0x96,
+0x86,0x07,0x23,0x10,0xE6,0x00,0xB6,0x97,0x23,0x90,0xA7,0x00,0xE2,0x44,0x13,0x01,
+0x41,0x02,0x82,0x80,0x93,0x05,0x00,0x14,0xB3,0x05,0xB4,0x02,0x23,0x02,0x07,0x00,
+0x13,0x05,0x00,0x14,0x01,0x47,0x33,0x83,0xE7,0x00,0x03,0x53,0x03,0x00,0x33,0x86,
+0xE5,0x00,0x36,0x96,0x23,0x10,0x66,0x00,0x09,0x07,0xE3,0x16,0xA7,0xFE,0x61,0xBD,
+0x42,0x47,0x93,0x05,0x40,0x06,0x01,0x46,0x03,0x57,0xE7,0x00,0xB3,0x05,0xB7,0x02,
+0x52,0x47,0x03,0x57,0xE7,0x00,0x33,0xD7,0xE5,0x02,0x3A,0xC6,0x33,0x87,0xC0,0x00,
+0xB2,0x45,0x03,0x17,0x07,0x00,0xB3,0x02,0xC3,0x00,0x09,0x06,0x33,0x07,0xB7,0x02,
+0x93,0x05,0xC0,0xF9,0x33,0x47,0xB7,0x02,0x83,0xD5,0x02,0x00,0x2E,0x97,0x23,0x90,
+0xE2,0x00,0xE3,0x1D,0x76,0xFC,0xC1,0xBD,0x23,0x10,0x06,0x00,0x09,0x06,0xE3,0x1D,
+0xC5,0xFE,0xD1,0xB5,0x82,0x80,0x51,0x11,0x37,0xF7,0x00,0x20,0x22,0xC2,0x06,0xC4,
+0x26,0xC0,0x01,0x44,0x13,0x07,0x87,0x6D,0x83,0x47,0x27,0x03,0x13,0x75,0xF4,0x0F,
+0xB3,0xD7,0x87,0x40,0x85,0x8B,0x85,0xC7,0xB7,0xF4,0x00,0x20,0x93,0x87,0x84,0x68,
+0xA3,0x82,0x07,0x00,0xEF,0x30,0x3F,0xD6,0xB7,0xF7,0x00,0x20,0x93,0x84,0x84,0x68,
+0x13,0x87,0x87,0x6D,0x83,0xC7,0x54,0x00,0x93,0xF7,0xF7,0x0F,0xE5,0xDF,0x05,0x04,
+0x91,0x47,0xE3,0x13,0xF4,0xFC,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0xA3,0x82,
+0x07,0x00,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x93,0x02,0x00,0x0A,
+0xB3,0x02,0x55,0x02,0x51,0x11,0xB7,0xF7,0x00,0x20,0x26,0xC2,0x37,0x57,0x00,0x20,
+0x22,0xC4,0x93,0x87,0xC7,0x2D,0x03,0x26,0x07,0x01,0x83,0xC7,0x37,0x01,0xB7,0xF3,
+0x00,0x20,0x01,0x47,0xB2,0x97,0x3E,0xC0,0x93,0x04,0x80,0x02,0x93,0x83,0xC3,0x74,
+0x82,0x47,0x63,0x17,0xF6,0x02,0x86,0x05,0x2E,0x95,0x13,0x05,0x85,0x02,0xB7,0xF5,
+0x00,0x20,0x06,0x05,0x93,0x85,0x85,0x6D,0xC1,0x67,0x2E,0x95,0x63,0x64,0xF7,0x00,
+0x13,0x87,0xF7,0xFF,0x22,0x44,0x23,0x17,0xE5,0x00,0x92,0x44,0x31,0x01,0x82,0x80,
+0x83,0x46,0x06,0x0B,0x11,0x43,0x93,0xF7,0xC6,0x0F,0x8D,0x8A,0xB3,0x86,0x96,0x02,
+0xB6,0x97,0x96,0x97,0x86,0x07,0x9E,0x97,0x83,0x96,0x07,0x00,0x7D,0x13,0x42,0x03,
+0x13,0xD4,0xF6,0x41,0xA1,0x8E,0x81,0x8E,0x13,0x53,0x03,0x01,0x36,0x97,0x89,0x07,
+0xE3,0x14,0x03,0xFE,0x05,0x06,0x69,0xBF,0x51,0x11,0x37,0xF7,0x00,0x20,0x06,0xC4,
+0x22,0xC2,0x13,0x07,0x87,0x68,0x83,0x47,0x37,0x00,0x93,0xF7,0xF7,0x0F,0xE5,0xFF,
+0x37,0xF4,0x00,0x20,0x13,0x04,0x84,0x6D,0x85,0x47,0xA3,0x0A,0xF4,0x02,0x05,0x89,
+0xA3,0x09,0xA4,0x02,0x03,0x45,0x34,0x03,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x20,0xE4,
+0xD9,0x35,0x45,0x39,0xA2,0x40,0xA3,0x0A,0x04,0x02,0x12,0x44,0x31,0x01,0x82,0x80,
+0x51,0x11,0x37,0xF7,0x00,0x20,0x26,0xC0,0x06,0xC4,0x22,0xC2,0xAA,0x84,0x13,0x07,
+0x87,0x68,0x83,0x47,0x37,0x00,0x93,0xF7,0xF7,0x0F,0xE5,0xFF,0x05,0x45,0x97,0x80,
+0xFF,0x1F,0xE7,0x80,0xE0,0x06,0x37,0xF4,0x00,0x20,0x13,0x04,0x84,0x6D,0x05,0x47,
+0xA3,0x0A,0xE4,0x02,0x85,0x88,0xA3,0x09,0x94,0x02,0x83,0x46,0x34,0x03,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x67,0xB6,0x97,0x23,0x82,0xE7,0x00,0x03,0x45,0x34,0x03,
+0x97,0x80,0xFF,0x1F,0xE7,0x80,0xA0,0xDD,0xB9,0x3D,0xA1,0x31,0xA2,0x40,0xA3,0x0A,
+0x04,0x02,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x51,0x11,0xB7,0xF7,0x00,0x20,
+0x22,0xC2,0x06,0xC4,0x13,0x74,0x15,0x00,0x93,0x87,0x87,0x68,0x23,0x8B,0x87,0x02,
+0xB1,0xC5,0x05,0x47,0xA3,0x8B,0x87,0x02,0xA3,0x8A,0xE7,0x02,0x22,0x85,0xEF,0x90,
+0x4F,0xCE,0x22,0x85,0xEF,0x90,0x0F,0xDF,0x22,0x85,0xEF,0x90,0x0F,0xD6,0x22,0x85,
+0x97,0x80,0xFF,0x1F,0xE7,0x80,0xA0,0xD8,0x85,0x67,0x93,0x87,0xE7,0x69,0x33,0x04,
+0xF4,0x02,0xB7,0x77,0x00,0x20,0x93,0x87,0x07,0xD8,0xA2,0x40,0x3E,0x94,0xB7,0x57,
+0x00,0x20,0x23,0xA8,0x87,0xFE,0x12,0x44,0x31,0x01,0x82,0x80,0xA3,0x8A,0x07,0x02,
+0x75,0xBF,0x51,0x11,0x26,0xC0,0xB7,0xF4,0x00,0x20,0x22,0xC2,0x06,0xC4,0x93,0x87,
+0xC4,0x2D,0x03,0xC7,0x57,0x00,0x37,0xF4,0x00,0x20,0xB7,0x56,0x00,0x20,0x23,0x0C,
+0xE4,0x6C,0x03,0xC7,0x67,0x00,0x93,0x07,0x84,0x6D,0x93,0x84,0xC4,0x2D,0xA3,0x80,
+0xE7,0x00,0x03,0xA7,0x06,0x01,0x13,0x04,0x84,0x6D,0x03,0x46,0x87,0x02,0x23,0x8A,
+0xC7,0x00,0x03,0x46,0x47,0x02,0x23,0x88,0xC7,0x00,0x03,0x46,0x47,0x03,0x23,0x89,
+0xC7,0x00,0x03,0x46,0x67,0x02,0x93,0x75,0xF6,0x00,0x11,0x82,0x23,0x83,0xC7,0x00,
+0x03,0x46,0x77,0x02,0x23,0x84,0xB7,0x00,0x23,0x85,0xC7,0x00,0x03,0x46,0x57,0x02,
+0x93,0x75,0xF6,0x00,0x11,0x82,0x23,0x82,0xC7,0x00,0x03,0x46,0x37,0x02,0x23,0x81,
+0xB7,0x00,0x23,0x86,0xC7,0x00,0x03,0x46,0xB7,0x02,0x23,0x87,0xC7,0x00,0x03,0x46,
+0x97,0x02,0x23,0x8B,0xC7,0x00,0x03,0x46,0x47,0x16,0x23,0x8C,0xC7,0x00,0x03,0x46,
+0x67,0x16,0x23,0x8D,0xC7,0x00,0x03,0x46,0x87,0x16,0x23,0x8E,0xC7,0x00,0x03,0x46,
+0xA7,0x16,0x23,0x8F,0xC7,0x00,0x03,0x46,0x57,0x07,0xA3,0x8A,0xC7,0x00,0x03,0x46,
+0x17,0x07,0xA3,0x88,0xC7,0x00,0x03,0x46,0x77,0x07,0xA3,0x89,0xC7,0x00,0x03,0x46,
+0x37,0x07,0x93,0x75,0xF6,0x00,0x11,0x82,0xA3,0x83,0xC7,0x00,0x03,0x46,0x47,0x07,
+0xA3,0x84,0xB7,0x00,0xA3,0x85,0xC7,0x00,0x03,0x46,0x27,0x07,0x93,0x75,0xF6,0x00,
+0x11,0x82,0xA3,0x82,0xC7,0x00,0x03,0x46,0x07,0x07,0xA3,0x81,0xB7,0x00,0xA3,0x86,
+0xC7,0x00,0x03,0x46,0x67,0x07,0xA3,0x87,0xC7,0x00,0x03,0x46,0x97,0x03,0xA3,0x8B,
+0xC7,0x00,0x03,0x46,0x57,0x16,0xA3,0x8C,0xC7,0x00,0x03,0x46,0x77,0x16,0xA3,0x8D,
+0xC7,0x00,0x03,0x46,0x97,0x16,0xA3,0x8E,0xC7,0x00,0x03,0x46,0xB7,0x16,0xA3,0x8F,
+0xC7,0x00,0x83,0x07,0xB7,0x17,0x0D,0x46,0x93,0x95,0x07,0x01,0xC1,0x85,0x63,0x53,
+0xB6,0x00,0x8D,0x47,0x93,0x95,0x07,0x01,0xC1,0x85,0x79,0x56,0x63,0xD3,0xC5,0x00,
+0xF9,0x57,0x8A,0x07,0x23,0x04,0xF4,0x06,0x83,0x07,0xC7,0x17,0x0D,0x46,0x93,0x95,
+0x07,0x01,0xC1,0x85,0x63,0x53,0xB6,0x00,0x8D,0x47,0x93,0x95,0x07,0x01,0xC1,0x85,
+0x79,0x56,0x63,0xD3,0xC5,0x00,0xF9,0x57,0x8A,0x07,0xA3,0x04,0xF4,0x06,0x83,0x47,
+0x47,0x15,0x85,0x8B,0x91,0xC7,0x83,0x57,0x84,0x06,0x99,0xC3,0xA3,0x03,0x04,0x06,
+0x05,0x45,0x97,0x80,0xFF,0x1F,0xE7,0x80,0xA0,0xE2,0xB7,0x56,0x00,0x20,0x83,0xA7,
+0x06,0x01,0x83,0xC7,0x87,0x07,0x13,0x97,0x87,0x01,0x61,0x87,0x63,0x51,0x07,0x02,
+0x03,0xC7,0xF4,0x08,0x21,0x8B,0x01,0xCF,0x85,0x8B,0x23,0x0A,0xF4,0x02,0x03,0x45,
+0x44,0x03,0x12,0x44,0xA2,0x40,0x82,0x44,0x85,0x45,0x31,0x01,0xF9,0xB3,0x23,0x0A,
+0x04,0x02,0xF5,0xB7,0x51,0x11,0xB7,0xF7,0x00,0x20,0x22,0xC2,0x26,0xC0,0x06,0xC4,
+0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0x37,0xF4,0x00,0x20,0xB7,0x54,0x00,0x20,
+0xA1,0x8B,0x13,0x04,0x84,0x6D,0x89,0xEB,0x83,0xA7,0x04,0x01,0x83,0xC7,0x87,0x07,
+0x85,0x8B,0x23,0x0A,0xF4,0x02,0x51,0xA8,0xB7,0xF7,0x00,0x20,0x83,0xD7,0x67,0x6B,
+0x99,0xE3,0x01,0x45,0x31,0x3B,0x83,0xA7,0x04,0x01,0x83,0xC7,0x87,0x07,0x13,0x97,
+0x87,0x01,0x61,0x87,0x63,0x45,0x07,0x08,0x83,0x47,0x74,0x06,0x05,0x47,0x63,0x92,
+0xE7,0x02,0x01,0x45,0x23,0x01,0xF4,0x04,0xE5,0x39,0x83,0x45,0x24,0x04,0x01,0x45,
+0xEF,0xF0,0xDF,0xC0,0x05,0x45,0xED,0x31,0x83,0x45,0x24,0x04,0x05,0x45,0xEF,0xF0,
+0xFF,0xBF,0x01,0x45,0x23,0x01,0x04,0x04,0xE1,0x39,0x01,0x45,0x71,0x31,0x83,0x45,
+0x24,0x04,0x01,0x45,0xEF,0xF0,0x9F,0xBE,0x05,0x45,0xD9,0x31,0x05,0x45,0xAD,0x39,
+0x83,0x45,0x24,0x04,0x05,0x45,0xEF,0xF0,0x7F,0xBD,0x03,0xA7,0x04,0x01,0x83,0x47,
+0xB7,0x07,0x83,0x46,0xA7,0x07,0x58,0x54,0xA2,0x07,0xD5,0x8F,0x85,0x83,0xBA,0x97,
+0x18,0x54,0x63,0x7C,0xF7,0x00,0x23,0x0A,0x04,0x02,0x03,0x45,0x44,0x03,0x12,0x44,
+0xA2,0x40,0x82,0x44,0x85,0x45,0x31,0x01,0xCD,0xB9,0x85,0x47,0x99,0xBF,0x85,0x8B,
+0x23,0x0A,0xF4,0x02,0x03,0x45,0x44,0x03,0xA5,0x39,0x03,0x45,0x44,0x03,0xEF,0xF0,
+0xBF,0xC2,0xE1,0xBF,0xB7,0x67,0x00,0x20,0x93,0x87,0x47,0x7E,0x83,0xC7,0x57,0x36,
+0x93,0xF7,0xF7,0x0F,0x8D,0xC3,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,
+0xF7,0x08,0xC1,0x8B,0x89,0xCB,0x37,0x56,0x00,0x20,0x83,0x27,0x06,0x01,0x83,0x87,
+0x87,0x07,0x63,0xD8,0x07,0x00,0xB7,0x77,0x00,0x20,0x23,0x8C,0x07,0xB6,0x01,0x45,
+0x82,0x80,0xB7,0xF6,0x00,0x20,0x93,0x86,0x86,0x4E,0x83,0xC7,0xB6,0x00,0xE5,0xDB,
+0x51,0x11,0x22,0xC2,0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x6D,0x06,0xC4,0x26,0xC0,
+0x03,0xC7,0x47,0x03,0x85,0x47,0x13,0x04,0x84,0x6D,0x13,0x77,0xF7,0x0F,0x63,0x1B,
+0xF7,0x0A,0x83,0xC5,0xA6,0x00,0xB7,0xF4,0x00,0x20,0x93,0x87,0x84,0x68,0xB7,0x76,
+0x00,0x20,0x9C,0x47,0x93,0x86,0x86,0xB7,0x93,0x84,0x84,0x68,0xC9,0xE9,0x9C,0xD4,
+0x23,0x80,0xE6,0x00,0x98,0x54,0x99,0x8F,0x05,0x67,0x13,0x07,0x87,0xBB,0x63,0x73,
+0xF7,0x08,0x83,0x47,0x44,0x03,0x85,0x07,0x85,0x8B,0xA3,0x09,0xF4,0x02,0x03,0x45,
+0x34,0x03,0xEF,0xF0,0x7F,0xB7,0x37,0x56,0x00,0x20,0x03,0x26,0x06,0x01,0x03,0x47,
+0x34,0x03,0x83,0x47,0xB6,0x07,0x83,0x45,0xA6,0x07,0x13,0x06,0x20,0x03,0xA2,0x07,
+0xCD,0x8F,0xB3,0x87,0xC7,0x02,0x13,0x06,0x40,0x06,0x21,0x07,0x0A,0x07,0x22,0x97,
+0x18,0x47,0xB3,0xD7,0xC7,0x02,0x63,0x71,0xF7,0x04,0x83,0x47,0x34,0x03,0x85,0x45,
+0x93,0xF7,0xF7,0x0F,0x23,0x0A,0xF4,0x02,0x03,0x45,0x44,0x03,0xEF,0xF0,0xFF,0xBD,
+0x97,0x40,0xFF,0x1F,0xE7,0x80,0xA0,0x28,0x83,0xC7,0x44,0x00,0x93,0xF7,0xF7,0x0F,
+0xE5,0xDF,0x05,0x45,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x03,0xC7,
+0x06,0x00,0x2D,0xFB,0x01,0x45,0xFD,0xB7,0x83,0x47,0x44,0x03,0x93,0xF7,0xF7,0x0F,
+0xA3,0x09,0xF4,0x02,0x03,0x45,0x44,0x03,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x20,0x96,
+0xB7,0x77,0x00,0x20,0x93,0x86,0x87,0xB7,0x23,0x80,0x06,0x00,0xE1,0xBF,0x01,0x11,
+0xB7,0xF7,0x00,0x20,0x26,0xCA,0x06,0xCE,0x22,0xCC,0x13,0x87,0x87,0x6D,0x03,0x46,
+0x47,0x03,0x37,0x05,0x01,0x20,0x93,0x06,0xC5,0x9C,0x23,0x94,0xC6,0x00,0x03,0x46,
+0x27,0x04,0xB7,0xF5,0x00,0x20,0x03,0x23,0xC7,0x03,0x23,0x95,0xC6,0x00,0x13,0x86,
+0x85,0x68,0x03,0x46,0x56,0x03,0x23,0x97,0x66,0x00,0x23,0x00,0x67,0x04,0x23,0x96,
+0xC6,0x00,0x03,0x46,0x67,0x06,0x23,0x2E,0x07,0x02,0x23,0x24,0x07,0x02,0x13,0x36,
+0x16,0x00,0x23,0x90,0xC6,0x02,0x37,0x56,0x00,0x20,0x03,0x46,0x26,0x00,0x23,0x26,
+0x07,0x02,0x93,0x84,0x87,0x6D,0x23,0x91,0xC6,0x02,0x37,0xA6,0x00,0x20,0x03,0x56,
+0x86,0xAC,0x93,0x07,0xC5,0x9C,0x3E,0xC2,0x23,0x92,0xC6,0x02,0xB7,0xF6,0x00,0x20,
+0x13,0x87,0xC6,0x2D,0x03,0x47,0xF7,0x08,0x93,0x87,0x85,0x68,0x3E,0xC0,0x21,0x8B,
+0x63,0x09,0x07,0x14,0x02,0x47,0x93,0x87,0xC6,0x2D,0x85,0x46,0x03,0x47,0x97,0x03,
+0x63,0x81,0xE6,0x14,0x03,0xC7,0xF7,0x08,0x41,0x8B,0x63,0x15,0x07,0x10,0x02,0x47,
+0x03,0x47,0xD7,0x03,0x63,0x1C,0x07,0x12,0xB7,0xF6,0x00,0x20,0x93,0x86,0x86,0x4E,
+0x37,0x56,0x00,0x20,0x03,0xC7,0xB6,0x00,0x03,0x26,0x06,0x03,0x83,0xC6,0xC6,0x00,
+0x83,0x45,0x46,0x0A,0x8D,0xC2,0xB7,0x56,0x00,0x20,0x03,0xC6,0x66,0x3F,0x85,0x46,
+0x63,0xEB,0xC6,0x00,0x63,0xEB,0xB6,0x12,0xB7,0x56,0x00,0x20,0x83,0xC6,0x36,0x40,
+0xD9,0x8E,0x63,0x86,0x06,0x10,0x63,0x92,0x05,0x12,0x65,0xC7,0x82,0x46,0x05,0x66,
+0x13,0x06,0xE6,0x69,0x83,0xC6,0x76,0x03,0xB7,0x52,0x00,0x20,0xB3,0x86,0xC6,0x02,
+0x37,0x76,0x00,0x20,0x13,0x06,0x06,0xD8,0xB2,0x96,0x23,0xA8,0xD2,0xFE,0x05,0x46,
+0x82,0x46,0x83,0xC6,0x36,0x00,0xE3,0x0D,0xD6,0xFE,0x37,0x76,0x00,0x20,0x93,0x06,
+0x86,0xB7,0x83,0xC6,0x16,0x00,0x4D,0x45,0x13,0x06,0x86,0xB7,0x63,0x65,0xD5,0x00,
+0x85,0x06,0xA3,0x00,0xD6,0x00,0x4D,0x8F,0x19,0xE3,0xA3,0x00,0x06,0x00,0x37,0x55,
+0x00,0x20,0x83,0x26,0x05,0x01,0x83,0xC5,0x44,0x03,0x03,0xC7,0xB6,0x07,0x03,0xC3,
+0xA6,0x07,0x03,0xC4,0x16,0x17,0x22,0x07,0x33,0x67,0x67,0x00,0x03,0xC3,0x06,0x17,
+0x22,0x04,0x93,0xF5,0xF5,0x0F,0x2A,0xC6,0x33,0x64,0x64,0x00,0x81,0xC5,0xBA,0x85,
+0x22,0x87,0x2E,0x84,0x03,0xC5,0x84,0x03,0x85,0x45,0x63,0x1F,0xB5,0x08,0x83,0x45,
+0x16,0x00,0x4D,0x46,0x63,0x7A,0xB6,0x08,0x03,0xC6,0x44,0x03,0x93,0x55,0x17,0x00,
+0x21,0x06,0x0A,0x06,0x26,0x96,0x08,0x46,0x63,0x70,0xB5,0x08,0x09,0x47,0x23,0x8C,
+0xE4,0x02,0x05,0xA8,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x07,0x87,0x07,
+0xE3,0x47,0x07,0xEE,0x03,0xC7,0x44,0x03,0xE3,0x93,0xE6,0xEE,0x03,0xC7,0x44,0x04,
+0xE3,0x1F,0x07,0xEC,0xC5,0x31,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0xE3,0x08,
+0x05,0xEC,0xF2,0x40,0x62,0x44,0xD2,0x44,0x05,0x61,0x82,0x80,0x37,0x67,0x00,0x20,
+0x13,0x07,0x47,0x7E,0x03,0x47,0x57,0x36,0x85,0x46,0xE3,0xEF,0xE6,0xEA,0x82,0x47,
+0x37,0x77,0x00,0x20,0xA3,0x0C,0x07,0xB6,0x03,0xC7,0x77,0x03,0x21,0x07,0x0A,0x07,
+0xB3,0x87,0xE4,0x00,0x23,0xA4,0x07,0x00,0xE9,0xB7,0xE3,0x11,0x07,0xEE,0xB7,0x76,
+0x00,0x20,0xA3,0x8C,0x06,0xB6,0xD9,0xBD,0x03,0xC6,0xE7,0x08,0x13,0x76,0xF6,0x0F,
+0x09,0xC6,0x03,0xC6,0x06,0x15,0x09,0x8A,0x4D,0xF6,0x83,0xC6,0x86,0x07,0x13,0x96,
+0x86,0x01,0x61,0x86,0x63,0x56,0x06,0x04,0x03,0xC6,0x44,0x03,0x85,0x8A,0x63,0x81,
+0xC6,0x04,0x01,0x45,0x3A,0xC4,0x23,0x8A,0xD4,0x02,0x97,0x80,0xFF,0x1F,0xE7,0x80,
+0x20,0x95,0x03,0xC5,0x44,0x03,0xEF,0xF0,0x3F,0x87,0x97,0x40,0xFF,0x1F,0xE7,0x80,
+0x00,0xFD,0x22,0x47,0xB7,0x52,0x00,0x20,0x82,0x47,0x83,0xC6,0x47,0x00,0x93,0xF6,
+0xF6,0x0F,0xFD,0xDA,0x83,0xA6,0x02,0xFF,0xA3,0x84,0x06,0x14,0x23,0x95,0x06,0x14,
+0x83,0xC7,0x44,0x03,0x83,0xC6,0x14,0x04,0x09,0x46,0x93,0xF7,0xF7,0x0F,0x3E,0xC4,
+0x3A,0xC8,0x63,0x12,0xD6,0x12,0x97,0x80,0xFF,0x1F,0xE7,0x80,0xC0,0x8E,0xA3,0x80,
+0x04,0x04,0xB2,0x47,0x42,0x47,0x83,0xA6,0x07,0x01,0x83,0x86,0x86,0x07,0x63,0xCA,
+0x06,0x14,0x83,0xC6,0x44,0x03,0xA1,0x06,0x8A,0x06,0xA6,0x96,0x94,0x46,0x63,0xE6,
+0xE6,0x10,0x01,0x45,0x3A,0xC8,0x97,0x80,0xFF,0x1F,0xE7,0x80,0x60,0x8D,0x05,0x46,
+0xB7,0x56,0x00,0x20,0x23,0x82,0xC6,0x40,0x83,0xC6,0x44,0x03,0x85,0x06,0x85,0x8A,
+0xA3,0x89,0xD4,0x02,0x03,0xC5,0x34,0x03,0xEF,0xF0,0x0F,0xFE,0x83,0xC6,0x44,0x03,
+0xB2,0x47,0x03,0xC6,0x34,0x03,0xA1,0x06,0x03,0xA5,0x07,0x01,0x8A,0x06,0xA6,0x96,
+0x21,0x06,0x8C,0x46,0x0A,0x06,0x83,0x46,0xF5,0x07,0x03,0x43,0xE5,0x07,0x26,0x96,
+0x10,0x46,0xA2,0x06,0x42,0x47,0xB3,0xE6,0x66,0x00,0xB2,0x96,0xA2,0x95,0x36,0x97,
+0x63,0x6D,0xB7,0x16,0x03,0xC7,0x44,0x04,0x05,0x07,0x23,0x82,0xE4,0x04,0x03,0xC7,
+0x44,0x03,0xA2,0x47,0x63,0x98,0xE7,0x00,0x03,0xC5,0x44,0x03,0x97,0x70,0xFF,0x1F,
+0xE7,0x80,0xE0,0x5F,0x13,0x07,0x40,0x06,0xD8,0xDC,0x03,0xC7,0x44,0x03,0xA2,0x47,
+0x63,0x8D,0xE7,0x04,0x03,0xC5,0x44,0x03,0x85,0x45,0xEF,0xF0,0x1F,0x82,0x97,0x40,
+0xFF,0x1F,0xE7,0x80,0xC0,0xEC,0x82,0x47,0x03,0xC7,0x47,0x00,0x13,0x77,0xF7,0x0F,
+0x7D,0xDB,0x03,0xC5,0x34,0x03,0xEF,0xF0,0x2F,0xF5,0x03,0xC7,0x44,0x03,0x93,0x56,
+0x14,0x00,0x21,0x07,0x0A,0x07,0x26,0x97,0x18,0x47,0x63,0xF0,0xE6,0x02,0x03,0xC7,
+0x44,0x03,0x21,0x07,0x0A,0x07,0x26,0x97,0x00,0x47,0x13,0x07,0x40,0x06,0x15,0x8C,
+0x33,0x04,0xE4,0x02,0x33,0x54,0xD4,0x02,0xC0,0xDC,0xD4,0x5C,0x13,0x07,0x40,0x06,
+0x63,0x61,0xD7,0x06,0x95,0xA0,0x01,0x45,0x97,0x70,0xFF,0x1F,0xE7,0x80,0x40,0x7E,
+0x03,0xC5,0x44,0x03,0xEF,0xF0,0x4F,0xF0,0xE9,0xBD,0x83,0xC6,0x44,0x03,0x13,0x56,
+0x17,0x00,0x13,0x87,0x86,0x00,0x0A,0x07,0x26,0x97,0x18,0x47,0x63,0x70,0xE6,0x02,
+0x83,0xC6,0x44,0x03,0xA1,0x06,0x8A,0x06,0xA6,0x96,0x98,0x46,0x93,0x06,0x40,0x06,
+0x11,0x8F,0x33,0x07,0xD7,0x02,0x33,0x57,0xC7,0x02,0xD8,0xDC,0x23,0x82,0x04,0x04,
+0xA9,0xB7,0x83,0xC6,0x44,0x03,0xA1,0x06,0x8A,0x06,0xA6,0x96,0x94,0x46,0x63,0xED,
+0xE6,0x04,0x13,0x07,0x40,0x06,0xD8,0xDC,0x03,0xC7,0x44,0x03,0xC1,0x66,0x21,0x07,
+0x0A,0x07,0x26,0x97,0x18,0x47,0x63,0x69,0xD7,0x00,0x03,0xC7,0x44,0x03,0xFD,0x16,
+0x21,0x07,0x0A,0x07,0x26,0x97,0x14,0xC7,0x03,0xC7,0x44,0x03,0x92,0x47,0x23,0x94,
+0xE7,0x00,0x03,0xC7,0x24,0x04,0x23,0x95,0xE7,0x00,0x82,0x47,0x03,0xC7,0x57,0x03,
+0x92,0x47,0x23,0x96,0xE7,0x00,0xDC,0x5C,0x12,0x47,0x23,0x17,0xF7,0x00,0x93,0x07,
+0x20,0x4D,0x23,0x19,0xF7,0x00,0xB5,0xB3,0x13,0x56,0x17,0x00,0x03,0xC7,0x44,0x03,
+0x21,0x07,0x0A,0x07,0x26,0x97,0x18,0x47,0xE3,0x79,0xE6,0xF2,0x83,0xC6,0x44,0x03,
+0xA1,0x06,0x8A,0x06,0xA6,0x96,0x98,0x46,0x93,0x06,0x40,0x06,0x11,0x8F,0x33,0x07,
+0xD7,0x02,0x33,0x57,0xC7,0x02,0xD8,0xDC,0x09,0xBF,0x03,0xC7,0x34,0x03,0x13,0x77,
+0xF7,0x0F,0x23,0x8A,0xE4,0x02,0x03,0xC7,0x34,0x03,0x21,0x07,0x0A,0x07,0x26,0x97,
+0x18,0x47,0xE3,0x69,0xE4,0xE6,0x23,0x82,0x04,0x04,0x95,0xBD,0x83,0x17,0x05,0x00,
+0x05,0x47,0x63,0x44,0xB7,0x00,0x3E,0x85,0x82,0x80,0x93,0x16,0x17,0x00,0xAA,0x96,
+0x83,0xD6,0x06,0x00,0x13,0x96,0x06,0x01,0x41,0x86,0x63,0x53,0xF6,0x00,0xBE,0x86,
+0x93,0x97,0x06,0x01,0xC1,0x87,0x05,0x07,0xE9,0xBF,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x83,0xC7,0x07,0x09,0x37,0x57,0x00,0x20,0x03,0x47,0x67,0x3F,0x93,0xF7,
+0x07,0x04,0xD9,0x8F,0x99,0xC3,0x01,0x45,0x82,0x80,0xB7,0x52,0x00,0x20,0x83,0xA6,
+0x02,0x01,0x13,0x01,0xC1,0xFD,0x26,0xCC,0x06,0xD0,0x22,0xCE,0xB7,0xA7,0x00,0x20,
+0x83,0xC5,0xB6,0x01,0x03,0xA5,0x07,0xD9,0xB7,0x57,0x00,0x20,0x03,0xA3,0x07,0xFF,
+0x13,0x96,0x05,0x01,0x16,0xC0,0x41,0x82,0x01,0x47,0x81,0x44,0x3E,0xC4,0x8D,0x42,
+0x93,0x17,0x07,0x01,0xC1,0x83,0x63,0xE4,0xC7,0x06,0x83,0xC6,0xC6,0x01,0xB7,0xA7,
+0x00,0x20,0x83,0xA7,0x87,0xD8,0x13,0x96,0x06,0x01,0x41,0x82,0x3E,0xC2,0x01,0x47,
+0x01,0x44,0x8D,0x43,0x93,0x17,0x07,0x01,0xC1,0x83,0x63,0xE3,0xC7,0x06,0x93,0xD7,
+0x15,0x00,0x63,0xE6,0x97,0x00,0x93,0xD7,0x16,0x00,0x63,0xF5,0x87,0x1C,0x36,0xC8,
+0x35,0x3F,0xC2,0x46,0x2A,0xC6,0x12,0x45,0xB6,0x85,0x0D,0x3F,0xB7,0x67,0x00,0x20,
+0x93,0x87,0x47,0x7E,0x83,0xC7,0x67,0x36,0x37,0x67,0x00,0x20,0xAA,0x85,0x13,0x07,
+0x47,0x7E,0x32,0x43,0x01,0x46,0xC9,0xCB,0x81,0x47,0x01,0x46,0xBD,0xA8,0x93,0x17,
+0x17,0x00,0xAA,0x97,0x83,0x93,0x07,0x00,0x83,0x57,0xE3,0x03,0x86,0x07,0xB3,0xC7,
+0x57,0x02,0x63,0xD5,0x77,0x00,0x85,0x04,0x93,0xF4,0xF4,0x0F,0x05,0x07,0x8D,0xBF,
+0x92,0x42,0x93,0x17,0x17,0x00,0x96,0x97,0x83,0x92,0x07,0x00,0x83,0x57,0xA3,0x03,
+0x86,0x07,0xB3,0xC7,0x77,0x02,0x63,0xD5,0x57,0x00,0x05,0x04,0x13,0x74,0xF4,0x0F,
+0x05,0x07,0x8D,0xBF,0x05,0x45,0x33,0x15,0xF5,0x00,0x42,0x05,0x41,0x81,0x2E,0xCA,
+0x1A,0xC8,0x32,0xC6,0x3E,0xC2,0xEF,0xB0,0x0F,0x8F,0x32,0x46,0x37,0x67,0x00,0x20,
+0x92,0x47,0xB2,0x86,0x42,0x43,0xD2,0x45,0x13,0x07,0x47,0x7E,0x63,0x73,0xA6,0x00,
+0xAA,0x86,0x13,0x96,0x06,0x01,0x41,0x82,0x85,0x07,0x03,0x45,0x67,0x36,0x93,0x96,
+0x07,0x01,0xC1,0x82,0xE3,0xE0,0xA6,0xFC,0x22,0x47,0xB7,0x77,0x00,0x20,0x03,0xC5,
+0xC7,0xB7,0x83,0x26,0x07,0xFF,0x93,0x87,0xC7,0xB7,0x03,0xD7,0xE6,0x03,0x5D,0xED,
+0xCD,0x42,0x63,0xEE,0xC2,0x02,0x29,0x46,0x33,0x06,0xC7,0x02,0x63,0x59,0x66,0x02,
+0x03,0xD6,0xA6,0x03,0x06,0x06,0x63,0x54,0xB6,0x02,0x02,0x46,0x8D,0x42,0x83,0x23,
+0x06,0x01,0x03,0xC6,0xB3,0x01,0x06,0x06,0x33,0x46,0x56,0x02,0x63,0x42,0x96,0x06,
+0x03,0xC6,0xC3,0x01,0x06,0x06,0xB3,0x42,0x56,0x02,0x63,0xCB,0x82,0x04,0x3D,0x46,
+0x33,0x06,0xC7,0x02,0x63,0x58,0x66,0x0A,0x03,0xD6,0xA6,0x03,0x06,0x06,0x63,0x53,
+0xB6,0x0A,0x02,0x46,0x8D,0x42,0x83,0x23,0x06,0x01,0x03,0xC6,0xB3,0x01,0x06,0x06,
+0x33,0x46,0x56,0x02,0x63,0x49,0x96,0x00,0x03,0xC6,0xC3,0x01,0x06,0x06,0x33,0x46,
+0x56,0x02,0x63,0x51,0x86,0x08,0x37,0x56,0x00,0x20,0x83,0x22,0x06,0x03,0x05,0x46,
+0x83,0xC3,0x12,0x00,0x63,0x86,0xC3,0x00,0x83,0xC2,0x02,0x00,0x63,0x94,0xC2,0x06,
+0x13,0x06,0x20,0x03,0x33,0x07,0xC7,0x02,0x63,0x49,0x67,0x00,0x03,0xD7,0xA6,0x03,
+0xD1,0x46,0x33,0x07,0xD7,0x02,0x63,0x51,0xB7,0x06,0x09,0x47,0x23,0x80,0xE7,0x00,
+0x51,0x47,0xA3,0x80,0xE7,0x00,0x23,0x81,0xE7,0x00,0xBD,0xA0,0x29,0x46,0x33,0x06,
+0xC7,0x02,0x63,0x59,0x66,0x02,0x03,0xD6,0xA6,0x03,0x06,0x06,0x63,0x54,0xB6,0x02,
+0x02,0x46,0x8D,0x42,0x83,0x23,0x06,0x01,0x03,0xC6,0xB3,0x01,0x06,0x06,0x33,0x46,
+0x56,0x02,0xE3,0x47,0x96,0xFA,0x03,0xC6,0xC3,0x01,0x06,0x06,0x33,0x46,0x56,0x02,
+0xE3,0x40,0x86,0xFA,0xB7,0x77,0x00,0x20,0x93,0x87,0xC7,0xB7,0x03,0xC5,0x27,0x00,
+0x21,0xE5,0x23,0x80,0x07,0x00,0x15,0xA0,0x09,0x47,0x63,0x18,0xE5,0x02,0x03,0xC7,
+0x17,0x00,0x05,0xC7,0x7D,0x17,0xA3,0x80,0xE7,0x00,0x03,0xC7,0x27,0x00,0xA9,0x46,
+0x63,0xEB,0xE6,0x00,0x23,0x81,0xD7,0x00,0x05,0x45,0x82,0x50,0x72,0x44,0xE2,0x44,
+0x13,0x01,0x41,0x02,0x82,0x80,0x7D,0x17,0xBD,0xBF,0x29,0x47,0x23,0x81,0xE7,0x00,
+0x05,0x47,0x23,0x80,0xE7,0x00,0xCD,0xB7,0x03,0xC7,0x17,0x00,0x7D,0x15,0x23,0x81,
+0xA7,0x00,0x01,0xC7,0x7D,0x17,0xA3,0x80,0xE7,0x00,0x01,0x45,0xF9,0xB7,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x37,0xB7,0x00,0x20,0x83,0xD6,0x87,0x01,0x03,0x23,
+0x47,0x2C,0x61,0x11,0xB7,0x62,0x00,0x20,0x86,0x06,0x22,0xC2,0x26,0xC0,0x03,0x94,
+0x27,0x0C,0x93,0x82,0x82,0x84,0x9A,0x96,0x01,0x47,0x81,0x47,0x63,0x19,0xD3,0x00,
+0x12,0x44,0x23,0x10,0xE6,0x00,0x82,0x44,0x3E,0x85,0x21,0x01,0x82,0x80,0x83,0x13,
+0x03,0x00,0x63,0xC1,0x83,0x02,0x83,0xD3,0x02,0x00,0xB3,0xF4,0xA3,0x00,0x99,0xC8,
+0x05,0x07,0x42,0x07,0xB3,0xF3,0xB3,0x00,0x41,0x83,0x63,0x85,0x03,0x00,0x85,0x07,
+0xC2,0x07,0xC1,0x83,0x09,0x03,0x89,0x02,0xD1,0xB7,0xB7,0x77,0x00,0x20,0x03,0xC7,
+0xC7,0xB7,0x13,0x01,0x41,0xFC,0x93,0x87,0xC7,0xB7,0x06,0xDC,0x22,0xDA,0x26,0xD8,
+0x3E,0xD2,0x39,0xCF,0x37,0x54,0x00,0x20,0x13,0x07,0x44,0x7E,0x85,0x67,0xBA,0x97,
+0x03,0xC7,0x67,0x36,0xB7,0x66,0x00,0x20,0x93,0x86,0x46,0x7E,0x85,0x47,0x36,0xCE,
+0x13,0x04,0x44,0x7E,0x63,0xFE,0xE7,0x02,0xB7,0xB7,0x00,0x20,0x83,0xA7,0x47,0x2C,
+0x3E,0xC4,0x81,0x47,0x13,0x87,0x17,0x00,0x13,0x77,0xF7,0x0F,0x3A,0xCC,0x37,0x57,
+0x00,0x20,0x03,0x27,0x07,0x03,0x93,0x86,0x07,0x04,0x86,0x06,0x36,0x97,0x03,0x57,
+0x27,0x00,0x09,0xEF,0x72,0x47,0xE2,0x47,0x03,0x47,0x67,0x36,0xE3,0xEC,0xE7,0xFC,
+0xE2,0x50,0x52,0x54,0xC2,0x54,0x13,0x01,0xC1,0x03,0x82,0x80,0x0D,0x47,0x33,0x87,
+0xE7,0x02,0x3A,0xC2,0x05,0x07,0x3A,0xD0,0x05,0x47,0xB3,0x17,0xF7,0x00,0xC2,0x07,
+0xC1,0x83,0x3E,0xC8,0x92,0x47,0x89,0x07,0x3E,0xCA,0xE2,0x47,0x3E,0xC0,0xF2,0x47,
+0x02,0x47,0x05,0x63,0x83,0xC7,0x67,0x36,0xE3,0x7E,0xF7,0xFA,0x82,0x47,0x13,0x95,
+0x17,0x00,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x03,0x3E,0x95,0x83,0x57,0x25,0x08,
+0xC1,0xC3,0x82,0x47,0x8D,0x46,0x13,0x07,0x83,0x95,0xB3,0x84,0xD7,0x02,0x93,0x87,
+0x14,0x00,0x3E,0xC6,0x92,0x57,0x33,0x86,0xE4,0x00,0x06,0x06,0x83,0xC2,0x07,0x00,
+0x22,0x96,0x83,0x15,0xC6,0x00,0x09,0x46,0x63,0x96,0xC2,0x0A,0x13,0x03,0xA3,0x95,
+0xB3,0x87,0x64,0x00,0x86,0x07,0xA2,0x97,0x83,0x97,0xC7,0x00,0x93,0x83,0xF5,0xFF,
+0xC2,0x03,0xB3,0xC2,0x57,0x02,0xB2,0x47,0x01,0x46,0x93,0xD3,0x03,0x41,0xB3,0x84,
+0xE7,0x00,0x86,0x04,0xA2,0x94,0x03,0x93,0xC4,0x00,0x37,0x57,0x00,0x20,0x83,0x24,
+0x07,0x01,0x93,0x07,0xF3,0xFF,0xC2,0x07,0x13,0x87,0x15,0x00,0xC1,0x87,0x05,0x03,
+0x3A,0xC6,0x63,0x5C,0xF3,0x00,0x85,0x47,0x63,0xE4,0xC7,0x00,0x23,0x11,0x05,0x08,
+0x82,0x47,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x91,0xBF,0x9E,0x86,0x32,0x47,0x63,0x56,
+0xD7,0x00,0x85,0x07,0xC2,0x07,0xC1,0x87,0xE9,0xBF,0x63,0xC9,0x07,0x02,0x03,0xC7,
+0xA4,0x01,0x63,0xD5,0xE7,0x02,0x63,0xC3,0x06,0x02,0x03,0xC7,0x94,0x01,0x63,0xDF,
+0xE6,0x00,0x33,0x07,0xF7,0x02,0xA2,0x45,0x36,0x97,0x06,0x07,0x2E,0x97,0x03,0x17,
+0x07,0x00,0x63,0x55,0x57,0x00,0x05,0x06,0x13,0x76,0xF6,0x0F,0x85,0x06,0xC2,0x06,
+0xC1,0x86,0x6D,0xBF,0x92,0x47,0x33,0x85,0xE7,0x00,0x06,0x05,0x22,0x95,0x03,0x15,
+0xC5,0x00,0x97,0x30,0xFF,0x1F,0xE7,0x80,0x60,0xB9,0x05,0x67,0x93,0x87,0x14,0x00,
+0x13,0x07,0x87,0x95,0xB3,0x85,0xE7,0x00,0x82,0x57,0x86,0x05,0xA2,0x95,0x3E,0x97,
+0x06,0x07,0x22,0x97,0x13,0x13,0x05,0x01,0x83,0x95,0xC5,0x00,0x03,0x15,0xC7,0x00,
+0x13,0x53,0x03,0x41,0x1A,0xD4,0x97,0x30,0xFF,0x1F,0xE7,0x80,0x20,0xB6,0x22,0x53,
+0x09,0x46,0x63,0x57,0x66,0x00,0x42,0x05,0x41,0x85,0x8D,0x46,0x63,0x4D,0xA6,0x0E,
+0x82,0x47,0x05,0x45,0xC2,0x45,0x33,0x15,0xF5,0x00,0x42,0x05,0x13,0x06,0xE1,0x02,
+0x41,0x81,0x71,0x33,0x03,0x57,0xE1,0x02,0x05,0x83,0xE3,0x6B,0xE5,0xF2,0x05,0x67,
+0x93,0x06,0xA7,0x95,0xA6,0x96,0xD2,0x47,0x86,0x06,0xA2,0x96,0x13,0x07,0x87,0x95,
+0x03,0x95,0xC6,0x00,0xB3,0x86,0xE7,0x00,0x86,0x06,0xA2,0x96,0x83,0x96,0xC6,0x00,
+0x15,0x46,0x8A,0x06,0xB3,0xC6,0xC6,0x02,0xE3,0x54,0xD5,0xF0,0x89,0x46,0x33,0x45,
+0xD5,0x02,0xB3,0x87,0xE4,0x00,0x86,0x07,0xA2,0x97,0x03,0x93,0xC7,0x00,0xB2,0x47,
+0x01,0x46,0x93,0x02,0xF3,0xFF,0xB3,0x84,0xE7,0x00,0x86,0x04,0xA2,0x94,0x83,0x95,
+0xC4,0x00,0x37,0x57,0x00,0x20,0x83,0x23,0x07,0x01,0x93,0x87,0xF5,0xFF,0xC2,0x07,
+0xC2,0x02,0xC1,0x87,0x85,0x05,0x93,0xD2,0x02,0x41,0x05,0x03,0x63,0xD1,0xF5,0x02,
+0x85,0x47,0xE3,0xEF,0xC7,0xEA,0x02,0x47,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x03,
+0x13,0x07,0x07,0x04,0x06,0x07,0xBA,0x97,0x23,0x91,0x07,0x00,0x55,0xB5,0x96,0x86,
+0x63,0x56,0xD3,0x00,0x85,0x07,0xC2,0x07,0xC1,0x87,0xC9,0xBF,0x63,0xC9,0x07,0x02,
+0x03,0xC7,0xA3,0x01,0x63,0xD5,0xE7,0x02,0x63,0xC3,0x06,0x02,0x03,0xC7,0x93,0x01,
+0x63,0xDF,0xE6,0x00,0x33,0x07,0xF7,0x02,0xA2,0x44,0x36,0x97,0x06,0x07,0x26,0x97,
+0x03,0x17,0x07,0x00,0x63,0x55,0xA7,0x00,0x05,0x06,0x13,0x76,0xF6,0x0F,0x85,0x06,
+0xC2,0x06,0xC1,0x86,0x75,0xBF,0x63,0x04,0xD3,0x00,0xE3,0x1B,0xD5,0xE4,0x82,0x47,
+0x05,0x45,0xC2,0x45,0x33,0x15,0xF5,0x00,0x42,0x05,0x13,0x06,0xE1,0x02,0x41,0x81,
+0xEF,0xF0,0xFF,0xC8,0x03,0x57,0xE1,0x02,0x05,0x83,0xE3,0x6B,0xE5,0xE2,0x05,0x67,
+0x93,0x06,0xA7,0x95,0xA6,0x96,0xD2,0x47,0x86,0x06,0xA2,0x96,0x13,0x07,0x87,0x95,
+0x03,0x95,0xC6,0x00,0xB3,0x86,0xE7,0x00,0x86,0x06,0xA2,0x96,0x83,0x96,0xC6,0x00,
+0x0D,0x46,0xB3,0xC6,0xC6,0x02,0xE3,0x55,0xD5,0xE0,0x89,0x46,0x33,0x45,0xD5,0x02,
+0xB3,0x87,0xE4,0x00,0x86,0x07,0xA2,0x97,0x03,0x93,0xC7,0x00,0xB2,0x47,0x01,0x46,
+0x93,0x02,0xF3,0xFF,0xB3,0x84,0xE7,0x00,0x86,0x04,0xA2,0x94,0x83,0x95,0xC4,0x00,
+0x37,0x57,0x00,0x20,0x83,0x23,0x07,0x01,0x93,0x87,0xF5,0xFF,0xC2,0x07,0xC2,0x02,
+0xC1,0x87,0x85,0x05,0x93,0xD2,0x02,0x41,0x05,0x03,0xE3,0xC3,0xF5,0xF0,0x96,0x86,
+0x63,0x56,0xD3,0x00,0x85,0x07,0xC2,0x07,0xC1,0x87,0xC5,0xBF,0x63,0xC9,0x07,0x02,
+0x03,0xC7,0xA3,0x01,0x63,0xD5,0xE7,0x02,0x63,0xC3,0x06,0x02,0x03,0xC7,0x93,0x01,
+0x63,0xDF,0xE6,0x00,0x33,0x07,0xF7,0x02,0xA2,0x44,0x36,0x97,0x06,0x07,0x26,0x97,
+0x03,0x17,0x07,0x00,0x63,0x55,0xA7,0x00,0x05,0x06,0x13,0x76,0xF6,0x0F,0x85,0x06,
+0xC2,0x06,0xC1,0x86,0x75,0xBF,0xB7,0x77,0x00,0x20,0x83,0xC7,0xC7,0xB7,0x63,0x82,
+0x07,0x18,0x37,0x56,0x00,0x20,0x93,0x07,0x46,0x7E,0x85,0x66,0xBE,0x96,0x83,0xC5,
+0x66,0x36,0x13,0x07,0x46,0x7E,0x63,0x86,0x05,0x16,0xB7,0x57,0x00,0x20,0x03,0xA6,
+0x07,0x03,0x01,0x45,0x81,0x46,0x13,0x06,0x26,0x08,0x81,0x47,0x03,0x53,0x06,0x00,
+0x63,0x06,0x03,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x3E,0x85,0x85,0x07,0x93,0xF7,
+0xF7,0x0F,0x09,0x06,0xE3,0x94,0xF5,0xFE,0x85,0x47,0x63,0x9C,0xF6,0x12,0x99,0x47,
+0xB3,0x07,0xF5,0x02,0xB7,0x56,0x00,0x20,0x03,0xA5,0x06,0x01,0xB7,0xB6,0x00,0x20,
+0x03,0xA3,0x46,0x2C,0x3E,0x97,0x83,0x47,0x87,0x00,0xF9,0x17,0xE2,0x07,0xE1,0x87,
+0x83,0x46,0x87,0x00,0x89,0x06,0x63,0xD9,0xF6,0x0E,0x82,0x80,0x63,0xC2,0x07,0x04,
+0x83,0x46,0xB5,0x01,0x63,0xDE,0xD7,0x02,0x03,0x44,0x97,0x00,0x81,0x43,0x01,0x46,
+0x93,0x05,0xB4,0xFF,0xE2,0x05,0xE1,0x85,0x93,0x06,0xE4,0xFF,0x63,0xCD,0xD5,0x02,
+0x93,0x05,0x34,0x00,0xE2,0x05,0xE1,0x85,0x15,0x04,0x63,0x50,0xB4,0x06,0x33,0xC6,
+0xC3,0x02,0x83,0x45,0x97,0x00,0xE2,0x06,0xE1,0x86,0x89,0x05,0x63,0xD1,0xD5,0x08,
+0x83,0x46,0x87,0x00,0x85,0x07,0xE2,0x07,0xE1,0x87,0x89,0x06,0xE3,0xD8,0xF6,0xFA,
+0x02,0x44,0x11,0x01,0x82,0x80,0x63,0xC6,0x05,0x02,0x83,0x42,0xC5,0x01,0x63,0xD2,
+0x55,0x02,0x83,0x42,0x95,0x01,0x05,0x06,0x13,0x76,0xF6,0x0F,0xB3,0x82,0xB2,0x02,
+0xBE,0x92,0x86,0x02,0x9A,0x92,0x83,0xD2,0x02,0x00,0x96,0x93,0xC2,0x03,0x93,0xD3,
+0x03,0x41,0x85,0x05,0xE2,0x05,0xE1,0x85,0x51,0xBF,0x63,0xC6,0x05,0x02,0x83,0x42,
+0xC5,0x01,0x63,0xD2,0x55,0x02,0x83,0x42,0x95,0x01,0x05,0x06,0x13,0x76,0xF6,0x0F,
+0xB3,0x82,0xB2,0x02,0xBE,0x92,0x86,0x02,0x9A,0x92,0x83,0xD2,0x02,0x00,0x96,0x93,
+0xC2,0x03,0x93,0xD3,0x03,0x41,0x85,0x05,0xE2,0x05,0xE1,0x85,0xBD,0xB7,0x63,0xC3,
+0x06,0x02,0x83,0x45,0xC5,0x01,0x63,0xDF,0xB6,0x00,0x83,0x45,0x95,0x01,0xB3,0x85,
+0xD5,0x02,0xBE,0x95,0x86,0x05,0x9A,0x95,0x83,0xD2,0x05,0x00,0xB3,0x82,0xC2,0x40,
+0x23,0x90,0x55,0x00,0x85,0x06,0xB1,0xB7,0x63,0xD6,0x07,0x00,0x85,0x07,0xE2,0x07,
+0xE1,0x87,0xFD,0xBD,0x83,0x46,0xB5,0x01,0xE3,0xDA,0xD7,0xFE,0x71,0x11,0x22,0xC0,
+0x21,0xB7,0x82,0x80,0xB3,0x27,0xC5,0x00,0x86,0x07,0x33,0xA3,0xD5,0x00,0x3E,0x93,
+0x95,0x47,0x63,0x0B,0xA6,0x04,0x33,0x87,0xD5,0x40,0x63,0x54,0x07,0x00,0x33,0x87,
+0xB6,0x40,0xB3,0x07,0xC5,0x40,0x2A,0x07,0x63,0xD4,0x07,0x00,0xB3,0x07,0xA6,0x40,
+0x33,0x47,0xF7,0x02,0x93,0x06,0xB0,0x10,0x81,0x47,0x63,0xD7,0xE6,0x02,0x93,0x06,
+0x00,0x24,0x85,0x47,0x63,0xD2,0xE6,0x02,0x93,0x06,0x70,0x3E,0x89,0x47,0x63,0xDD,
+0xE6,0x00,0x93,0x06,0x30,0x6C,0x8D,0x47,0x63,0xD8,0xE6,0x00,0x85,0x67,0x93,0x87,
+0x37,0xE9,0xB3,0xA7,0xE7,0x00,0x91,0x07,0x19,0x47,0xB3,0x06,0xE3,0x02,0x37,0x57,
+0x00,0x20,0x13,0x07,0x87,0x03,0x36,0x97,0xBA,0x97,0x03,0xC5,0x07,0x00,0x82,0x80,
+0x33,0x07,0xB5,0x40,0x63,0x54,0x07,0x00,0x33,0x87,0xA5,0x40,0x05,0x45,0x63,0x59,
+0xE6,0x00,0xE1,0x47,0x33,0x85,0xC7,0x40,0x33,0x25,0xA7,0x00,0x13,0x45,0x15,0x00,
+0x82,0x80,0xAA,0x95,0xA9,0x47,0xB3,0xC7,0xF5,0x02,0x5D,0x71,0x37,0x07,0x01,0x20,
+0xB7,0x06,0x01,0x20,0xA2,0xC4,0xA6,0xC2,0x86,0xC6,0x93,0x84,0xC6,0x9F,0x01,0x44,
+0x3A,0xDE,0x3E,0xDC,0xB7,0x07,0x01,0x20,0x83,0xC7,0xE7,0xB7,0x3E,0xC8,0xA3,0x0F,
+0xF7,0xB6,0x85,0x47,0x3E,0xC4,0x93,0x87,0xC6,0x9F,0x3E,0xC6,0xC2,0x47,0x22,0x47,
+0x63,0xD7,0xE7,0x00,0xB6,0x40,0x26,0x44,0x96,0x44,0x61,0x61,0x82,0x80,0xC2,0x47,
+0x22,0x47,0x63,0x50,0xF7,0x10,0xB1,0x47,0x33,0x07,0xF4,0x02,0xB2,0x47,0x3E,0x97,
+0x83,0x57,0x47,0x00,0x14,0x43,0x03,0x57,0x87,0x00,0x3E,0xCA,0x99,0x8F,0x3E,0xCC,
+0x63,0xD6,0x07,0x00,0xD2,0x47,0xB3,0x07,0xF7,0x40,0x3E,0xCC,0xB1,0x47,0x33,0x07,
+0xF4,0x02,0xB2,0x47,0x3E,0x97,0x83,0x57,0x67,0x00,0x03,0x57,0xA7,0x00,0x3E,0xCE,
+0x99,0x8F,0x3E,0xD0,0x63,0xD6,0x07,0x00,0xF2,0x47,0xB3,0x07,0xF7,0x40,0x3E,0xD0,
+0xDC,0x44,0x3E,0xDA,0x83,0xD7,0x04,0x01,0x3E,0xD2,0x83,0xD7,0x44,0x01,0x3E,0xC0,
+0x02,0x47,0x92,0x57,0x99,0x8F,0x3E,0xD4,0x63,0xD6,0x07,0x00,0xBA,0x87,0x12,0x57,
+0x99,0x8F,0x3E,0xD4,0x83,0xD7,0x24,0x01,0x3E,0xD6,0x83,0xD7,0x64,0x01,0x3E,0xC2,
+0x12,0x47,0xB2,0x57,0x99,0x8F,0x3E,0xD8,0x63,0xD6,0x07,0x00,0xBA,0x87,0x32,0x57,
+0x99,0x8F,0x3E,0xD8,0xD2,0x55,0x05,0x46,0x36,0x85,0xB6,0xC0,0xD5,0x3D,0x0D,0xE9,
+0x86,0x46,0xD2,0x55,0x19,0x46,0x36,0x85,0xE5,0x35,0x2D,0xC1,0x86,0x46,0x05,0x46,
+0x8D,0x45,0x36,0x85,0xF1,0x3D,0x39,0xE9,0x82,0x57,0x62,0x47,0x3E,0x97,0xE2,0x57,
+0x63,0x68,0xF7,0x00,0x22,0x57,0xC2,0x57,0xBA,0x97,0x62,0x57,0x63,0xF0,0xE7,0x04,
+0x92,0x46,0x02,0x46,0xF2,0x45,0x52,0x45,0x35,0x3D,0xB1,0x47,0x33,0x07,0xF4,0x02,
+0xB2,0x47,0x3E,0x97,0x82,0x47,0x08,0xC3,0x23,0x14,0xF7,0x00,0x92,0x47,0x23,0x15,
+0xF7,0x00,0xF2,0x57,0x23,0xA6,0x04,0x00,0x03,0xC7,0xF7,0xB7,0x7D,0x17,0xA3,0x8F,
+0xE7,0xB6,0xA2,0x47,0xB1,0x04,0x85,0x07,0x3E,0xC4,0xCD,0xB5,0xB1,0x47,0x05,0x04,
+0x33,0x07,0xF4,0x02,0xB2,0x47,0x3E,0x97,0xD2,0x57,0x1C,0xC3,0x92,0x57,0x23,0x12,
+0xF7,0x00,0xB2,0x57,0x23,0x13,0xF7,0x00,0x82,0x47,0x23,0x14,0xF7,0x00,0x92,0x47,
+0x23,0x15,0xF7,0x00,0xF9,0xB7,0x11,0x11,0xB7,0x07,0x01,0x20,0x26,0xC8,0xB7,0x04,
+0x01,0x20,0x83,0xC6,0xF7,0xB7,0x06,0xCC,0x22,0xCA,0x93,0x84,0xC4,0x9F,0x01,0x47,
+0x85,0x47,0x63,0xC8,0xD7,0x00,0x05,0x45,0xE2,0x40,0x52,0x44,0xC2,0x44,0x71,0x01,
+0x82,0x80,0x83,0xA3,0xC4,0x00,0x80,0x40,0x25,0x46,0x9E,0x85,0x22,0x85,0x3A,0xC6,
+0x3E,0xC4,0x36,0xC2,0x1E,0xC0,0x29,0x3D,0x65,0xD1,0x82,0x43,0x92,0x46,0xA2,0x47,
+0x32,0x47,0x21,0x43,0x85,0x42,0x63,0x77,0x74,0x00,0xB3,0x85,0x83,0x40,0x05,0x46,
+0x63,0x7B,0xB3,0x00,0x01,0x46,0x63,0xF8,0x83,0x00,0x33,0x04,0x74,0x40,0x13,0x34,
+0xF4,0x00,0x13,0x46,0x14,0x00,0x63,0x84,0x57,0x00,0x63,0x16,0xC7,0x00,0x85,0x07,
+0xB1,0x04,0x32,0x87,0x79,0xBF,0x01,0x45,0x45,0xB7,0x21,0x11,0xB7,0x03,0x01,0x20,
+0x22,0xC8,0x03,0xC4,0xE3,0xB7,0x06,0xCA,0x26,0xC6,0xFD,0x47,0x63,0xE0,0x87,0x04,
+0xB6,0x84,0x32,0xC4,0x2E,0xC2,0x2A,0xC0,0x35,0x3B,0xB1,0x47,0xB3,0x07,0xF4,0x02,
+0xB7,0x06,0x01,0x20,0x82,0x42,0x12,0x43,0x22,0x47,0x93,0x86,0xC6,0x9F,0x05,0x04,
+0xB7,0x03,0x01,0x20,0x23,0x8F,0x83,0xB6,0xB6,0x97,0x88,0xC3,0x23,0x92,0x57,0x00,
+0x23,0x93,0x67,0x00,0x23,0x94,0xE7,0x00,0x23,0x95,0x97,0x00,0xD2,0x40,0x42,0x44,
+0xB2,0x44,0x61,0x01,0x82,0x80,0x13,0x01,0x81,0xFA,0xA2,0xC8,0x37,0x74,0x00,0x20,
+0xA6,0xC6,0x86,0xCA,0x93,0x04,0x04,0xB8,0x03,0xD3,0x04,0x00,0x59,0xC5,0xB2,0x87,
+0x63,0x1E,0x03,0x00,0xB7,0x07,0x01,0x20,0xCC,0xC0,0x8C,0xC4,0xD0,0xC4,0x90,0xC8,
+0xCC,0xC8,0x90,0xCC,0x23,0x8F,0x07,0xB6,0x01,0x45,0x55,0xA4,0x13,0x04,0x04,0xB8,
+0x18,0x44,0x63,0x5A,0xB7,0x02,0x0C,0xC4,0x18,0x48,0x63,0x5B,0xF7,0x02,0x1C,0xC8,
+0xB7,0xF4,0x00,0x20,0x03,0xA6,0x04,0x51,0x37,0xF7,0x00,0x20,0x83,0x26,0x47,0x4D,
+0xB3,0x25,0xB6,0x00,0x86,0x05,0xB3,0xA7,0xF6,0x00,0xAE,0x97,0x89,0x45,0x63,0xEE,
+0x65,0x00,0x5C,0xCC,0xD1,0xB7,0x58,0x40,0xE3,0xD8,0xE5,0xFC,0x4C,0xC0,0xE9,0xB7,
+0x58,0x44,0xE3,0xD7,0xE7,0xFC,0x5C,0xC4,0xE1,0xB7,0x4C,0x4C,0xE3,0x86,0xB7,0xFA,
+0x0C,0x4C,0x48,0x48,0x5C,0xCC,0x11,0x3F,0x83,0xA7,0x04,0x51,0x37,0xF7,0x00,0x20,
+0x5C,0xC8,0x83,0x27,0x47,0x4D,0x1C,0xCC,0x41,0xBF,0xE3,0x07,0x03,0xF8,0xB7,0xF7,
+0x00,0x20,0x83,0xA6,0x47,0x4D,0xB7,0xF7,0x00,0x20,0x03,0xA6,0x07,0x51,0x8C,0x4C,
+0xC8,0x48,0xE5,0x35,0x98,0x44,0xDC,0x40,0xB3,0x07,0xF7,0x40,0x3E,0xC6,0xDC,0x44,
+0x32,0x45,0x3E,0xD0,0x02,0x57,0x9C,0x48,0x99,0x8F,0xBE,0x85,0x3E,0xC2,0xEF,0xF0,
+0x5F,0xCC,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0xB1,0x42,0xB7,0x03,0x01,0x20,
+0x83,0xC4,0xC7,0x01,0x83,0xC6,0xB7,0x01,0xB7,0x07,0x01,0x20,0x13,0x94,0x94,0x00,
+0x83,0xC4,0xF7,0xB7,0x13,0x87,0xC3,0x9F,0x93,0x83,0xC3,0x9F,0x13,0x85,0xF4,0xFF,
+0xB3,0x07,0x55,0x02,0x1E,0xC4,0x95,0x43,0x83,0x55,0x47,0x00,0x03,0x56,0x67,0x00,
+0xA6,0x06,0x33,0x05,0xF7,0x00,0x03,0x57,0x45,0x00,0x03,0x53,0x85,0x00,0x83,0x57,
+0x65,0x00,0x03,0x55,0xA5,0x00,0x63,0xE9,0x93,0x0C,0x1A,0x97,0x05,0x83,0xAA,0x97,
+0xB3,0x02,0xB3,0x40,0x16,0xCA,0x85,0x83,0x63,0xD5,0x02,0x00,0x33,0x83,0x65,0x40,
+0x1A,0xCA,0x33,0x03,0xC5,0x40,0x1A,0xCC,0x63,0x55,0x03,0x00,0x33,0x05,0xA6,0x40,
+0x2A,0xCC,0x33,0x05,0xB7,0x40,0x2A,0xD2,0x63,0x55,0x05,0x00,0x33,0x87,0xE5,0x40,
+0x3A,0xD2,0x33,0x87,0xC7,0x40,0x3A,0xD4,0x63,0x55,0x07,0x00,0xB3,0x07,0xF6,0x40,
+0x3E,0xD4,0x85,0x47,0x63,0x97,0xF4,0x02,0x32,0x46,0xB7,0x07,0x01,0x20,0x13,0xD7,
+0x26,0x00,0x83,0xA7,0xC7,0x9F,0x63,0x7B,0xC7,0x08,0x13,0x05,0x10,0x02,0x63,0x80,
+0x97,0x14,0x61,0x47,0x63,0x8D,0xE7,0x12,0xD1,0x17,0x13,0x05,0x00,0x02,0x63,0xF8,
+0xF4,0x12,0xB2,0x47,0x8D,0x82,0x63,0xEA,0xF6,0x08,0x0D,0x44,0xE3,0x7E,0x94,0xE6,
+0x9D,0x33,0xE3,0x0B,0x05,0xE6,0x99,0x47,0xE3,0xE8,0x97,0xE6,0xB2,0x47,0x52,0x47,
+0xB3,0x87,0x87,0x02,0x8D,0x83,0x63,0x7B,0xF7,0x00,0x12,0x47,0x13,0x05,0x00,0x03,
+0x33,0x04,0x87,0x02,0x62,0x47,0x0D,0x80,0x63,0x6B,0x87,0x0E,0x12,0x57,0xE3,0x75,
+0xF7,0xE4,0x12,0x47,0x8D,0x47,0x13,0x05,0x00,0x03,0xB3,0x07,0xF7,0x02,0x22,0x57,
+0x8D,0x83,0xE3,0x7B,0xF7,0xE2,0xE1,0xA8,0x93,0x87,0xE4,0xFF,0xB3,0x82,0x57,0x02,
+0xA2,0x47,0xBE,0x92,0x83,0xD7,0x82,0x00,0x03,0xD7,0x42,0x00,0x3E,0x97,0x83,0xD7,
+0x62,0x00,0x83,0xD2,0xA2,0x00,0x05,0x83,0x96,0x97,0x19,0xBF,0x12,0x46,0x13,0x57,
+0x24,0x00,0xE3,0x70,0xC7,0xF8,0x13,0x87,0xA7,0xFF,0x13,0x05,0x20,0x02,0x63,0xF0,
+0xE4,0x0A,0xB9,0x17,0x13,0x05,0x30,0x02,0x9D,0xB7,0x12,0x47,0x93,0x57,0x44,0x00,
+0xE3,0xF5,0xE7,0xF6,0x37,0x57,0x00,0x20,0x93,0x07,0x87,0x03,0xE1,0x07,0x13,0x07,
+0x87,0x03,0x3E,0xC8,0x3A,0xD8,0x81,0x47,0x42,0x47,0x26,0xCE,0x81,0x46,0x03,0x47,
+0x17,0x00,0x02,0xC0,0x01,0x44,0x3A,0xD6,0x13,0x87,0xD7,0xFF,0x3A,0xDA,0x32,0x57,
+0x02,0x46,0x63,0x54,0xE6,0x00,0x63,0xC2,0x96,0x06,0x13,0x07,0x80,0x3E,0x33,0x04,
+0xE4,0x02,0x32,0x57,0x93,0x06,0xD0,0x2E,0x33,0x57,0xE4,0x02,0x63,0xF3,0xE6,0x16,
+0xF2,0x46,0x33,0x54,0xD4,0x02,0x93,0x06,0x20,0x35,0x63,0xFC,0x86,0x14,0x93,0x06,
+0x00,0x32,0x63,0xE7,0xE6,0x00,0x13,0x87,0xE7,0xFF,0x9D,0x46,0x63,0xE3,0xE6,0x14,
+0x1D,0x47,0x63,0x9A,0xE7,0x10,0x52,0x47,0xB2,0x46,0x06,0x07,0xE3,0x66,0xD7,0xD6,
+0x0D,0x47,0xB3,0x87,0xE7,0x02,0x42,0x57,0xBA,0x97,0x03,0xC5,0xA7,0x01,0xD6,0x40,
+0x46,0x44,0xB6,0x44,0x13,0x01,0x81,0x05,0x82,0x80,0xBE,0xC4,0xC2,0x47,0x09,0x46,
+0xB6,0xC2,0x03,0xC3,0x07,0x00,0x82,0x47,0x3E,0x93,0xB1,0x47,0x33,0x87,0xF6,0x02,
+0xA2,0x47,0x3E,0x97,0xC2,0x57,0x83,0x23,0x07,0x00,0x3E,0x93,0x83,0x42,0xC3,0x04,
+0x1E,0x85,0x9A,0xC0,0x96,0x85,0x16,0xDE,0x1E,0xDC,0xEF,0xF0,0x7F,0xA6,0x96,0x46,
+0xE2,0x53,0xF2,0x52,0x13,0x87,0x16,0x00,0x06,0x43,0xA6,0x47,0x29,0xC9,0xB1,0x46,
+0xB3,0x06,0xD7,0x02,0x22,0x46,0x05,0x04,0xB2,0x96,0x88,0x42,0xBA,0xC2,0x93,0x06,
+0xF7,0xFF,0x63,0x5F,0x97,0x00,0x96,0x85,0x09,0x46,0xB6,0xC0,0x3E,0xDE,0x16,0xDC,
+0xEF,0xF0,0x1F,0xA3,0x16,0x47,0xE2,0x52,0xF2,0x57,0x05,0x07,0x86,0x46,0x11,0xE5,
+0x02,0x47,0x85,0x06,0x05,0x07,0x3A,0xC0,0x19,0xBF,0xB1,0x46,0xB3,0x06,0xD7,0x02,
+0x22,0x46,0xB2,0x96,0x88,0x42,0xF2,0x46,0xFD,0x16,0x36,0xCE,0xC1,0xB7,0x52,0x56,
+0x85,0x45,0x63,0xE3,0xC5,0x02,0x83,0x45,0xD3,0x04,0x79,0xF8,0x09,0x46,0x1E,0x85,
+0x36,0xDE,0x3E,0xDC,0xEF,0xF0,0xDF,0x9E,0xE2,0x57,0xF2,0x56,0x71,0xD1,0x02,0x47,
+0x05,0x07,0x3A,0xC0,0x05,0x44,0x6D,0xBF,0x39,0x46,0xE3,0x9B,0xC7,0xFA,0x31,0x46,
+0x33,0x06,0xC7,0x02,0xBA,0xC0,0x22,0x47,0x3A,0x96,0x0C,0x42,0x55,0xF0,0x09,0x46,
+0x16,0x85,0x36,0xDE,0x3E,0xDC,0xEF,0xF0,0xBF,0x9B,0xE2,0x57,0xF2,0x56,0x49,0xD9,
+0x06,0x47,0xBA,0x86,0xC1,0xBF,0x15,0x47,0x63,0x9B,0xE7,0x00,0xE2,0x46,0x0D,0x47,
+0x33,0x87,0xE6,0x02,0x92,0x46,0x86,0x06,0xE3,0xE8,0xE6,0xC4,0xD5,0xB5,0x31,0x47,
+0xE3,0x90,0xE7,0xEE,0x22,0x47,0x82,0x56,0x03,0x57,0xA7,0x00,0xE3,0x9A,0xE6,0xEC,
+0x25,0xB9,0x42,0x47,0x85,0x07,0x0D,0x07,0x3A,0xC8,0x45,0x47,0xE3,0x9E,0xE7,0xE4,
+0x6D,0xB3,0x21,0x11,0x22,0xC8,0x37,0x74,0x00,0x20,0x26,0xC6,0x06,0xCA,0x93,0x04,
+0x04,0xB8,0x83,0xC7,0x14,0x02,0x37,0xF7,0x00,0x20,0x23,0x80,0x04,0x02,0x03,0x47,
+0x37,0x4F,0x81,0xCF,0x01,0xCB,0x81,0x47,0xD2,0x40,0x42,0x44,0xB2,0x44,0x3E,0x85,
+0x61,0x01,0x82,0x80,0xA3,0x80,0x04,0x02,0xFD,0xB7,0x85,0x46,0x13,0x04,0x04,0xB8,
+0x63,0xE9,0xE6,0x00,0xB7,0x56,0x00,0x20,0x03,0xC6,0x66,0x3F,0x89,0x46,0x63,0x16,
+0xD6,0x00,0x05,0x47,0xA3,0x00,0xE4,0x02,0xC1,0xBF,0x51,0xC7,0x37,0x57,0x00,0x20,
+0x13,0x07,0x87,0x40,0x83,0x56,0x07,0x12,0x37,0xF3,0x00,0x20,0x83,0x25,0x03,0x51,
+0x36,0x85,0x3E,0xC4,0x83,0x54,0x87,0x13,0x36,0xC2,0x97,0x20,0xFF,0x1F,0xE7,0x80,
+0xE0,0x05,0xB7,0xF2,0x00,0x20,0x83,0xA5,0x42,0x4D,0x2A,0xC0,0x26,0x85,0x97,0x20,
+0xFF,0x1F,0xE7,0x80,0xA0,0x04,0x02,0x47,0x33,0x05,0xA5,0x02,0x33,0x07,0xE7,0x02,
+0x3A,0x95,0xEF,0x20,0x1F,0xE6,0x03,0x57,0x04,0x00,0x92,0x46,0xA2,0x47,0x09,0xC7,
+0x13,0x07,0x90,0x08,0xE3,0x79,0xA7,0xF6,0xB6,0x85,0x26,0x86,0x05,0x45,0x3E,0xC2,
+0x36,0xC0,0xEF,0xF0,0x5F,0xB3,0x03,0x57,0x04,0x00,0x82,0x46,0x37,0xF3,0x00,0x20,
+0x05,0x07,0xB7,0xF2,0x00,0x20,0x23,0x10,0xE4,0x00,0x23,0x28,0xD3,0x50,0x23,0xAA,
+0x92,0x4C,0x92,0x47,0x91,0xB7,0x83,0xD7,0x04,0x00,0x95,0xDF,0x01,0x46,0x81,0x45,
+0x01,0x45,0xEF,0xF0,0x5F,0xB0,0xAA,0x87,0x23,0x90,0x04,0x00,0x23,0x80,0xA4,0x02,
+0x25,0xB7,0x51,0x11,0x22,0xC4,0x26,0xC2,0x81,0x43,0x63,0xDA,0x05,0x00,0x33,0x05,
+0xA0,0x40,0xB3,0x37,0xA0,0x00,0xB3,0x05,0xB0,0x40,0x9D,0x8D,0xFD,0x53,0x63,0xDB,
+0x06,0x00,0x33,0x06,0xC0,0x40,0xB3,0x37,0xC0,0x00,0xB3,0x06,0xD0,0x40,0x93,0xC3,
+0xF3,0xFF,0x9D,0x8E,0x32,0x83,0xB6,0x87,0xAA,0x82,0x2E,0x87,0x63,0x92,0x06,0x22,
+0x97,0x16,0x00,0x00,0x93,0x86,0xC6,0xA6,0x63,0xFF,0xC5,0x0A,0xC1,0x67,0x63,0x75,
+0xF6,0x0A,0x93,0x07,0xF0,0x0F,0xB3,0xB7,0xC7,0x00,0x8E,0x07,0x33,0x54,0xF6,0x00,
+0xA2,0x96,0x83,0xC6,0x06,0x00,0xB6,0x97,0x93,0x06,0x00,0x02,0x9D,0x8E,0x99,0xCA,
+0xB3,0x95,0xD5,0x00,0xB3,0x57,0xF5,0x00,0x33,0x13,0xD6,0x00,0x33,0xE7,0xB7,0x00,
+0xB3,0x12,0xD5,0x00,0x13,0x55,0x03,0x01,0xB3,0x55,0xA7,0x02,0x13,0x16,0x03,0x01,
+0x41,0x82,0xB3,0x77,0xA7,0x02,0x13,0xD7,0x02,0x01,0x2E,0x84,0xB3,0x06,0xB6,0x02,
+0xC2,0x07,0x5D,0x8F,0x63,0x7C,0xD7,0x00,0x1A,0x97,0x13,0x84,0xF5,0xFF,0x63,0x67,
+0x67,0x00,0x63,0x75,0xD7,0x00,0x13,0x84,0xE5,0xFF,0x1A,0x97,0x15,0x8F,0xB3,0x76,
+0xA7,0x02,0xC2,0x02,0x93,0xD2,0x02,0x01,0x33,0x57,0xA7,0x02,0xC2,0x06,0xB3,0xE2,
+0x56,0x00,0x33,0x06,0xE6,0x02,0x3A,0x85,0x63,0xFB,0xC2,0x00,0x9A,0x92,0x13,0x05,
+0xF7,0xFF,0x63,0xE6,0x62,0x00,0x63,0xF4,0xC2,0x00,0x13,0x05,0xE7,0xFF,0x93,0x17,
+0x04,0x01,0xC9,0x8F,0x01,0x47,0x55,0xA8,0x37,0x04,0x00,0x01,0xC1,0x47,0xE3,0x6F,
+0x86,0xF4,0xE1,0x47,0xA1,0xBF,0x01,0xE6,0x05,0x43,0x33,0x53,0xF3,0x02,0x41,0x67,
+0x63,0x7C,0xE3,0x0A,0x13,0x07,0xF0,0x0F,0x63,0x73,0x67,0x00,0xA1,0x47,0x33,0x57,
+0xF3,0x00,0xBA,0x96,0x03,0xC6,0x06,0x00,0x3E,0x96,0x93,0x07,0x00,0x02,0x91,0x8F,
+0xDD,0xE3,0xB3,0x85,0x65,0x40,0x05,0x47,0x13,0x55,0x03,0x01,0x13,0x16,0x03,0x01,
+0x41,0x82,0x93,0xD6,0x02,0x01,0xB3,0xF7,0xA5,0x02,0xB3,0xD5,0xA5,0x02,0xC2,0x07,
+0xD5,0x8F,0x33,0x04,0xB6,0x02,0xAE,0x86,0x63,0xFC,0x87,0x00,0x9A,0x97,0x93,0x86,
+0xF5,0xFF,0x63,0xE7,0x67,0x00,0x63,0xF5,0x87,0x00,0x93,0x86,0xE5,0xFF,0x9A,0x97,
+0x81,0x8F,0xB3,0xD5,0xA7,0x02,0xC2,0x02,0x93,0xD2,0x02,0x01,0x33,0xF4,0xA7,0x02,
+0x2E,0x85,0x33,0x06,0xB6,0x02,0x93,0x17,0x04,0x01,0xB3,0xE2,0x57,0x00,0x63,0xFB,
+0xC2,0x00,0x9A,0x92,0x13,0x85,0xF5,0xFF,0x63,0xE6,0x62,0x00,0x63,0xF4,0xC2,0x00,
+0x13,0x85,0xE5,0xFF,0x93,0x97,0x06,0x01,0xC9,0x8F,0x3E,0x85,0xBA,0x85,0x63,0x89,
+0x03,0x00,0x33,0x05,0xF0,0x40,0xB3,0x37,0xA0,0x00,0xB3,0x05,0xE0,0x40,0x9D,0x8D,
+0x22,0x44,0x92,0x44,0x31,0x01,0x82,0x80,0x37,0x07,0x00,0x01,0xC1,0x47,0xE3,0x68,
+0xE3,0xF4,0xE1,0x47,0xA9,0xB7,0x33,0x13,0xF3,0x00,0x33,0xD4,0xC5,0x00,0xB3,0x12,
+0xF5,0x00,0x33,0x56,0xC5,0x00,0x13,0x55,0x03,0x01,0xB3,0x95,0xF5,0x00,0xB3,0x77,
+0xA4,0x02,0x4D,0x8E,0x93,0x15,0x03,0x01,0xC1,0x81,0x13,0x57,0x06,0x01,0x33,0x54,
+0xA4,0x02,0xC2,0x07,0xD9,0x8F,0xB3,0x86,0x85,0x02,0x22,0x87,0x63,0xFC,0xD7,0x00,
+0x9A,0x97,0x13,0x07,0xF4,0xFF,0x63,0xE7,0x67,0x00,0x63,0xF5,0xD7,0x00,0x13,0x07,
+0xE4,0xFF,0x9A,0x97,0xB3,0x86,0xD7,0x40,0xB3,0xF7,0xA6,0x02,0xB3,0xD6,0xA6,0x02,
+0xC2,0x07,0x33,0x85,0xD5,0x02,0x93,0x15,0x06,0x01,0xC1,0x81,0xDD,0x8D,0xB6,0x87,
+0x63,0xFC,0xA5,0x00,0x9A,0x95,0x93,0x87,0xF6,0xFF,0x63,0xE7,0x65,0x00,0x63,0xF5,
+0xA5,0x00,0x93,0x87,0xE6,0xFF,0x9A,0x95,0x42,0x07,0x89,0x8D,0x5D,0x8F,0xE9,0xBD,
+0x63,0xE0,0xD5,0x14,0xC1,0x67,0x63,0xFD,0xF6,0x02,0x93,0x07,0xF0,0x0F,0xB3,0xB7,
+0xD7,0x00,0x8E,0x07,0x33,0xD3,0xF6,0x00,0x17,0x17,0x00,0x00,0x13,0x07,0x47,0x83,
+0x1A,0x97,0x03,0x47,0x07,0x00,0xBA,0x97,0x13,0x07,0x00,0x02,0x1D,0x8F,0x05,0xE3,
+0x85,0x47,0xE3,0xEC,0xB6,0xF0,0x33,0x35,0xC5,0x00,0x93,0x47,0x15,0x00,0x31,0xB7,
+0x37,0x07,0x00,0x01,0xC1,0x47,0xE3,0xE7,0xE6,0xFC,0xE1,0x47,0xE1,0xB7,0x33,0x53,
+0xF6,0x00,0xB3,0x96,0xE6,0x00,0xB3,0x66,0xD3,0x00,0xB3,0xD2,0xF5,0x00,0x33,0x16,
+0xE6,0x00,0x13,0xD4,0x06,0x01,0x32,0xC0,0x33,0xF6,0x82,0x02,0x13,0x93,0x06,0x01,
+0x13,0x53,0x03,0x01,0xB3,0x57,0xF5,0x00,0xB3,0x95,0xE5,0x00,0xDD,0x8D,0xB3,0xD2,
+0x82,0x02,0x93,0x17,0x06,0x01,0x13,0xD6,0x05,0x01,0x5D,0x8E,0xB3,0x04,0x53,0x02,
+0x96,0x87,0x63,0x7C,0x96,0x00,0x36,0x96,0x93,0x87,0xF2,0xFF,0x63,0x67,0xD6,0x00,
+0x63,0x75,0x96,0x00,0x93,0x87,0xE2,0xFF,0x36,0x96,0x05,0x8E,0xB3,0x72,0x86,0x02,
+0xC2,0x05,0xC1,0x81,0x33,0x54,0x86,0x02,0xC2,0x02,0xB3,0xE5,0xB2,0x00,0x33,0x03,
+0x83,0x02,0x22,0x86,0x63,0xFC,0x65,0x00,0xB6,0x95,0x13,0x06,0xF4,0xFF,0x63,0xE7,
+0xD5,0x00,0x63,0xF5,0x65,0x00,0x13,0x06,0xE4,0xFF,0xB6,0x95,0xC2,0x07,0xD1,0x8F,
+0x02,0x46,0xC1,0x64,0x93,0x86,0xF4,0xFF,0xB3,0xF2,0xD7,0x00,0xB3,0x85,0x65,0x40,
+0xF1,0x8E,0x13,0xD3,0x07,0x01,0x41,0x82,0x33,0x84,0xD2,0x02,0xB3,0x06,0xD3,0x02,
+0xB3,0x82,0xC2,0x02,0x33,0x03,0xC3,0x02,0xB6,0x92,0x13,0x56,0x04,0x01,0xB2,0x92,
+0x63,0xF3,0xD2,0x00,0x26,0x93,0x93,0xD6,0x02,0x01,0x36,0x93,0x63,0xE0,0x65,0x02,
+0xE3,0x9A,0x65,0xD6,0x33,0x15,0xE5,0x00,0x41,0x67,0x7D,0x17,0xB3,0xF2,0xE2,0x00,
+0x79,0x8C,0xC2,0x02,0x16,0x94,0x01,0x47,0xE3,0x79,0x85,0xE0,0xFD,0x17,0x99,0xBB,
+0x01,0x47,0x81,0x47,0x19,0xB5,0x61,0x11,0x22,0xC2,0x26,0xC0,0xAE,0x87,0x63,0x9D,
+0x06,0x20,0xB6,0x83,0x32,0x83,0xAA,0x82,0x97,0x06,0x00,0x00,0x93,0x86,0x46,0x6F,
+0x63,0xFD,0xC5,0x0A,0x41,0x67,0x63,0x73,0xE6,0x0A,0x13,0x07,0xF0,0x0F,0x33,0x37,
+0xC7,0x00,0x0E,0x07,0xB3,0x53,0xE6,0x00,0x9E,0x96,0x83,0xC6,0x06,0x00,0x36,0x97,
+0x93,0x06,0x00,0x02,0x99,0x8E,0x91,0xCA,0xB3,0x95,0xD7,0x00,0x33,0x57,0xE5,0x00,
+0x33,0x13,0xD6,0x00,0xD9,0x8D,0xB3,0x12,0xD5,0x00,0x13,0x55,0x03,0x01,0x33,0xF7,
+0xA5,0x02,0x13,0x16,0x03,0x01,0x41,0x82,0x93,0xD6,0x02,0x01,0xB3,0xD5,0xA5,0x02,
+0x42,0x07,0xD9,0x8E,0xB3,0x07,0xB6,0x02,0x2E,0x87,0x63,0xFC,0xF6,0x00,0x9A,0x96,
+0x13,0x87,0xF5,0xFF,0x63,0xE7,0x66,0x00,0x63,0xF5,0xF6,0x00,0x13,0x87,0xE5,0xFF,
+0x9A,0x96,0x9D,0x8E,0xB3,0xF7,0xA6,0x02,0xC2,0x02,0x93,0xD2,0x02,0x01,0xB3,0xD6,
+0xA6,0x02,0xC2,0x07,0xB3,0xE2,0x57,0x00,0x33,0x06,0xD6,0x02,0x36,0x85,0x63,0xFB,
+0xC2,0x00,0x9A,0x92,0x13,0x85,0xF6,0xFF,0x63,0xE6,0x62,0x00,0x63,0xF4,0xC2,0x00,
+0x13,0x85,0xE6,0xFF,0x42,0x07,0x49,0x8F,0x81,0x45,0x5D,0xA8,0xB7,0x03,0x00,0x01,
+0x41,0x47,0xE3,0x61,0x76,0xF6,0x61,0x47,0xB1,0xBF,0x01,0xE6,0x05,0x47,0x33,0x53,
+0xC7,0x02,0x41,0x67,0x63,0x73,0xE3,0x0A,0x13,0x07,0xF0,0x0F,0x63,0x73,0x67,0x00,
+0xA1,0x43,0x33,0x57,0x73,0x00,0xBA,0x96,0x03,0xC7,0x06,0x00,0x1E,0x97,0x93,0x03,
+0x00,0x02,0xB3,0x83,0xE3,0x40,0x63,0x99,0x03,0x08,0xB3,0x87,0x67,0x40,0x85,0x45,
+0x13,0x54,0x03,0x01,0x93,0x13,0x03,0x01,0x93,0xD3,0x03,0x01,0x93,0xD6,0x02,0x01,
+0x33,0xF7,0x87,0x02,0xB3,0xD7,0x87,0x02,0x42,0x07,0xD9,0x8E,0x33,0x86,0xF3,0x02,
+0x3E,0x87,0x63,0xFC,0xC6,0x00,0x9A,0x96,0x13,0x87,0xF7,0xFF,0x63,0xE7,0x66,0x00,
+0x63,0xF5,0xC6,0x00,0x13,0x87,0xE7,0xFF,0x9A,0x96,0x91,0x8E,0xB3,0xF7,0x86,0x02,
+0xC2,0x02,0x93,0xD2,0x02,0x01,0xB3,0xD6,0x86,0x02,0xC2,0x07,0xB3,0xE2,0x57,0x00,
+0xB3,0x83,0xD3,0x02,0x36,0x85,0x63,0xFB,0x72,0x00,0x9A,0x92,0x13,0x85,0xF6,0xFF,
+0x63,0xE6,0x62,0x00,0x63,0xF4,0x72,0x00,0x13,0x85,0xE6,0xFF,0x42,0x07,0x49,0x8F,
+0x3A,0x85,0x12,0x44,0x82,0x44,0x21,0x01,0x82,0x80,0x37,0x07,0x00,0x01,0xC1,0x43,
+0xE3,0x61,0xE3,0xF6,0xE1,0x43,0xB1,0xBF,0x33,0x13,0x73,0x00,0xB3,0xD6,0xE7,0x00,
+0x93,0x55,0x03,0x01,0xB3,0x97,0x77,0x00,0xB3,0x12,0x75,0x00,0xB3,0xD3,0xB6,0x02,
+0x33,0x57,0xE5,0x00,0x33,0x66,0xF7,0x00,0x93,0x17,0x03,0x01,0xC1,0x83,0x13,0x55,
+0x06,0x01,0x33,0xF7,0xB6,0x02,0xB3,0x86,0x77,0x02,0x42,0x07,0x49,0x8F,0x1E,0x85,
+0x63,0x7C,0xD7,0x00,0x1A,0x97,0x13,0x85,0xF3,0xFF,0x63,0x67,0x67,0x00,0x63,0x75,
+0xD7,0x00,0x13,0x85,0xE3,0xFF,0x1A,0x97,0xB3,0x06,0xD7,0x40,0x33,0xF7,0xB6,0x02,
+0xB3,0xD6,0xB6,0x02,0x42,0x07,0xB3,0x83,0xD7,0x02,0x93,0x17,0x06,0x01,0xC1,0x83,
+0xD9,0x8F,0x36,0x87,0x63,0xFC,0x77,0x00,0x9A,0x97,0x13,0x87,0xF6,0xFF,0x63,0xE7,
+0x67,0x00,0x63,0xF5,0x77,0x00,0x13,0x87,0xE6,0xFF,0x9A,0x97,0x93,0x15,0x05,0x01,
+0xB3,0x87,0x77,0x40,0xD9,0x8D,0xED,0xB5,0x63,0xE0,0xD5,0x14,0x41,0x67,0x63,0xFD,
+0xE6,0x02,0x13,0x07,0xF0,0x0F,0x33,0x37,0xD7,0x00,0x0E,0x07,0x33,0xD3,0xE6,0x00,
+0x97,0x05,0x00,0x00,0x93,0x85,0xC5,0x4C,0x9A,0x95,0x83,0xC5,0x05,0x00,0x2E,0x97,
+0x93,0x05,0x00,0x02,0x99,0x8D,0x85,0xE1,0x05,0x47,0xE3,0xE3,0xF6,0xF2,0x33,0x36,
+0xC5,0x00,0x13,0x47,0x16,0x00,0x29,0xBF,0xB7,0x05,0x00,0x01,0x41,0x47,0xE3,0xE7,
+0xB6,0xFC,0x61,0x47,0xE1,0xB7,0x33,0x53,0xE6,0x00,0xB3,0x96,0xB6,0x00,0xB3,0x66,
+0xD3,0x00,0xB3,0xD3,0xE7,0x00,0x13,0xD4,0x06,0x01,0xB3,0xF2,0x83,0x02,0x33,0x57,
+0xE5,0x00,0xB3,0x97,0xB7,0x00,0xD9,0x8F,0x13,0x97,0x06,0x01,0x41,0x83,0x13,0xD3,
+0x07,0x01,0x33,0x16,0xB6,0x00,0xB3,0xD3,0x83,0x02,0xC2,0x02,0xB3,0xE2,0x62,0x00,
+0xB3,0x04,0x77,0x02,0x1E,0x83,0x63,0xFC,0x92,0x00,0xB6,0x92,0x13,0x83,0xF3,0xFF,
+0x63,0xE7,0xD2,0x00,0x63,0xF5,0x92,0x00,0x13,0x83,0xE3,0xFF,0xB6,0x92,0xB3,0x82,
+0x92,0x40,0xB3,0xF3,0x82,0x02,0xC2,0x07,0xC1,0x83,0xB3,0xD2,0x82,0x02,0xC2,0x03,
+0xB3,0xE7,0xF3,0x00,0x33,0x07,0x57,0x02,0x96,0x83,0x63,0xFC,0xE7,0x00,0xB6,0x97,
+0x93,0x83,0xF2,0xFF,0x63,0xE7,0xD7,0x00,0x63,0xF5,0xE7,0x00,0x93,0x83,0xE2,0xFF,
+0xB6,0x97,0x99,0x8F,0x13,0x17,0x03,0x01,0x33,0x67,0x77,0x00,0xC1,0x63,0x13,0x83,
+0xF3,0xFF,0xB3,0x76,0x67,0x00,0x13,0x54,0x07,0x01,0x33,0x73,0x66,0x00,0x41,0x82,
+0xB3,0x82,0x66,0x02,0x33,0x03,0x64,0x02,0x33,0x04,0xC4,0x02,0x33,0x86,0xC6,0x02,
+0x93,0xD6,0x02,0x01,0x1A,0x96,0xB2,0x96,0x63,0xF3,0x66,0x00,0x1E,0x94,0x13,0xD6,
+0x06,0x01,0x32,0x94,0x63,0xE0,0x87,0x02,0xE3,0x90,0x87,0xD8,0xC1,0x67,0xFD,0x17,
+0xFD,0x8E,0xC2,0x06,0xB3,0xF2,0xF2,0x00,0x33,0x15,0xB5,0x00,0x96,0x96,0x81,0x45,
+0xE3,0x70,0xD5,0xE2,0x7D,0x17,0x8D,0xB3,0x81,0x45,0x01,0x47,0x11,0xBD,0x00,0x00,
+0x9C,0x0E,0x00,0x20,0x1C,0x0F,0x00,0x20,0x94,0x0F,0x00,0x20,0xAA,0x0F,0x00,0x20,
+0x06,0x10,0x00,0x20,0x0E,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0x0D,0x00,0x00,0x00,
+0x07,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0xFA,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,
+0xC9,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0xF5,0x00,0x00,0x00,0x93,0x00,0x00,0x00,
+0x39,0x00,0x00,0x00,0x40,0x0E,0x00,0x00,0xA2,0x04,0x00,0x00,0x31,0x07,0x00,0x00,
+0xF8,0x02,0x00,0x00,0x1C,0x04,0x00,0x00,0x6E,0x07,0x00,0x00,0x28,0x09,0x00,0x00,
+0x0B,0x02,0x00,0x00,0x65,0x00,0x00,0x00,0xAD,0x0E,0x00,0x00,0xC9,0x05,0x00,0x00,
+0x7B,0x0C,0x00,0x00,0xA3,0x9F,0x00,0x00,0x09,0x35,0x00,0x00,0x90,0xAC,0x00,0x00,
+0x3A,0x06,0x00,0x00,0xAC,0x90,0x00,0x00,0xF9,0xC5,0x00,0x00,0x9F,0xA3,0x00,0x00,
+0xCA,0xF6,0x00,0x00,0xA3,0x60,0x00,0x00,0xF6,0x35,0x00,0x00,0x6F,0xAC,0x00,0x00,
+0x3A,0xF9,0x00,0x00,0xAC,0x6F,0x00,0x00,0x06,0xC5,0x00,0x00,0x60,0xA3,0x00,0x00,
+0xCA,0x09,0x00,0x00,0x61,0xB1,0x05,0x00,0x18,0x34,0x0C,0x00,0x6C,0x44,0x01,0x00,
+0x85,0xA4,0x0B,0x00,0xA8,0x9A,0x09,0x00,0xF2,0xE6,0x0D,0x00,0x47,0x1E,0x0D,0x00,
+0x2D,0xEF,0x0C,0x00,0x06,0xF2,0x00,0x00,0xAE,0x37,0x07,0x00,0xFF,0xBC,0x00,0x00,
+0xA3,0x55,0x08,0x00,0x1B,0x87,0x01,0x00,0x6B,0x22,0x0A,0x00,0x74,0x97,0x0A,0x00,
+0x4A,0xFD,0x0B,0x00,0x36,0x29,0x09,0x00,0x31,0x7E,0x03,0x00,0x3F,0xD0,0x0F,0x00,
+0xDD,0x73,0x09,0x00,0x14,0xEC,0x3A,0x00,0x09,0x39,0x6B,0x00,0x9A,0x0A,0x52,0x00,
+0x53,0x9F,0x0E,0x00,0x48,0x26,0x9F,0x00,0xC5,0xFA,0x57,0x00,0x7C,0x6B,0x4C,0x00,
+0x5F,0x50,0xFE,0x00,0x31,0xB2,0xD8,0x00,0xF9,0x3C,0x34,0x00,0x9D,0x77,0x82,0x00,
+0x2F,0x5E,0x19,0x00,0xEB,0xE3,0x3A,0x00,0xF6,0x36,0x6B,0x00,0x65,0x05,0x52,0x00,
+0xAC,0x90,0x0E,0x00,0xB7,0x29,0x9F,0x00,0xC5,0x0A,0xA8,0x00,0x7C,0x9B,0xB3,0x00,
+0x5F,0xA0,0x01,0x00,0xCE,0xBD,0xD8,0x00,0x06,0x33,0x34,0x00,0x62,0x78,0x82,0x00,
+0xD0,0x51,0x19,0x00,0x7E,0x74,0x9E,0x73,0xD4,0xDE,0x34,0xD9,0xB2,0xB8,0x52,0xBF,
+0x18,0x12,0xF8,0x15,0x71,0x7B,0x91,0x7C,0xDB,0xD1,0x3B,0xD6,0x42,0x48,0xA2,0x4F,
+0xE8,0xE2,0x08,0xE5,0x7E,0x8B,0x9E,0x8C,0x2B,0xDE,0xCB,0xD9,0xB2,0x47,0x52,0x40,
+0x18,0xED,0xF8,0xEA,0x71,0x84,0x91,0x83,0xDB,0x2E,0x3B,0x29,0xBD,0x48,0x5D,0x4F,
+0xE8,0x1D,0x08,0x1A,0x81,0x8B,0x9E,0x73,0x2B,0x21,0x34,0xD9,0x4D,0x47,0x52,0xBF,
+0x18,0x12,0x07,0xEA,0x8E,0x84,0x91,0x7C,0xDB,0xD1,0xC4,0x29,0xBD,0xB7,0xA2,0x4F,
+0x17,0x1D,0x08,0xE5,0x81,0x74,0x9E,0x8C,0xD4,0x21,0xCB,0xD9,0x4D,0xB8,0x52,0x40,
+0x18,0xED,0x07,0x15,0x71,0x84,0x6E,0x7C,0x24,0xD1,0x3B,0x29,0xBD,0x48,0xA2,0xB0,
+0xE8,0x1D,0xF7,0xE5,0xEA,0x0A,0x00,0x00,0x36,0x0B,0x00,0x00,0xA0,0x0B,0x00,0x00,
+0x88,0x0E,0x00,0x00,0x50,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0xA0,0x16,0xB6,0x1B,
+0x00,0x20,0xC6,0x23,0x31,0x27,0x54,0x2A,0x41,0x2D,0x00,0x30,0x98,0x32,0x10,0x35,
+0x6C,0x37,0xB0,0x39,0xDD,0x3B,0xF7,0x3D,0x00,0x40,0xF8,0x41,0xE1,0x43,0xBE,0x45,
+0x8D,0x47,0x52,0x49,0x0B,0x4B,0xBB,0x4C,0x62,0x4E,0x00,0x50,0x95,0x51,0x23,0x53,
+0xA9,0x54,0x29,0x56,0xA2,0x57,0x15,0x59,0x82,0x5A,0x00,0x00,0x7C,0x3F,0x00,0x00,
+0x8E,0x3F,0x00,0x00,0x9A,0x3F,0x00,0x00,0xA6,0x3F,0x00,0x00,0xA6,0x3F,0x00,0x00,
+0x9A,0x3F,0x00,0x00,0xB8,0x3F,0x00,0x00,0xDC,0x3F,0x00,0x00,0xCA,0x3F,0x00,0x00,
+0x8E,0x3F,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x18,0xA4,0x00,0x00,0x60,0xA4,0x00,0x00,0x9A,0xA4,0x00,0x00,
+0xE4,0xA4,0x00,0x00,0x16,0xA5,0x00,0x00,0x48,0xA5,0x00,0x00,0x78,0xA5,0x00,0x00,
+0x76,0xA6,0x00,0x00,0x32,0xA7,0x00,0x00,0xE0,0xA7,0x00,0x00,0xA2,0xA8,0x00,0x00,
+0x3E,0xA9,0x00,0x00,0xD2,0xA9,0x00,0x00,0x70,0xAA,0x00,0x00,0x00,0x01,0x02,0x02,
+0x03,0x03,0x03,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,
+0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,
+0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,
+0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x07,
+0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
+0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
+0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,
+0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
+0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x51,0x11,0x06,0xC4,
+0xB7,0x87,0x00,0x40,0x13,0x07,0x00,0x20,0xD8,0xC7,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0x47,0x01,0x85,0x66,0x93,0x86,0x06,0x80,0xD8,0x43,0x51,0x45,0x55,0x8F,0xD8,0xC3,
+0xD8,0x43,0xFD,0x76,0x93,0x86,0xF6,0x7F,0x75,0x8F,0xD8,0xC3,0xED,0x28,0x01,0xA0,
+0xB1,0x47,0x33,0x05,0xF5,0x02,0x81,0x47,0x63,0x93,0xA7,0x00,0x82,0x80,0x01,0x00,
+0x85,0x07,0xDD,0xBF,0x81,0x47,0x63,0x13,0xF6,0x00,0x82,0x80,0x33,0x87,0xF5,0x00,
+0x83,0x46,0x07,0x00,0x33,0x07,0xF5,0x00,0x85,0x07,0x23,0x00,0xD7,0x00,0xE5,0xB7,
+0x79,0x9A,0x81,0x47,0x63,0x93,0xC7,0x00,0x82,0x80,0x33,0x87,0xF5,0x00,0x83,0x56,
+0x07,0x00,0x33,0x07,0xF5,0x00,0x89,0x07,0x23,0x10,0xD7,0x00,0xE5,0xB7,0x71,0x9A,
+0x81,0x47,0x63,0x93,0xC7,0x00,0x82,0x80,0x33,0x87,0xF5,0x00,0x14,0x43,0x33,0x07,
+0xF5,0x00,0x91,0x07,0x14,0xC3,0xF5,0xB7,0x63,0xD4,0xA5,0x00,0x0D,0x8D,0x82,0x80,
+0x33,0x85,0xA5,0x40,0x82,0x80,0x85,0x81,0x01,0x47,0x81,0x47,0x93,0x16,0x07,0x01,
+0xC1,0x82,0x63,0xE4,0xB6,0x00,0x3E,0x85,0x82,0x80,0x93,0x16,0x17,0x00,0xAA,0x96,
+0x83,0xD6,0x06,0x00,0x05,0x07,0xB6,0x97,0xC2,0x07,0xC1,0x83,0xC5,0xB7,0xB7,0x37,
+0x00,0x40,0x13,0x07,0x10,0x04,0x11,0xE1,0x05,0x47,0x98,0xC7,0x82,0x80,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0x85,0x8B,0x91,0xE7,0xB7,0x37,
+0x00,0x40,0x05,0x47,0x98,0xC7,0x82,0x80,0xB7,0x37,0x00,0x40,0x13,0x07,0x10,0x04,
+0xD5,0xBF,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0x85,0x8B,
+0x99,0xE7,0xB7,0x37,0x00,0x40,0x13,0x07,0x10,0x04,0x98,0xC7,0x82,0x80,0xB7,0x37,
+0x00,0x40,0x05,0x47,0xDD,0xBF,0x51,0x11,0x22,0xC2,0x26,0xC0,0x06,0xC4,0xAA,0x84,
+0x01,0x44,0x63,0x17,0x94,0x00,0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,
+0xB7,0x37,0x00,0x40,0x98,0x47,0x13,0x77,0x07,0x04,0x09,0xCB,0x05,0x47,0x98,0xC7,
+0x09,0x45,0x05,0x04,0xF1,0x3D,0x13,0x74,0xF4,0x0F,0xE1,0xBF,0x13,0x07,0x10,0x04,
+0xFD,0xB7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x05,0x00,0x20,
+0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,
+0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0x80,0x05,0x00,0x20,
+0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,
+0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0x80,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,
+0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0xF8,0x05,0x00,0x20,0x71,0x11,0x16,0xC0,
+0xF3,0x22,0x20,0x34,0x63,0xC4,0x02,0x06,0x11,0x01,0x97,0x52,0x00,0x00,0x93,0x82,
+0xA2,0xE1,0x93,0x82,0xC2,0xFB,0x23,0xA0,0x12,0x00,0x23,0xA2,0x22,0x00,0x23,0xA4,
+0x32,0x00,0x23,0xA6,0x42,0x00,0x23,0xAA,0x62,0x00,0x23,0xAC,0x72,0x00,0x23,0xAE,
+0x82,0x00,0x23,0xA0,0x92,0x02,0x23,0xA2,0xA2,0x02,0x23,0xA4,0xB2,0x02,0x23,0xA6,
+0xC2,0x02,0x23,0xA8,0xD2,0x02,0x23,0xAA,0xE2,0x02,0x23,0xAC,0xF2,0x02,0x73,0x25,
+0x10,0x34,0x23,0xAE,0xA2,0x02,0x73,0x25,0x00,0x30,0x23,0xA0,0xA2,0x04,0x16,0x85,
+0x83,0x22,0xC1,0xFF,0x2A,0x81,0x16,0xC8,0xEF,0xF0,0x5F,0xD1,0x82,0x42,0x11,0x01,
+0x11,0xA0,0x00,0x00,0x79,0x71,0x16,0xC2,0x1A,0xC4,0xF3,0x22,0x10,0x34,0x73,0x23,
+0x20,0x34,0x1A,0xD4,0x16,0xD6,0x73,0x60,0x04,0x30,0x06,0xC0,0x1E,0xC6,0x2A,0xC8,
+0x2E,0xCA,0x32,0xCC,0x36,0xCE,0x3A,0xD0,0x3E,0xD2,0x13,0x73,0xF3,0x03,0x0A,0x03,
+0x97,0x52,0x00,0x00,0x93,0x82,0x42,0xAB,0x9A,0x92,0x83,0xA3,0x02,0x00,0x82,0x93,
+0x82,0x40,0x92,0x42,0x22,0x43,0xB2,0x43,0x62,0x46,0xF2,0x46,0x02,0x57,0x92,0x57,
+0x73,0x70,0x04,0x30,0x22,0x55,0x73,0x10,0x25,0x34,0xB2,0x55,0x73,0x90,0x15,0x34,
+0x42,0x45,0xD2,0x45,0x45,0x61,0x73,0x00,0x20,0x30,0x00,0x00,0x51,0x11,0x16,0xC2,
+0x1A,0xC4,0x85,0x42,0x37,0xF3,0x00,0xE0,0x13,0x03,0x43,0x00,0x23,0x20,0x53,0x00,
+0x92,0x42,0x22,0x43,0x31,0x01,0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x67,
+0x83,0xC7,0x87,0x00,0x93,0xF7,0xF7,0x0F,0xA1,0xCB,0xB7,0xB7,0x00,0x20,0xB7,0xF5,
+0x00,0x20,0x83,0xA6,0x87,0x2C,0x93,0x87,0x85,0x68,0x03,0xC7,0x97,0x03,0x05,0x45,
+0xB7,0xF7,0x00,0x20,0x93,0x85,0x85,0x68,0x37,0x56,0x00,0x20,0x93,0x87,0xC7,0x2D,
+0x63,0x05,0xE5,0x02,0x03,0xC7,0xC5,0x03,0x0D,0x45,0x63,0x00,0xE5,0x02,0x83,0x22,
+0x46,0x00,0x3E,0x83,0x01,0x45,0x03,0xC7,0x37,0x01,0x63,0x6B,0xE5,0x08,0x83,0xC7,
+0x55,0x04,0x93,0xF7,0xF7,0x0F,0x95,0xEF,0x82,0x80,0x03,0xC7,0x07,0x09,0x62,0x07,
+0x61,0x87,0xE3,0x5E,0x07,0xFC,0x03,0x27,0x46,0x00,0x51,0x11,0x22,0xC4,0x26,0xC2,
+0x3A,0xC0,0xBE,0x82,0x01,0x45,0xF9,0x53,0x0D,0x44,0x03,0xC7,0x37,0x01,0x63,0x6C,
+0xE5,0x00,0x83,0xC7,0x55,0x04,0x93,0xF7,0xF7,0x0F,0xC9,0xCB,0x22,0x44,0x92,0x44,
+0x31,0x01,0x67,0x00,0xA0,0x24,0x03,0xC6,0x67,0x01,0x03,0xC7,0x22,0x06,0x01,0x43,
+0x33,0x07,0xC7,0x02,0x02,0x46,0x06,0x07,0x32,0x97,0x03,0xC6,0x27,0x01,0x63,0x67,
+0xC3,0x00,0x05,0x05,0x42,0x05,0x41,0x81,0x85,0x02,0xC1,0xB7,0x03,0x16,0x07,0x00,
+0x83,0x94,0x06,0x00,0x05,0x03,0x33,0x06,0x76,0x02,0x42,0x03,0x89,0x06,0x09,0x07,
+0x13,0x53,0x03,0x01,0x26,0x96,0x33,0x46,0x86,0x02,0x23,0x9F,0xC6,0xFE,0xF1,0xB7,
+0x03,0xC6,0x67,0x01,0x03,0x47,0x23,0x06,0x33,0x07,0xC7,0x02,0x01,0x46,0x06,0x07,
+0x16,0x97,0x83,0xC3,0x27,0x01,0x63,0x67,0x76,0x00,0x05,0x05,0x42,0x05,0x41,0x81,
+0x05,0x03,0x91,0xB7,0x83,0x53,0x07,0x00,0x05,0x06,0x42,0x06,0xB3,0x03,0x70,0x40,
+0x23,0x90,0x76,0x00,0x09,0x07,0x89,0x06,0x41,0x82,0xE1,0xBF,0x22,0x44,0x92,0x44,
+0x31,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x85,0x45,0x83,0xA6,0x87,0x00,0x63,0x1A,
+0xB5,0x0A,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x67,0x83,0xC7,0x77,0x00,0x93,0xF7,
+0xF7,0x0F,0x63,0x87,0x07,0x10,0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x68,0x83,0x45,
+0x97,0x03,0xB7,0xF7,0x00,0x20,0x93,0x86,0x06,0x05,0x93,0x87,0xC7,0x2D,0x37,0xF6,
+0x00,0x20,0x63,0x07,0xB5,0x00,0x03,0x47,0xC7,0x03,0x8D,0x45,0x63,0x93,0xE5,0x02,
+0x03,0xC7,0x07,0x09,0x62,0x07,0x61,0x87,0x63,0x5D,0x07,0x00,0x03,0x26,0x06,0x12,
+0x3E,0x85,0x81,0x45,0x0D,0x43,0x03,0xC7,0x37,0x01,0x05,0x05,0x63,0xED,0xE5,0x00,
+0x82,0x80,0x03,0x25,0x06,0x12,0xBE,0x85,0x01,0x46,0x03,0xC7,0x37,0x01,0x85,0x05,
+0x63,0x64,0xE6,0x02,0x82,0x80,0x03,0x47,0x15,0x06,0x83,0x12,0x06,0x00,0x85,0x05,
+0x06,0x07,0x36,0x97,0x03,0x17,0x07,0x00,0x09,0x06,0x06,0x07,0x16,0x97,0x33,0x47,
+0x67,0x02,0x23,0x1F,0xE6,0xFE,0xC1,0xB7,0x03,0xC7,0x15,0x06,0x06,0x07,0x36,0x97,
+0x03,0x13,0x07,0x00,0x13,0x17,0x16,0x00,0x2A,0x97,0x23,0x10,0x67,0x00,0x05,0x06,
+0x6D,0xBF,0x3D,0xE5,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x67,0x83,0xC7,0x67,0x00,
+0x93,0xF7,0xF7,0x0F,0xB1,0xCF,0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x68,0x03,0x45,
+0x97,0x03,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x37,0xF6,0x00,0x20,0x63,0x87,
+0xA5,0x00,0x03,0x47,0xC7,0x03,0x8D,0x45,0x63,0x93,0xE5,0x02,0x03,0xC7,0x07,0x09,
+0x62,0x07,0x61,0x87,0x63,0x5D,0x07,0x00,0x03,0x26,0x86,0x12,0x3E,0x85,0x81,0x45,
+0x0D,0x43,0x03,0xC7,0x27,0x01,0x05,0x05,0x63,0xED,0xE5,0x00,0x82,0x80,0x03,0x25,
+0x86,0x12,0xBE,0x85,0x01,0x46,0x03,0xC7,0x27,0x01,0x85,0x05,0x63,0x64,0xE6,0x02,
+0x82,0x80,0x03,0x47,0x15,0x04,0x83,0x12,0x06,0x00,0x85,0x05,0x06,0x07,0x36,0x97,
+0x03,0x17,0x07,0x00,0x09,0x06,0x06,0x07,0x16,0x97,0x33,0x47,0x67,0x02,0x23,0x1F,
+0xE6,0xFE,0xC1,0xB7,0x03,0xC7,0x15,0x04,0x06,0x07,0x36,0x97,0x03,0x13,0x07,0x00,
+0x13,0x17,0x16,0x00,0x2A,0x97,0x23,0x10,0x67,0x00,0x05,0x06,0x6D,0xBF,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x87,0xFE,0x85,0x65,0x37,0x06,0xF0,0xFF,0x23,0xA4,0x07,0x0E,
+0x23,0xA6,0x07,0x0E,0x23,0xA8,0x07,0x0E,0x03,0xA7,0xC7,0x0F,0x7D,0x16,0x4D,0x8F,
+0x23,0xAE,0xE7,0x0E,0x03,0xA7,0x87,0x0F,0x79,0x9B,0x23,0xAC,0xE7,0x0E,0x83,0xA6,
+0xC7,0x0F,0x37,0x07,0x00,0xF0,0x7D,0x17,0xF9,0x8E,0x23,0xAE,0xD7,0x0E,0x83,0xA6,
+0xC7,0x0F,0xF1,0x8E,0x23,0xAE,0xD7,0x0E,0x83,0xA6,0xC7,0x0F,0xBD,0x9A,0x23,0xAE,
+0xD7,0x0E,0x03,0xA7,0x87,0x0F,0xFD,0x76,0xFD,0x16,0x4D,0x8F,0x23,0xAC,0xE7,0x0E,
+0x03,0xA7,0xC7,0x0F,0x13,0x77,0xF7,0xEF,0x23,0xAE,0xE7,0x0E,0x03,0xA7,0x47,0x0F,
+0x13,0x77,0xF7,0xEF,0x23,0xAA,0xE7,0x0E,0x03,0xA7,0x07,0x10,0x75,0x8F,0x23,0xA0,
+0xE7,0x10,0x03,0xA7,0x07,0x10,0xC1,0x76,0xFD,0x16,0x75,0x8F,0x23,0xA0,0xE7,0x10,
+0x03,0xA7,0x07,0x09,0xB7,0x06,0x00,0xFF,0xFD,0x16,0x75,0x8F,0xB7,0xF6,0x00,0x20,
+0x23,0xA8,0xE7,0x08,0x93,0x86,0xC6,0x2D,0x03,0xC7,0x06,0x01,0x83,0xC6,0xF6,0x00,
+0x42,0x07,0xE2,0x06,0x55,0x8F,0x23,0xA6,0xE7,0x08,0x82,0x80,0x13,0x07,0xF5,0xFF,
+0x85,0x47,0x63,0xEE,0xE7,0x04,0xB7,0x57,0x00,0x20,0x83,0xA5,0x87,0xFE,0x37,0xF6,
+0x00,0x20,0x81,0x46,0x13,0x06,0xC6,0x2D,0x83,0x47,0xD6,0x01,0x89,0x07,0x63,0xD3,
+0xD7,0x00,0x82,0x80,0x33,0x05,0xD6,0x00,0x83,0x47,0xE5,0x02,0x03,0x43,0x15,0x03,
+0x13,0xD7,0x26,0x00,0xE2,0x07,0xB3,0xE7,0x67,0x00,0x03,0x43,0xF5,0x02,0x03,0x45,
+0x05,0x03,0x13,0x07,0x57,0x02,0x42,0x03,0x0A,0x07,0xB3,0xE7,0x67,0x00,0x22,0x05,
+0x91,0x06,0x2E,0x97,0xC9,0x8F,0xC2,0x06,0x1C,0xC3,0xC1,0x82,0x75,0xBF,0x29,0xED,
+0xB7,0x57,0x00,0x20,0x83,0xA5,0x87,0xFE,0x37,0xF6,0x00,0x20,0x81,0x46,0x13,0x06,
+0xC6,0x2D,0x83,0x47,0xC6,0x01,0x89,0x07,0x63,0xD3,0xD7,0x00,0x82,0x80,0x33,0x05,
+0xD6,0x00,0x83,0x47,0xE5,0x01,0x03,0x43,0x15,0x02,0x13,0xD7,0x26,0x00,0xE2,0x07,
+0xB3,0xE7,0x67,0x00,0x03,0x43,0xF5,0x01,0x03,0x45,0x05,0x02,0x13,0x07,0x57,0x02,
+0x42,0x03,0x0A,0x07,0xB3,0xE7,0x67,0x00,0x22,0x05,0x91,0x06,0x2E,0x97,0xC9,0x8F,
+0xC2,0x06,0x1C,0xC3,0xC1,0x82,0x75,0xBF,0x8D,0x47,0x63,0x1A,0xF5,0x04,0xB7,0x57,
+0x00,0x20,0x37,0xF6,0x00,0x20,0x83,0xA5,0x87,0xFE,0x13,0x06,0xC6,0x2D,0x81,0x47,
+0x03,0x47,0xD6,0x01,0x09,0x07,0x63,0x53,0xF7,0x00,0x82,0x80,0x13,0x87,0x17,0x00,
+0x13,0x95,0x87,0x01,0x42,0x07,0x2A,0x97,0x13,0x85,0x27,0x00,0x93,0xD6,0x27,0x00,
+0x22,0x05,0x2A,0x97,0x93,0x86,0x56,0x02,0x13,0x85,0x37,0x00,0x8A,0x06,0x12,0x05,
+0x91,0x07,0xAE,0x96,0x2A,0x97,0xC2,0x07,0x98,0xC2,0xC1,0x83,0xD1,0xB7,0x91,0x47,
+0x63,0x1C,0xF5,0x00,0xB7,0x57,0x00,0x20,0x83,0xA7,0x87,0xFE,0x37,0x07,0x12,0x11,
+0x23,0xAA,0xE7,0x08,0x23,0xAC,0xE7,0x08,0x82,0x80,0x51,0x11,0xB7,0xF7,0x00,0x20,
+0x22,0xC2,0x26,0xC0,0x06,0xC4,0x93,0x87,0xC7,0x67,0x83,0xC7,0x67,0x00,0x37,0xF4,
+0x00,0x20,0x93,0x04,0xC4,0x2D,0x93,0xF7,0xF7,0x0F,0x89,0xE7,0x83,0xC7,0xF4,0x08,
+0xA1,0x8B,0x99,0xC3,0x09,0x45,0x5D,0x35,0xDD,0x33,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0x87,0xFE,0x03,0xA7,0x84,0x0B,0xFD,0x76,0xFD,0x16,0x23,0xA8,0xE7,0x0E,0x37,0x57,
+0x00,0x20,0x03,0x27,0x47,0x00,0x79,0x76,0x3D,0x06,0x23,0xA2,0xE7,0x10,0x03,0xA7,
+0xC7,0x0F,0xA2,0x40,0x13,0x67,0x07,0x01,0x23,0xAE,0xE7,0x0E,0x03,0xA7,0x87,0x0F,
+0x75,0x8F,0x23,0xAC,0xE7,0x0E,0x03,0xA7,0xC7,0x0F,0x13,0x67,0x07,0x10,0x23,0xAE,
+0xE7,0x0E,0x03,0xA7,0x47,0x08,0x83,0xC6,0x74,0x00,0x71,0x8F,0x92,0x06,0x55,0x8F,
+0x23,0xA2,0xE7,0x08,0x03,0x47,0xC4,0x2D,0x83,0xC6,0x74,0x01,0x03,0xC6,0x64,0x01,
+0x72,0x07,0xB2,0x06,0x55,0x8F,0x51,0x8F,0x23,0xA8,0xE7,0x08,0x03,0xC7,0x94,0x00,
+0x83,0xC6,0x64,0x00,0x12,0x44,0x52,0x07,0x92,0x06,0x55,0x8F,0x23,0xA4,0xE7,0x08,
+0x03,0xC7,0x94,0x00,0x83,0xC6,0x64,0x00,0x82,0x44,0x52,0x07,0x92,0x06,0x55,0x8F,
+0xC1,0x66,0x55,0x8F,0x23,0xA4,0xE7,0x08,0x31,0x01,0x82,0x80,0x51,0x11,0x22,0xC2,
+0x26,0xC0,0x37,0xF4,0x00,0x20,0x06,0xC4,0xAA,0x84,0x15,0x3B,0x93,0x07,0xC4,0x2D,
+0x03,0xC7,0x57,0x0C,0x85,0x46,0xB7,0x57,0x00,0x20,0x13,0x04,0xC4,0x2D,0x93,0x87,
+0x87,0xFE,0x63,0x92,0xE6,0x0E,0x94,0x43,0x41,0x66,0x03,0xA7,0x86,0x0F,0x51,0x8F,
+0x23,0xAC,0xE6,0x0E,0x03,0x47,0x14,0x00,0x03,0x46,0x74,0x01,0x83,0x45,0x64,0x01,
+0x94,0x43,0x32,0x06,0x72,0x07,0x51,0x8F,0x4D,0x8F,0x23,0xA8,0xE6,0x08,0x05,0x46,
+0x13,0x87,0xF4,0xFF,0x63,0x6E,0xE6,0x0C,0x37,0x57,0x00,0x20,0x03,0x27,0x87,0x00,
+0x13,0x07,0x07,0x05,0x23,0xA4,0xE6,0x10,0x03,0x43,0x44,0x00,0x03,0x47,0x84,0x00,
+0x03,0x45,0x54,0x00,0x83,0x45,0x34,0x00,0x12,0x07,0x42,0x05,0x49,0x8F,0x33,0x67,
+0x67,0x00,0xE2,0x05,0x4D,0x8F,0x23,0xA2,0xE6,0x08,0x05,0x45,0x85,0x3B,0xB7,0x57,
+0x00,0x20,0x93,0x87,0x87,0xFE,0x05,0x46,0x98,0x43,0x63,0x94,0xC4,0x08,0xFD,0x56,
+0x23,0x28,0xD7,0x0E,0x98,0x43,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,
+0x17,0x15,0xA2,0x07,0x93,0x96,0x47,0x01,0x63,0xD1,0x06,0x14,0x83,0x47,0xE4,0x08,
+0x93,0xF7,0xF7,0x0F,0x63,0x9B,0x07,0x12,0xF1,0x14,0xED,0x98,0x63,0x97,0x04,0x12,
+0x83,0x47,0xC4,0x00,0x83,0x46,0x64,0x00,0xD2,0x07,0x92,0x06,0xD5,0x8F,0x85,0x66,
+0xD5,0x8F,0x23,0x24,0xF7,0x08,0x83,0x47,0xC4,0x00,0x83,0x46,0x64,0x00,0xD2,0x07,
+0xA2,0x40,0x92,0x06,0xD5,0x8F,0x12,0x44,0xC5,0x66,0xD5,0x8F,0x23,0x24,0xF7,0x08,
+0x82,0x44,0x31,0x01,0x82,0x80,0x03,0x47,0x54,0x0C,0x89,0x46,0xE3,0x94,0xE6,0xF2,
+0x90,0x43,0xC1,0x76,0xFD,0x16,0x03,0x27,0x86,0x0F,0x75,0x8F,0x23,0x2C,0xE6,0x0E,
+0x11,0xBF,0x83,0x26,0x07,0x10,0x05,0x66,0xD1,0x8E,0x23,0x20,0xD7,0x10,0x9D,0xBF,
+0x13,0x87,0xC4,0xFF,0x6D,0x9B,0x69,0xE3,0x37,0x57,0x00,0x20,0x03,0x27,0x87,0x00,
+0x23,0xA4,0xE6,0x10,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x47,0x17,0x15,
+0x0D,0x83,0x05,0x8B,0x3D,0xCB,0x03,0x47,0xE4,0x08,0x13,0x77,0xF7,0x0F,0x35,0xE7,
+0x03,0x47,0xE4,0x00,0x03,0x46,0xD4,0x00,0x42,0x07,0x62,0x06,0x51,0x8F,0x23,0xA6,
+0xE6,0x08,0x03,0x45,0x44,0x00,0x03,0x47,0xB4,0x00,0x83,0x45,0x54,0x00,0x03,0x46,
+0x24,0x00,0x12,0x07,0xC2,0x05,0x4D,0x8F,0x49,0x8F,0x62,0x06,0x51,0x8F,0x23,0xA2,
+0xE6,0x08,0x01,0x45,0xA5,0x31,0xB7,0x57,0x00,0x20,0x11,0x47,0x93,0x87,0x87,0xFE,
+0x63,0x9A,0xE4,0x02,0x98,0x43,0xFD,0x56,0x05,0x66,0x23,0x24,0xD7,0x0E,0x23,0x26,
+0xD7,0x0E,0x83,0x26,0x47,0x0F,0x93,0xE6,0x06,0x10,0x23,0x2A,0xD7,0x0E,0x83,0x26,
+0xC7,0x0F,0xD1,0x8E,0x23,0x2E,0xD7,0x0E,0xF1,0xBD,0x03,0x45,0x44,0x00,0x03,0x47,
+0x84,0x00,0x65,0xB7,0x98,0x43,0x7D,0x76,0x7D,0x16,0x83,0x26,0x47,0x0F,0x93,0xE6,
+0x06,0x10,0x23,0x2A,0xD7,0x0E,0x83,0x26,0xC7,0x0F,0xF1,0x8E,0x23,0x2E,0xD7,0x0E,
+0x83,0x26,0x07,0x10,0x41,0x66,0x0D,0xBF,0x01,0xA0,0x83,0x47,0xA4,0x00,0x83,0x46,
+0x64,0x00,0xD2,0x07,0x92,0x06,0xD5,0x8F,0x85,0x66,0xD5,0x8F,0x23,0x24,0xF7,0x08,
+0x83,0x47,0xA4,0x00,0xD9,0xBD,0xB7,0x57,0x00,0x20,0x83,0xA7,0x87,0xFE,0x83,0xA7,
+0x87,0x0A,0x63,0x9B,0x07,0x26,0x41,0x11,0x22,0xC4,0x37,0xF4,0x00,0x20,0x93,0x07,
+0x84,0x68,0x06,0xC6,0x26,0xC2,0x83,0xC7,0x47,0x00,0x05,0x47,0x13,0x04,0x84,0x68,
+0x63,0x04,0xF7,0x24,0x83,0x46,0x54,0x00,0xB7,0x57,0x00,0x20,0x93,0x84,0x87,0x3A,
+0x63,0x11,0xD7,0x06,0xA3,0x02,0x04,0x00,0x94,0x40,0x11,0x47,0x63,0x65,0xD7,0x00,
+0x98,0x40,0x05,0x07,0x98,0xC0,0x03,0x47,0x34,0x03,0x13,0x77,0xF7,0x0F,0x31,0xC3,
+0x03,0x47,0x94,0x03,0x85,0x46,0x13,0x77,0xF7,0x0F,0x63,0x1C,0xD7,0x02,0x83,0x46,
+0x54,0x03,0x93,0xF6,0xF6,0x0F,0x95,0xC6,0x83,0x46,0xC4,0x03,0x09,0x46,0x63,0x02,
+0xD6,0x02,0xB7,0xF6,0x00,0x20,0x93,0x86,0xC6,0x2D,0x83,0xC6,0xF6,0x08,0xE2,0x06,
+0xE1,0x86,0x63,0xC5,0x06,0x00,0x15,0x47,0x98,0xC0,0x21,0xA0,0x94,0x40,0xE3,0x6C,
+0xD7,0xFE,0x98,0x40,0x91,0x46,0x63,0xEE,0xE6,0x1C,0xBD,0x67,0x0A,0x07,0x93,0x86,
+0x47,0xAD,0x36,0x97,0x18,0x43,0x02,0x87,0x05,0x47,0xA3,0x01,0xE1,0x00,0x03,0x47,
+0x94,0x03,0x85,0x46,0x63,0x9C,0xE6,0x02,0x03,0x47,0x34,0x03,0x13,0x77,0xF7,0x0F,
+0x15,0xC7,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,0x03,0x47,0xF7,0x08,0x13,0x77,
+0x07,0x04,0x09,0xEF,0x03,0x47,0xC4,0x03,0x89,0x46,0x63,0x89,0xE6,0x00,0x03,0x47,
+0x54,0x03,0x13,0x77,0xF7,0x0F,0x19,0xC3,0xA3,0x01,0x01,0x00,0x37,0xF7,0x00,0x20,
+0x13,0x07,0xC7,0x67,0x03,0x47,0x67,0x00,0x13,0x77,0xF7,0x0F,0x63,0x0B,0x07,0x10,
+0x03,0x47,0x31,0x00,0x13,0x77,0xF7,0x0F,0x63,0x05,0x07,0x10,0x37,0x57,0x00,0x20,
+0x03,0x27,0x07,0x01,0x11,0x45,0x03,0x47,0xA7,0x02,0x11,0x8B,0x11,0xE3,0x21,0x45,
+0x75,0x39,0x23,0x01,0x01,0x00,0xE5,0xA8,0x05,0x47,0xA3,0x01,0xE1,0x00,0x03,0x47,
+0x94,0x03,0x85,0x46,0x63,0x9D,0xE6,0x02,0x03,0x47,0x34,0x03,0x13,0x77,0xF7,0x0F,
+0x1D,0xC7,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,0x03,0x47,0xF7,0x08,0x62,0x07,
+0x61,0x87,0x63,0x4E,0x07,0x00,0x03,0x47,0xC4,0x03,0x89,0x46,0x63,0x89,0xE6,0x00,
+0x03,0x47,0x54,0x03,0x13,0x77,0xF7,0x0F,0x19,0xC3,0xA3,0x01,0x01,0x00,0x37,0xF7,
+0x00,0x20,0x13,0x07,0xC7,0x67,0x03,0x47,0x77,0x00,0x13,0x77,0xF7,0x0F,0x51,0xCB,
+0x03,0x47,0x31,0x00,0x13,0x77,0xF7,0x0F,0x49,0xC7,0x37,0x57,0x00,0x20,0x03,0x27,
+0x07,0x01,0x05,0x45,0x03,0x47,0xA7,0x02,0x05,0x8B,0x59,0xF3,0x09,0x45,0x49,0xB7,
+0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x67,0x03,0x47,0x87,0x00,0x13,0x77,0xF7,0x0F,
+0x2D,0xC3,0xA1,0x3E,0xBD,0xB7,0x37,0x57,0x00,0x20,0x83,0x26,0x07,0x01,0x03,0xC7,
+0x36,0x15,0x11,0x83,0x05,0x8B,0x31,0xC7,0x37,0x67,0x00,0x20,0x13,0x07,0x47,0x7E,
+0x03,0x47,0x57,0x36,0x13,0x77,0xF7,0x0F,0x0D,0xCF,0x03,0x47,0x84,0x03,0x05,0x46,
+0x63,0x09,0xE6,0x02,0x03,0xC7,0x96,0x07,0x3D,0x8B,0x05,0xE7,0x37,0xF7,0x00,0x20,
+0x13,0x07,0xC7,0x2D,0x03,0x57,0x27,0x0A,0x93,0x06,0x60,0x04,0x63,0xEB,0xE6,0x00,
+0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x6D,0xA3,0x00,0xC7,0x04,0xEF,0x30,0xF0,0x27,
+0x09,0xBF,0x98,0x40,0x05,0x07,0x98,0xC0,0x05,0x47,0x23,0x01,0xE1,0x00,0x03,0x47,
+0x21,0x00,0x13,0x77,0xF7,0x0F,0xE3,0x16,0x07,0xE6,0x94,0x40,0x11,0x47,0x63,0x7D,
+0xD7,0x02,0x05,0x47,0x23,0x02,0xE4,0x00,0xA3,0x01,0x04,0x00,0xB7,0xF7,0x00,0x20,
+0x23,0xA0,0x04,0x00,0x93,0x87,0x87,0x6D,0x03,0xC7,0x17,0x04,0x85,0x46,0x63,0x95,
+0xE6,0x00,0x09,0x47,0xA3,0x80,0xE7,0x04,0x83,0x47,0xC4,0x03,0x09,0x47,0x63,0x15,
+0xF7,0x00,0x8D,0x47,0x23,0x0E,0xF4,0x02,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,
+0x82,0x80,0x15,0x47,0x98,0xC0,0x75,0xB5,0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0x87,0x68,0xA3,0x82,0x07,0x00,0x23,0x82,0x07,0x00,0x05,0x47,0xA3,0x81,0xE7,0x00,
+0x37,0x57,0x00,0x20,0x23,0x24,0x07,0x3A,0x37,0xF7,0x00,0x20,0x13,0x07,0x87,0x6D,
+0xA3,0x00,0x07,0x04,0x03,0xC7,0xC7,0x03,0x85,0x46,0x63,0x95,0xE6,0x00,0x09,0x47,
+0x23,0x8E,0xE7,0x02,0x89,0xB3,0xB7,0x57,0x00,0x20,0x83,0xA7,0x87,0xFE,0x51,0x11,
+0x06,0xC4,0x7D,0x57,0x23,0xA0,0xE7,0x12,0x23,0xA0,0x07,0x12,0x55,0x45,0xE7,0x00,
+0x40,0x20,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x05,0x47,0xA3,0x82,0xE7,0x00,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x6D,0x83,0xC7,0x57,0x03,0x05,0x47,0x63,0x05,
+0xF7,0x00,0xA2,0x40,0x31,0x01,0x01,0xB3,0xA2,0x40,0x31,0x01,0x82,0x80,0x51,0x11,
+0x22,0xC2,0x1D,0x64,0x06,0xC4,0x13,0x04,0x04,0x53,0x81,0x47,0x37,0x17,0x00,0x40,
+0x18,0x43,0x63,0x5D,0x07,0x00,0x0D,0x47,0x63,0x6F,0xF7,0x00,0x85,0x07,0x7D,0x14,
+0x75,0xF4,0x01,0x45,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0x29,0x45,0xEF,0xF0,
+0x2F,0xA1,0x81,0x47,0xED,0xB7,0x05,0x45,0xF5,0xB7,0xD1,0xB7,0x51,0x11,0x22,0xC2,
+0x06,0xC4,0x2A,0x84,0x6D,0x3F,0x85,0x47,0x63,0x07,0xF5,0x00,0x7D,0x55,0xA2,0x40,
+0x12,0x44,0x31,0x01,0x82,0x80,0xB7,0x17,0x00,0x40,0x23,0xA8,0x87,0x08,0x13,0x64,
+0x14,0x00,0x23,0xA8,0x87,0x08,0x09,0x64,0x13,0x04,0x04,0x71,0x7D,0x14,0x79,0xDC,
+0xB7,0x17,0x00,0x40,0x83,0xA7,0x07,0x09,0x89,0x8B,0x89,0xC7,0x05,0x45,0xEF,0xF0,
+0x2F,0x9C,0xED,0xB7,0xAD,0x3F,0x7D,0x15,0x33,0x35,0xA0,0x00,0x33,0x05,0xA0,0x40,
+0x7D,0xBF,0x93,0x87,0xF5,0xFF,0xD2,0x07,0x37,0x07,0x70,0x00,0x62,0x05,0xF9,0x8F,
+0xC9,0x8F,0x37,0x05,0x80,0x00,0x31,0x11,0x5D,0x8D,0x06,0xC8,0x32,0xC2,0x2E,0xC0,
+0x71,0x37,0x0D,0xE1,0xB7,0x17,0x00,0x40,0x03,0xA7,0x07,0x0A,0x12,0x46,0x82,0x45,
+0x18,0xC2,0x11,0x47,0x63,0x75,0xB7,0x00,0x83,0xA7,0x47,0x0A,0x5C,0xC2,0xC2,0x40,
+0x51,0x01,0x82,0x80,0x7D,0x55,0xE5,0xBF,0x41,0x11,0x06,0xC6,0x22,0xC4,0x05,0x37,
+0x05,0x47,0xFD,0x57,0x63,0x17,0xE5,0x02,0x1D,0x64,0x02,0xC0,0x13,0x04,0x04,0x53,
+0x0A,0x86,0x85,0x45,0x15,0x45,0x71,0x3F,0x82,0x47,0x85,0x8B,0x99,0xC7,0x13,0x05,
+0x40,0x06,0x7D,0x14,0xEF,0xF0,0xCF,0x93,0x65,0xF4,0x82,0x47,0x85,0x8B,0xB3,0x07,
+0xF0,0x40,0xB2,0x40,0x22,0x44,0x3E,0x85,0x41,0x01,0x82,0x80,0x51,0x11,0x22,0xC2,
+0x06,0xC4,0x93,0x87,0xF5,0xFF,0x1D,0x47,0x7D,0x54,0x63,0x65,0xF7,0x02,0x14,0x42,
+0x37,0x17,0x00,0x40,0x23,0x24,0xD7,0x0A,0x91,0x46,0x63,0xF5,0xB6,0x00,0x54,0x42,
+0x23,0x26,0xD7,0x0A,0x62,0x05,0xB2,0x07,0xC9,0x8F,0x21,0x65,0x5D,0x8D,0xFD,0x35,
+0x2A,0x84,0x59,0x37,0x22,0x85,0xA2,0x40,0x12,0x44,0x31,0x01,0x82,0x80,0x62,0x05,
+0xF1,0xBD,0x51,0x11,0x22,0xC2,0x06,0xC4,0x2A,0x84,0xC1,0x3D,0x13,0x05,0x90,0x0B,
+0x19,0xE0,0x13,0x05,0xB0,0x0A,0xE5,0x37,0xC9,0x35,0x12,0x44,0xA2,0x40,0x29,0x45,
+0x31,0x01,0x6F,0xF0,0xEF,0x8B,0x31,0x11,0x06,0xC8,0x22,0xC6,0x26,0xC4,0x85,0x3D,
+0x85,0x47,0x63,0x09,0xF5,0x00,0x7D,0x54,0x22,0x85,0xC2,0x40,0x32,0x44,0xA2,0x44,
+0x51,0x01,0x82,0x80,0x37,0x14,0x00,0x40,0x1C,0x40,0x37,0x07,0x88,0xFF,0xB7,0x54,
+0x00,0x20,0x7D,0x17,0x83,0xA6,0x44,0x01,0xF9,0x8F,0x37,0x07,0x08,0x00,0xD9,0x8F,
+0x2A,0xC0,0x1C,0xC0,0x9C,0x46,0x09,0x66,0x0D,0x45,0xD1,0x8F,0x9C,0xC6,0xEF,0xF0,
+0x2F,0x87,0x03,0xA7,0x44,0x01,0x91,0x66,0xB7,0x54,0x00,0x20,0x1C,0x47,0x13,0x86,
+0xC4,0x3A,0x8D,0x45,0xD5,0x8F,0x1C,0xC7,0x13,0x05,0xF0,0x09,0x5D,0x35,0xB7,0x57,
+0x00,0x20,0x93,0x84,0xC4,0x3A,0x13,0x87,0xC7,0x3A,0x02,0x43,0x01,0xC5,0x23,0x20,
+0x07,0x00,0x51,0xBF,0x41,0x47,0x78,0xC8,0x09,0x47,0x38,0xCC,0x37,0x07,0x01,0x08,
+0x13,0x07,0xB7,0x03,0x58,0xC0,0x98,0x40,0xB7,0x57,0x00,0x20,0x13,0x86,0x47,0x3B,
+0x22,0x07,0x21,0x83,0x85,0x45,0x15,0x45,0x23,0x82,0x64,0x00,0x98,0xC0,0x95,0x35,
+0x2A,0x84,0x35,0xF1,0x94,0x44,0x8C,0x40,0x37,0x46,0x12,0x00,0x13,0xF7,0xF6,0x0F,
+0x98,0xC4,0x13,0x06,0x56,0x08,0x63,0x9E,0xC5,0x04,0x50,0x00,0x85,0x45,0x13,0x05,
+0x50,0x03,0x81,0x35,0x29,0xF1,0x12,0x47,0xC1,0x66,0xFD,0x16,0x22,0x07,0x75,0x8F,
+0x94,0x44,0x55,0x8F,0x13,0x76,0xC7,0x27,0x93,0x06,0xC0,0x27,0x63,0x1E,0xD6,0x00,
+0x98,0xC4,0x09,0x47,0x23,0x82,0xE4,0x00,0xB7,0x07,0x02,0x08,0x37,0x17,0x00,0x40,
+0x93,0x87,0xB7,0x06,0x5C,0xC3,0x09,0xBF,0x13,0x67,0xC7,0x27,0x19,0x45,0x98,0xC4,
+0xF9,0x35,0xB7,0x57,0x00,0x20,0x13,0x86,0x47,0x3B,0x89,0x45,0x05,0x45,0xBD,0x3D,
+0xC9,0xBF,0x37,0x66,0x11,0x00,0x13,0x06,0x86,0x0C,0x63,0x92,0xC5,0x02,0xF1,0x8A,
+0x71,0x46,0x63,0x8E,0xC6,0x00,0x13,0x67,0xC7,0x01,0x19,0x45,0x98,0xC4,0x45,0x35,
+0xB7,0x57,0x00,0x20,0x13,0x86,0x47,0x3B,0x85,0x45,0x05,0x45,0x81,0x3D,0x03,0xC7,
+0x44,0x00,0x89,0x47,0xE3,0x12,0xF7,0xEC,0x45,0xB7,0xB7,0x57,0x00,0x20,0x83,0xA7,
+0xC7,0xFE,0x41,0x11,0x09,0x67,0x9C,0x53,0x13,0x07,0x07,0x20,0x22,0xC4,0x3E,0xC0,
+0x82,0x47,0x37,0xF4,0x00,0x20,0x06,0xC6,0x26,0xC2,0xF9,0x8F,0x13,0x04,0x84,0x68,
+0xCD,0xC3,0xA3,0x03,0x04,0x00,0x23,0x00,0x04,0x04,0xEF,0xF0,0x8F,0x80,0xB7,0xF7,
+0x00,0x20,0x83,0xC7,0x47,0x4E,0x93,0xF7,0xF7,0x0F,0xAD,0xE3,0xB7,0xF4,0x00,0x20,
+0x83,0xC7,0x44,0x51,0x93,0xF7,0xF7,0x0F,0xB1,0xCB,0x37,0xF7,0x00,0x20,0x83,0x45,
+0x57,0x51,0x93,0x07,0x80,0x03,0xB7,0x56,0x00,0x20,0xB3,0x87,0xB7,0x02,0x03,0xA5,
+0x06,0x02,0xB7,0xF5,0x00,0x20,0x93,0x85,0x45,0x3F,0x13,0x06,0x80,0x03,0x13,0x05,
+0xC5,0x02,0xBE,0x95,0xEF,0xE0,0xBF,0xF3,0x37,0xF7,0x00,0x20,0x83,0x47,0x57,0x51,
+0x85,0x07,0x8D,0x8B,0xA3,0x0A,0xF7,0x50,0x83,0xC7,0x44,0x51,0xFD,0x17,0x93,0xF7,
+0xF7,0x0F,0x23,0x8A,0xF4,0x50,0x85,0x47,0xA3,0x03,0xF4,0x00,0xB7,0xF7,0x00,0x20,
+0x03,0xC7,0x57,0x3A,0x89,0x47,0x63,0x1E,0xF7,0x00,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x83,0xC7,0x07,0x09,0x89,0x8B,0x89,0xC7,0xEF,0x20,0xC0,0x6E,0x23,0x0A,
+0x04,0x02,0x85,0x47,0x23,0x09,0xF4,0x02,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,
+0x82,0x80,0x37,0xF7,0x00,0x20,0x93,0x07,0x87,0x68,0xDC,0x47,0x51,0x11,0x13,0x07,
+0x87,0x68,0x3E,0xC2,0xB7,0xE7,0x00,0xE0,0xC1,0x07,0x9C,0x47,0x3E,0xC0,0x82,0x47,
+0x85,0xCB,0x82,0x46,0xB7,0x07,0x00,0x01,0x29,0x46,0x95,0x8F,0x3E,0xC0,0x82,0x47,
+0x92,0x46,0xB3,0x87,0xC7,0x02,0x95,0x83,0xB6,0x97,0x3E,0xC4,0x54,0x47,0x92,0x47,
+0x63,0x84,0xF6,0x00,0x5C,0x47,0x3E,0xC4,0xA2,0x47,0x1C,0xC1,0x31,0x01,0x82,0x80,
+0x5C,0x47,0xE5,0xB7,0x31,0x11,0x22,0xC6,0x2A,0x84,0x48,0x00,0x06,0xC8,0x2E,0xC0,
+0x4D,0x37,0x12,0x45,0x82,0x45,0xC2,0x40,0x01,0x8D,0x32,0x44,0x88,0xC1,0x51,0x01,
+0x82,0x80,0x41,0x11,0x26,0xC2,0x06,0xC6,0x22,0xC4,0xAA,0x84,0x73,0x70,0x04,0x30,
+0x41,0x45,0xE7,0x00,0x00,0x17,0xB7,0xE7,0x00,0xE0,0xC1,0x07,0x9C,0x47,0x37,0xF7,
+0x00,0x20,0x13,0x07,0x87,0x68,0x3E,0xC0,0x82,0x47,0x91,0xCF,0x82,0x46,0xB7,0x07,
+0x00,0x01,0x29,0x46,0x95,0x8F,0x3E,0xC0,0x54,0x47,0x82,0x47,0xB3,0x87,0xC7,0x02,
+0x95,0x83,0xB6,0x97,0x5C,0xC7,0xA9,0x46,0x93,0x97,0x54,0x00,0xB3,0xD7,0xD7,0x02,
+0xB7,0xE5,0x00,0xE0,0x93,0x86,0x05,0x01,0x37,0x54,0x00,0x20,0x03,0x26,0x84,0xFE,
+0x0D,0x45,0x37,0x03,0xF0,0x3F,0xDC,0xC2,0x23,0xA4,0x06,0x00,0x88,0xC9,0x83,0x27,
+0x06,0x10,0xB3,0xE7,0x67,0x00,0x23,0x20,0xF6,0x10,0x85,0x67,0x13,0x83,0x17,0x11,
+0x23,0x22,0x66,0x12,0x37,0x86,0x00,0x40,0x03,0x23,0x86,0x00,0x13,0x63,0x03,0x20,
+0x23,0x24,0x66,0x00,0x73,0x00,0x50,0x10,0x01,0x00,0x01,0x00,0x03,0x23,0x86,0x00,
+0x93,0x87,0x17,0x10,0x13,0x73,0xF3,0xDF,0x23,0x24,0x66,0x00,0x50,0x47,0xB2,0x94,
+0x44,0xC7,0x37,0x07,0x00,0x01,0x7D,0x17,0xD8,0xC2,0x98,0xC6,0x03,0x27,0x84,0xFE,
+0x88,0xC9,0x13,0x05,0x20,0x03,0x23,0x22,0xF7,0x12,0xEF,0xE0,0x7F,0xD5,0x83,0x26,
+0x84,0xFE,0x37,0x07,0x10,0xC0,0x7D,0x17,0x83,0xA7,0x06,0x10,0x41,0x45,0xF9,0x8F,
+0x23,0xA0,0xF6,0x10,0xE7,0x00,0x00,0x15,0x73,0x60,0x04,0x30,0xB2,0x40,0x22,0x44,
+0x92,0x44,0x41,0x01,0x82,0x80,0x51,0x11,0x06,0xC4,0x22,0xC2,0x73,0x70,0x04,0x30,
+0x37,0x84,0x00,0x40,0x1C,0x44,0x05,0x45,0x93,0xF7,0xF7,0xF1,0x1C,0xC4,0x15,0x39,
+0x93,0x07,0xA0,0x25,0x5C,0xC4,0xB7,0x57,0x00,0x20,0x03,0xA7,0x47,0x01,0x85,0x67,
+0x13,0x86,0x07,0x80,0x54,0x43,0x93,0x87,0x17,0x11,0xD1,0x8E,0x54,0xC3,0x54,0x43,
+0x7D,0x76,0x13,0x06,0xF6,0x7F,0xF1,0x8E,0x54,0xC3,0x18,0x44,0x37,0x06,0xF0,0x3F,
+0x13,0x67,0x07,0x20,0x18,0xC4,0x37,0x57,0x00,0x20,0x03,0x27,0x87,0xFE,0x83,0x26,
+0x07,0x10,0xD1,0x8E,0x23,0x20,0xD7,0x10,0x23,0x22,0xF7,0x12,0xB7,0x37,0x00,0x40,
+0x13,0x07,0x20,0x04,0xD8,0xCF,0x98,0xD3,0xD8,0xD3,0x98,0xD7,0xD8,0xD7,0x98,0xDB,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0x07,0x09,0x93,0xF7,0x07,0x02,
+0x99,0xC7,0x1C,0x40,0x37,0x07,0xFC,0xFF,0x7D,0x17,0xF9,0x8F,0x1C,0xC0,0x37,0x84,
+0x00,0x40,0x1C,0x44,0x13,0x05,0x40,0x1F,0x93,0xE7,0x27,0x00,0x1C,0xC4,0xEF,0xE0,
+0x3F,0xC8,0x1C,0x40,0x37,0x07,0x04,0x00,0xD9,0x8F,0x1C,0xC0,0x93,0x07,0x00,0x20,
+0x5C,0xC4,0x01,0xA0,0x41,0x11,0x06,0xC6,0x22,0xC4,0x26,0xC2,0x73,0x70,0x04,0x30,
+0x05,0x45,0x41,0x36,0xB7,0x55,0x00,0x20,0x03,0xA6,0x45,0x01,0xB7,0x87,0x00,0x40,
+0x13,0x07,0xA0,0x25,0xD8,0xC7,0x54,0x42,0x05,0x67,0x13,0x05,0x07,0x80,0xC9,0x8E,
+0x54,0xC2,0x54,0x42,0x7D,0x75,0x13,0x05,0xF5,0x7F,0xE9,0x8E,0x54,0xC2,0x94,0x47,
+0xB7,0x54,0x00,0x20,0x37,0x05,0xF0,0x3F,0x93,0xE6,0x06,0x20,0x94,0xC7,0x83,0xA6,
+0x84,0xFE,0x13,0x07,0x17,0x11,0x03,0xA6,0x06,0x10,0x49,0x8E,0x23,0xA0,0xC6,0x10,
+0x23,0xA2,0xE6,0x12,0x98,0x43,0xC1,0x66,0x93,0x86,0x06,0xF0,0x3A,0xC0,0x02,0x47,
+0x55,0x8F,0x98,0xC3,0x93,0x06,0x20,0x04,0x37,0x37,0x00,0x40,0x54,0xCF,0x14,0xD3,
+0x54,0xD3,0x14,0xD7,0x54,0xD7,0x14,0xDB,0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,
+0x03,0x47,0x07,0x09,0x13,0x77,0x07,0x02,0x19,0xC7,0x98,0x43,0x37,0x06,0xFC,0xFF,
+0x7D,0x16,0x71,0x8F,0x98,0xC3,0x37,0x56,0x00,0x20,0x83,0x27,0xC6,0xFE,0x37,0x84,
+0x00,0x40,0x13,0x05,0xB0,0x04,0x98,0x53,0x13,0x67,0x07,0x04,0x98,0xD3,0x98,0x53,
+0x13,0x77,0xF7,0xFB,0x98,0xD3,0x1C,0x44,0x93,0xE7,0x17,0x04,0x1C,0xC4,0xEF,0xE0,
+0x3F,0xBA,0x82,0x47,0x05,0x67,0x93,0x05,0x17,0x10,0x1C,0xC0,0x1C,0x44,0x13,0x05,
+0x20,0x03,0x93,0xF7,0xF7,0xDF,0x1C,0xC4,0x83,0xA7,0x84,0xFE,0x23,0xA2,0xB7,0x12,
+0xEF,0xE0,0x1F,0xB8,0x37,0x56,0x00,0x20,0x83,0x27,0xC6,0xFE,0x83,0xA5,0x84,0xFE,
+0xB7,0x56,0x00,0x20,0x90,0x53,0x05,0x67,0x13,0x07,0x07,0x80,0x13,0x66,0x06,0x04,
+0x90,0xD3,0x90,0x53,0x01,0x45,0x13,0x76,0xF6,0xFB,0x90,0xD3,0x83,0xA7,0x05,0x10,
+0x37,0x06,0x10,0xC0,0x7D,0x16,0xF1,0x8F,0x23,0xA0,0xF5,0x10,0xB7,0x37,0x00,0x40,
+0x23,0xAE,0x07,0x00,0x23,0xA0,0x07,0x02,0x23,0xA2,0x07,0x02,0x23,0xA4,0x07,0x02,
+0x23,0xA6,0x07,0x02,0x23,0xA8,0x07,0x02,0x93,0x07,0x00,0x20,0x5C,0xC4,0x83,0xA7,
+0x46,0x01,0xD4,0x43,0x55,0x8F,0xD8,0xC3,0xD8,0x43,0xFD,0x76,0x93,0x86,0xF6,0x7F,
+0x75,0x8F,0xD8,0xC3,0x3D,0x34,0x73,0x60,0x04,0x30,0xB2,0x40,0x22,0x44,0x92,0x44,
+0x41,0x01,0x82,0x80,0x51,0x11,0x22,0xC2,0x37,0x84,0x00,0x40,0x5C,0x40,0x37,0x27,
+0x00,0x80,0x7D,0x17,0xF9,0x8F,0x36,0x05,0x06,0xC4,0xC9,0x8F,0x5C,0xC0,0x1C,0x44,
+0x93,0xE7,0x07,0x08,0x1C,0xC4,0xBD,0x35,0x1C,0x44,0xA1,0x8B,0x99,0xC7,0xEF,0x20,
+0x80,0x31,0xB7,0xF7,0x00,0x20,0x23,0x8E,0x07,0x6A,0x37,0x87,0x00,0x40,0x1C,0x47,
+0xA2,0x40,0x12,0x44,0x93,0xF7,0xF7,0xF7,0x1C,0xC7,0x31,0x01,0x82,0x80,0x71,0x11,
+0x22,0xC0,0x93,0x77,0x45,0x00,0x89,0xEB,0x93,0x77,0x15,0x00,0xA1,0xEF,0x09,0x89,
+0x45,0xE1,0x02,0x44,0x11,0x01,0x82,0x80,0xB7,0xF7,0x00,0x20,0x03,0xD6,0x47,0x2F,
+0xB7,0xF7,0x00,0x20,0x83,0xA5,0x47,0x12,0xB7,0xB7,0x00,0x20,0x03,0xA3,0x87,0x2C,
+0xB7,0xB7,0x00,0x20,0x83,0xA2,0x47,0x2C,0x81,0x46,0x81,0x47,0xE3,0x86,0xC7,0xFC,
+0x33,0x87,0xD5,0x00,0x33,0x04,0xD3,0x00,0x03,0x57,0x07,0x00,0x03,0x54,0x04,0x00,
+0x85,0x07,0xB3,0x83,0xD2,0x00,0x01,0x8F,0xC2,0x07,0x23,0x90,0xE3,0x00,0xC1,0x83,
+0x89,0x06,0xE9,0xBF,0xB7,0xF7,0x00,0x20,0x03,0xA6,0x87,0x12,0xB7,0xA7,0x00,0x20,
+0x83,0xA5,0xC7,0xD8,0xB7,0xA7,0x00,0x20,0x03,0xA3,0x07,0xD9,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x03,0xC7,0x97,0x01,0x81,0x47,0x06,0x07,0xE3,0x81,0xE7,0xF8,
+0xB3,0x06,0xF6,0x00,0xB3,0x83,0xF5,0x00,0x83,0xD6,0x06,0x00,0x83,0xD3,0x03,0x00,
+0xB3,0x02,0xF3,0x00,0x89,0x07,0xB3,0x86,0x76,0x40,0x23,0x90,0xD2,0x00,0xF9,0xBF,
+0xB7,0xF7,0x00,0x20,0x03,0xA6,0x07,0x12,0xB7,0xE7,0x00,0x20,0x83,0xA5,0xC7,0xD1,
+0xB7,0xA7,0x00,0x20,0x03,0xA5,0x87,0xD8,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,
+0x03,0xC7,0xA7,0x01,0x81,0x47,0x06,0x07,0xE3,0x8D,0xE7,0xF2,0xB3,0x06,0xF6,0x00,
+0xB3,0x82,0xF5,0x00,0x83,0xD6,0x06,0x00,0x83,0xD2,0x02,0x00,0x33,0x03,0xF5,0x00,
+0x89,0x07,0xB3,0x86,0x56,0x40,0x23,0x10,0xD3,0x00,0xF9,0xBF,0x13,0x01,0xC1,0xFD,
+0x22,0xCE,0x37,0xF4,0x00,0x20,0x06,0xD0,0x26,0xCC,0x93,0x07,0xC4,0x2D,0x83,0xC7,
+0xF7,0x08,0x13,0x07,0xC4,0x2D,0x3A,0xC0,0x93,0xF7,0x07,0x02,0x91,0xCB,0x01,0x44,
+0x37,0x53,0x00,0x20,0x83,0x27,0x03,0x01,0x83,0xC7,0x97,0x01,0x63,0x68,0xF4,0x00,
+0x82,0x50,0x72,0x44,0xE2,0x44,0x13,0x01,0x41,0x02,0x82,0x80,0xB7,0xB4,0x00,0x20,
+0x03,0xA6,0x44,0x2C,0x93,0x15,0x14,0x00,0x81,0x47,0x2E,0x96,0x81,0x42,0x81,0x46,
+0x03,0x25,0x03,0x01,0x83,0x43,0xA5,0x01,0x63,0xEB,0x76,0x02,0xB7,0x76,0x00,0x20,
+0x09,0x46,0x93,0x86,0x06,0xD4,0x63,0x79,0xF6,0x0E,0xB3,0xC7,0xF2,0x02,0x03,0xA6,
+0x44,0x2C,0x2E,0x96,0xB6,0x95,0x81,0x46,0x23,0x90,0xF5,0x00,0x83,0x45,0xA5,0x01,
+0x63,0xEF,0xB6,0x0A,0x13,0x07,0x14,0x00,0x13,0x74,0xF7,0x0F,0x61,0xBF,0x02,0x47,
+0x03,0x15,0x06,0x00,0x83,0x13,0xC7,0x0B,0x63,0xDE,0xA3,0x04,0x83,0x13,0xE7,0x0B,
+0x63,0x5A,0x75,0x04,0x63,0x52,0x05,0x06,0x33,0x05,0xA0,0x40,0x42,0x05,0x41,0x85,
+0x93,0x03,0x20,0x03,0x63,0xD8,0xA3,0x02,0x13,0x05,0xE5,0xFC,0x36,0xCA,0x3E,0xC8,
+0x16,0xC6,0x32,0xC4,0x2E,0xC2,0x97,0xF0,0xFF,0xDF,0xE7,0x80,0xC0,0x77,0x13,0x05,
+0x25,0x03,0xD2,0x46,0xC2,0x47,0xB2,0x42,0x22,0x46,0x92,0x45,0x42,0x05,0x41,0x85,
+0x37,0x53,0x00,0x20,0x33,0x05,0xA0,0x40,0x42,0x05,0x41,0x85,0x85,0x07,0xAA,0x92,
+0x93,0xF7,0xF7,0x0F,0x03,0x25,0x03,0x01,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x03,0x45,
+0x95,0x01,0x06,0x05,0x2A,0x96,0xA9,0xB7,0x93,0x03,0x20,0x03,0xE3,0xD0,0xA3,0xFE,
+0x13,0x05,0xE5,0xFC,0x36,0xCA,0x3E,0xC8,0x16,0xC6,0x32,0xC4,0x2E,0xC2,0x97,0xF0,
+0xFF,0xDF,0xE7,0x80,0x40,0x72,0x13,0x05,0x25,0x03,0x42,0x05,0x41,0x85,0x37,0x53,
+0x00,0x20,0xD2,0x46,0xC2,0x47,0xB2,0x42,0x22,0x46,0x92,0x45,0x45,0xBF,0x83,0x55,
+0x06,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x9D,0x8D,0x23,0x10,0xB6,0x00,0x83,0x45,
+0x95,0x01,0x86,0x05,0x2E,0x96,0x1D,0xB7,0xB6,0x95,0x23,0x90,0x05,0x00,0x1D,0xB7,
+0x13,0x01,0xC1,0xF9,0xB7,0xF7,0x00,0x20,0xA2,0xCE,0xA6,0xCC,0x86,0xD0,0x93,0x87,
+0xC7,0x2D,0x3A,0xC2,0x03,0xC7,0x07,0x09,0x36,0xC0,0x2E,0x84,0x62,0x07,0x61,0x87,
+0xB2,0x84,0x63,0x5D,0x07,0x0A,0x13,0x86,0xF5,0xFF,0xB7,0x05,0x00,0x80,0x85,0x47,
+0x93,0xC5,0xF5,0xFF,0x8D,0x42,0x63,0xCB,0xC7,0x06,0x03,0x17,0x25,0x00,0x83,0x17,
+0x05,0x00,0xB4,0x08,0x06,0x06,0xBA,0x97,0x09,0x47,0xB3,0xC7,0xE7,0x02,0x36,0x96,
+0x23,0x14,0xF1,0x00,0x93,0x17,0x14,0x00,0xF9,0x17,0x3E,0x95,0x83,0x17,0xE5,0xFF,
+0x83,0x16,0x05,0x00,0xB6,0x97,0xB3,0xC7,0xE7,0x02,0x23,0x18,0xF6,0xFA,0x2C,0x00,
+0x81,0x47,0x01,0x46,0x01,0x47,0x63,0x1A,0x87,0x06,0xB3,0xC7,0xE7,0x02,0x12,0x47,
+0x05,0x45,0xC2,0x07,0xC1,0x87,0x23,0x10,0xF7,0x00,0x63,0x7B,0x96,0x00,0x93,0xD6,
+0xF7,0x41,0x02,0x47,0xB5,0x8F,0x95,0x8F,0xB3,0xA7,0xE7,0x00,0x13,0xC5,0x17,0x00,
+0x86,0x50,0x76,0x44,0xE6,0x44,0x13,0x01,0x41,0x06,0x82,0x80,0xB3,0x86,0xB7,0x00,
+0x86,0x06,0xAA,0x96,0x13,0x93,0x17,0x00,0xB8,0x08,0x83,0x93,0x26,0x00,0x3A,0x93,
+0x03,0x97,0x06,0x00,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x1E,0x97,0x83,0x93,0x46,0x00,
+0xBA,0x93,0xB3,0xC3,0x53,0x02,0x23,0x18,0x73,0xFA,0xB1,0xBF,0x13,0x96,0x15,0x00,
+0xAA,0x85,0x28,0x00,0xEF,0xE0,0xCF,0xF9,0x59,0xB7,0x03,0x95,0x05,0x00,0x13,0x53,
+0xF5,0x41,0xB3,0x46,0xA3,0x00,0xB3,0x86,0x66,0x40,0x63,0x55,0xD6,0x00,0x13,0x96,
+0x06,0x01,0x41,0x82,0x05,0x07,0xAA,0x97,0x13,0x77,0xF7,0x0F,0x89,0x05,0xA5,0xB7,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x13,0x01,0x41,0xFD,0x22,0xD4,0x26,0xD2,
+0x3E,0xC2,0x83,0xC7,0xC7,0x01,0x2A,0xCC,0x2E,0xCE,0x3E,0xC4,0x22,0x47,0x89,0x47,
+0x05,0x45,0x63,0xFC,0xE7,0x38,0x12,0x47,0x05,0x45,0x03,0x47,0xB7,0x01,0x63,0xF6,
+0xE7,0x38,0xB7,0xF6,0x00,0x20,0x93,0x86,0xC6,0x2D,0x83,0xC6,0x06,0x09,0xB7,0xB7,
+0x00,0x20,0x83,0xA7,0x47,0x2C,0xE2,0x06,0xE1,0x86,0x63,0xD4,0x06,0x4E,0xA2,0x46,
+0x01,0x46,0x02,0xC0,0xFD,0x16,0x36,0xC6,0x93,0x06,0xF7,0xFF,0x36,0xCA,0xB7,0x06,
+0x00,0x80,0x93,0xC6,0xF6,0xFF,0x85,0x43,0x36,0xD0,0x0D,0xA0,0x92,0x46,0x05,0x44,
+0x83,0xC6,0x96,0x01,0xB3,0x86,0xD3,0x02,0xC2,0x06,0xC1,0x82,0x36,0xC8,0xD2,0x46,
+0x63,0x42,0xD4,0x34,0x85,0x03,0xC2,0x03,0x93,0xD3,0x03,0x01,0xB2,0x46,0xE3,0xCF,
+0xD3,0xFC,0xE2,0x46,0x82,0x45,0x05,0x45,0x63,0xE1,0xB6,0x32,0xA2,0x46,0x93,0x05,
+0xE7,0xFF,0xF9,0x16,0xB3,0x46,0xD6,0x02,0xB3,0xC6,0xB6,0x02,0x93,0xD5,0xF6,0x41,
+0xAD,0x8E,0x8D,0x8E,0xF2,0x45,0x63,0xC2,0xD5,0x30,0x83,0x96,0x07,0x00,0x83,0x95,
+0x27,0x00,0x32,0x45,0x86,0x06,0xAE,0x96,0x93,0x15,0x17,0x00,0xBE,0x95,0x83,0x95,
+0x05,0x00,0x95,0x43,0xAE,0x96,0x93,0x05,0x17,0x00,0x86,0x05,0xBE,0x95,0x83,0x95,
+0x05,0x00,0xAE,0x96,0x93,0x15,0x07,0x01,0xC1,0x81,0x2E,0xC8,0xB3,0x85,0xA5,0x02,
+0xC2,0x05,0xC1,0x81,0x13,0x95,0x15,0x00,0x3E,0x95,0x2E,0xCA,0x83,0x15,0x05,0x00,
+0x03,0x15,0x25,0x00,0xB3,0xC6,0x76,0x02,0x86,0x05,0xAA,0x95,0x52,0x45,0x19,0x8D,
+0x06,0x05,0x3E,0x95,0x03,0x15,0x05,0x00,0xAA,0x95,0x52,0x45,0x05,0x05,0x19,0x8D,
+0x06,0x05,0x3E,0x95,0x03,0x15,0x05,0x00,0xAA,0x95,0x13,0x15,0x07,0x01,0x41,0x81,
+0x7D,0x15,0x42,0x05,0x41,0x81,0x13,0x14,0x15,0x00,0x3E,0x94,0x83,0x12,0x04,0x00,
+0x03,0x13,0xE4,0xFF,0x3A,0x95,0x86,0x02,0x9A,0x92,0x13,0x13,0x15,0x00,0x3E,0x93,
+0x03,0x13,0x03,0x00,0x7D,0x15,0x06,0x05,0x3E,0x95,0x16,0x93,0x83,0x12,0x05,0x00,
+0xB3,0xC5,0x75,0x02,0x22,0x44,0x16,0x93,0x13,0x15,0x07,0x01,0x41,0x81,0x36,0x96,
+0x33,0x43,0x73,0x02,0x2E,0x96,0x33,0x05,0x85,0x02,0x1A,0x96,0x7D,0x15,0x42,0x05,
+0x41,0x81,0x93,0x14,0x15,0x00,0xBE,0x94,0x03,0x94,0x04,0x00,0x83,0x92,0xE4,0xFF,
+0x06,0x04,0x16,0x94,0xB3,0x02,0xE5,0x40,0x86,0x02,0xBE,0x92,0x7D,0x15,0x83,0x92,
+0x02,0x00,0x19,0x8D,0x06,0x05,0x3E,0x95,0xA2,0x92,0x03,0x14,0x05,0x00,0x13,0xD5,
+0xF6,0x41,0xA9,0x8E,0xA2,0x92,0xB3,0xC3,0x72,0x02,0x93,0x52,0xF3,0x41,0x33,0xC3,
+0x62,0x00,0x33,0x03,0x53,0x40,0x89,0x8E,0x63,0xF3,0x66,0x00,0x9A,0x86,0x13,0xD5,
+0xF3,0x41,0x33,0x43,0x75,0x00,0x33,0x03,0xA3,0x40,0x63,0xF3,0x66,0x00,0x9A,0x86,
+0x02,0x45,0x63,0xF3,0xA6,0x00,0xAA,0x86,0x13,0xD5,0xF5,0x41,0xA9,0x8D,0xB3,0x84,
+0xA5,0x40,0x63,0xF3,0xD4,0x00,0xB6,0x84,0xB3,0x06,0x76,0x00,0x37,0x05,0x00,0x80,
+0x36,0xC0,0x85,0x45,0x13,0x03,0xF7,0xFF,0x13,0x45,0xF5,0xFF,0x9D,0x42,0x63,0xC9,
+0x65,0x24,0x22,0x46,0xD2,0x46,0x37,0x05,0x00,0x80,0x13,0x45,0xF5,0xFF,0xB3,0x05,
+0xE6,0x02,0x85,0x06,0xC2,0x06,0xC1,0x82,0x1D,0x43,0xFD,0x15,0x63,0xCE,0xB6,0x28,
+0xC2,0x45,0x05,0x45,0x1D,0x43,0x93,0x93,0x15,0x00,0xBE,0x93,0x83,0x92,0x03,0x00,
+0x03,0x96,0x23,0x00,0x93,0x86,0x15,0x00,0x86,0x02,0xB2,0x92,0x33,0x86,0xE5,0x40,
+0x06,0x06,0x3E,0x96,0x03,0x16,0x06,0x00,0xB2,0x92,0x33,0x86,0xE6,0x40,0x06,0x06,
+0x3E,0x96,0x03,0x16,0x06,0x00,0xBA,0x96,0x86,0x06,0xB2,0x92,0x33,0x06,0xB7,0x00,
+0x06,0x06,0x3E,0x96,0x03,0x16,0x06,0x00,0xBE,0x96,0x16,0x96,0x83,0x92,0x06,0x00,
+0x16,0x96,0xB3,0x46,0x66,0x02,0x93,0xD2,0xF6,0x41,0x33,0xC6,0xD2,0x00,0x33,0x06,
+0x56,0x40,0x63,0xF3,0xC4,0x00,0xB2,0x84,0x02,0x46,0x05,0x05,0x42,0x05,0xB2,0x96,
+0x36,0xC0,0xC2,0x46,0x41,0x81,0xB6,0x95,0xB2,0x46,0xC2,0x05,0xC1,0x81,0xE3,0x44,
+0xD5,0xF8,0xC2,0x46,0x05,0x45,0x1D,0x43,0x86,0x06,0xFD,0x16,0xC2,0x06,0xC1,0x82,
+0x93,0x93,0x16,0x00,0xBE,0x93,0x83,0x92,0x03,0x00,0x83,0x95,0xE3,0xFF,0x13,0x86,
+0xF6,0xFF,0x86,0x02,0xAE,0x92,0xB3,0x85,0xE6,0x40,0x86,0x05,0xBE,0x95,0x83,0x95,
+0x05,0x00,0x05,0x05,0x42,0x05,0xAE,0x92,0xB3,0x05,0xE6,0x40,0x86,0x05,0xBE,0x95,
+0x83,0x95,0x05,0x00,0x3A,0x96,0x06,0x06,0xAE,0x92,0xB3,0x05,0xD7,0x00,0x86,0x05,
+0xBE,0x95,0x83,0x95,0x05,0x00,0x3E,0x96,0x41,0x81,0x96,0x95,0x83,0x12,0x06,0x00,
+0x96,0x95,0x33,0xC6,0x65,0x02,0x93,0x52,0xF6,0x41,0xB3,0xC5,0xC2,0x00,0xB3,0x85,
+0x55,0x40,0x63,0xF3,0xB4,0x00,0xAE,0x84,0x82,0x45,0x2E,0x96,0x32,0xC0,0x42,0x46,
+0xB2,0x96,0x32,0x46,0xC2,0x06,0xC1,0x82,0xE3,0x44,0xC5,0xF8,0xE2,0x46,0x05,0x45,
+0x63,0xED,0x96,0x06,0x22,0x46,0x82,0x46,0xB3,0xC6,0xC6,0x02,0xB3,0xC6,0xE6,0x02,
+0x13,0xD6,0xF6,0x41,0xB1,0x8E,0x91,0x8E,0x72,0x46,0x63,0x40,0xD6,0x06,0x92,0x46,
+0x03,0xC5,0x26,0x05,0x39,0xC9,0x03,0xC3,0x36,0x05,0x83,0xC2,0x96,0x01,0xA2,0x46,
+0x12,0x46,0x42,0x05,0x33,0x84,0x56,0x02,0x13,0x73,0x13,0x00,0x81,0x45,0x41,0x81,
+0x83,0x46,0x46,0x06,0x63,0x18,0x03,0x20,0xA2,0x96,0x86,0x06,0xBE,0x96,0x83,0x96,
+0x06,0x00,0x93,0xD3,0xF6,0x41,0xB3,0xC6,0xD3,0x00,0xB3,0x86,0x76,0x40,0x63,0xF3,
+0xD5,0x00,0xB6,0x85,0x92,0x46,0x05,0x06,0xB3,0x06,0xD6,0x40,0xC2,0x06,0xC1,0x82,
+0xE3,0xE8,0xA6,0xFC,0xE2,0x47,0x33,0xB5,0xB7,0x00,0x22,0x54,0x92,0x54,0x13,0x01,
+0xC1,0x02,0x82,0x80,0xC2,0x46,0x82,0x55,0xA2,0x96,0xC2,0x06,0xC1,0x82,0xB3,0x82,
+0xB6,0x00,0x86,0x02,0xBE,0x92,0x83,0x94,0x22,0x00,0x83,0x95,0x02,0x00,0x13,0x83,
+0xF6,0xFF,0x86,0x04,0xA6,0x95,0x83,0x94,0x42,0x00,0xB3,0x02,0xE3,0x40,0x86,0x02,
+0xBE,0x92,0xA6,0x95,0x83,0x94,0x02,0x00,0xB3,0x82,0xE6,0x40,0x86,0x02,0x13,0x85,
+0x16,0x00,0xBE,0x92,0xA6,0x95,0x83,0x94,0x02,0x00,0xB3,0x02,0xE5,0x40,0x86,0x02,
+0xBE,0x92,0x83,0x92,0x02,0x00,0x3A,0x93,0x06,0x03,0xA6,0x95,0x3E,0x93,0x96,0x95,
+0xBA,0x96,0x83,0x12,0x03,0x00,0x86,0x06,0xBE,0x96,0x96,0x95,0x3A,0x95,0x83,0x92,
+0x06,0x00,0x06,0x05,0x3E,0x95,0xAE,0x92,0x83,0x15,0x05,0x00,0xA9,0x46,0xAE,0x92,
+0xB3,0xC2,0xD2,0x02,0x93,0xD5,0xF2,0x41,0xB3,0xC6,0x55,0x00,0x8D,0x8E,0x82,0x45,
+0x63,0xF3,0xD5,0x00,0x36,0xC0,0x05,0x04,0x42,0x04,0x16,0x96,0x41,0x80,0x05,0xB1,
+0x33,0x86,0xA5,0x00,0x06,0x06,0x3E,0x96,0x83,0x13,0x26,0x00,0x83,0x16,0x06,0x00,
+0x03,0x16,0x46,0x00,0x86,0x03,0x9E,0x96,0xB2,0x96,0x33,0x06,0xB7,0x00,0x93,0x03,
+0xF6,0xFF,0x86,0x03,0xBE,0x93,0x83,0x93,0x03,0x00,0xB6,0x93,0x93,0x16,0x16,0x00,
+0xBE,0x96,0x83,0x96,0x06,0x00,0x05,0x06,0x06,0x06,0x3E,0x96,0x9E,0x96,0x83,0x13,
+0x06,0x00,0x9E,0x96,0xB3,0xC6,0x56,0x02,0x93,0xD3,0xF6,0x41,0x33,0xC6,0xD3,0x00,
+0x33,0x06,0x76,0x40,0x63,0xF3,0xC4,0x00,0xB2,0x84,0x02,0x46,0x85,0x05,0xC2,0x05,
+0xB2,0x96,0x36,0xC0,0xC1,0x81,0xA1,0xB3,0x33,0x86,0xA6,0x00,0x06,0x06,0x3E,0x96,
+0x83,0x13,0x26,0x00,0x83,0x12,0x06,0x00,0x13,0x84,0xF6,0xFF,0x03,0x16,0x46,0x00,
+0x19,0x8C,0x86,0x03,0x06,0x04,0x9E,0x92,0x3E,0x94,0xB2,0x92,0x03,0x16,0x04,0x00,
+0x33,0x84,0xE6,0x40,0x06,0x04,0x3E,0x94,0xB2,0x92,0x03,0x16,0x04,0x00,0x85,0x06,
+0x16,0x96,0xB3,0x82,0xE6,0x40,0x86,0x02,0xBE,0x92,0x83,0x92,0x02,0x00,0x16,0x96,
+0x33,0x46,0x66,0x02,0x93,0x53,0xF6,0x41,0xB3,0xC2,0xC3,0x00,0xB3,0x82,0x72,0x40,
+0x63,0xF3,0x54,0x00,0x96,0x84,0x02,0x44,0xC2,0x06,0xC1,0x82,0x22,0x96,0x32,0xC0,
+0xF5,0xB9,0x92,0x46,0x93,0x15,0x07,0x01,0x03,0x54,0x81,0x00,0x83,0xC6,0x96,0x01,
+0xC1,0x81,0x01,0x46,0x36,0xC6,0x02,0xC0,0x81,0x44,0x81,0x46,0x2E,0xC8,0x13,0x15,
+0x16,0x00,0x3E,0x95,0x81,0x45,0x83,0x12,0x05,0x00,0x93,0xD3,0xF2,0x41,0x33,0xC3,
+0x53,0x00,0x33,0x03,0x73,0x40,0x63,0xF3,0x64,0x00,0x9A,0x84,0x02,0x43,0x85,0x05,
+0xC2,0x05,0x16,0x93,0x1A,0xC0,0x42,0x43,0xC1,0x81,0x09,0x05,0xE3,0xED,0x65,0xFC,
+0xB2,0x45,0x85,0x06,0xC2,0x06,0x2E,0x96,0x42,0x06,0xC1,0x82,0x41,0x82,0xE3,0xE0,
+0x86,0xFC,0x6D,0xB3,0xB3,0x86,0xD2,0x02,0xBA,0x96,0xC5,0xBB,0x01,0x11,0x26,0xCA,
+0xB7,0x54,0x00,0x20,0x83,0xA7,0x04,0xFF,0x22,0xCC,0x37,0x54,0x00,0x20,0x83,0xD6,
+0x67,0x03,0x83,0x27,0x04,0x01,0x06,0xCE,0x2A,0xC4,0x83,0xC7,0x07,0x0E,0x29,0x47,
+0x93,0xF5,0xF7,0x00,0x13,0xD5,0x47,0x00,0xB3,0x85,0xD5,0x02,0x33,0x05,0xD5,0x02,
+0xB3,0xC5,0xE5,0x02,0x33,0x45,0xE5,0x02,0xC2,0x05,0xC1,0x81,0x42,0x05,0x41,0x81,
+0x05,0x34,0x37,0xF7,0x00,0x20,0x22,0x43,0x13,0x07,0x87,0x68,0x22,0xC2,0x3A,0xC0,
+0x37,0x54,0x00,0x20,0x93,0x82,0x04,0xFF,0x13,0x04,0x84,0x3B,0x93,0x14,0x13,0x00,
+0x31,0xC9,0xB3,0x06,0x64,0x00,0x03,0xC7,0x46,0x00,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0xC7,0x2D,0x05,0x07,0x13,0x77,0xF7,0x0F,0x23,0x82,0xE6,0x00,0x83,0xC6,0x07,0x09,
+0x61,0x46,0xE2,0x06,0xE1,0x86,0x63,0xC3,0x06,0x00,0x31,0x46,0x82,0x46,0x83,0xC6,
+0x56,0x03,0x93,0xF6,0xF6,0x0F,0x99,0xE6,0x8D,0x46,0xB3,0x06,0xD6,0x02,0x85,0x86,
+0x13,0xF6,0xF6,0x0F,0x63,0x6C,0xC7,0x00,0xA2,0x94,0x23,0x84,0x04,0x00,0xA3,0x84,
+0x04,0x00,0x15,0xAA,0x33,0x07,0x64,0x00,0x23,0x02,0x07,0x00,0x92,0x47,0x03,0xA7,
+0x02,0x00,0x29,0x45,0x83,0xA5,0x07,0x01,0x83,0x53,0xC7,0x03,0x1A,0xC4,0x03,0xC7,
+0x25,0x0E,0x83,0xC5,0xC5,0x01,0x93,0x76,0xF7,0x00,0x13,0x56,0x47,0x00,0xB3,0x86,
+0x76,0x02,0x13,0x07,0x21,0x01,0x33,0x06,0x76,0x02,0xB3,0xC6,0xA6,0x02,0x33,0x46,
+0xA6,0x02,0x37,0xA5,0x00,0x20,0x03,0x25,0x85,0xD8,0xC2,0x06,0xC1,0x82,0x42,0x06,
+0x41,0x82,0xB9,0x30,0xB3,0x06,0x94,0x00,0x03,0x97,0xC6,0x00,0x03,0x16,0x21,0x01,
+0xB7,0x57,0x00,0x20,0x93,0x82,0x07,0xFF,0xB3,0x05,0xC7,0x02,0x22,0x43,0x63,0xDD,
+0x05,0x0C,0xA3,0x84,0x06,0x00,0x92,0x47,0x03,0xA7,0x02,0x00,0xB3,0x03,0x94,0x00,
+0x83,0xA5,0x07,0x01,0x83,0x52,0x07,0x04,0x23,0x96,0xC3,0x00,0x03,0xC7,0x15,0x0E,
+0x29,0x45,0x83,0xC5,0xB5,0x01,0x93,0x76,0xF7,0x00,0x13,0x56,0x47,0x00,0xB3,0x86,
+0x56,0x02,0x13,0x07,0x21,0x01,0x1A,0xC6,0x1E,0xC4,0x33,0x06,0x56,0x02,0xB3,0xC6,
+0xA6,0x02,0x33,0x46,0xA6,0x02,0x37,0xA5,0x00,0x20,0x03,0x25,0x05,0xD9,0xC2,0x06,
+0xC1,0x82,0x42,0x06,0x41,0x82,0xEF,0xF0,0xAF,0xFD,0xA2,0x43,0x83,0x16,0x21,0x01,
+0xB7,0xF7,0x00,0x20,0x03,0x97,0x03,0x01,0x32,0x43,0x93,0x87,0xC7,0x2D,0x33,0x06,
+0xD7,0x02,0x63,0x5D,0x06,0x0A,0x23,0x84,0x03,0x00,0x33,0x07,0x94,0x00,0x23,0x18,
+0xD7,0x00,0x83,0xC6,0x07,0x09,0x61,0x47,0xE2,0x06,0xE1,0x86,0x63,0xC3,0x06,0x00,
+0x31,0x47,0x82,0x46,0x83,0xC6,0x56,0x03,0x93,0xF6,0xF6,0x0F,0x99,0xE6,0x8D,0x46,
+0x33,0x07,0xD7,0x02,0x05,0x87,0x13,0x77,0xF7,0x0F,0x33,0x06,0x94,0x00,0x83,0x46,
+0x86,0x00,0x63,0xE6,0xE6,0x0C,0x83,0x45,0x96,0x00,0x63,0xE2,0xE5,0x0C,0x23,0x04,
+0x06,0x00,0xA3,0x04,0x06,0x00,0x1A,0x94,0x23,0x02,0x04,0x00,0x05,0x45,0xF2,0x40,
+0x62,0x44,0xD2,0x44,0x05,0x61,0x82,0x80,0x93,0x55,0xF7,0x41,0x2D,0x8F,0x93,0x53,
+0xF6,0x41,0x0D,0x8F,0x93,0x10,0x07,0x01,0xB3,0xC5,0xC3,0x00,0xB3,0x85,0x75,0x40,
+0x93,0xD0,0x00,0x01,0x8D,0x43,0xB3,0xD3,0x70,0x02,0x93,0x90,0x05,0x01,0x93,0xD0,
+0x00,0x01,0x63,0xE5,0x70,0x00,0x06,0x07,0x63,0x57,0xB7,0x00,0x33,0x07,0x94,0x00,
+0xA3,0x04,0x07,0x00,0xCD,0xBD,0x13,0x75,0xF5,0x0F,0x03,0xC7,0x96,0x00,0x09,0xC5,
+0x05,0x07,0xA3,0x84,0xE6,0x00,0xC5,0xB5,0x05,0x83,0xE5,0xBF,0x13,0x56,0xF7,0x41,
+0x31,0x8F,0x93,0xD5,0xF6,0x41,0x11,0x8F,0x93,0x12,0x07,0x01,0x33,0xC6,0xD5,0x00,
+0x0D,0x8E,0x93,0xD2,0x02,0x01,0x8D,0x45,0xB3,0xD5,0xB2,0x02,0x93,0x12,0x06,0x01,
+0x93,0xD2,0x02,0x01,0x63,0xE5,0xB2,0x00,0x06,0x07,0x63,0x57,0xC7,0x00,0x33,0x07,
+0x94,0x00,0x23,0x04,0x07,0x00,0x11,0xBF,0x13,0x75,0xF5,0x0F,0x03,0xC7,0x83,0x00,
+0x09,0xC5,0x05,0x07,0x23,0x84,0xE3,0x00,0x09,0xB7,0x05,0x83,0xE5,0xBF,0x03,0xC6,
+0x07,0x09,0x13,0x07,0xA0,0x02,0x62,0x06,0x61,0x86,0x63,0x43,0x06,0x00,0x31,0x47,
+0x02,0x46,0x03,0x46,0x56,0x03,0x13,0x76,0xF6,0x0F,0x19,0xE6,0x0D,0x46,0x33,0x07,
+0xC7,0x02,0x05,0x87,0x13,0x77,0xF7,0x0F,0xE3,0xF0,0xE6,0xDE,0x33,0x06,0x94,0x00,
+0x03,0x46,0x96,0x00,0xE3,0x7A,0xE6,0xDC,0x1A,0x94,0x03,0x47,0x44,0x00,0x63,0x73,
+0xD7,0x00,0x36,0x87,0x93,0x76,0xF7,0x0F,0x32,0x87,0x63,0x73,0xD6,0x00,0x36,0x87,
+0x83,0xC6,0x07,0x09,0x42,0x07,0x41,0x83,0xE2,0x06,0xE1,0x86,0x63,0xD3,0x06,0x00,
+0x05,0x83,0x85,0x46,0x01,0xCB,0x29,0x46,0xBA,0x86,0x63,0x73,0xE6,0x00,0xA9,0x46,
+0xC2,0x06,0xC1,0x82,0x02,0x47,0x03,0x47,0x57,0x03,0x13,0x77,0xF7,0x0F,0x09,0xCB,
+0x03,0xD7,0xC7,0x0A,0xB3,0x56,0xD7,0x02,0x23,0x94,0xD7,0x0A,0x01,0x45,0xC1,0xB5,
+0x03,0xD7,0xA7,0x0A,0xB3,0x56,0xD7,0x02,0x23,0x93,0xD7,0x0A,0xC5,0xBF,0x11,0xEA,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,0x37,0x15,0x85,0x8B,0x91,0xEF,
+0x82,0x80,0x85,0x47,0x63,0x1B,0xF6,0x00,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,
+0x83,0xC7,0x37,0x15,0x85,0x83,0x85,0x8B,0x9D,0xC3,0xB7,0x57,0x00,0x20,0x93,0x87,
+0x87,0x3B,0x13,0x17,0x16,0x00,0x3E,0x97,0x03,0x17,0xC7,0x01,0x09,0xCB,0x05,0x8A,
+0x06,0x06,0x3E,0x96,0x83,0x16,0xC6,0x01,0x81,0x47,0x63,0x93,0xF5,0x00,0x82,0x80,
+0x03,0x57,0x05,0x00,0x85,0x07,0x93,0xF7,0xF7,0x0F,0x36,0x97,0x23,0x10,0xE5,0x00,
+0x09,0x05,0xE5,0xB7,0x11,0xEA,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,
+0x37,0x15,0x85,0x8B,0x99,0xEF,0x82,0x80,0x85,0x47,0x63,0x1C,0xF6,0x00,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC6,0x37,0x15,0x85,0x82,0x85,0x8A,0x63,0x8D,
+0x06,0x14,0x13,0x01,0xC1,0xF9,0xB7,0xA6,0x00,0x20,0xA2,0xCE,0x03,0xC4,0xA6,0xAC,
+0x86,0xD0,0xA6,0xCC,0x93,0x77,0x16,0x00,0x19,0xCC,0x81,0xE7,0x7D,0x14,0x23,0x85,
+0x86,0xAC,0xB7,0x57,0x00,0x20,0x23,0xAA,0x07,0x3C,0x86,0x50,0x76,0x44,0xE6,0x44,
+0x13,0x01,0x41,0x06,0x82,0x80,0x13,0x96,0x15,0x00,0x2E,0xC0,0xAA,0x84,0xAA,0x85,
+0x28,0x00,0x3E,0xC2,0xEF,0xD0,0x1F,0xDA,0x02,0x47,0x28,0x00,0xBA,0x85,0x97,0x10,
+0x00,0xE0,0xE7,0x80,0x60,0x63,0xB7,0xF6,0x00,0x20,0x93,0x86,0xC6,0x2D,0x92,0x47,
+0x83,0x93,0xC6,0x0B,0x03,0x95,0xE6,0x0B,0xB7,0x56,0x00,0x20,0x93,0x86,0x06,0xFF,
+0x02,0x47,0x37,0xA3,0x00,0x20,0x94,0x42,0xDD,0xC3,0x83,0xD6,0xA6,0x03,0x8E,0x06,
+0x29,0x46,0xB3,0xC6,0xC6,0x02,0x63,0xD5,0xA6,0x00,0x13,0x95,0x06,0x01,0x41,0x85,
+0x93,0x56,0x17,0x00,0x93,0x02,0xF7,0xFF,0x36,0xC0,0x93,0x05,0xA1,0x00,0x81,0x46,
+0x05,0x46,0x16,0xC2,0x92,0x42,0x63,0x5F,0x56,0x00,0x83,0x92,0x05,0x00,0x63,0xDB,
+0x53,0x06,0x63,0xDD,0xA2,0x06,0x96,0x96,0x82,0x42,0x05,0x04,0x13,0x74,0xF4,0x0F,
+0x63,0x66,0x54,0x06,0xB7,0x52,0x00,0x20,0x0D,0x46,0x93,0x82,0x82,0x3B,0x93,0x95,
+0x17,0x00,0x63,0x75,0x86,0x00,0x03,0x46,0xA3,0xAC,0x31,0xCE,0x96,0x95,0x23,0x9E,
+0x05,0x00,0xA1,0xD7,0x83,0x47,0xA3,0xAC,0xA9,0xD3,0x83,0x97,0xC2,0x01,0x95,0xDF,
+0xB7,0x57,0x00,0x20,0x03,0xA7,0x07,0x01,0x83,0x47,0x37,0x15,0x85,0x8B,0x95,0xD7,
+0xB7,0xA7,0x00,0x20,0x03,0xA5,0x07,0xD9,0x83,0x45,0x97,0x01,0x01,0x46,0x85,0x35,
+0xB7,0x57,0x00,0x20,0x93,0x82,0x87,0x3B,0x23,0x9E,0x02,0x00,0x39,0xB7,0x83,0xD6,
+0xE6,0x03,0xB1,0xBF,0x09,0x46,0x23,0x05,0xC3,0xAC,0x69,0xBF,0x05,0x06,0x89,0x05,
+0x13,0x76,0xF6,0x0F,0x85,0xBF,0x33,0xC4,0x86,0x02,0xAE,0x92,0x23,0x9E,0x82,0x00,
+0xE3,0x05,0xE6,0xEE,0x83,0xD7,0x04,0x00,0x05,0x06,0x13,0x76,0xF6,0x0F,0x81,0x8F,
+0x23,0x90,0xF4,0x00,0x89,0x04,0xED,0xB7,0x82,0x80,0xE5,0x67,0x98,0x43,0xDC,0x43,
+0x93,0xC7,0xF7,0xFF,0x63,0x87,0xE7,0x02,0x37,0x87,0x00,0x40,0x1C,0x47,0xF9,0x76,
+0x93,0x86,0xF6,0x3F,0xF5,0x8F,0x85,0x66,0x93,0x86,0x06,0xC0,0xD5,0x8F,0x1C,0xC7,
+0x1C,0x43,0xC1,0x76,0xF5,0x8F,0xA1,0x66,0x93,0x86,0xF6,0xF4,0xD5,0x8F,0x1C,0xC3,
+0x82,0x80,0xB7,0x86,0x00,0x40,0x90,0x42,0x41,0x77,0xC1,0x65,0x79,0x8E,0x13,0xD7,
+0x87,0x01,0x59,0x8E,0x93,0x85,0x05,0xF0,0x13,0xD7,0x87,0x00,0x6D,0x8F,0x51,0x8F,
+0x98,0xC2,0x98,0x46,0x79,0x76,0x13,0x06,0xF6,0x3F,0x71,0x8F,0x09,0x66,0x8A,0x07,
+0x13,0x06,0x06,0xC0,0xF1,0x8F,0xD9,0x8F,0x9C,0xC6,0x29,0x45,0x6F,0xD0,0x5F,0xC0,
+0xB7,0x57,0x00,0x20,0x83,0xA6,0x07,0x01,0x37,0xF7,0x00,0x20,0xB7,0xF7,0x00,0x20,
+0x03,0xC6,0x16,0x02,0x13,0x07,0x87,0x68,0x93,0x87,0xC7,0x2D,0x01,0xC6,0x83,0xC6,
+0x26,0x02,0x95,0xEE,0x83,0x46,0x17,0x00,0x93,0xF6,0xF6,0x0F,0x9D,0xC6,0x91,0x46,
+0xA3,0x82,0xD7,0x00,0x99,0x46,0x23,0x83,0xD7,0x00,0x83,0x47,0x17,0x00,0x37,0x87,
+0x00,0x40,0x93,0xF7,0xF7,0x0F,0x99,0xCF,0x1C,0x43,0x93,0xE7,0x07,0x08,0x1C,0xC3,
+0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x82,0x80,0x8D,0x46,0xD1,0xBF,0xA3,0x82,
+0xC7,0x00,0xD1,0xBF,0x1C,0x43,0x93,0xF7,0xF7,0xF7,0xD5,0xB7,0x37,0x57,0x00,0x20,
+0x13,0x01,0xC1,0xFB,0x93,0x06,0x47,0x7E,0x85,0x67,0x26,0xDC,0x86,0xC0,0x22,0xDE,
+0xB6,0x97,0x13,0x07,0x47,0x7E,0x83,0xC7,0x57,0x36,0x3A,0xC0,0x37,0x67,0x00,0x20,
+0xB7,0xF4,0x00,0x20,0x13,0x07,0x47,0x7E,0x93,0x86,0x84,0x4E,0x93,0xF7,0xF7,0x0F,
+0x3A,0xCC,0x83,0xC6,0xC6,0x00,0x81,0xEF,0x89,0xE6,0xB7,0xF7,0x00,0x20,0x23,0x9C,
+0x07,0x6A,0x86,0x40,0x72,0x54,0xE2,0x54,0x13,0x01,0x41,0x04,0x82,0x80,0xB7,0x57,
+0x00,0x20,0x37,0xF4,0x00,0x20,0x93,0x84,0x84,0x4E,0x93,0x87,0x87,0x40,0x37,0x57,
+0x00,0x20,0x13,0x04,0xC4,0x2D,0x8D,0xCA,0x03,0xA5,0x47,0x2B,0x4C,0x18,0xEF,0xE0,
+0x7F,0xCE,0x37,0x57,0x00,0x20,0x13,0x05,0xC7,0x6B,0xEF,0xE0,0x9F,0xC8,0xD2,0x56,
+0xB7,0x57,0x00,0x20,0x13,0x07,0x10,0x03,0x93,0x87,0x87,0x40,0x63,0x6E,0xD7,0x00,
+0x13,0x07,0x20,0x03,0x3A,0xDA,0x29,0xA8,0x13,0x05,0xC7,0x6B,0xEF,0xE0,0x7F,0xC6,
+0x03,0x57,0x24,0x0A,0x3A,0xDA,0xE1,0xBF,0x13,0x07,0x80,0x0C,0xE3,0x64,0xD7,0xFE,
+0x52,0x57,0x3A,0xC2,0x03,0xC7,0xC4,0x00,0x09,0xCB,0x37,0x57,0x00,0x20,0x03,0x47,
+0xE7,0x3E,0x92,0x46,0x63,0xF3,0xE6,0x00,0x3A,0xDA,0x52,0x57,0x93,0x04,0x00,0x36,
+0x13,0x05,0x00,0x12,0xB3,0x04,0x97,0x02,0x85,0x65,0x93,0x85,0x05,0xE1,0x13,0x06,
+0x40,0x06,0x83,0x46,0xC4,0x09,0x81,0x42,0x3E,0x84,0x33,0x07,0xA7,0x02,0xAE,0x94,
+0x2E,0x97,0xB3,0xD4,0xC4,0x02,0x81,0x45,0x33,0x57,0xC7,0x02,0xB3,0xD4,0xD4,0x02,
+0x33,0x57,0xD7,0x02,0x93,0x96,0x24,0x00,0x3A,0xC4,0x0D,0x47,0x33,0xD7,0xE6,0x02,
+0x3A,0xC8,0x13,0xD7,0x14,0x00,0x3A,0xC6,0x62,0x47,0x03,0x47,0x57,0x36,0x63,0xEC,
+0xE2,0x00,0x12,0x47,0xB7,0x57,0x00,0x20,0x23,0x87,0xE7,0x3E,0xB7,0xF7,0x00,0x20,
+0x23,0x9C,0xB7,0x6A,0x39,0xB7,0x33,0x87,0x57,0x00,0x3A,0xCA,0x03,0x47,0x07,0x00,
+0xAD,0x46,0x63,0xE9,0xE6,0x10,0x82,0x46,0x83,0xD6,0xC6,0x04,0x63,0x84,0x06,0x10,
+0x33,0x86,0xE7,0x00,0x03,0x45,0x86,0x23,0x85,0x46,0x7D,0x53,0x63,0xF1,0xA6,0x04,
+0x83,0x46,0xA6,0x19,0x03,0x45,0x66,0x1A,0x2E,0xD2,0x3A,0xD0,0x33,0x85,0xA6,0x40,
+0x83,0x46,0xE6,0x1B,0x03,0x46,0xA6,0x1C,0x33,0x05,0xA5,0x02,0x16,0xCE,0x91,0x8E,
+0xB3,0x86,0xD6,0x02,0x36,0x95,0x97,0xF0,0xFF,0xDF,0xE7,0x80,0xC0,0x89,0x92,0x55,
+0x02,0x57,0xF2,0x42,0xB7,0x57,0x00,0x20,0x2A,0x83,0x93,0x87,0x87,0x40,0xB3,0x86,
+0xE7,0x00,0x03,0xC6,0xE6,0x18,0x03,0xC5,0xA6,0x19,0x83,0xC3,0x26,0x1B,0x2E,0xD8,
+0x33,0x05,0xA6,0x40,0x03,0xC6,0xE6,0x1B,0x33,0x05,0xA5,0x02,0x1A,0xD6,0x33,0x86,
+0xC3,0x40,0x16,0xD4,0x3A,0xD2,0x36,0xD0,0x33,0x06,0xC6,0x02,0x32,0x95,0x97,0xF0,
+0xFF,0xDF,0xE7,0x80,0x40,0x85,0x82,0x56,0x2A,0xCE,0x03,0x55,0x84,0x01,0x83,0xC3,
+0xE6,0x18,0x1D,0x81,0x33,0x85,0xA3,0x40,0x83,0xC3,0x26,0x1B,0x83,0x56,0x04,0x03,
+0x33,0x05,0xA5,0x02,0x9D,0x82,0xB3,0x86,0xD3,0x40,0xB3,0x86,0xD6,0x02,0x36,0x95,
+0x97,0xF0,0xFF,0xDF,0xE7,0x80,0x20,0x82,0xB7,0x57,0x00,0x20,0x72,0x46,0x93,0x87,
+0x87,0x40,0x12,0x57,0xA2,0x52,0x32,0x53,0xC2,0x55,0x11,0xE1,0x05,0x45,0x11,0xE2,
+0x05,0x46,0x63,0x13,0x03,0x00,0x05,0x43,0xB3,0x86,0xE7,0x00,0x83,0xC3,0x06,0x06,
+0x63,0x8A,0x03,0x04,0x23,0x86,0x06,0x06,0x63,0xF4,0xA4,0x02,0x23,0x80,0x06,0x06,
+0x52,0x46,0xFD,0x56,0x3E,0x97,0x23,0x00,0xD6,0x00,0x83,0x46,0x47,0x08,0xFD,0x16,
+0x23,0x02,0xD7,0x08,0x02,0x47,0x85,0x02,0x09,0x04,0x09,0x07,0x3A,0xC0,0x6D,0xBD,
+0x32,0x47,0x63,0x77,0xA7,0x00,0x05,0x47,0x23,0x86,0xE6,0x06,0x23,0x8C,0xA6,0x06,
+0x23,0x80,0x06,0x06,0x63,0x73,0xB5,0x00,0x2E,0x85,0xAA,0x85,0xE3,0x7C,0xC5,0xFC,
+0xB2,0x85,0xC9,0xBF,0x91,0x43,0x63,0xE8,0x63,0x00,0x63,0x66,0xC3,0x00,0x13,0x13,
+0x15,0x00,0x63,0xE9,0x64,0x00,0xA2,0x46,0xB3,0x86,0xA6,0x02,0x63,0xF7,0xC6,0x00,
+0xB3,0x86,0xE7,0x00,0x23,0x86,0x06,0x06,0x61,0xBF,0xA2,0x46,0xB3,0x86,0xC6,0x02,
+0xE3,0xE8,0xA6,0xFE,0xC2,0x46,0xE3,0xE5,0xA6,0xFE,0xB3,0x86,0xE7,0x00,0x03,0xC3,
+0xC6,0x06,0xE3,0x09,0x03,0xFA,0x03,0xC3,0x86,0x07,0x23,0x86,0x06,0x06,0x13,0x53,
+0x13,0x00,0xE3,0x71,0x65,0xFA,0xAD,0xB7,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,
+0x39,0x71,0x22,0xDC,0x06,0xDE,0x26,0xDA,0x83,0xC6,0x27,0x05,0x37,0xF4,0x00,0x20,
+0x13,0x04,0x84,0x4E,0x89,0xCE,0x03,0x47,0xB4,0x00,0x83,0x43,0xD4,0x00,0x1D,0xC3,
+0x63,0x98,0x03,0x04,0x03,0xC7,0x17,0x15,0x15,0x83,0x05,0x8B,0x31,0xE3,0xB7,0x57,
+0x00,0x20,0x23,0x07,0x04,0x00,0xA3,0x88,0x07,0x3E,0xF2,0x50,0x62,0x54,0xD2,0x54,
+0x21,0x61,0x82,0x80,0x63,0x96,0x03,0x02,0x03,0xC7,0x17,0x15,0x15,0x83,0x05,0x8B,
+0x05,0xE3,0x37,0x57,0x00,0x20,0x13,0x07,0xF7,0x3E,0x03,0x46,0x27,0x00,0x23,0x07,
+0x04,0x00,0xA5,0x45,0x63,0xE6,0xC5,0x00,0x05,0x06,0x23,0x01,0xC7,0x00,0xF1,0xB7,
+0x03,0xC7,0x37,0x05,0x05,0x8B,0x63,0x0F,0x07,0x10,0x83,0xC5,0x97,0x01,0x03,0xC6,
+0xB7,0x01,0xE3,0x8C,0xC5,0xFA,0x21,0x46,0x63,0x74,0xD6,0x00,0x23,0x89,0xC7,0x04,
+0xB7,0x56,0x00,0x20,0x83,0xA5,0x06,0xFF,0x83,0x44,0xF4,0x00,0x03,0xD5,0xA5,0x04,
+0x83,0xD6,0x25,0x04,0x83,0xD2,0x85,0x04,0x2A,0xC2,0x03,0xD5,0xC5,0x04,0x36,0xC8,
+0x83,0xD6,0x45,0x04,0x2A,0xC4,0x03,0xD5,0x65,0x04,0x36,0xCA,0xB7,0xA6,0x00,0x20,
+0x03,0xA6,0x86,0xD8,0x2A,0xC0,0xB7,0xA6,0x00,0x20,0x83,0xA6,0x06,0xD9,0x61,0xCB,
+0x03,0xC7,0xB7,0x01,0x06,0x07,0xBA,0x96,0x03,0x97,0x06,0x00,0x3A,0xC6,0x37,0xB7,
+0x00,0x20,0x03,0x23,0x47,0x2C,0x03,0xC7,0x27,0x05,0x48,0x10,0xBE,0x85,0x3E,0x97,
+0x3A,0xCC,0x62,0x47,0x63,0x15,0xB7,0x0C,0x48,0x10,0x1E,0xD0,0x32,0xCE,0x16,0xCC,
+0x97,0x50,0x00,0xE0,0xE7,0x80,0x60,0x0A,0x82,0x53,0xB7,0x57,0x00,0x20,0xE2,0x42,
+0x72,0x46,0x63,0x96,0x03,0x0E,0x03,0xA7,0x07,0x01,0x81,0x44,0x85,0x47,0x03,0x45,
+0x27,0x05,0x4C,0x18,0x93,0x96,0x14,0x00,0xAE,0x96,0x83,0x95,0x06,0xFF,0x93,0xF6,
+0xF7,0x0F,0x63,0xE1,0xA6,0x12,0x26,0x97,0x83,0x47,0x47,0x06,0x42,0x47,0x86,0x07,
+0x3E,0x96,0x83,0x17,0x06,0x00,0x63,0xC4,0xE5,0x0E,0x02,0x47,0x63,0xC1,0xE7,0x0E,
+0xB2,0x47,0x12,0x47,0x63,0xCD,0xE7,0x0C,0x93,0xF4,0xF4,0x0F,0x03,0x47,0xD4,0x00,
+0x85,0x47,0x23,0x07,0xF4,0x00,0xA3,0x07,0x94,0x00,0x01,0xEF,0xA3,0x06,0xF4,0x00,
+0xB7,0xF7,0x00,0x20,0x83,0xC7,0x67,0x36,0xA3,0x08,0xF4,0x00,0xFD,0x57,0x23,0x08,
+0xF4,0x00,0x83,0x47,0x14,0x01,0xED,0xC7,0xFD,0x17,0xA3,0x08,0xF4,0x00,0x23,0x07,
+0x04,0x00,0x65,0xB5,0x83,0xC5,0xA7,0x01,0x03,0xC6,0xC7,0x01,0xDD,0xB5,0x03,0xC7,
+0xC7,0x01,0x06,0x07,0x3A,0x96,0x03,0x17,0x06,0x00,0x36,0x86,0x92,0x46,0x3A,0xC6,
+0x16,0x87,0xA2,0x42,0x3A,0xC4,0x02,0x47,0x36,0xC0,0x3A,0xC2,0x0D,0xB7,0x83,0xC6,
+0x37,0x05,0x03,0xC7,0x97,0x01,0x83,0xC0,0x45,0x06,0x85,0x8A,0x99,0xEE,0x83,0xC6,
+0xC7,0x01,0x33,0x87,0xE6,0x02,0x06,0x97,0x06,0x07,0x1A,0x97,0x03,0x17,0x07,0x00,
+0x23,0x10,0xE5,0x00,0x85,0x05,0x09,0x05,0x29,0xB7,0x33,0x07,0x17,0x02,0x83,0xC0,
+0xB7,0x01,0xBA,0x90,0x86,0x00,0x9A,0x90,0x03,0x97,0x00,0x00,0xD5,0xB7,0x83,0xA7,
+0x07,0x01,0x54,0x18,0xA6,0x97,0x83,0xC7,0x47,0x06,0x86,0x07,0x3E,0x96,0x93,0x97,
+0x14,0x00,0xB6,0x97,0x83,0x97,0x07,0xFF,0xD2,0x46,0x03,0x17,0x06,0x00,0x63,0xC8,
+0xD7,0x00,0x63,0x46,0x57,0x00,0xB2,0x47,0x22,0x47,0xE3,0xD9,0xE7,0xF2,0x83,0x47,
+0x14,0x01,0x99,0xC7,0xA3,0x08,0x04,0x00,0x23,0x09,0x04,0x00,0xA3,0x06,0x04,0x00,
+0x83,0x47,0x24,0x01,0x8D,0xCF,0xFD,0x17,0x23,0x09,0xF4,0x00,0x85,0x47,0x23,0x07,
+0xF4,0x00,0xE5,0xB3,0x93,0x96,0x17,0x00,0x13,0x03,0x41,0x02,0x9A,0x96,0x83,0x96,
+0x06,0x00,0x63,0xD5,0xD5,0x00,0x93,0x94,0x07,0x01,0xC1,0x84,0x85,0x07,0x55,0xBD,
+0xB7,0xF7,0x00,0x20,0x83,0xC7,0x77,0x36,0x23,0x09,0xF4,0x00,0x7D,0xBB,0xFD,0x57,
+0x23,0x07,0x04,0x00,0xA3,0x06,0x04,0x00,0x23,0x08,0xF4,0x00,0x7D,0xB3,0xB7,0x57,
+0x00,0x20,0x83,0xA7,0x07,0x01,0x03,0xC5,0x27,0x05,0x7D,0xC1,0x37,0xA7,0x00,0x20,
+0x83,0x22,0x07,0xD9,0x37,0x57,0x00,0x20,0x03,0x26,0x07,0xFF,0x71,0x11,0x22,0xC0,
+0x83,0xC5,0x47,0x0E,0x83,0x56,0x66,0x04,0x03,0x56,0xA6,0x04,0x93,0xD3,0x45,0x00,
+0xBD,0x89,0xB3,0x86,0x76,0x02,0x37,0xA7,0x00,0x20,0x03,0x23,0x87,0xD8,0x29,0x47,
+0x33,0x06,0xB6,0x02,0xB3,0xC6,0xE6,0x02,0x33,0x46,0xE6,0x02,0x03,0xC7,0x37,0x05,
+0xC2,0x06,0xC1,0x82,0x05,0x8B,0x42,0x06,0x41,0x82,0x05,0xEB,0x03,0xC7,0xC7,0x01,
+0x06,0x07,0x3A,0x93,0x03,0x17,0x03,0x00,0x37,0xF3,0x00,0x20,0x13,0x04,0xC3,0x2D,
+0x03,0x44,0xF4,0x08,0x13,0x03,0xC3,0x2D,0x13,0x74,0x04,0x04,0x09,0xC4,0x3D,0x44,
+0x3E,0x95,0x63,0x9E,0x85,0x02,0x05,0x45,0x35,0xA8,0x03,0xC7,0xB7,0x01,0x06,0x07,
+0xBA,0x92,0x03,0x97,0x02,0x00,0xB2,0x82,0x36,0x86,0x96,0x86,0x9A,0x82,0xE9,0xB7,
+0x83,0xC5,0x47,0x06,0x85,0x07,0x86,0x05,0x96,0x95,0x83,0x95,0x05,0x00,0x13,0xD4,
+0xF5,0x41,0xA1,0x8D,0x81,0x8D,0xC2,0x05,0xC1,0x81,0xE3,0xF6,0xC5,0xFC,0xE3,0x11,
+0xF5,0xFE,0x01,0x45,0x83,0x47,0xF3,0x08,0xE2,0x07,0xE1,0x87,0x63,0xDF,0x07,0x00,
+0xBD,0x47,0x63,0x8C,0xF3,0x00,0x13,0x56,0xF7,0x41,0xB3,0x47,0xE6,0x00,0x91,0x8F,
+0xC2,0x07,0xC1,0x83,0x63,0xF3,0xD7,0x00,0x01,0x45,0x02,0x44,0x11,0x01,0x82,0x80,
+0x82,0x80,0x83,0x25,0x40,0x03,0x93,0xF7,0x35,0x00,0xBD,0xEF,0x71,0x11,0x22,0xC0,
+0x13,0x83,0xC5,0xFF,0x01,0x45,0x81,0x46,0x63,0xE2,0x66,0x02,0x13,0x17,0x05,0x01,
+0x83,0xA6,0xC5,0xFF,0x13,0x95,0x07,0x01,0x41,0x81,0x02,0x44,0x59,0x8D,0x15,0x8D,
+0x33,0x35,0xA0,0x00,0x33,0x05,0xA0,0x40,0x11,0x01,0x82,0x80,0x98,0x42,0x13,0x74,
+0xF7,0x0F,0x93,0x53,0x87,0x01,0x93,0x52,0x87,0x00,0x13,0x56,0x07,0x01,0x33,0x87,
+0x83,0x00,0xBA,0x97,0x13,0x87,0x36,0x00,0x33,0x84,0x86,0x02,0x93,0xF2,0xF2,0x0F,
+0x13,0x76,0xF6,0x0F,0x96,0x97,0xB2,0x97,0x33,0x07,0x77,0x02,0x22,0x97,0x3A,0x95,
+0x13,0x87,0x16,0x00,0x33,0x07,0x57,0x02,0x2A,0x97,0x13,0x85,0x26,0x00,0x33,0x05,
+0xC5,0x02,0x91,0x06,0x3A,0x95,0x49,0xBF,0x7D,0x55,0x82,0x80,0x51,0x11,0x22,0xC2,
+0x37,0xF4,0x00,0x20,0x06,0xC4,0x13,0x04,0x84,0x68,0xEF,0x10,0xA0,0x72,0x83,0x47,
+0x84,0x04,0x89,0xC7,0x97,0x50,0x00,0xE0,0xE7,0x80,0x40,0x1B,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x47,0x01,0x85,0x66,0x93,0x86,0x06,0x80,0xD8,0x43,0x55,0x8F,0xD8,0xC3,
+0xD8,0x43,0xFD,0x76,0x93,0x86,0xF6,0x7F,0x75,0x8F,0xD8,0xC3,0xF9,0xB7,0x31,0x11,
+0x26,0xC4,0xB7,0x54,0x00,0x20,0x22,0xC6,0x06,0xC8,0x93,0x86,0x84,0x40,0x03,0xC6,
+0xA6,0x16,0x37,0xF4,0x00,0x20,0x93,0x85,0x84,0x40,0xB7,0xF7,0x00,0x20,0x23,0x08,
+0x04,0x3A,0x2E,0xC0,0x03,0xC7,0x87,0x3B,0x65,0xE2,0x3E,0x83,0x59,0xCF,0xB7,0xF7,
+0x00,0x20,0x83,0xA7,0x87,0x51,0xB7,0xF6,0x00,0x20,0x83,0xA6,0x46,0x50,0x93,0xD5,
+0xF7,0x41,0x33,0xC6,0xF5,0x00,0x0D,0x8E,0x37,0xF7,0x00,0x20,0x13,0x06,0x06,0x20,
+0x03,0x27,0x47,0x3B,0x63,0x61,0xD6,0x20,0x13,0x56,0xF7,0x41,0xB3,0x45,0xE6,0x00,
+0x91,0x8D,0x37,0xF6,0x00,0x20,0x03,0x25,0x46,0x55,0x93,0x85,0x05,0x20,0x63,0xEF,
+0xA5,0x1C,0x93,0x05,0x00,0x18,0x63,0xE3,0xD5,0x06,0x85,0x45,0x83,0x22,0x46,0x55,
+0x13,0x05,0x00,0x18,0x63,0x6A,0x55,0x04,0x85,0x47,0x23,0x08,0xF4,0x3A,0x37,0xF5,
+0x00,0x20,0x13,0x05,0xC5,0x3A,0xEF,0xE0,0xCF,0xD3,0xB7,0xF7,0x00,0x20,0x03,0xA5,
+0x87,0x3A,0x4C,0x00,0xEF,0xE0,0x0F,0xD8,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,
+0x93,0x06,0x80,0x3E,0x12,0x47,0x83,0xC7,0x37,0x16,0x37,0xF3,0x00,0x20,0xB3,0x87,
+0xD7,0x02,0x63,0xF4,0xE7,0x00,0x23,0x08,0x04,0x3A,0x23,0x0C,0x03,0x3A,0xC2,0x40,
+0x32,0x44,0xA2,0x44,0x51,0x01,0x82,0x80,0x63,0x8F,0x05,0x16,0x03,0x26,0x46,0x55,
+0x93,0x05,0x00,0x30,0x33,0x85,0xC6,0x00,0xE3,0xF1,0xA5,0xFE,0x63,0x77,0xD6,0x00,
+0xB3,0x27,0xF0,0x00,0x93,0x87,0x07,0x02,0x49,0xBF,0x33,0x27,0xE0,0x00,0x13,0x07,
+0x27,0x02,0x23,0x08,0xE4,0x3A,0x61,0xB7,0xB7,0xF4,0x00,0x20,0x37,0xF4,0x00,0x20,
+0x3D,0xE7,0x05,0x47,0x23,0x8C,0xE7,0x3A,0xB7,0xF7,0x00,0x20,0x23,0xAC,0x07,0x50,
+0xB7,0xF7,0x00,0x20,0x23,0xAA,0x07,0x3A,0xB7,0xF7,0x00,0x20,0x23,0xA2,0x07,0x50,
+0xB7,0xF7,0x00,0x20,0x83,0xD5,0x06,0x12,0x23,0xAA,0x07,0x54,0x83,0xD6,0x86,0x13,
+0xB7,0xF7,0x00,0x20,0x03,0xC6,0x67,0x51,0x23,0xA8,0xB4,0x50,0x23,0x2A,0xD4,0x4C,
+0x37,0xF7,0x00,0x20,0xB7,0xF7,0x00,0x20,0x01,0xEE,0x23,0x24,0xB7,0x50,0x23,0xAE,
+0xD7,0x4C,0x37,0xF5,0x00,0x20,0x13,0x05,0x85,0x3A,0xEF,0xE0,0x8F,0xC6,0x85,0xB7,
+0x13,0x07,0x87,0x50,0x93,0x87,0xC7,0x4D,0x4C,0xC3,0xD4,0xC3,0xDD,0xB7,0xB7,0xF7,
+0x00,0x20,0x03,0xA5,0x87,0x3A,0x4C,0x00,0xEF,0xE0,0xCF,0xC9,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x13,0x07,0x80,0x3E,0x83,0xC7,0x37,0x16,0xB3,0x87,0xE7,0x02,
+0x12,0x47,0x63,0xFD,0xE7,0x00,0x97,0x50,0x00,0xE0,0xE7,0x80,0xC0,0x20,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0x87,0x68,0x05,0x47,0xA3,0x80,0xE7,0x04,0x82,0x47,0x83,0xA6,
+0x04,0x51,0x13,0x03,0xE0,0x03,0x03,0xD5,0x07,0x12,0x83,0xD5,0x87,0x13,0x83,0x27,
+0x44,0x4D,0xB3,0x06,0xD5,0x40,0x93,0x82,0xF6,0x01,0xB3,0x87,0xF5,0x40,0x01,0x47,
+0x63,0x75,0x53,0x00,0x36,0x87,0x23,0xA8,0xA4,0x50,0x93,0x86,0xF7,0x01,0x13,0x06,
+0xE0,0x03,0x63,0x79,0xD6,0x04,0x23,0x2A,0xB4,0x4C,0x37,0xF6,0x00,0x20,0x83,0x26,
+0x86,0x51,0xBA,0x96,0x23,0x2C,0xD6,0x50,0x37,0xF6,0x00,0x20,0x83,0x26,0x46,0x3B,
+0xBE,0x96,0x23,0x2A,0xD6,0x3A,0x93,0x56,0xF7,0x41,0x37,0xF6,0x00,0x20,0x35,0x8F,
+0x15,0x8F,0x83,0x26,0x46,0x50,0x36,0x97,0x23,0x22,0xE6,0x50,0x13,0xD7,0xF7,0x41,
+0xB7,0xF6,0x00,0x20,0xB9,0x8F,0x99,0x8F,0x03,0xA7,0x46,0x55,0xBA,0x97,0x23,0xAA,
+0xF6,0x54,0x71,0xB5,0xE3,0x05,0x07,0xE8,0x81,0x47,0x45,0xBF,0x13,0x05,0x00,0x18,
+0x81,0x45,0xE3,0x75,0xD5,0xE2,0x93,0x07,0x60,0x02,0x05,0xBD,0x01,0x11,0xB7,0xF7,
+0x00,0x20,0x13,0x87,0x47,0x3A,0x06,0xCE,0x22,0xCC,0x26,0xCA,0x83,0x46,0x17,0x00,
+0x93,0x87,0x47,0x3A,0x09,0x47,0x3E,0xC2,0x63,0x9E,0xE6,0x22,0x37,0x54,0x00,0x20,
+0x83,0x27,0x04,0x01,0x2A,0xC0,0x81,0x46,0x83,0xC7,0x17,0x15,0x9D,0x83,0x91,0xC7,
+0x97,0xB0,0x00,0xE0,0xE7,0x80,0x20,0x16,0xAA,0x86,0xB7,0xF4,0x00,0x20,0x13,0x86,
+0x84,0x68,0x83,0x47,0x16,0x04,0x37,0xF7,0x00,0x20,0x03,0x47,0x37,0x4F,0x93,0xF7,
+0xF7,0x0F,0x93,0x84,0x84,0x68,0x91,0xCB,0x19,0xE3,0xA3,0x00,0x06,0x04,0x05,0x45,
+0xF2,0x40,0x62,0x44,0xD2,0x44,0x05,0x61,0x82,0x80,0x05,0x46,0x63,0x69,0xE6,0x00,
+0xB7,0x57,0x00,0x20,0x03,0xC7,0x67,0x3F,0x89,0x47,0x63,0x1A,0xF7,0x00,0x97,0x50,
+0x00,0xE0,0xE7,0x80,0x40,0x0D,0x85,0x47,0xA3,0x80,0xF4,0x04,0xC9,0xBF,0x36,0xC4,
+0x39,0x33,0x37,0xF7,0x00,0x20,0x83,0x47,0x67,0x51,0x05,0x46,0xA2,0x46,0x63,0x9C,
+0xC7,0x04,0x3E,0xC4,0x92,0x47,0x0C,0x08,0x36,0xC6,0x88,0x47,0xEF,0xE0,0x8F,0xB1,
+0x03,0x26,0x04,0x01,0x93,0x05,0x80,0x3E,0xA2,0x47,0x03,0x46,0x46,0x17,0xB2,0x46,
+0x37,0xF7,0x00,0x20,0x33,0x06,0xB6,0x02,0xC2,0x45,0x63,0x6C,0xB6,0x00,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0x07,0x09,0x89,0x83,0x93,0xC7,0x17,0x00,
+0x85,0x8B,0x37,0xF6,0x00,0x20,0x03,0x46,0x86,0x3B,0x11,0xE6,0x89,0xC7,0x93,0x07,
+0x50,0x02,0x23,0x0B,0xF7,0x50,0xB7,0xF7,0x00,0x20,0x83,0xC7,0x07,0x3B,0x05,0x46,
+0x63,0x91,0xC7,0x0A,0x37,0xF6,0x00,0x20,0x13,0x06,0xC6,0x2D,0x03,0x46,0x06,0x09,
+0x11,0x8A,0x49,0xE2,0x93,0x07,0x50,0x02,0x23,0x0B,0xF7,0x50,0x83,0x47,0x67,0x51,
+0x8D,0x45,0x13,0x86,0x07,0xFE,0x13,0x76,0xF6,0x0F,0x63,0xEF,0xC5,0x08,0x03,0x27,
+0x04,0x01,0x03,0x47,0x17,0x15,0x22,0x07,0x13,0x77,0x07,0x20,0x51,0xC3,0x99,0xE2,
+0x99,0xDF,0xBE,0x86,0x93,0x07,0xF0,0x0F,0x63,0x81,0xF6,0x04,0x02,0x47,0xF9,0x57,
+0x37,0xF5,0x00,0x20,0x23,0x00,0xF7,0x00,0xA3,0x00,0xD7,0x00,0x85,0x47,0x23,0x83,
+0xF4,0x00,0x23,0x80,0xF4,0x04,0x13,0x05,0x45,0x6A,0x23,0x81,0x04,0x04,0xEF,0xE0,
+0x4F,0xA0,0x83,0x27,0x04,0x01,0x83,0xC7,0x07,0x15,0x93,0xF7,0x07,0x04,0x91,0xC7,
+0xEF,0xD0,0x2F,0x95,0x15,0x45,0xE7,0x00,0x00,0x19,0x97,0x50,0x00,0xE0,0xE7,0x80,
+0x80,0xFC,0xF1,0xB5,0x03,0x46,0x67,0x51,0xE3,0x10,0xF6,0xF8,0x93,0x07,0x40,0x02,
+0xA5,0xBF,0xAD,0xDF,0x23,0x0B,0xF7,0x50,0x13,0x06,0x60,0x02,0xE3,0x98,0xC7,0xF6,
+0x03,0x27,0x04,0x01,0x03,0x47,0x17,0x15,0x22,0x07,0x13,0x77,0x07,0x40,0x19,0xE3,
+0x93,0x07,0xF0,0x0F,0xC1,0xF2,0xB5,0xBF,0x13,0x06,0x50,0x02,0x63,0x9A,0xC7,0x00,
+0x37,0xF7,0x00,0x20,0x13,0x07,0xC7,0x2D,0x03,0x47,0x07,0x09,0x05,0x8B,0xC5,0xB7,
+0x13,0x06,0x40,0x02,0x63,0x92,0xC7,0x06,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,
+0x83,0xC7,0x07,0x09,0x91,0x8B,0xE9,0xD7,0xB7,0xF7,0x00,0x20,0x13,0x86,0x87,0x50,
+0x4C,0x42,0x03,0xA5,0x87,0x50,0x36,0xC4,0xEF,0xD0,0x0F,0x86,0x37,0xF6,0x00,0x20,
+0x93,0x05,0xC6,0x4D,0x2A,0xC2,0xCC,0x41,0x03,0x25,0xC6,0x4D,0xEF,0xD0,0xCF,0x84,
+0x92,0x47,0x33,0x05,0xA5,0x02,0xB3,0x87,0xF7,0x02,0x3E,0x95,0x97,0xE0,0xFF,0xDF,
+0xE7,0x80,0x60,0xE6,0x93,0x07,0x70,0x3E,0xA2,0x46,0xE3,0xE3,0xA7,0xF8,0x37,0xF7,
+0x00,0x20,0x83,0x47,0x67,0x51,0xE5,0xBD,0x93,0xB7,0x27,0x00,0xFD,0x17,0x93,0xF7,
+0xF7,0x0F,0xF5,0xB5,0x01,0x45,0x29,0xB5,0x5D,0x71,0xA2,0xC4,0x37,0xF4,0x00,0x20,
+0x93,0x07,0x84,0x4E,0xA6,0xC2,0x86,0xC6,0x03,0xC7,0xB7,0x00,0xB7,0xF4,0x00,0x20,
+0x13,0x06,0x80,0x03,0x93,0x05,0xF0,0x0F,0x13,0x85,0xC4,0x3B,0x23,0x85,0xE7,0x00,
+0xE7,0x00,0xA0,0x1B,0x83,0x47,0x84,0x4E,0x37,0x56,0x00,0x20,0xB7,0xF5,0x00,0x20,
+0x3E,0xCE,0x83,0x27,0x06,0x01,0x13,0x05,0x84,0x4E,0xB7,0xA2,0x00,0x20,0x83,0xC7,
+0xE7,0x00,0x23,0x8C,0x05,0x4C,0x93,0x82,0xC2,0xB5,0x3E,0xCC,0xB7,0x57,0x00,0x20,
+0x13,0x87,0x87,0x40,0x13,0x83,0x87,0x40,0x93,0x87,0x87,0x40,0x3E,0xCA,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x3E,0xD2,0xB7,0xA7,0x00,0x20,0x93,0x87,0x07,0xCD,
+0x02,0xC4,0x81,0x46,0x2A,0xC2,0x26,0xC0,0x2E,0xC6,0x32,0xD0,0x7D,0x54,0x3E,0xD4,
+0xB2,0x47,0x62,0x46,0x83,0xC7,0x87,0x4D,0x63,0xE7,0xC6,0x08,0x81,0xE7,0x02,0x47,
+0x23,0x0E,0x07,0x3A,0x02,0x47,0xA2,0x46,0x37,0x56,0x00,0x20,0x13,0x07,0xC7,0x3B,
+0xA3,0x00,0xD7,0x00,0x12,0x47,0x83,0x42,0x66,0x3F,0xB7,0xF4,0x00,0x20,0xA3,0x05,
+0xD7,0x00,0x03,0x47,0xC7,0x00,0x32,0xCC,0x93,0x84,0xC4,0x3B,0x36,0x97,0x92,0x46,
+0x13,0x77,0xF7,0x0F,0x23,0x86,0xE6,0x00,0xD2,0x46,0x83,0xC6,0x66,0x27,0xB3,0xE6,
+0xD2,0x00,0x89,0xC6,0x92,0x46,0x05,0x07,0x23,0x86,0xE6,0x00,0x37,0xF7,0x00,0x20,
+0x83,0x46,0x57,0x3A,0x09,0x47,0x63,0x94,0xE6,0x1C,0x82,0x47,0x13,0x06,0x80,0x03,
+0x93,0x05,0xF0,0x0F,0x13,0x85,0xC7,0x3B,0xE7,0x00,0xA0,0x1B,0x82,0x47,0x13,0x85,
+0xC7,0x3B,0x69,0x39,0xB7,0xF7,0x00,0x20,0x23,0x8A,0x07,0x50,0xB6,0x40,0x26,0x44,
+0x96,0x44,0x61,0x61,0x82,0x80,0x03,0x46,0xA7,0x16,0x63,0x05,0x06,0x18,0x15,0x46,
+0x33,0x86,0xC7,0x02,0x82,0x45,0x93,0x85,0xC5,0x3B,0x2E,0x96,0x03,0x45,0x66,0x00,
+0x93,0xF5,0xF6,0x00,0x41,0x99,0xC9,0x8D,0x23,0x03,0xB6,0x00,0x12,0x56,0x83,0x55,
+0x83,0x13,0x03,0x55,0x03,0x12,0x03,0x46,0xF6,0x08,0x2E,0xC8,0x09,0x8A,0x65,0xC2,
+0x81,0x45,0xBE,0xC0,0x3A,0xDE,0x1A,0xDC,0x16,0xDA,0x36,0xD8,0x97,0x50,0x00,0xE0,
+0xE7,0x80,0xC0,0xCC,0x2A,0xD6,0x42,0x45,0x85,0x45,0x97,0x50,0x00,0xE0,0xE7,0x80,
+0xE0,0xCB,0x32,0x56,0xC2,0x56,0xD2,0x52,0x62,0x53,0x72,0x57,0x86,0x47,0xAA,0x84,
+0x95,0x45,0xB3,0x85,0xB7,0x02,0x37,0xF5,0x00,0x20,0x13,0x05,0xC5,0x3B,0xAA,0x95,
+0x23,0x81,0x95,0x00,0xA3,0x81,0xC5,0x00,0xA1,0x80,0x21,0x82,0x12,0x06,0xBD,0x88,
+0xD1,0x8C,0x03,0x56,0x03,0x15,0xA3,0x82,0x95,0x00,0x13,0x05,0xE0,0x0F,0x11,0x82,
+0x93,0x05,0xF0,0x0F,0x63,0x65,0xC5,0x00,0x05,0x06,0x93,0x75,0xF6,0x0F,0x15,0x46,
+0x33,0x86,0xC7,0x02,0x37,0xF5,0x00,0x20,0x13,0x05,0xC5,0x3B,0x2A,0x96,0x23,0x02,
+0xB6,0x00,0x12,0x46,0x93,0x05,0xF0,0x0F,0x36,0x96,0x03,0x45,0x06,0x00,0x63,0x10,
+0xB5,0x08,0x23,0x00,0x06,0x00,0x03,0x45,0x06,0x00,0x15,0x46,0x33,0x86,0xC7,0x02,
+0xB7,0xF5,0x00,0x20,0x93,0x85,0xC5,0x3B,0x93,0x13,0x45,0x00,0x2E,0x96,0x83,0x45,
+0x66,0x00,0xBD,0x89,0xB3,0xE5,0x75,0x00,0x23,0x03,0xB6,0x00,0x11,0x46,0x63,0x07,
+0xC5,0x00,0x22,0x46,0x05,0x06,0x13,0x76,0xF6,0x0F,0x32,0xC4,0x32,0x46,0x85,0x07,
+0x23,0x0C,0xF6,0x4C,0x85,0x06,0x05,0x07,0x09,0x03,0x85,0x02,0x91,0xBD,0x81,0x45,
+0x3E,0xDE,0x3A,0xDC,0x1A,0xDA,0x16,0xD8,0x36,0xD6,0x97,0x50,0x00,0xE0,0xE7,0x80,
+0xE0,0xBE,0xAA,0x84,0x42,0x45,0x85,0x45,0x97,0x50,0x00,0xE0,0xE7,0x80,0x00,0xBE,
+0x2A,0x86,0xF2,0x57,0x62,0x57,0x52,0x53,0xC2,0x52,0xB2,0x56,0x15,0xB7,0x83,0x45,
+0x27,0x18,0x09,0xE9,0x81,0xE5,0x83,0x45,0x67,0x17,0x91,0xC5,0xA1,0x45,0x23,0x00,
+0xB6,0x00,0x95,0xBF,0xAD,0xF9,0x83,0x45,0x67,0x17,0xB5,0xF5,0x91,0x45,0x23,0x00,
+0xB6,0x00,0xA2,0x55,0x23,0x18,0x03,0x14,0x23,0x07,0x87,0x18,0xB6,0x95,0x23,0x0D,
+0x87,0x18,0x23,0x82,0x02,0x08,0x23,0x8C,0x02,0x06,0x23,0x88,0x02,0x08,0x23,0x80,
+0x05,0x06,0x91,0xB7,0x92,0x47,0xB6,0x97,0x23,0x80,0x87,0x00,0xA5,0xBF,0x37,0xF4,
+0x00,0x20,0x13,0x04,0x84,0x68,0x81,0xC7,0x05,0x47,0x23,0x03,0xE4,0x00,0x03,0x47,
+0x64,0x04,0xB7,0xF6,0x00,0x20,0x93,0x86,0xC6,0x2D,0x13,0x77,0xF7,0x0F,0x36,0xC8,
+0x69,0xC7,0x03,0x43,0x74,0x04,0x05,0x47,0x63,0x66,0x67,0x06,0x83,0xD5,0xA6,0x09,
+0x26,0x85,0x81,0x46,0x85,0x81,0x01,0x46,0x63,0x69,0xF6,0x16,0x63,0x12,0x03,0x02,
+0x37,0xF7,0x00,0x20,0x03,0x47,0xA7,0x61,0x19,0xE7,0x09,0x47,0x63,0x85,0xE2,0x00,
+0x05,0x47,0x63,0x76,0xD7,0x04,0x05,0x47,0xA3,0x03,0xE4,0x04,0x23,0x03,0x04,0x00,
+0x9D,0xEF,0x82,0x47,0x13,0x06,0x80,0x03,0x93,0x05,0xF0,0x0F,0x13,0x85,0xC7,0x3B,
+0xE7,0x00,0xA0,0x1B,0x02,0x47,0x93,0x07,0xC0,0x1F,0x23,0x1E,0xF7,0x3A,0xB7,0xF7,
+0x00,0x20,0x23,0x8A,0x07,0x50,0x85,0x47,0x23,0x03,0xF4,0x00,0xD1,0x47,0xA3,0x03,
+0xF4,0x04,0x31,0xA0,0x22,0x47,0x63,0x14,0xF7,0x00,0x23,0x03,0x04,0x00,0x83,0x47,
+0x74,0x04,0xA1,0xC7,0xE2,0x46,0x37,0xF7,0x00,0x20,0x03,0x47,0xA7,0x61,0x83,0xC6,
+0x66,0x3F,0x55,0x8F,0x1D,0xEB,0x37,0x67,0x00,0x20,0x13,0x07,0x47,0x7E,0x03,0x47,
+0x57,0x36,0x13,0x77,0xF7,0x0F,0x15,0xE3,0x09,0x47,0x63,0x63,0xF7,0x10,0x02,0x47,
+0x93,0x07,0xC0,0x0F,0xA3,0x03,0x04,0x04,0x23,0x1E,0xF7,0x3A,0xB7,0xF7,0x00,0x20,
+0x23,0x8A,0x07,0x50,0x85,0x47,0x23,0x03,0xF4,0x00,0xC2,0x47,0x83,0xC6,0xB7,0x08,
+0x85,0x47,0x63,0xFD,0xD7,0x02,0x22,0x47,0x63,0x1A,0xF7,0x02,0x03,0xC7,0x64,0x00,
+0xD2,0x47,0x22,0x46,0x3D,0x8B,0xBA,0x97,0x83,0xC7,0x27,0x18,0x63,0x70,0xF6,0x02,
+0x63,0xFE,0xD7,0x00,0x92,0x47,0x3E,0x97,0x83,0x47,0x07,0x00,0x21,0x47,0x63,0x97,
+0xE7,0x00,0x72,0x47,0x63,0x14,0xF7,0x00,0x23,0x03,0x04,0x00,0x82,0x57,0x83,0xA7,
+0x07,0x01,0x83,0xC7,0x17,0x15,0x85,0x8B,0x99,0xCB,0x82,0x47,0x13,0x85,0xC7,0x3B,
+0x97,0x50,0x00,0xE0,0xE7,0x80,0xC0,0xCB,0x19,0xC1,0x23,0x03,0x04,0x00,0x83,0x47,
+0x04,0x04,0x93,0xF7,0xF7,0x0F,0x81,0xCB,0x83,0x47,0x24,0x03,0x09,0x47,0x63,0x04,
+0xF7,0x00,0x23,0x03,0x04,0x00,0xB2,0x47,0x83,0xC7,0x87,0x4D,0x89,0xEF,0x83,0x47,
+0x64,0x04,0x93,0xF7,0xF7,0x0F,0x81,0xEB,0x82,0x47,0x13,0x85,0xC7,0x3B,0x97,0x50,
+0x00,0xE0,0xE7,0x80,0xA0,0xB0,0x83,0x47,0x64,0x00,0x93,0xF7,0xF7,0x0F,0xE3,0x87,
+0x07,0xCC,0x92,0x47,0x12,0x47,0x83,0xD7,0x47,0x01,0x85,0x07,0xC2,0x07,0xC1,0x83,
+0x23,0x1A,0xF7,0x00,0x23,0x9B,0xF4,0x02,0x55,0xB9,0x15,0x47,0x33,0x07,0xE6,0x02,
+0x83,0x43,0x35,0x00,0x26,0x97,0x03,0x47,0x57,0x00,0x11,0x83,0x22,0x07,0x1E,0x97,
+0x63,0x75,0xB7,0x00,0x85,0x06,0x93,0xF6,0xF6,0x0F,0x05,0x06,0x15,0x05,0xAD,0xB5,
+0xFD,0x17,0xA3,0x03,0xF4,0x04,0x11,0xBF,0xB7,0x57,0x00,0x20,0x03,0xA6,0x07,0x03,
+0x03,0x45,0x46,0x0A,0x39,0xC5,0x93,0x05,0x26,0x06,0x81,0x47,0x01,0x47,0x05,0x43,
+0x83,0xD6,0x05,0x02,0x9D,0xC6,0x63,0x0D,0xF7,0x00,0x83,0xC2,0x05,0x00,0x93,0x96,
+0x17,0x00,0xB2,0x96,0x23,0x81,0x56,0x06,0x83,0xC2,0x15,0x00,0xA3,0x81,0x56,0x06,
+0x93,0x86,0x07,0x04,0x86,0x06,0xB2,0x96,0x85,0x07,0x23,0x91,0x66,0x00,0x93,0xF7,
+0xF7,0x0F,0x05,0x07,0x13,0x77,0xF7,0x0F,0x89,0x05,0xE3,0x13,0xE5,0xFC,0x23,0x02,
+0xF6,0x0A,0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xE7,0x08,
+0x93,0xF7,0xF7,0x0F,0x63,0x9E,0x07,0x10,0xB7,0x57,0x00,0x20,0x83,0xA3,0x07,0x01,
+0x85,0x47,0x03,0xC7,0xE3,0x00,0x63,0xF5,0xE7,0x10,0xB7,0x57,0x00,0x20,0x83,0xA5,
+0x07,0x03,0x83,0xC2,0x45,0x0A,0x63,0x8D,0x02,0x0E,0x51,0x11,0x22,0xC4,0x26,0xC2,
+0x83,0xC6,0xC3,0x15,0x13,0xD4,0x46,0x00,0x65,0xC0,0x37,0xF3,0x00,0x20,0x37,0xF6,
+0x00,0x20,0xBD,0x8A,0x83,0x57,0xC3,0x61,0x03,0x55,0x86,0x61,0x99,0xC6,0xBA,0x84,
+0x63,0xF3,0xE6,0x00,0xB6,0x84,0x13,0xF7,0xF4,0x0F,0x89,0x46,0x63,0xE1,0x56,0x08,
+0x13,0x07,0xA4,0x00,0xB3,0x87,0xE7,0x02,0xA9,0x46,0x33,0x05,0xE5,0x02,0xB3,0xD7,
+0xD7,0x02,0x33,0x55,0xD5,0x02,0x37,0xB7,0x00,0x20,0x03,0x27,0x47,0x2C,0x23,0x1E,
+0xF3,0x60,0x23,0x1C,0xA6,0x60,0x3A,0xC0,0x93,0x85,0x25,0x06,0x01,0x46,0x01,0x43,
+0x03,0xC4,0x15,0x00,0x03,0xC7,0x93,0x01,0x83,0xC6,0x05,0x00,0x33,0x07,0xE4,0x02,
+0x31,0xCC,0x83,0xC4,0xC3,0x01,0xFD,0x14,0x63,0x8A,0x84,0x04,0xA1,0xCA,0x03,0xC4,
+0xB3,0x01,0x7D,0x14,0x63,0x04,0xD4,0x04,0x36,0x97,0x82,0x46,0x06,0x07,0x36,0x97,
+0x03,0x17,0x07,0x00,0x63,0x64,0xF7,0x04,0x05,0x03,0x13,0x73,0xF3,0x0F,0x89,0x05,
+0xE3,0x90,0x62,0xFC,0x31,0xC2,0x22,0x44,0x92,0x44,0x31,0x01,0x75,0xBD,0xE3,0xFC,
+0xE2,0xF8,0x93,0x04,0xE7,0xFF,0xA9,0x46,0x33,0x07,0x57,0x40,0xB3,0x86,0xD4,0x02,
+0x33,0x07,0x87,0x02,0x36,0x97,0xB3,0x87,0xE7,0x02,0x85,0xBF,0x36,0x97,0x82,0x46,
+0x06,0x07,0x36,0x97,0x03,0x17,0x07,0x00,0xE3,0x70,0xA7,0xFC,0x05,0x06,0x13,0x76,
+0xF6,0x0F,0x23,0x90,0x05,0x02,0x4D,0xBF,0x22,0x44,0x92,0x44,0x31,0x01,0x82,0x80,
+0x82,0x80,0x1D,0x71,0xB7,0xF2,0x00,0x20,0xA2,0xCC,0xA6,0xCA,0x93,0x87,0xC2,0x2D,
+0x86,0xCE,0x83,0xC7,0x07,0x09,0xAA,0x84,0x2E,0x83,0xE2,0x07,0xE1,0x87,0x32,0x84,
+0x93,0x82,0xC2,0x2D,0x63,0xDD,0x07,0x08,0x37,0x06,0x00,0x80,0x05,0x47,0x93,0x86,
+0xF5,0xFF,0x13,0x46,0xF6,0xFF,0x11,0x45,0x0D,0xA8,0xB3,0x03,0xC7,0x00,0x86,0x03,
+0xA6,0x93,0x93,0x15,0x17,0x00,0xDC,0x08,0xBE,0x95,0x83,0x97,0x23,0x00,0x83,0x90,
+0x03,0x00,0x83,0x93,0x43,0x00,0x86,0x07,0x86,0x97,0x9E,0x97,0xB3,0xC7,0xA7,0x02,
+0x05,0x07,0x13,0x77,0xF7,0x0F,0x23,0x98,0xF5,0xFA,0xE3,0x48,0xD7,0xFC,0x03,0x97,
+0x04,0x00,0x83,0x97,0x24,0x00,0x0D,0x46,0x06,0x07,0x3E,0x97,0x33,0x47,0xC7,0x02,
+0xDC,0x08,0x86,0x06,0xBE,0x96,0x4C,0x00,0x26,0x85,0x1A,0xC0,0x23,0x12,0xE1,0x00,
+0x13,0x17,0x13,0x00,0x79,0x17,0x26,0x97,0x83,0x17,0x07,0x00,0x03,0x17,0xE7,0xFF,
+0x86,0x07,0xBA,0x97,0xB3,0xC7,0xC7,0x02,0x13,0x16,0x13,0x00,0x23,0x98,0xF6,0xFA,
+0xEF,0xC0,0x1F,0x91,0x02,0x43,0xB7,0xF7,0x00,0x20,0x93,0x82,0xC7,0x2D,0x83,0x97,
+0x04,0x00,0x81,0x45,0x81,0x46,0x3E,0x87,0x13,0xF6,0xF5,0x0F,0x63,0x64,0x66,0x02,
+0x9D,0x8E,0x13,0x06,0xE3,0xFF,0x99,0x8E,0xB3,0xC6,0xC6,0x02,0x03,0xC6,0x02,0x09,
+0x62,0x06,0x61,0x86,0x36,0xC0,0x83,0x16,0x01,0x00,0x63,0x50,0x06,0x0C,0x01,0x45,
+0x81,0x42,0x9D,0xA0,0x13,0x96,0x15,0x00,0x26,0x96,0x03,0x16,0x06,0x00,0x32,0x85,
+0x63,0x53,0xF6,0x00,0x3E,0x85,0x93,0x17,0x05,0x01,0xC1,0x87,0x32,0x85,0x63,0x53,
+0xC7,0x00,0x3A,0x85,0x13,0x17,0x05,0x01,0x41,0x87,0xB2,0x96,0x85,0x05,0x6D,0xB7,
+0x13,0x16,0x15,0x00,0x26,0x96,0x83,0x15,0x06,0x00,0x02,0x46,0x33,0x86,0xC5,0x40,
+0x42,0x06,0x41,0x86,0x93,0x53,0xF6,0x41,0x33,0xC6,0xC3,0x00,0x33,0x06,0x76,0x40,
+0x63,0xDB,0xC2,0x00,0x13,0xD6,0xF5,0x41,0xB3,0x42,0xB6,0x00,0xB3,0x82,0xC2,0x40,
+0xC2,0x02,0x93,0xD2,0x02,0x01,0x05,0x05,0x13,0x76,0xF5,0x0F,0xE3,0x62,0x66,0xFC,
+0x05,0x45,0x63,0xDF,0x82,0x02,0x19,0x46,0x33,0x06,0xC4,0x02,0x95,0x45,0x13,0xD5,
+0xF7,0x41,0xA9,0x8F,0x89,0x8F,0x05,0x45,0x33,0x46,0xB6,0x02,0x63,0x42,0xF6,0x02,
+0x93,0x57,0xF7,0x41,0x3D,0x8F,0x1D,0x8F,0x63,0x4C,0xE6,0x00,0x0A,0x04,0x33,0x44,
+0xB4,0x02,0x93,0xD7,0xF6,0x41,0x33,0xC5,0xD7,0x00,0x1D,0x8D,0x33,0x25,0xA4,0x00,
+0xF6,0x40,0x66,0x44,0xD6,0x44,0x25,0x61,0x82,0x80,0x13,0xD6,0xF7,0x41,0xB1,0x8F,
+0x91,0x8F,0x05,0x45,0xE3,0x46,0xF4,0xFE,0x93,0x57,0xF7,0x41,0x3D,0x8F,0x1D,0x8F,
+0xE3,0x40,0xE4,0xFE,0x93,0xD7,0xF6,0x41,0x33,0xC5,0xD7,0x00,0x89,0x46,0x1D,0x8D,
+0x33,0x44,0xD4,0x02,0xE1,0xB7,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x03,0xD7,
+0x27,0x0A,0x23,0x9F,0xE7,0x08,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x68,0x98,0x47,
+0x23,0xAA,0x07,0x00,0x23,0x8E,0x07,0x02,0x98,0xCB,0xA3,0x8C,0x07,0x02,0x82,0x80,
+0x41,0x11,0x22,0xC4,0x37,0xF4,0x00,0x20,0x06,0xC6,0x13,0x04,0x84,0x68,0x83,0x47,
+0x44,0x00,0x93,0xF7,0xF7,0x0F,0x89,0xC7,0xB2,0x40,0x22,0x44,0x41,0x01,0x82,0x80,
+0x08,0x44,0x8A,0x85,0xEF,0xD0,0x1F,0x93,0x82,0x46,0x05,0x67,0x93,0x07,0x87,0x38,
+0x63,0xF9,0xD7,0x04,0xB7,0x57,0x00,0x20,0x83,0xA7,0x47,0x01,0x13,0x07,0x07,0x80,
+0xD4,0x43,0x55,0x8F,0xD8,0xC3,0xD8,0x43,0xFD,0x76,0x93,0x86,0xF6,0x7F,0x75,0x8F,
+0xD8,0xC3,0xB7,0x87,0x00,0x40,0x13,0x07,0x00,0x20,0xD8,0xC7,0xB7,0x37,0x00,0x40,
+0x98,0x47,0x13,0x77,0x07,0x04,0x19,0xCB,0x05,0x47,0x98,0xC7,0x09,0x45,0xEF,0xC0,
+0x2F,0xF2,0x13,0x05,0x20,0x03,0xEF,0xC0,0xAF,0xF1,0xCD,0xB7,0x13,0x07,0x10,0x04,
+0xED,0xB7,0x51,0x45,0xEF,0xC0,0xCF,0xF0,0x59,0xB7,0x31,0x11,0x22,0xC6,0x37,0xF4,
+0x00,0x20,0x06,0xC8,0x26,0xC4,0x93,0x07,0x84,0x68,0x83,0xC7,0x37,0x03,0x13,0x07,
+0x84,0x68,0x3A,0xC0,0x93,0xF7,0xF7,0x0F,0x01,0x45,0x63,0x8E,0x07,0x1A,0x83,0x47,
+0x97,0x03,0x05,0x47,0x63,0x19,0xF7,0x1A,0x82,0x47,0x83,0xC7,0x57,0x03,0x93,0xF7,
+0xF7,0x0F,0x63,0x82,0x07,0x1A,0x82,0x47,0x0D,0x47,0x83,0xC7,0xC7,0x03,0x63,0x6C,
+0xF7,0x18,0x0D,0x45,0xEF,0xD0,0xBF,0xC0,0xB7,0xF7,0x00,0x20,0x13,0x87,0xC7,0x2D,
+0x83,0x46,0xF7,0x08,0x93,0x87,0xC7,0x2D,0x37,0x54,0x00,0x20,0x93,0xF6,0x06,0x04,
+0x85,0x44,0xD1,0xC2,0xB7,0xF5,0x00,0x20,0xB7,0x56,0x00,0x20,0x83,0xA6,0x06,0xFF,
+0x03,0xC5,0x55,0x3A,0x89,0x45,0x03,0xD6,0xE6,0x03,0x83,0x26,0x04,0x01,0x63,0x10,
+0xB5,0x12,0x02,0x47,0xBD,0x44,0x83,0x45,0x17,0x04,0x93,0xF5,0xF5,0x0F,0x91,0xE1,
+0xB5,0x44,0xB3,0x84,0xC4,0x02,0x29,0x46,0x37,0xA3,0x00,0x20,0x83,0xC5,0x96,0x01,
+0x03,0x25,0x03,0xD9,0xB3,0xC4,0xC4,0x02,0x01,0x46,0xEF,0xE0,0xBF,0x85,0x83,0x26,
+0x04,0x01,0x37,0xA3,0x00,0x20,0x03,0x25,0x03,0xD9,0x83,0xC5,0xB6,0x01,0xC2,0x04,
+0xC1,0x84,0x26,0x86,0x7D,0x31,0x83,0x26,0x04,0x01,0x37,0xA3,0x00,0x20,0xAA,0x84,
+0x83,0xC5,0x96,0x01,0x03,0x25,0x03,0xD9,0x01,0x46,0xEF,0xE0,0x4F,0xFC,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC6,0xF7,0x08,0x85,0x47,0xE2,0x06,0xE1,0x86,
+0x63,0xD1,0x06,0x08,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0xFF,0x83,0x26,0x04,0x01,
+0x03,0xD6,0xA7,0x03,0xB7,0xF7,0x00,0x20,0x83,0xC5,0x57,0x3A,0x89,0x47,0x63,0x9E,
+0xF5,0x08,0x82,0x47,0x83,0xC7,0x17,0x04,0x93,0xF7,0xF7,0x0F,0xC9,0xC7,0xBD,0x47,
+0xB3,0x87,0xC7,0x02,0x29,0x46,0x37,0xA3,0x00,0x20,0x83,0xC5,0xA6,0x01,0x03,0x25,
+0x83,0xD8,0xB3,0xC7,0xC7,0x02,0x05,0x46,0xC2,0x07,0xC1,0x87,0x3E,0xC2,0xEF,0xE0,
+0x6F,0xFC,0x83,0x26,0x04,0x01,0x92,0x47,0x37,0xA3,0x00,0x20,0x83,0xC5,0xC6,0x01,
+0x03,0x25,0x83,0xD8,0x3E,0x86,0x31,0x39,0x83,0x26,0x04,0x01,0x37,0xA3,0x00,0x20,
+0x2A,0xC2,0x83,0xC5,0xA6,0x01,0x03,0x25,0x83,0xD8,0x05,0x46,0xEF,0xE0,0x2F,0xF3,
+0x92,0x47,0x03,0x27,0x04,0x01,0x03,0x47,0x27,0x05,0x3D,0xC3,0x9D,0xC8,0x95,0xCB,
+0xB7,0xF7,0x00,0x20,0x03,0xC7,0x57,0x3A,0x89,0x47,0x63,0x0F,0xF7,0x02,0xCD,0x33,
+0x5D,0x3B,0x02,0x47,0x9D,0x47,0xA3,0x0E,0xF7,0x02,0x05,0x45,0x2D,0xA8,0x83,0xC4,
+0x36,0x0E,0xBD,0x88,0xFD,0xB5,0xB5,0x47,0xA5,0xBF,0x83,0xC7,0x36,0x0E,0x91,0x83,
+0x85,0xBF,0x3E,0xC2,0xEF,0xE0,0xBF,0xF2,0x92,0x47,0x91,0xC0,0xF1,0xF3,0x69,0xF1,
+0x82,0x47,0xA3,0x80,0x07,0x04,0xD1,0xBF,0x82,0x47,0x05,0x45,0x83,0xC7,0x17,0x04,
+0x93,0xF7,0xF7,0x0F,0xCD,0xDF,0xC2,0x40,0x32,0x44,0xA2,0x44,0x51,0x01,0x82,0x80,
+0xE5,0xD0,0xD9,0xFF,0xF1,0xBF,0x41,0x11,0x22,0xC4,0x37,0xF4,0x00,0x20,0x06,0xC6,
+0x26,0xC2,0x93,0x07,0x84,0x68,0x03,0xC5,0x67,0x03,0x85,0x66,0x13,0x87,0xE6,0x69,
+0x33,0x07,0xE5,0x02,0xB7,0x77,0x00,0x20,0x93,0x87,0x07,0xD8,0x93,0x86,0x86,0xB6,
+0xB7,0x54,0x00,0x20,0x37,0x56,0x00,0x20,0xA3,0x01,0x06,0x40,0xBA,0x97,0x93,0x85,
+0xE7,0x14,0x37,0x57,0x00,0x20,0x23,0x2A,0xB7,0xFE,0x23,0xA8,0xF4,0xFE,0x37,0x57,
+0x00,0x20,0xB6,0x97,0x23,0x28,0xF7,0x02,0x97,0x00,0x00,0xE0,0xE7,0x80,0xA0,0xCA,
+0x6D,0x3B,0x37,0x56,0x00,0x20,0x32,0xC0,0x63,0x16,0x05,0x1A,0x97,0xF0,0xFF,0xDF,
+0xE7,0x80,0x60,0xFB,0x83,0xA7,0x04,0xFF,0x03,0xC7,0x97,0x14,0x8D,0x47,0x63,0xFB,
+0xE7,0x18,0x1D,0x45,0xEF,0xD0,0xBF,0x9E,0x13,0x04,0x84,0x68,0x03,0x47,0x24,0x00,
+0x85,0x47,0x63,0x16,0xF7,0x00,0x97,0x80,0x00,0xE0,0xE7,0x80,0x20,0x07,0x83,0x47,
+0x54,0x03,0x93,0xF7,0xF7,0x0F,0x85,0xC3,0x83,0x47,0x04,0x04,0x93,0xF7,0xF7,0x0F,
+0x63,0x97,0x07,0x16,0xB7,0xF7,0x00,0x20,0x03,0xC7,0x57,0x3A,0x89,0x47,0x63,0x04,
+0xF7,0x00,0xEF,0xC0,0x0F,0xD3,0x97,0x00,0x00,0xE0,0xE7,0x80,0x40,0xD6,0x97,0x80,
+0x00,0xE0,0xE7,0x80,0xC0,0xEE,0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x83,0xC7,
+0x47,0x15,0xA1,0x8B,0x91,0xC7,0x82,0x47,0x83,0xC7,0x37,0x40,0x63,0x94,0x07,0x12,
+0x83,0x47,0x54,0x03,0x93,0xF7,0xF7,0x0F,0xCD,0xCB,0x83,0x47,0x04,0x04,0xB7,0x74,
+0x00,0x20,0x93,0x84,0x44,0xB7,0x93,0xF7,0xF7,0x0F,0xB9,0xEB,0x83,0xC6,0x04,0x00,
+0xB7,0xF7,0x00,0x20,0x99,0xEA,0x03,0xC7,0x47,0x51,0x13,0x77,0xF7,0x0F,0x11,0xC7,
+0x03,0xC7,0x14,0x00,0x05,0x07,0xA3,0x80,0xE4,0x00,0x03,0xC7,0x47,0x51,0x05,0x46,
+0x63,0x6E,0xE6,0x00,0x83,0xC7,0x47,0x51,0x09,0x47,0x63,0x69,0xF7,0x00,0x99,0xE6,
+0x03,0xC7,0x14,0x00,0x93,0x07,0x40,0x06,0x63,0xFC,0xE7,0x00,0x05,0x45,0xE7,0x00,
+0x00,0x19,0xEF,0xC0,0xCF,0xC7,0x85,0x47,0x23,0x80,0xF4,0x00,0xA3,0x80,0x04,0x00,
+0x97,0x10,0x00,0xE0,0xE7,0x80,0x00,0x92,0x97,0x30,0x00,0xE0,0xE7,0x80,0x80,0x16,
+0x97,0x10,0x00,0xE0,0xE7,0x80,0x80,0x76,0xEF,0xF0,0x0F,0xC0,0x83,0xC7,0x04,0x00,
+0x8D,0xC7,0x83,0x47,0x04,0x04,0x93,0xF7,0xF7,0x0F,0x85,0xE3,0xB7,0xF7,0x00,0x20,
+0x83,0xC7,0x47,0x51,0x93,0xF7,0xF7,0x0F,0xC5,0xCB,0x05,0x45,0xE7,0x00,0x00,0x19,
+0xEF,0xC0,0x2F,0xC5,0x05,0x45,0xE7,0x00,0x00,0x19,0x97,0x00,0x00,0xE0,0xE7,0x80,
+0x60,0xF6,0x83,0x47,0x94,0x03,0xB7,0xF4,0x00,0x20,0x93,0x84,0x84,0x4E,0x93,0xF7,
+0xF7,0x0F,0x89,0xEB,0x83,0xC7,0xC4,0x00,0x91,0xEB,0x83,0x47,0x54,0x03,0x93,0xF7,
+0xF7,0x0F,0x89,0xE7,0x97,0x80,0x00,0xE0,0xE7,0x80,0xC0,0xFF,0x83,0x47,0x94,0x03,
+0x93,0xF7,0xF7,0x0F,0x99,0xEB,0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x03,0xD7,
+0xC7,0x0A,0x42,0x07,0x41,0x83,0x23,0x94,0xE7,0x0A,0x83,0xC7,0xC4,0x00,0x99,0xCB,
+0xB7,0xF7,0x00,0x20,0x93,0x87,0xC7,0x2D,0x03,0xD7,0xA7,0x0A,0x42,0x07,0x41,0x83,
+0x23,0x93,0xE7,0x0A,0xB2,0x40,0x22,0x44,0x92,0x44,0x41,0x01,0x82,0x80,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0x47,0x0C,0x93,0xF7,0xF7,0x0F,0xE3,0x8C,
+0x07,0xE8,0x83,0x47,0x74,0x00,0x93,0xF7,0xF7,0x0F,0xE3,0x86,0x07,0xE8,0x97,0x80,
+0x00,0xE0,0xE7,0x80,0x20,0x09,0x41,0xB5,0x23,0x80,0x04,0x00,0xA3,0x80,0x04,0x00,
+0xA9,0xBF,0x21,0x11,0x22,0xC8,0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x68,0x06,0xCA,
+0x26,0xC6,0x83,0xC7,0xC7,0x03,0x11,0x47,0x13,0x04,0x84,0x68,0x63,0x74,0xF7,0x00,
+0x23,0x0E,0x04,0x02,0xB7,0x54,0x00,0x20,0x83,0xA6,0x04,0x01,0x26,0xC0,0xB7,0xF7,
+0x00,0x20,0x03,0xC7,0xD6,0x04,0x93,0x84,0xC7,0x2D,0x63,0x0F,0x07,0x16,0x37,0x57,
+0x00,0x20,0x03,0x27,0x07,0xFF,0x03,0x46,0x97,0x14,0x3D,0x47,0x63,0x76,0xC7,0x16,
+0x37,0xF7,0x00,0x20,0x03,0x47,0x47,0x51,0x13,0x77,0xF7,0x0F,0x63,0x1E,0x07,0x14,
+0x03,0xC7,0xE4,0x08,0x13,0x77,0xF7,0x0F,0x11,0xC7,0x03,0xC7,0x06,0x15,0x11,0x8B,
+0x63,0x14,0x07,0x14,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x03,0x03,0x45,0x47,0x0A,
+0x63,0x1C,0x05,0x12,0x37,0xF7,0x00,0x20,0x03,0x47,0x47,0x4F,0x11,0xCF,0x37,0xF7,
+0x00,0x20,0x83,0x46,0x57,0x3A,0x09,0x47,0x63,0x90,0xE6,0x12,0x03,0x47,0x14,0x04,
+0x13,0x77,0xF7,0x0F,0x63,0x0A,0x07,0x10,0x14,0x48,0x18,0x44,0x15,0x8F,0x83,0x46,
+0x94,0x03,0x3A,0xC2,0x93,0xF6,0xF6,0x0F,0x91,0xEE,0x83,0xA6,0x44,0x0B,0x63,0xFB,
+0xE6,0x00,0x03,0x47,0x14,0x04,0x13,0x77,0xF7,0x0F,0x09,0xE7,0x97,0xF0,0xFF,0xDF,
+0xE7,0x80,0x60,0xF0,0x03,0x47,0x44,0x03,0x93,0x06,0x17,0x00,0x03,0xA7,0x44,0x0B,
+0x33,0x57,0xD7,0x02,0x92,0x46,0x63,0x76,0xD7,0x0C,0x61,0xE5,0x37,0xF7,0x00,0x20,
+0x83,0x46,0x57,0x3A,0x09,0x47,0x63,0x95,0xE6,0x08,0x03,0xD7,0x44,0x0A,0x23,0x9F,
+0xE4,0x08,0x03,0x47,0x94,0x03,0x13,0x77,0xF7,0x0F,0x41,0xE7,0x23,0x2A,0x04,0x00,
+0x23,0x0E,0x04,0x02,0x05,0x47,0xA3,0x0C,0xE4,0x02,0x37,0x67,0x00,0x20,0x13,0x07,
+0x47,0x7E,0x03,0x47,0x57,0x36,0x13,0x77,0xF7,0x0F,0x19,0xC3,0x23,0x0A,0x04,0x02,
+0x03,0xC7,0xF4,0x08,0xB7,0x76,0x00,0x20,0x93,0x86,0x06,0xD8,0x21,0x8B,0x3D,0xCF,
+0x82,0x47,0x03,0xA7,0x07,0x01,0x03,0x07,0x87,0x07,0x63,0x49,0x07,0x06,0x37,0xF7,
+0x00,0x20,0x13,0x07,0x87,0x6D,0x03,0x47,0x47,0x03,0x05,0x66,0x13,0x06,0xE6,0x69,
+0x05,0x07,0x05,0x8B,0x33,0x07,0xC7,0x02,0x36,0x97,0x03,0x46,0x97,0x14,0x3D,0x47,
+0x63,0x66,0xC7,0x04,0x4D,0x32,0xD2,0x40,0x42,0x44,0xB2,0x44,0x61,0x01,0x82,0x80,
+0x03,0xD7,0x04,0x0A,0x08,0x48,0x2C,0x00,0x23,0x9F,0xE4,0x08,0xEF,0xD0,0x8F,0xB0,
+0x8D,0xBF,0x03,0x47,0x34,0x03,0x13,0x77,0xF7,0x0F,0x2D,0xDF,0x03,0xD7,0x84,0x0A,
+0x54,0x48,0xE3,0xE9,0xE6,0xF6,0x05,0x47,0x23,0x0E,0xE4,0x02,0x23,0x2A,0x04,0x00,
+0x95,0xB7,0xA3,0x0C,0x04,0x02,0x95,0xB7,0xB9,0x3A,0x85,0xB7,0x03,0x47,0x74,0x03,
+0x05,0x66,0x13,0x06,0xE6,0x69,0x33,0x07,0xC7,0x02,0xB7,0x57,0x00,0x20,0xBA,0x96,
+0x03,0x47,0x94,0x03,0x23,0xA8,0xD7,0xFE,0x13,0x77,0xF7,0x0F,0x19,0xEB,0x83,0x46,
+0xA4,0x03,0x05,0x47,0x63,0x97,0xE6,0x00,0xEF,0xC0,0x3F,0xE2,0x91,0x3A,0xB7,0x57,
+0x00,0x20,0x03,0x47,0x94,0x03,0x23,0x0D,0xE4,0x02,0x03,0x47,0x94,0x03,0x13,0x77,
+0xF7,0x0F,0x39,0xEB,0x03,0x47,0xC4,0x04,0xA5,0x46,0x63,0xE5,0xE6,0x00,0x05,0x07,
+0x23,0x06,0xE4,0x04,0xB7,0xF6,0x00,0x20,0x13,0x87,0x86,0x4E,0x83,0x45,0xB7,0x00,
+0x37,0x76,0x00,0x20,0x93,0x86,0x86,0x4E,0x13,0x06,0x46,0xB7,0x99,0xE9,0x03,0xC7,
+0xC6,0x00,0x01,0xCB,0x37,0x57,0x00,0x20,0x03,0x45,0x67,0x3F,0x05,0x47,0x63,0x78,
+0xA7,0x00,0x03,0x45,0x74,0x03,0x03,0x47,0x26,0x00,0x63,0x0A,0xA7,0x00,0x83,0x47,
+0x74,0x03,0x23,0x01,0xF6,0x00,0x05,0xB7,0x23,0x06,0x04,0x04,0x65,0xBF,0x23,0x01,
+0xE6,0x00,0x03,0x47,0xD4,0x03,0x01,0xC7,0xAD,0xC1,0xA3,0x0E,0x04,0x02,0x03,0xA7,
+0x07,0xFF,0x83,0x46,0x97,0x14,0x3D,0x47,0xE3,0x7F,0xD7,0xEE,0x03,0x47,0xC4,0x03,
+0x13,0x77,0xF7,0x0F,0xE3,0x19,0x07,0xEE,0x08,0x44,0x4C,0x00,0xEF,0xD0,0x8F,0xA0,
+0x12,0x45,0x03,0xD7,0xE4,0x09,0x93,0x06,0x15,0x00,0x63,0xFA,0xE6,0x08,0xB7,0xF6,
+0x00,0x20,0x83,0xC6,0x46,0x51,0x93,0xF6,0xF6,0x0F,0x95,0xCA,0x13,0x07,0x40,0x06,
+0x33,0x05,0xE5,0x02,0xEF,0xC0,0xCF,0x81,0x58,0x48,0x83,0xD7,0xE4,0x09,0x3E,0x97,
+0x58,0xC8,0x18,0x4C,0xBA,0x97,0x1C,0xCC,0x7D,0xB5,0x83,0xC6,0xC6,0x00,0x81,0xE6,
+0x8D,0x46,0xE3,0xFC,0xE6,0xF8,0x7D,0x17,0xA3,0x0E,0xE4,0x02,0x69,0xBD,0x33,0x05,
+0xA7,0x40,0x37,0xF7,0x00,0x20,0x83,0x46,0x57,0x3A,0x09,0x47,0x63,0x9E,0xE6,0x02,
+0x03,0x47,0x94,0x03,0x85,0x46,0x63,0x99,0xE6,0x02,0x83,0x46,0x74,0x00,0x93,0xF6,
+0xF6,0x0F,0x9D,0xE2,0x83,0xC6,0x04,0x09,0x89,0x8A,0x99,0xCE,0x21,0x67,0x13,0x07,
+0x07,0xD0,0x33,0x05,0xE5,0x02,0x09,0x67,0x13,0x07,0x07,0x71,0x33,0x55,0xE5,0x02,
+0x2A,0xC4,0xEF,0xD0,0x2F,0xCB,0x49,0xBF,0xEF,0xD0,0xAF,0x98,0x71,0xB7,0x5C,0x48,
+0xAA,0x97,0x5C,0xC8,0x18,0x4C,0x3A,0x95,0x08,0xCC,0x35,0xBD,0xB7,0x57,0x00,0x20,
+0x83,0xA7,0x07,0x01,0x15,0x47,0xB7,0xF6,0x00,0x20,0x83,0xC7,0xE7,0x00,0x01,0x46,
+0x93,0x86,0xC6,0x3B,0xB3,0x87,0xE7,0x02,0x01,0x47,0x89,0x07,0x93,0xF7,0xF7,0x0F,
+0x93,0x75,0xF6,0x0F,0x63,0xE8,0xF5,0x00,0xB6,0x97,0x33,0x07,0xE0,0x40,0x23,0x80,
+0xE7,0x00,0x82,0x80,0xB3,0x85,0xC6,0x00,0x83,0xC5,0x05,0x00,0x05,0x06,0x2E,0x97,
+0x13,0x77,0xF7,0x0F,0xF1,0xBF,0x51,0x11,0x22,0xC2,0x37,0xF4,0x00,0x20,0x93,0x07,
+0x84,0x68,0x06,0xC4,0x26,0xC0,0x83,0xC7,0x67,0x00,0x13,0x04,0x84,0x68,0x93,0xF7,
+0xF7,0x0F,0x63,0x8F,0x07,0x14,0xEF,0xB0,0xDF,0xFF,0x49,0x3F,0xB7,0x77,0x00,0x20,
+0xA3,0x8B,0x07,0xB6,0x83,0x47,0x74,0x00,0xB7,0xF5,0x00,0x20,0x93,0xF7,0xF7,0x0F,
+0x95,0xEF,0xB7,0x57,0x00,0x20,0x03,0xA5,0x07,0x02,0x13,0x06,0x80,0x03,0x93,0x85,
+0xC5,0x3B,0x13,0x05,0xC5,0x02,0xEF,0xB0,0xFF,0xF0,0x85,0x47,0xA3,0x03,0xF4,0x00,
+0x23,0x03,0x04,0x00,0xEF,0xB0,0xBF,0xF9,0x12,0x44,0xA2,0x40,0x82,0x44,0x37,0xF5,
+0x00,0x20,0x13,0x05,0x05,0x50,0x31,0x01,0x6F,0xD0,0xAF,0x84,0x37,0xF7,0x00,0x20,
+0x85,0x47,0x23,0x02,0xF7,0x4E,0xB7,0xF4,0x00,0x20,0x83,0xC7,0x44,0x51,0xB7,0xF6,
+0x00,0x20,0x03,0xC5,0x56,0x51,0x93,0xF7,0xF7,0x0F,0x23,0x02,0x07,0x4E,0x0D,0x46,
+0x13,0x75,0xF5,0x0F,0x63,0x7C,0xF6,0x0C,0x0D,0x05,0x93,0x07,0x80,0x03,0x0D,0x89,
+0x33,0x05,0xF5,0x02,0x37,0xF3,0x00,0x20,0x93,0x07,0x43,0x3F,0x13,0x06,0x80,0x03,
+0x93,0x85,0xC5,0x3B,0x3E,0x95,0xEF,0xB0,0xFF,0xE9,0x85,0x47,0x37,0xF7,0x00,0x20,
+0x23,0x02,0xF7,0x4E,0x83,0xC7,0x44,0x51,0x37,0xF3,0x00,0x20,0x0D,0x46,0x13,0x03,
+0x43,0x3F,0xB7,0xF6,0x00,0x20,0x63,0x69,0xF6,0x00,0x83,0xC7,0x44,0x51,0x85,0x07,
+0x93,0xF7,0xF7,0x0F,0x23,0x8A,0xF4,0x50,0x23,0x02,0x07,0x4E,0x83,0x47,0x74,0x00,
+0x93,0xF7,0xF7,0x0F,0xB1,0xEF,0x83,0xC7,0x44,0x51,0x93,0xF7,0xF7,0x0F,0xA9,0xCB,
+0x85,0x47,0x23,0x02,0xF7,0x4E,0x83,0xC7,0x56,0x51,0x93,0x05,0x80,0x03,0x13,0x06,
+0x80,0x03,0xB3,0x85,0xF5,0x02,0xB7,0x57,0x00,0x20,0x03,0xA5,0x07,0x02,0x13,0x05,
+0xC5,0x02,0x9A,0x95,0xEF,0xB0,0x1F,0xE3,0xB7,0xF6,0x00,0x20,0x83,0xC7,0x56,0x51,
+0x37,0xF7,0x00,0x20,0x85,0x07,0x93,0xF7,0xF7,0x0F,0xA3,0x8A,0xF6,0x50,0x83,0xC7,
+0x44,0x51,0xFD,0x17,0x93,0xF7,0xF7,0x0F,0x23,0x8A,0xF4,0x50,0x23,0x02,0x07,0x4E,
+0x05,0x45,0xE7,0x00,0x00,0x19,0xEF,0xB0,0x9F,0xE9,0x05,0x45,0xE7,0x00,0x00,0x19,
+0xEF,0xB0,0x3F,0xEB,0x05,0x45,0xE7,0x00,0x00,0x19,0xC5,0xB5,0x3E,0x95,0x35,0xB7,
+0x83,0x47,0x74,0x00,0x93,0xF7,0xF7,0x0F,0x81,0xEB,0xB7,0xF7,0x00,0x20,0x83,0xC7,
+0x47,0x51,0x93,0xF7,0xF7,0x0F,0xB1,0xC3,0x83,0x47,0x04,0x04,0x93,0xF7,0xF7,0x0F,
+0x8D,0xEF,0xB7,0x77,0x00,0x20,0x93,0x87,0x47,0xB7,0x03,0xC7,0x37,0x00,0x93,0x06,
+0x70,0x0C,0x63,0xE0,0xE6,0x02,0x05,0x07,0xA3,0x81,0xE7,0x00,0xEF,0xB0,0x7F,0xE6,
+0x05,0x45,0xE7,0x00,0x00,0x19,0x12,0x44,0xA2,0x40,0x82,0x44,0x31,0x01,0x6F,0xB0,
+0x1F,0xE3,0xB7,0xF7,0x00,0x20,0x23,0x8A,0x07,0x50,0xA2,0x40,0x12,0x44,0x82,0x44,
+0x31,0x01,0x82,0x80,0xB7,0x57,0x00,0x20,0x83,0xA7,0x87,0x02,0x41,0x11,0x06,0xC6,
+0x22,0xC4,0x26,0xC2,0x03,0xC7,0xF7,0x00,0x93,0x07,0x90,0x0E,0x63,0x16,0xF7,0x00,
+0x97,0xC0,0xFF,0xDF,0xE7,0x80,0x80,0x49,0xB7,0xF4,0x00,0x20,0x93,0x87,0x84,0x68,
+0x83,0xC7,0xF7,0x03,0x13,0x84,0x84,0x68,0x89,0xCB,0xA3,0x0F,0x04,0x02,0xEF,0xF0,
+0x8F,0xD7,0xEF,0xC0,0x9F,0xA6,0xEF,0xF0,0xAF,0xD9,0x83,0xC7,0x84,0x68,0x99,0xEB,
+0xB7,0x57,0x00,0x20,0x83,0xA7,0x07,0x01,0x03,0xC7,0x07,0x00,0x93,0x07,0xF0,0x0F,
+0x63,0x1B,0xF7,0x04,0x85,0x47,0xA3,0x02,0xF4,0x04,0x83,0x47,0xE4,0x03,0x09,0x47,
+0x63,0x03,0xF7,0x04,0x83,0x47,0xE4,0x03,0x93,0xF7,0xF7,0x0F,0x89,0xEB,0x37,0xF5,
+0x00,0x20,0x13,0x05,0x05,0x69,0xEF,0xC0,0xDF,0xE5,0xEF,0xF0,0xCF,0xD2,0x48,0x50,
+0x85,0x47,0x8A,0x85,0x23,0x01,0xF4,0x00,0xEF,0xC0,0xDF,0xE9,0x02,0x47,0x95,0x67,
+0x93,0x87,0x07,0xE2,0x63,0xF4,0xE7,0x00,0x23,0x84,0x04,0x68,0xB2,0x40,0x22,0x44,
+0x92,0x44,0x41,0x01,0x82,0x80,0x83,0x47,0x44,0x00,0x05,0x47,0x93,0xF7,0xF7,0x0F,
+0x23,0x00,0xF1,0x00,0x83,0x47,0x01,0x00,0x63,0x16,0xF7,0x0E,0x01,0x45,0xEF,0xC0,
+0x6F,0x91,0x05,0x45,0xEF,0xC0,0x0F,0x91,0xEF,0xC0,0x3F,0x9D,0x83,0x47,0x34,0x03,
+0x93,0xF7,0xF7,0x0F,0x99,0xCB,0x83,0x47,0x94,0x03,0x93,0xF7,0xF7,0x0F,0x91,0xC7,
+0x83,0x47,0xC4,0x03,0x0D,0x47,0x63,0x1C,0xF7,0x00,0xEF,0xB0,0xFF,0xFB,0x83,0x47,
+0xC4,0x03,0x0D,0x47,0x63,0x15,0xF7,0x00,0x91,0x47,0x23,0x0E,0xF4,0x02,0xB7,0xF4,
+0x00,0x20,0x93,0x86,0xC4,0x2D,0x03,0xC6,0x26,0x01,0x83,0xC7,0x36,0x01,0x83,0xD6,
+0x86,0x01,0x03,0x57,0xC4,0x02,0xB2,0x97,0xB6,0x97,0xB7,0xB6,0x00,0x20,0x83,0xA6,
+0x86,0x2C,0x05,0x07,0x42,0x07,0x41,0x83,0x86,0x07,0x23,0x16,0xE4,0x02,0xB6,0x97,
+0x23,0x90,0xE7,0x00,0x83,0x57,0xE4,0x02,0x13,0x07,0xF0,0x3F,0x93,0x84,0xC4,0x2D,
+0x63,0x65,0xF7,0x00,0x85,0x07,0x23,0x17,0xF4,0x02,0x83,0x47,0x01,0x00,0x05,0x47,
+0x63,0x14,0xF7,0x00,0xEF,0xF0,0x2F,0xEF,0x83,0x47,0x04,0x04,0x93,0xF7,0xF7,0x0F,
+0x91,0xEB,0xB7,0xF7,0x00,0x20,0x03,0xC7,0x57,0x3A,0x89,0x47,0x63,0x04,0xF7,0x00,
+0xEF,0xB0,0x3F,0xCC,0x4D,0x31,0xEF,0xF0,0xAF,0xC5,0xEF,0x00,0x00,0x73,0x95,0x23,
+0x09,0x3A,0x37,0xF5,0x00,0x20,0x13,0x05,0x05,0x69,0xEF,0xC0,0x9F,0xD4,0x83,0xC7,
+0x44,0x0C,0x93,0xF7,0xF7,0x0F,0xE3,0x83,0x07,0xF0,0x97,0x80,0x00,0xE0,0xE7,0x80,
+0x40,0xA4,0xED,0xBD,0xEF,0xC0,0x7F,0x8F,0x99,0xBF,0x37,0xF7,0x00,0x20,0x83,0x46,
+0x87,0x6D,0x37,0xF6,0x00,0x20,0x93,0x07,0xC6,0x2D,0x93,0x05,0x87,0x6D,0xA3,0x82,
+0xD7,0x00,0x83,0xC6,0x15,0x00,0x05,0x89,0x13,0x07,0x87,0x6D,0x23,0x83,0xD7,0x00,
+0xB3,0x86,0xA5,0x00,0x03,0xC3,0x46,0x01,0xA3,0x87,0x67,0x00,0x03,0xC3,0x06,0x01,
+0xA3,0x84,0x67,0x00,0x03,0xC3,0x26,0x01,0x23,0x85,0x67,0x00,0x03,0xC3,0x86,0x00,
+0xA3,0x81,0x67,0x00,0x03,0xC3,0x66,0x00,0x23,0x81,0x67,0x00,0x03,0xC3,0xA6,0x00,
+0x23,0x82,0x67,0x00,0x03,0xC3,0x26,0x00,0x23,0x0E,0x66,0x2C,0x03,0xC3,0x46,0x00,
+0xA3,0x80,0x67,0x00,0x03,0xC3,0x66,0x01,0x83,0xC6,0xE6,0x01,0x23,0x88,0x67,0x00,
+0x23,0x87,0xD7,0x00,0x83,0xC6,0x25,0x04,0x91,0xEE,0x83,0x46,0x77,0x06,0x63,0x88,
+0x06,0x14,0xB7,0x56,0x00,0x20,0x83,0xA6,0x06,0x01,0x83,0xC6,0x46,0x15,0x89,0x8A,
+0x63,0x8F,0x06,0x12,0x63,0x0A,0x05,0x12,0x83,0x06,0x97,0x06,0x33,0x03,0xA7,0x00,
+0x83,0x45,0xC3,0x00,0x93,0xF6,0xF6,0x0F,0xB6,0x95,0x93,0xF5,0xF5,0x0F,0xA3,0x83,
+0xB7,0x00,0x83,0x45,0xE3,0x00,0xB6,0x95,0x93,0xF5,0xF5,0x0F,0x23,0x84,0xB7,0x00,
+0x83,0x45,0x83,0x01,0xAE,0x96,0x93,0xF6,0xF6,0x0F,0xA3,0x85,0xD7,0x00,0xB3,0x06,
+0xA7,0x00,0x83,0xC5,0xA6,0x01,0x83,0xC6,0xC6,0x01,0x23,0x86,0xB7,0x00,0xA3,0x86,
+0xD7,0x00,0xB7,0xF6,0x00,0x20,0x83,0xC5,0x56,0x3A,0x89,0x46,0x63,0x95,0xD5,0x06,
+0x03,0x47,0x47,0x03,0x13,0x77,0xF7,0x0F,0x39,0xEF,0x83,0xC6,0xC7,0x08,0x8D,0xC6,
+0x03,0xC7,0x37,0x00,0x63,0x62,0xD7,0x02,0x03,0xC7,0x37,0x00,0x15,0x8F,0x13,0x77,
+0xF7,0x0F,0xA3,0x81,0xE7,0x00,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x47,
+0xD7,0x17,0x3D,0x8B,0x23,0x88,0xE7,0x00,0x83,0xC6,0xD7,0x08,0x8D,0xC6,0x03,0xC7,
+0x27,0x00,0x63,0x62,0xD7,0x02,0x03,0xC7,0x27,0x00,0x15,0x8F,0x13,0x77,0xF7,0x0F,
+0x23,0x81,0xE7,0x00,0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x03,0x47,0xD7,0x17,
+0x11,0x83,0x23,0x87,0xE7,0x00,0x03,0xC7,0xE7,0x08,0x13,0x77,0xF7,0x0F,0x25,0xC7,
+0x37,0x57,0x00,0x20,0x03,0x27,0x07,0x01,0x41,0xE1,0x83,0x46,0x07,0x10,0xA3,0x83,
+0xD7,0x00,0x83,0x46,0x47,0x10,0x23,0x84,0xD7,0x00,0x83,0x46,0x17,0x10,0xA3,0x84,
+0xD7,0x00,0x83,0x46,0x57,0x10,0x23,0x85,0xD7,0x00,0x83,0x46,0x27,0x10,0x23,0x82,
+0xD7,0x00,0x83,0x46,0x67,0x10,0x93,0xD5,0x46,0x00,0x23,0x81,0xB7,0x00,0xBD,0x8A,
+0xA3,0x81,0xD7,0x00,0x83,0x46,0x37,0x10,0x93,0xD5,0x46,0x00,0xA3,0x80,0xB7,0x00,
+0xBD,0x8A,0x23,0x0E,0xD6,0x2C,0x83,0x46,0x77,0x10,0x03,0x47,0x87,0x10,0xA3,0x87,
+0xD7,0x00,0x23,0x88,0xE7,0x00,0x82,0x80,0x83,0x06,0x87,0x06,0xC1,0xBD,0xB3,0x06,
+0xA7,0x00,0x83,0xC5,0xC6,0x00,0xA3,0x83,0xB7,0x00,0x83,0xC5,0xE6,0x00,0x83,0xC6,
+0x86,0x01,0x23,0x84,0xB7,0x00,0xD5,0xB5,0x83,0x46,0x97,0x10,0xA3,0x83,0xD7,0x00,
+0x83,0x46,0xD7,0x10,0x23,0x84,0xD7,0x00,0x83,0x46,0xA7,0x10,0xA3,0x84,0xD7,0x00,
+0x83,0x46,0xE7,0x10,0x23,0x85,0xD7,0x00,0x83,0x46,0xB7,0x10,0x23,0x82,0xD7,0x00,
+0x83,0x46,0xF7,0x10,0x93,0xD5,0x46,0x00,0x23,0x81,0xB7,0x00,0xBD,0x8A,0xA3,0x81,
+0xD7,0x00,0x83,0x46,0xC7,0x10,0x93,0xD5,0x46,0x00,0xA3,0x80,0xB7,0x00,0xBD,0x8A,
+0x23,0x0E,0xD6,0x2C,0x83,0x46,0x07,0x11,0x03,0x47,0x17,0x11,0xA3,0x87,0xD7,0x00,
+0x49,0xB7,0xB7,0xF7,0x00,0x20,0x93,0x87,0x87,0x6D,0x03,0xC7,0x47,0x03,0x05,0x8B,
+0xA3,0x89,0xE7,0x02,0x17,0x83,0x00,0xE0,0x67,0x00,0xE3,0xC1,0xB7,0x56,0x00,0x20,
+0x83,0xA5,0x06,0x01,0x37,0xF7,0x00,0x20,0x93,0x07,0x87,0x6D,0x83,0xC6,0x95,0x07,
+0x23,0x89,0x07,0x02,0x13,0x07,0x87,0x6D,0xBD,0x8A,0x81,0xC6,0x23,0x89,0xD7,0x02,
+0x82,0x80,0x09,0xC5,0x3D,0x47,0x23,0x89,0xE7,0x02,0x82,0x80,0xB7,0x56,0x00,0x20,
+0x13,0x83,0x46,0x7E,0x05,0x66,0x1A,0x96,0x03,0x43,0x56,0x36,0x37,0x66,0x00,0x20,
+0x93,0x86,0x46,0x7E,0x13,0x73,0xF3,0x0F,0x13,0x06,0x46,0x7E,0xE3,0x0C,0x03,0xFC,
+0x19,0x43,0x85,0x42,0x83,0x47,0x56,0x36,0x63,0x63,0xF5,0x00,0x82,0x80,0xB3,0x07,
+0x65,0x02,0x83,0x43,0x27,0x03,0xB6,0x97,0x83,0xC7,0x97,0x00,0xAE,0x97,0x83,0xC7,
+0x07,0x0B,0x8D,0x8B,0xB3,0x97,0xF2,0x00,0xB3,0xE7,0x77,0x00,0x93,0xF7,0xF7,0x0F,
+0x23,0x09,0xF7,0x02,0x83,0xC7,0x35,0x15,0xE2,0x07,0x93,0x93,0x37,0x00,0xE3,0xCE,
+0x03,0xF8,0x05,0x05,0x13,0x75,0xF5,0x0F,0x75,0xBF,0x51,0x11,0x26,0xC0,0xB7,0xF4,
+0x00,0x20,0x06,0xC4,0x22,0xC2,0x13,0x84,0x84,0x6D,0x83,0x47,0x44,0x03,0x01,0x45,
+0x93,0x84,0x84,0x6D,0x93,0xF7,0xF7,0x0F,0xA3,0x09,0xF4,0x02,0x81,0x37,0x03,0x45,
+0x34,0x03,0x01,0x44,0xD9,0x39,0x11,0x47,0x83,0xC7,0x24,0x03,0x13,0x75,0xF4,0x0F,
+0xB3,0xD7,0x87,0x40,0x85,0x8B,0x99,0xCF,0xE7,0x00,0xA0,0x59,0x85,0x47,0x33,0x94,
+0x87,0x00,0x13,0x74,0xF4,0x0F,0x23,0x89,0x84,0x02,0xA2,0x40,0x12,0x44,0x82,0x44,
+0x31,0x01,0x82,0x80,0x05,0x04,0xE3,0x19,0xE4,0xFC,0xC5,0xBF,0xB7,0xF7,0x00,0x20,
+0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0xA1,0x8B,0x63,0x83,0x07,0x1C,0x13,0x01,
+0x81,0xFD,0x26,0xCE,0xB7,0x54,0x00,0x20,0x03,0xA6,0x04,0x01,0x06,0xD2,0x22,0xD0,
+0x83,0x07,0x86,0x07,0x26,0xC2,0x63,0xCC,0x07,0x10,0xB7,0xF7,0x00,0x20,0x13,0x87,
+0x87,0x68,0x03,0x47,0x97,0x03,0x93,0x87,0x87,0x68,0x85,0x46,0x3E,0xC4,0x63,0x80,
+0xE6,0x10,0x83,0x46,0xE6,0x16,0xE5,0xCE,0x83,0x47,0xF6,0x16,0xED,0xCB,0xB7,0xF7,
+0x00,0x20,0x13,0x87,0x87,0x6D,0x03,0x47,0x47,0x03,0x93,0x84,0x87,0x6D,0x13,0x77,
+0xF7,0x0F,0x65,0xC7,0x83,0x45,0x06,0x17,0x03,0x47,0x16,0x17,0x03,0xC6,0x44,0x03,
+0x22,0x07,0x4D,0x8F,0x21,0x06,0x0A,0x06,0x26,0x96,0x10,0x46,0x63,0x71,0xC7,0x0C,
+0xB3,0x86,0xE6,0x02,0x13,0x06,0x80,0x0C,0x13,0x04,0x40,0x06,0x33,0xD4,0x86,0x02,
+0xB3,0xD6,0xC6,0x02,0x3A,0x94,0x01,0x46,0xB3,0x87,0xE6,0x00,0x3E,0xC0,0x83,0xC5,
+0x44,0x03,0x83,0xC6,0x44,0x03,0x93,0xF5,0xF5,0x0F,0xA1,0x06,0x8A,0x06,0xA6,0x96,
+0x88,0x46,0x63,0x71,0x85,0x0A,0x2A,0xCC,0x2E,0xCA,0x3A,0xC8,0x32,0xC6,0xEF,0xC0,
+0xCF,0xCC,0x62,0x45,0xD2,0x45,0x42,0x47,0x32,0x46,0xA2,0x47,0x83,0xC6,0x47,0x00,
+0x93,0xF6,0xF6,0x0F,0xFD,0xDA,0x2A,0xCC,0x2E,0xCA,0x3A,0xC8,0x32,0xC6,0x97,0x80,
+0x00,0xE0,0xE7,0x80,0x00,0x27,0x83,0xC6,0x44,0x03,0x42,0x47,0x32,0x46,0xA1,0x06,
+0x8A,0x06,0xA6,0x96,0x94,0x46,0xD2,0x45,0x62,0x45,0x63,0xF8,0xE6,0x00,0x63,0x76,
+0xE5,0x00,0x83,0xC6,0x44,0x03,0x63,0x8C,0xD5,0x02,0x83,0xC6,0x44,0x03,0xA1,0x06,
+0x8A,0x06,0xA6,0x96,0x94,0x46,0x63,0xF1,0x86,0x04,0x63,0x7F,0x85,0x02,0x03,0xC3,
+0x44,0x03,0x81,0x46,0x63,0x9B,0x65,0x02,0x92,0x47,0x93,0x06,0x16,0x00,0x93,0xF6,
+0xF6,0x0F,0x03,0xA3,0x07,0x01,0x03,0x43,0xF3,0x16,0x63,0x60,0x66,0x02,0x92,0x50,
+0x02,0x54,0xF2,0x44,0x13,0x01,0x81,0x02,0x82,0x80,0x83,0x45,0xA6,0x07,0x03,0x47,
+0xB6,0x07,0x29,0xBF,0x01,0x46,0x41,0xB7,0x81,0x46,0x03,0xC6,0x44,0x03,0x82,0x47,
+0x21,0x06,0x0A,0x06,0x26,0x96,0x10,0x46,0x63,0x70,0xF6,0x02,0x63,0x7E,0xF5,0x00,
+0x03,0xC6,0x44,0x03,0x63,0x9A,0xC5,0x00,0x92,0x47,0x03,0xA6,0x07,0x01,0x03,0x46,
+0xF6,0x16,0x05,0x82,0xE3,0xFD,0xC6,0xFA,0x03,0xC6,0x44,0x03,0x05,0x45,0x3A,0xC8,
+0x13,0x76,0xF6,0x0F,0x36,0xC6,0xA3,0x89,0xC4,0x02,0x8D,0x33,0x03,0xC5,0x34,0x03,
+0x97,0x80,0x00,0xE0,0xE7,0x80,0x80,0xC8,0xB7,0x57,0x00,0x20,0x03,0xA6,0x47,0x01,
+0x05,0x65,0x13,0x05,0x05,0x80,0x4C,0x42,0xB2,0x46,0x42,0x47,0xC9,0x8D,0x4C,0xC2,
+0x4C,0x42,0x7D,0x75,0x13,0x05,0xF5,0x7F,0xE9,0x8D,0x4C,0xC2,0x36,0x86,0xC1,0xBD,
+0x82,0x80,0xB7,0x57,0x00,0x20,0x03,0xA7,0x07,0x01,0x83,0x07,0x87,0x07,0x63,0xCD,
+0x07,0x1A,0x37,0xF6,0x00,0x20,0x93,0x07,0xC6,0x2D,0x83,0xC7,0xF7,0x08,0x13,0x06,
+0xC6,0x2D,0xA1,0x8B,0x63,0x82,0x07,0x1A,0x83,0x47,0xE6,0x08,0x93,0xF7,0xF7,0x0F,
+0x91,0xC7,0x83,0x47,0x07,0x15,0x89,0x8B,0x63,0x98,0x07,0x18,0x51,0x11,0x22,0xC2,
+0x37,0xF4,0x00,0x20,0x93,0x07,0x84,0x68,0x06,0xC4,0x26,0xC0,0x83,0xC7,0x97,0x03,
+0x05,0x47,0x13,0x04,0x84,0x68,0x63,0x17,0xF7,0x00,0x83,0x47,0xC4,0x03,0x09,0x47,
+0x63,0x78,0xF7,0x02,0xB7,0xF7,0x00,0x20,0x13,0x87,0x87,0x4E,0x83,0x45,0xC7,0x00,
+0x93,0x86,0x87,0x4E,0xB7,0x77,0x00,0x20,0x93,0x87,0x87,0xB7,0x99,0xCD,0x03,0x55,
+0x04,0x03,0x09,0x47,0x63,0x7D,0xA7,0x00,0x13,0x07,0x40,0x06,0x23,0x81,0xE7,0x00,
+0xA2,0x40,0x12,0x44,0x82,0x44,0x31,0x01,0x82,0x80,0x23,0x81,0x07,0x00,0x03,0xC7,
+0x27,0x00,0x19,0xC3,0x7D,0x17,0xDD,0xB7,0x03,0x47,0xD4,0x03,0x75,0xF3,0x37,0x57,
+0x00,0x20,0x03,0x27,0x07,0xFF,0x03,0x45,0x97,0x14,0x1D,0x47,0xE3,0x7A,0xA7,0xFC,
+0x03,0xC7,0xB6,0x00,0x11,0xE3,0xE9,0xF5,0xB7,0x56,0x00,0x20,0x83,0xC5,0x66,0x3F,
+0x85,0x46,0xE3,0xEF,0xB6,0xFA,0xB7,0x66,0x00,0x20,0x93,0x86,0x46,0x7E,0x83,0xC6,
+0x56,0x36,0x93,0xF6,0xF6,0x0F,0x91,0xE6,0xB7,0xF6,0x00,0x20,0x83,0xC6,0x86,0x4D,
+0xC5,0xF2,0xB7,0xF4,0x00,0x20,0x93,0x84,0x84,0x6D,0x01,0xCB,0x83,0xC5,0x84,0x03,
+0x85,0x46,0x63,0xFA,0xB6,0x0A,0x23,0x8C,0x04,0x02,0x03,0xC5,0x44,0x03,0x83,0xC6,
+0x37,0x00,0x93,0x05,0x30,0x06,0x05,0x05,0x05,0x89,0x63,0xE5,0xD5,0x00,0x85,0x06,
+0xA3,0x81,0xD7,0x00,0x83,0xC6,0x94,0x03,0x89,0xC6,0xA3,0x8C,0x04,0x02,0xA3,0x81,
+0x07,0x00,0x85,0x66,0x93,0x86,0xE6,0x69,0xB3,0x06,0xD5,0x02,0xB7,0x75,0x00,0x20,
+0x93,0x85,0x05,0xD8,0x33,0x37,0xE0,0x00,0x05,0x07,0xAE,0x96,0x83,0xC5,0x96,0x14,
+0xBD,0x46,0x63,0xFF,0xB6,0x00,0x83,0xC7,0x37,0x00,0x63,0xF1,0xF6,0x06,0x83,0x56,
+0x66,0x0A,0x1C,0x4C,0x33,0x07,0xD7,0x02,0xE3,0xE4,0xE7,0xF2,0x23,0x2C,0x04,0x00,
+0x81,0x45,0x97,0x80,0x00,0xE0,0xE7,0x80,0x80,0xB9,0x85,0x47,0x23,0x0C,0xF4,0x02,
+0xEF,0xC0,0xAF,0xA3,0x83,0x47,0x44,0x00,0x93,0xF7,0xF7,0x0F,0xE5,0xDF,0x01,0x45,
+0xEF,0xB0,0x5F,0x96,0x05,0x45,0xEF,0xB0,0xFF,0x95,0xEF,0xB0,0xFF,0x82,0xEF,0xE0,
+0x9F,0xFC,0x03,0xC5,0x44,0x03,0x85,0x45,0x97,0x80,0x00,0xE0,0xE7,0x80,0x20,0xB6,
+0x23,0x0C,0x04,0x02,0xF1,0xBD,0x23,0x8C,0xD4,0x02,0xD9,0xBD,0x18,0x4C,0x93,0x07,
+0x30,0x1F,0xE3,0xE7,0xE7,0xFA,0xE9,0xB5,0x82,0x80,0xB7,0xF7,0x00,0x20,0x93,0x87,
+0x87,0x68,0x83,0xC7,0x97,0x03,0x93,0xF7,0xF7,0x0F,0x63,0x9C,0x07,0x14,0xB7,0xF7,
+0x00,0x20,0x93,0x87,0xC7,0x2D,0x83,0xC7,0xF7,0x08,0xA1,0x8B,0x63,0x83,0x07,0x14,
+0x31,0x11,0x06,0xC8,0x22,0xC6,0x26,0xC4,0xB7,0xF7,0x00,0x20,0x93,0x84,0x87,0x6D,
+0x03,0xC4,0x44,0x04,0x97,0x80,0x00,0xE0,0xE7,0x80,0xA0,0xF7,0x03,0xC7,0xC4,0x06,
+0x01,0xC7,0x7D,0x17,0x23,0x86,0xE4,0x06,0x03,0xC7,0x74,0x06,0x63,0x09,0x07,0x10,
+0xB7,0x56,0x00,0x20,0x83,0xA5,0x06,0x01,0x03,0xC7,0x45,0x15,0x09,0x8B,0x61,0xE3,
+0x03,0xC7,0x64,0x06,0x03,0xC5,0x44,0x04,0x90,0x54,0x05,0x07,0x06,0x07,0x63,0x55,
+0xE5,0x02,0x03,0xC7,0xB5,0x07,0x03,0xC5,0xA5,0x07,0x22,0x07,0x49,0x8F,0x06,0x07,
+0x63,0x7F,0xC7,0x08,0x03,0xC7,0x15,0x17,0x03,0xC5,0x05,0x17,0xCC,0x54,0x22,0x07,
+0x49,0x8F,0x06,0x07,0x63,0x75,0xB7,0x08,0x03,0xC7,0x24,0x04,0xCC,0x54,0x32,0xC2,
+0x05,0x07,0x05,0x8B,0x23,0x81,0xE4,0x04,0xA3,0x80,0x04,0x04,0x23,0x82,0x04,0x04,
+0x2E,0xC0,0x97,0x80,0x00,0xE0,0xE7,0x80,0xC0,0xEF,0x03,0xC7,0x44,0x04,0x21,0xCB,
+0x88,0x54,0x12,0x46,0x82,0x45,0xB7,0x56,0x00,0x20,0x63,0x71,0xC5,0x02,0x03,0xA6,
+0x06,0x01,0x03,0x47,0xB6,0x07,0x03,0x43,0xA6,0x07,0x0D,0x46,0x22,0x07,0x33,0x67,
+0x67,0x00,0x33,0x07,0xC7,0x02,0x05,0x87,0x63,0x63,0xE5,0x02,0xD0,0x54,0x63,0x79,
+0xB6,0x04,0x83,0xA6,0x06,0x01,0x03,0xC7,0x16,0x17,0x83,0xC5,0x06,0x17,0x8D,0x46,
+0x22,0x07,0x4D,0x8F,0x33,0x07,0xD7,0x02,0x05,0x87,0x63,0x7B,0xC7,0x02,0x97,0x70,
+0x00,0xE0,0xE7,0x80,0xE0,0x40,0x13,0x07,0x80,0xFC,0x23,0x86,0xE4,0x06,0x03,0xC7,
+0x44,0x04,0x11,0xCB,0xE3,0x12,0x87,0xF0,0x7D,0x14,0x13,0x74,0xF4,0x0F,0x23,0x82,
+0x84,0x04,0xE3,0x1B,0x04,0xEE,0xC2,0x40,0x32,0x44,0xA2,0x44,0x51,0x01,0x82,0x80,
+0x03,0xC7,0x24,0x04,0xA3,0x80,0x04,0x04,0x05,0x07,0x05,0x8B,0x23,0x81,0xE4,0x04,
+0x97,0x80,0x00,0xE0,0xE7,0x80,0xE0,0xE5,0x23,0x82,0x04,0x04,0xC9,0xB7,0xFD,0x3C,
+0xE5,0xBF,0x82,0x80,0x00,0x20,0x00,0x40,0x00,0x00,0x00,0x40,0x80,0x6D,0x00,0x20,
+0xCE,0x6E,0x00,0x20,0x04,0x05,0x00,0x06,0x01,0x02,0x03,0x00,0x00,0x00,0x01,0x00,
+0x20,0xDD,0x00,0x20,0x30,0xF1,0x00,0x20,0x8E,0x79,0x00,0x20,0x80,0x00,0x00,0x20,
+0x00,0x80,0x00,0x40,0x00,0x50,0x00,0x40,0x00,0x30,0x00,0x40,0x00,0x00,0x00,0x20,
+0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0xFF,0x00,0x00,0x00,0xE8,0x78,0x00,0x20,
+0x0A,0x00,0x00,0x00,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x0D,0x0E,0x0F,0x10,0x11,0x12,
+0x01,0x02,0x03,0x04,0x05,0x06,0x18,0x17,0x16,0x15,0x14,0x13,0x00,0x04,0x31,0x04,
+0x04,0x32,0x08,0x05,0x33,0x0D,0x04,0x34,0x11,0x05,0x46,0x16,0x02,0x54,0x18,0x03,
+0x65,0x1B,0x02,0x44,0x1D,0x02,0x34,0x1F,0x04,0x65,0x23,0x03,0x46,0x26,0x05,0x32,
+0x2B,0x04,0x33,0x2F,0x05,0x46,0x34,0x06,0x32,0x3A,0x05,0x33,0x3F,0x03,0x65,0x00,
+0x14,0x05,0x14,0x05,0x05,0x14,0x05,0x14,0x01,0x0A,0x0F,0x15,0x02,0x0B,0x0F,0x15,
+0x02,0x0B,0x10,0x16,0x10,0x0A,0x15,0x04,0x18,0x10,0x17,0x13,0x18,0x0F,0x17,0x02,
+0x16,0x10,0x01,0x10,0x16,0x10,0x13,0x05,0x14,0x05,0x14,0x04,0x0E,0x15,0x03,0x08,
+0x10,0x16,0x10,0x0A,0x16,0x12,0x05,0x14,0x05,0x14,0x04,0x09,0x10,0x15,0x03,0x02,
+0x10,0x02,0x00,0x00,0x24,0x20,0x21,0x22,0x23,0x30,0x31,0x32,0x33,0x34,0x46,0x54,
+0x65,0x44,0x00,0x00,0x0C,0x05,0xB5,0x01,
+};
+
+#ifdef firmware_chain_header
+static struct bin_code_chain   fw_upd_data = {upd_data, sizeof(upd_data), firmware_chain_header};
+#else
+static struct bin_code_chain   fw_upd_data = {upd_data, sizeof(upd_data), NULL};
+#endif
+
+#undef  firmware_chain_header
+#define firmware_chain_header  &fw_upd_data
diff --git a/drivers/input/touchscreen/chsc5xxx/head_def.h b/drivers/input/touchscreen/chsc5xxx/head_def.h
new file mode 100644
index 000000000000..4d54f198e635
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/head_def.h
@@ -0,0 +1,323 @@
+#ifndef __HEAD_DEFINE__
+#define __HEAD_DEFINE__
+#include <linux/time.h>
+#include <linux/rtc.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include "platform.h"
+
+#define LOG_LEVEL_E              KERN_EMERG
+#define LOG_LEVEL_D              KERN_EMERG /*KERN_DEBUG*/
+#define MODULE_NAME              "CHSC"
+#define CHSC_DRIVER_VERSION      "v3.7.3"
+
+#define MAX_CORE_WRITE_LEN       128
+
+#if SEMI_TOUCH_APK_NODE_EN
+#define MAX_IO_BUFFER_LEN        512
+#define MAX_TX_RX_BUFF_LEN       (3 * 1024)
+#else
+#define MAX_IO_BUFFER_LEN        128
+#define MAX_TX_RX_BUFF_LEN       4
+#endif
+
+extern struct sm_touch_dev st_dev;
+
+#define HEAD "[%s] function = %-30s, line = %-4d: "
+#define kernel_log_e(fmt, ...)   printk(LOG_LEVEL_E HEAD fmt, MODULE_NAME, __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define kernel_log_d(fmt, ...)   printk(LOG_LEVEL_D HEAD fmt, MODULE_NAME, __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define check_return_if_fail(x, complete)  do{ if(IS_ERR((void*)(long)x)) { kernel_log_e("err code = %ld\r\n", (long)x); if(complete > 0) ((de_init_fun)complete)(); return PTR_ERR((void*)(long)x); }}while(0)
+#define check_return_if_zero(x, complete)  do{ if(NULL == (void*)(long)x) { kernel_log_e("err code = %d\r\n", -ENOMEM);  if(complete > 0) ((de_init_fun)complete)(); return -ENOMEM; }}while(0)
+#define check_break_if_fail(x, complete)   { if(IS_ERR((void*)(long)x)) { kernel_log_e("err code = %ld\r\n", PTR_ERR((void*)(long)x));  if(complete > 0) ((de_init_fun)complete)(); break; }}
+
+typedef void (*de_init_fun)(void);
+
+#if TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5472)
+#define TP_CMD_BUFF_ADDR             0x20000000
+#define TP_RSP_BUFF_ADDR             0x20000000
+#define TP_WR_BUFF_ADDR              0x20008000
+#define TP_RD_BUFF_ADDR              0x20008400
+#define TP_HOLD_MCU_ADDR             0x40008004
+#define TP_AUTO_FEED_ADDR            0x4000800c
+#define TP_REMAP_MCU_ADDR            0x40008008
+#define TP_RELEASE_MCU_ADDR          0x40008004
+#define TP_HOLD_MCU_VAL              0x4000005c
+#define TP_AUTO_FEED_VAL             0x0000005a
+#define TP_REMAP_MCU_VAL             0x00000100
+#define TP_RELEASE_MCU_VAL           0xc000005c
+#define CFG_ROM_ADDRESS              (96 * 1024)
+#define VID_PID_BACKUP_ADDR          (100 * 1024 + 0X10)
+#define ADC_NUM_MAX                  72
+#elif TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5816)
+#define TP_CMD_BUFF_ADDR             0x20000000
+#define TP_RSP_BUFF_ADDR             0x20000000
+#define TP_WR_BUFF_ADDR              0x20002000
+#define TP_RD_BUFF_ADDR              0x20002400
+#define TP_HOLD_MCU_ADDR             0x40007000
+#define TP_AUTO_FEED_ADDR            0x40007010
+#define TP_REMAP_MCU_ADDR            0x40007000
+#define TP_RELEASE_MCU_ADDR          0x40007000
+#define TP_HOLD_MCU_VAL              0x12044000
+#define TP_AUTO_FEED_VAL             0x0000925a
+#define TP_REMAP_MCU_VAL             0x12044002
+#define TP_RELEASE_MCU_VAL           0x12044003
+#define CFG_ROM_ADDRESS              0
+#define VID_PID_BACKUP_ADDR          (40 * 1024 + 0X10)
+#define ADC_NUM_MAX                  16
+#endif
+
+/*ctp work staus*/
+#define CTP_POINTING_WORK            0x00000000
+#define CTP_READY_UPGRADE            (1 << 1)
+#define CPT_UPGRAD_RUNING            (1 << 2)
+#define CTP_SUSPEND_GATE             (1 << 16)
+#define CTP_GUESTURE_GATE            (1 << 17)
+#define CTP_PROXIMITY_GATE           (1 << 18)
+#define CTP_GLOVE_GATE               (1 << 19)
+#define CTP_ORIENTATION_GATE         (1 << 20)
+#define ack_pointing_action(x)       (0 == (x & 0x1ffff))
+#define set_status_pointing(x)       do{((x) = CTP_POINTING_WORK); kernel_log_d("set status pointing...\n");}while(0)
+#define set_status_ready_upgrade(x)  do{((x) = CTP_READY_UPGRADE); kernel_log_d("set status before reset tp...\n");}while(0)
+#define set_status_upgrade_run(x)    do{((x) = CPT_UPGRAD_RUNING); kernel_log_d("set status upgrade running...\n");}while(0)
+
+#define is_proximity_activate(x)     (((x) & CTP_PROXIMITY_GATE) > 0)
+#define enter_proximity_gate(x)      do{((x) |= CTP_PROXIMITY_GATE); kernel_log_d("enter proximity gate...\n");}while(0)
+#define leave_proximity_gate(x)      do{((x) &= (~CTP_PROXIMITY_GATE)); kernel_log_d("leave proximity gate...\n");}while(0)
+
+#define is_suspend_activate(x)       (((x) & CTP_SUSPEND_GATE) > 0)
+#define enter_suspend_gate(x)        do{((x) |= CTP_SUSPEND_GATE); kernel_log_d("enter suspend gate...\n");}while(0)
+#define leave_suspend_gate(x)        do{((x) &= (~CTP_SUSPEND_GATE)); kernel_log_d("leave suspend gate...\n");}while(0)
+
+#define is_guesture_activate(x)      (((x) & CTP_GUESTURE_GATE) > 0)
+#define enter_guesture_gate(x)       do{((x) |= CTP_GUESTURE_GATE); kernel_log_d("enter guesture gate...\n");}while(0)
+#define leave_guesture_gate(x)       do{((x) &= (~CTP_GUESTURE_GATE)); kernel_log_d("leave guesture gate...\n");}while(0)
+
+#define is_glove_activate(x)         (((x) & CTP_GLOVE_GATE) > 0)
+#define enter_glove_gate(x)          do{((x) |= CTP_GLOVE_GATE); kernel_log_d("enter glove gate...\n");}while(0)
+#define leave_glove_gate(x)          do{((x) &= (~CTP_GLOVE_GATE)); kernel_log_d("leave glove gate...\n");}while(0)
+
+#define is_orientation_activate(x)   (((x) & CTP_ORIENTATION_GATE) > 0)
+#define enter_orientation_gate(x)    do{((x) |= CTP_ORIENTATION_GATE); kernel_log_d("orientation horizontal...\n");}while(0)
+#define leave_orientation_gate(x)    do{((x) &= (~CTP_ORIENTATION_GATE)); kernel_log_d("orientation vertical...\n");}while(0)
+
+/*ctp function switch*/ 
+//#define SUSPEND_FUNCTION_EN          (1 << 0)
+#define GUESTURE_FUNCTION_EN         (1 << 1)
+#define PROXIMITY_FUNCTION_EN        (1 << 2)
+#define GLOVE_FUNCTION_EN            (1 << 3)
+#define ESD_FUNCTION_EN              (1 << 4)
+#define open_proximity_function(x)   do{((x) |= PROXIMITY_FUNCTION_EN); kernel_log_d("open proximity function...\n");}while(0)
+#define close_proximity_function(x)  do{((x) &= (~PROXIMITY_FUNCTION_EN)); kernel_log_d("close proximity function...\n");}while(0)
+#define is_proximity_function_en(x)  (((x) & PROXIMITY_FUNCTION_EN) > 0)
+#define open_guesture_function(x)    do{((x) |= GUESTURE_FUNCTION_EN); kernel_log_d("open guesture function...\n");}while(0)
+#define close_guesture_function(x)   do{((x) &= (~GUESTURE_FUNCTION_EN)); kernel_log_d("close guesture function...\n");}while(0)
+#define is_guesture_function_en(x)   (((x) & GUESTURE_FUNCTION_EN) > 0)
+#define open_glove_function(x)       do{((x) |= GLOVE_FUNCTION_EN); kernel_log_d("open glove function...\n");}while(0)
+#define close_glove_function(x)      do{((x) &= (~GLOVE_FUNCTION_EN)); kernel_log_d("close glove function...\n");}while(0)
+#define is_glove_function_en(x)      (((x) & GLOVE_FUNCTION_EN) > 0)
+#define open_esd_function(x)         do{((x) |= ESD_FUNCTION_EN); kernel_log_d("open esd function...\n");}while(0)
+#define close_esd_function(x)        do{((x) &= (~ESD_FUNCTION_EN)); kernel_log_d("close esd function...\n");}while(0)
+#define is_esd_function_en(x)        (((x) & ESD_FUNCTION_EN) > 0)
+
+enum reset_action { no_report_after_reset = 0, do_report_after_reset = 1 };
+enum startup_action { only_sp_check = 0, check_backup_if_fail = 1 };
+
+enum SEMI_DRV_ERR 
+{
+    SEMI_DRV_ERR_OK = 0,
+    SEMI_DRV_ERR_HAL_IO,
+    SEMI_DRV_ERR_NO_INIT,
+    SEMI_DRV_ERR_TIMEOUT,
+    SEMI_DRV_ERR_CHECKSUM,
+    SEMI_DRV_ERR_RESPONSE,
+    SEMI_DRV_INVALID_CMD,
+    SEMI_DRV_INVALID_PARAM,
+    SEMI_DRV_ERR_NOT_MATCH,
+};
+
+enum CMD_TYPE_ID
+{
+    CMD_NA              = 0x0f,
+    CMD_IDENTITY        = 0x01,
+    CMD_CTP_SSCAN       = 0x02,
+    CMD_CTP_IOCTL       = 0x03,
+    CMD_CTP_RST         = 0x10,
+    CMD_SHORT_TST       = 0x21,
+    CMD_CHK_CFG         = 0x26,
+    CMD_DATA_SYNC       = 0x28,
+    CMD_MEM_WR          = 0x30,
+    CMD_MEM_RD          = 0x31,
+    CMD_BSPR_RW         = 0x37,
+};
+
+struct hal_io_packet
+{
+    unsigned int   io_register;
+    unsigned char  io_buffer[MAX_IO_BUFFER_LEN];
+    unsigned short io_length;  
+    void*          hal_adapter;
+};
+
+struct semi_touch_init_d
+{
+    unsigned int rawdata_addr;
+    unsigned int differ_addr;
+    unsigned int base_addr;
+    unsigned int touch_addr;
+    bool initialize_ok;
+    bool dog_feed_flag;
+    unsigned int ctp_run_status;
+    unsigned int custom_function_en;
+
+    int vkey_num;
+    int vkey_evt_arr[MAX_VKEY_NUMBER];
+    int vkey_dim_map[MAX_VKEY_NUMBER][4];
+};
+
+struct chsc_updfile_header {
+    unsigned int sig;
+    unsigned int extend;
+    unsigned int n_cfg;
+    unsigned int match;
+    unsigned int len_cfg;
+    unsigned int len_boot;
+    unsigned int vlist[1];
+};
+
+typedef int (*hal_write_bytes)(struct hal_io_packet* ppacket);
+typedef int (*hal_read_bytes)(struct hal_io_packet* ppacket);
+struct hal_io_function
+{
+    hal_write_bytes hal_write_fun;
+    hal_read_bytes  hal_read_fun;
+    struct mutex    bus_lock;
+    void* hal_param;
+};
+
+#define ASYN_WORK_MAX      3
+#define typename(x)        #x
+enum work_queue_t { work_queue_interrupt, work_queue_custom_work, work_queue_max };
+
+struct work_wraper
+{
+    unsigned long uid;
+    struct delayed_work  work;
+};
+
+struct work_quene_wraper
+{
+    int new_work_idx;
+    struct workqueue_struct *work_queue[work_queue_max];
+    struct work_wraper works_list[ASYN_WORK_MAX];
+};
+
+
+typedef struct sm_touch_dev
+{
+    struct device_node *nd;
+    struct input_dev *input;
+    struct i2c_client *client;
+    struct semi_touch_init_d stc;
+    struct hal_io_function hal;
+    void   *chsc_nodes_dir;
+    struct proc_dir_entry* proc_entry;
+    struct work_quene_wraper asyn_work;
+    int int_pin;
+    int rst_pin;
+    unsigned short fw_ver;
+    unsigned int vid_pid;    //0xVID_PID_CFGVER
+    //int irq_no;
+    void *pv;
+    struct gpio_desc *pwron;
+}sm_touch_dev, *psm_touch_dev;
+
+//cammand struct for mcap
+struct m_ctp_cmd_std_t
+{
+    unsigned short chk; // 16 bit checksum
+    unsigned short d0;  //data 0
+    unsigned short d1;  //data 1
+    unsigned short d2;  //data 2
+    unsigned short d3;  //data 3
+    unsigned short d4;  //data 4
+    unsigned short d5;  //data 5
+
+    unsigned char  id;   //offset 15
+    unsigned char  tag;  //offset 16 
+};
+
+//response struct for mcap
+struct m_ctp_rsp_std_t
+{
+    unsigned short chk; // 16 bit checksum
+    unsigned short d0;  //data 0
+    unsigned short d1;  //data 1
+    unsigned short d2;  //data 2
+    unsigned short d3;  //data 3
+    unsigned short d4;  //data 4
+    unsigned short d5;  //data 5
+
+    unsigned char  cc;  //offset 15
+    unsigned char  id;  //offset 16 
+};
+
+struct sync_context
+{
+    atomic_t atomic_sync_flag;
+
+    unsigned int sync_addr;
+    unsigned short sync_size;
+};
+
+struct apk_complex_data
+{
+    unsigned char stm_cmd_buffer[16];
+    unsigned char stm_rsp_buffer[16];
+    unsigned char stm_rdy_buffer[4];
+    unsigned char stm_ctp_buffer[4];
+    unsigned char stm_txrx_buffer[MAX_TX_RX_BUFF_LEN];
+    unsigned short op_type;
+    unsigned long  op_args;
+    struct sync_context sync;
+};
+
+union rpt_point_t
+{
+    struct 
+    {
+        unsigned char x_l8;
+        unsigned char y_l8;
+        unsigned char z;
+        unsigned char x_h4:4;
+        unsigned char y_h4:4;
+        unsigned char id:4;
+        unsigned char event:4;
+    }rp;
+    unsigned char data[5];
+};
+
+typedef struct _rpt_content_t 
+{
+    unsigned char act;
+    unsigned char num;
+    union rpt_point_t points[15];
+}rpt_content_t;
+
+typedef struct _img_header_t 
+{
+    unsigned short fw_ver;
+    unsigned short resv;
+    unsigned int sig;
+    unsigned int vid_pid;
+    unsigned short raw_offet;
+    unsigned short dif_offet;
+}img_header_t;
+
+struct bin_code_chain
+{
+    const unsigned char* bin_code_addr;
+    unsigned int bin_code_len;
+    struct bin_code_chain* next;
+};
+
+#endif //__HEAD_DEFINE__
diff --git a/drivers/input/touchscreen/chsc5xxx/i2c_communication.c b/drivers/input/touchscreen/chsc5xxx/i2c_communication.c
new file mode 100644
index 000000000000..c9341b63ee92
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/i2c_communication.c
@@ -0,0 +1,139 @@
+#include <linux/dma-mapping.h>
+#include <linux/vmalloc.h>
+#include <linux/i2c.h>
+#include "semi_touch_interface.h"
+
+#define HAL_MAX_TRY         1
+
+#if SEMI_TOUCH_DMA_TRANSFER
+
+#define DMA_BUFFER_LENGTH                   (MAX_IO_BUFFER_LEN + 4)
+unsigned char *dma_buff_virtual_addr = NULL;
+dma_addr_t dma_buff_physical_addr = 0;
+
+int i2c_write_bytes(struct hal_io_packet* ppacket)
+{
+    int ret, retry;
+    struct i2c_client* client = ppacket->hal_adapter;
+    
+    memcpy(dma_buff_virtual_addr, (unsigned char*)ppacket, ppacket->io_length + sizeof(int));
+    client->addr = ((client->addr & I2C_MASK_FLAG) | I2C_DMA_FLAG);
+    for(retry = 0; retry < HAL_MAX_TRY; retry++)
+    {
+        ret = i2c_master_send(client, (unsigned char *)dma_buff_physical_addr, ppacket->io_length + sizeof(int));
+        if(ppacket->io_length + sizeof(int) == ret) break;
+    }
+    client->addr = client->addr & I2C_MASK_FLAG & (~ I2C_DMA_FLAG);
+    
+    return ret;
+}
+
+int i2c_read_bytes(struct hal_io_packet* ppacket)
+{
+    int ret, retry;
+    struct i2c_client* client = ppacket->hal_adapter;
+    
+    memcpy(dma_buff_virtual_addr, (unsigned char*)ppacket, sizeof(int));
+    client->addr = ((client->addr & I2C_MASK_FLAG) | I2C_DMA_FLAG);
+    for(retry = 0; retry < HAL_MAX_TRY; retry++)
+    {
+        ret = i2c_master_send(client, (unsigned char *)dma_buff_physical_addr, sizeof(int));
+        if(sizeof(int) == ret) break;
+    }
+    client->addr = client->addr & I2C_MASK_FLAG & (~ I2C_DMA_FLAG);
+    
+    client->addr = ((client->addr & I2C_MASK_FLAG) | I2C_DMA_FLAG);
+    for(retry = 0; retry < HAL_MAX_TRY; retry++)
+    {
+        ret = i2c_master_recv(client, (unsigned char *)dma_buff_physical_addr, ppacket->io_length);
+        if(ppacket->io_length == ret) break;
+    }
+    memcpy(ppacket->io_buffer, dma_buff_virtual_addr, ppacket->io_length);
+    client->addr = client->addr & I2C_MASK_FLAG & (~ I2C_DMA_FLAG);
+    
+    return ret;
+}
+
+int semi_touch_i2c_init(void)
+{
+    if (NULL == dma_buff_virtual_addr) 
+    {
+        st_dev.input->dev.coherent_dma_mask = DMA_BIT_MASK(32);
+        dma_buff_virtual_addr = (u8 *)dma_alloc_coherent(&st_dev.input->dev, DMA_BUFFER_LENGTH, &dma_buff_physical_addr, GFP_KERNEL);
+
+        if (!dma_buff_virtual_addr) 
+        {
+            kernel_log_d("Allocate DMA I2C Buffer failed!!");
+            return -ENOMEM;
+        }
+    }
+
+    return 0;
+}
+
+int semi_touch_i2c_i2c_exit(void)
+{
+    if (dma_buff_virtual_addr) 
+    {
+        dma_free_coherent(NULL, DMA_BUFFER_LENGTH, dma_buff_virtual_addr, dma_buff_physical_addr);
+        dma_buff_virtual_addr = NULL;
+        dma_buff_physical_addr = 0;
+        kernel_log_d("Allocated DMA I2C Buffer release!!");
+    }
+
+    return 0;
+}
+
+#else
+int i2c_write_bytes(struct hal_io_packet* ppacket)
+{
+    int ret, retry;
+    struct i2c_msg msg;
+    struct i2c_client* client = ppacket->hal_adapter;
+
+    msg.addr  = client->addr;
+    msg.flags = 0;
+    msg.buf = (unsigned char*)ppacket;
+    msg.len = ppacket->io_length + sizeof(int);
+
+    for(retry = 0; retry < HAL_MAX_TRY; retry++)
+    {
+        ret = i2c_transfer(client->adapter, &msg, 1);
+        if(1 == ret) break;
+    }
+
+    return ret;
+}
+int i2c_read_bytes(struct hal_io_packet* ppacket)
+{
+    int ret, retry;
+    struct i2c_msg msg[2];
+    struct i2c_client* client = ppacket->hal_adapter;
+
+    msg[0].addr  = client->addr;
+    msg[0].flags = 0;
+    msg[0].buf = (unsigned char*)ppacket;
+    msg[0].len = sizeof(int);
+    msg[1].addr  = client->addr;
+    msg[1].flags = I2C_M_RD;
+    msg[1].buf = ppacket->io_buffer;
+    msg[1].len = ppacket->io_length;
+
+    for(retry = 0; retry < HAL_MAX_TRY; retry++)
+    {
+        ret = i2c_transfer(client->adapter, msg, 2);
+        if(2 == ret) break;
+    }
+
+    return ret;
+}
+int semi_touch_i2c_init(void)
+{
+    return 0;
+}
+int semi_touch_i2c_i2c_exit(void)
+{
+    return 0;
+}
+#endif //SEMI_TOUCH_DMA_TRANSFER
+
diff --git a/drivers/input/touchscreen/chsc5xxx/idmx_core.c b/drivers/input/touchscreen/chsc5xxx/idmx_core.c
new file mode 100644
index 000000000000..343879dce6e9
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/idmx_core.c
@@ -0,0 +1,444 @@
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/cdev.h>
+//#include <linux/ide.h>
+#include <linux/io.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/irq.h>
+#include <linux/of_irq.h>
+#include <linux/i2c.h>
+
+#include "semi_touch_interface.h"
+
+#define semi_io_free(pin)                   do{ if(gpio_is_valid(pin)) gpio_free(pin); }while(0)
+
+static const struct of_device_id sm_of_match[] = 
+{
+    {.compatible = "chipsemi,chsc_cap_touch", },
+    {}
+};
+
+static const struct i2c_device_id sm_ts_id[] = 
+{
+    {CHSC_DEVICE_NAME, 0},
+    {}
+};
+
+int semi_touch_get_int(void)
+{
+    int int_gpio_no = 0;
+    struct device_node* of_node = NULL;
+    //of_node = of_find_node_by_name(NULL, "smtouch");
+    //check_return_if_zero(of_node, NULL);
+    of_node = of_find_matching_node(NULL, sm_of_match);
+    check_return_if_zero(of_node, NULL);
+
+    int_gpio_no = of_get_named_gpio(of_node, "chipsemi,int-gpio", 0);
+    check_return_if_fail(int_gpio_no, NULL);
+
+    gpio_request(int_gpio_no, "chsc_int_pin");
+
+    return int_gpio_no;
+
+    //return of_get_named_gpio(of_node, "chipsemi,int-gpio", 0);
+}
+
+int semi_touch_get_rst(void)
+{
+    int rst_gpio_no = 0;
+    struct device_node* of_node = NULL;
+    //of_node = of_find_node_by_name(NULL, "smtouch");
+    //check_return_if_zero(of_node, NULL);
+    of_node = of_find_matching_node(NULL, sm_of_match);
+    check_return_if_zero(of_node, NULL);
+
+    rst_gpio_no = of_get_named_gpio(of_node, "chipsemi,rst-gpio", 0);
+    check_return_if_fail(rst_gpio_no, NULL);
+
+    gpio_request(rst_gpio_no, "chsc_rst_pin");
+
+    return rst_gpio_no;
+}
+
+int semi_touch_get_irq(int rst_pin)
+{
+    int irq_no = 0;
+
+    gpiod_set_debounce(gpio_to_desc(rst_pin), 50);
+
+    irq_no = gpio_to_irq(rst_pin);
+
+    return irq_no;
+}
+
+/********************************************************************************************************************************/
+/*virtual key*/
+#if 0 == SEMI_TOUCH_VKEY_MAPPING
+struct kobject *sm_properties_kobj = NULL;
+static ssize_t virtual_keys_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{	
+    int index = 0, iter = 0;
+    char *vkey_buf = buf;
+    for(index = 0; (index < st_dev.stc.vkey_num) && (index < MAX_VKEY_NUMBER); index++)
+    {
+        iter += sprintf(vkey_buf + iter, "%s:%d:%d:%d:%d:%d%s", 
+                __stringify(EV_KEY), st_dev.stc.vkey_evt_arr[index],
+				st_dev.stc.vkey_dim_map[index][0], st_dev.stc.vkey_dim_map[index][1], 50, 50,
+                (index == st_dev.stc.vkey_num - 1) ? "\n" : ":");
+    }
+
+    return iter;
+}
+static struct kobj_attribute virtual_keys_attr = 
+{    
+    .attr = 
+        {
+            .name = "virtualkeys.chsc_cap_touch",        
+            .mode = S_IRUGO,    
+        },        
+    .show = &virtual_keys_show,
+};
+static struct attribute *properties_attrs[] = 
+{    
+    &virtual_keys_attr.attr,    
+    NULL
+};
+static struct attribute_group properties_attr_group = 
+{    
+    .attrs = properties_attrs,
+};
+
+int semi_touch_vkey_initialize(void)
+{
+    int ret = 0;    
+    sm_properties_kobj = kobject_create_and_add("board_properties", NULL);   
+    check_return_if_zero(sm_properties_kobj, NULL);
+
+    ret = sysfs_create_group(sm_properties_kobj, &properties_attr_group); 
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
+#else
+#define semi_touch_vkey_initialize()    0
+#endif  //SEMI_TOUCH_VKEY_MAPPING
+/********************************************************************************************************************************/
+/*proximity support*/
+#if SEMI_TOUCH_PROXIMITY_OPEN
+#include <linux/input.h>
+#define PROXIMITY_CLASS_NAME            "chsc_tpd"
+#define PROXIMITY_DEVICE_NAME           "device"
+
+/* default cmd interface(refer to sensor HAL):"/sys/class/chsc-tpd/device/proximity" */
+
+struct chsc_proximity
+{
+    struct class *proximity_cls;
+    struct device *proximity_dev;
+    struct input_dev *proximity_input;    
+};
+
+static struct chsc_proximity proximity_obj;
+
+int semi_touch_proximity_init(void)
+{
+    int ret = 0;
+
+    proximity_obj.proximity_cls = class_create(THIS_MODULE, PROXIMITY_CLASS_NAME);
+    check_return_if_fail(proximity_obj.proximity_cls, NULL);
+
+    proximity_obj.proximity_dev = device_create(proximity_obj.proximity_cls, NULL, 0, NULL, PROXIMITY_DEVICE_NAME);
+    check_return_if_fail(proximity_obj.proximity_cls, NULL);
+
+    proximity_obj.proximity_input = input_allocate_device();
+    check_return_if_zero(proximity_obj.proximity_input, NULL);
+
+    proximity_obj.proximity_input->name = "proximity_tp";
+    set_bit(EV_ABS, proximity_obj.proximity_input->evbit);
+    input_set_capability(proximity_obj.proximity_input, EV_ABS, ABS_DISTANCE);
+    input_set_abs_params(proximity_obj.proximity_input, ABS_DISTANCE, 0, 1, 0, 0);
+    ret = input_register_device(proximity_obj.proximity_input);
+    check_return_if_fail(ret, NULL);
+
+    open_proximity_function(st_dev.stc.custom_function_en);
+
+    return ret;
+}
+
+bool semi_touch_proximity_report(unsigned char proximity)
+{
+    if(is_proximity_function_en(st_dev.stc.custom_function_en))
+    {
+        input_report_abs(proximity_obj.proximity_input, ABS_DISTANCE, proximity);
+        input_mt_sync(proximity_obj.proximity_input);
+        input_sync(proximity_obj.proximity_input);
+    }
+
+    return true;
+}
+
+int semi_touch_proximity_stop(void)
+{
+    if(proximity_obj.proximity_input)
+    {
+        input_unregister_device(proximity_obj.proximity_input);
+        input_free_device(proximity_obj.proximity_input);
+    }
+    if(proximity_obj.proximity_dev)
+    {
+        device_destroy(proximity_obj.proximity_cls, 0);
+    }
+    if(proximity_obj.proximity_cls)
+    {
+        class_destroy(proximity_obj.proximity_cls);
+    }
+
+    return 0;
+}
+#endif
+
+int semi_touch_platform_variety(void)
+{
+    if(st_dev.int_pin) 
+    {
+        semi_io_free(st_dev.int_pin);
+    }
+        
+    if(st_dev.rst_pin)
+    {
+        semi_io_free(st_dev.rst_pin);
+    }
+
+#if 0 == SEMI_TOUCH_VKEY_MAPPING
+    if(NULL != sm_properties_kobj)
+    {
+        sysfs_remove_group(sm_properties_kobj, &properties_attr_group);
+        kobject_put(sm_properties_kobj);
+    }
+#endif
+
+    return 0;
+}
+/********************************************************************************************************************************/
+#if(!defined(CONFIG_ADF) && !defined(CONFIG_HAS_EARLYSUSPEND))
+static const struct dev_pm_ops semi_touch_dev_pm_ops = 
+{
+    .suspend = semi_touch_suspend_entry,
+    .resume = semi_touch_resume_entry,
+};
+#else
+static const struct dev_pm_ops semi_touch_dev_pm_ops = 
+{
+
+};
+#endif
+
+#if defined(CONFIG_ADF)
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#include <video/adf_notifier.h>
+struct notifier_block sm_fb_notify;
+static int semi_touch_fb_notifier_callback(struct notifier_block *self, unsigned long event, void *data)
+{
+    int *blank;
+    struct adf_notifier_event *evdata = data;
+    if(evdata && evdata->data && ADF_EVENT_BLANK == event && st_dev.client)
+    {
+        blank = evdata->data;
+        if(DRM_MODE_DPMS_ON == *blank)
+            semi_touch_resume_entry(&st_dev.client->dev);
+        else if(DRM_MODE_DPMS_OFF == *blank)
+            semi_touch_suspend_entry(&st_dev.client->dev);
+    }
+
+    return 0;
+}
+int semi_touch_work_done(void)
+{
+    int ret = 0;
+    ret = semi_touch_vkey_initialize();
+    check_return_if_fail(ret, NULL);
+    sm_fb_notify.notifier_call = semi_touch_fb_notifier_callback;
+    sm_fb_notify.priority = 500;
+    ret = adf_register_client(&sm_fb_notify);
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
+int semi_touch_resource_release(void)
+{
+    adf_unregister_client(&sm_fb_notify);
+    return semi_touch_platform_variety();
+}
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+#include <linux/earlysuspend.h>
+struct early_suspend esp;
+static void semi_touch_early_suspend(struct early_suspend* h)
+{
+    if(NULL == h) return;
+
+    semi_touch_suspend_entry(&st_dev.client->dev);
+}
+static void semi_touch_late_resume(struct early_suspend* h)
+{
+    if(NULL == h) return;
+
+    semi_touch_resume_entry(&st_dev.client->dev);
+}
+int semi_touch_work_done(void)
+{
+    ret = semi_touch_vkey_initialize();
+    check_return_if_fail(ret, NULL);
+
+    esp.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+    esp.suspend = semi_touch_early_suspend;
+    esp.resume = semi_touch_late_resume;
+    register_early_suspend(&esp);
+
+    return 0;
+}
+int semi_touch_resource_release(void)
+{
+    unregister_early_suspend(&esp);
+    return semi_touch_platform_variety();
+}
+#else
+int semi_touch_work_done(void)
+{
+    return 0;
+}
+int semi_touch_resource_release(void)
+{
+    return semi_touch_platform_variety();
+}
+#endif
+
+static int semi_touch_probe(struct i2c_client *client)
+{
+    int ret = 0;
+
+    ret = semi_touch_init(client);
+    if(-SEMI_DRV_ERR_HAL_IO == ret)
+    {
+        semi_touch_deinit(client);
+        check_return_if_fail(ret, NULL);
+    }
+
+    kernel_log_d("probe finished(result:%d) driver ver(%s)\r\n", ret, CHSC_DRIVER_VERSION);
+
+    return ret;
+}
+
+static void semi_touch_remove(struct i2c_client *client)
+{
+    int ret = 0;
+
+    ret = semi_touch_deinit(client);
+
+    return;
+}
+
+int semi_touch_suspend_entry(struct device* dev)
+{
+    //struct i2c_client *client = st_dev.client;
+
+    if(is_proximity_function_en(st_dev.stc.custom_function_en))
+    {
+        if(is_proximity_activate(st_dev.stc.ctp_run_status))
+        {
+            kernel_log_d("proximity is active, so fake suspend...");
+            return SEMI_DRV_ERR_OK;
+        }
+    }
+
+    if(is_guesture_function_en(st_dev.stc.custom_function_en))
+    {
+        semi_touch_guesture_switch(1);
+        enable_irq_wake(st_dev.client->irq);
+    }
+    else
+    {
+        semi_touch_suspend_ctrl(1);
+        semi_touch_clear_report();
+        //disable_irq(client->irq);
+        kernel_log_d("tpd real suspend...\n");
+    }
+
+    return SEMI_DRV_ERR_OK;
+}
+
+int semi_touch_resume_entry(struct device* dev)
+{
+    unsigned char bootCheckOk = 0;
+    unsigned char glove_activity = is_glove_activate(st_dev.stc.ctp_run_status);
+
+    if(is_proximity_function_en(st_dev.stc.custom_function_en))
+    {
+        if(is_proximity_activate(st_dev.stc.ctp_run_status))
+        {
+            kernel_log_d("proximity is active, so fake resume...");
+            return SEMI_DRV_ERR_OK;
+        }
+    }
+    if(is_guesture_function_en(st_dev.stc.custom_function_en))
+    {
+        disable_irq_wake(st_dev.client->irq);
+    }
+
+    //reset tp + iic detected
+    semi_touch_reset_and_detect();
+    //set_status_pointing(st_dev.stc.ctp_run_status);
+    semi_touch_clear_report();
+    //enable_irq(client->irq);
+
+    if(glove_activity)
+    {
+        semi_touch_start_up_check(&bootCheckOk, only_sp_check);
+        if(bootCheckOk)
+        {
+            semi_touch_glove_switch(1);
+        }
+    }
+    kernel_log_d("tpd_resume...\r\n");
+
+    return SEMI_DRV_ERR_OK;
+}
+
+static struct i2c_driver sm_touch_driver = 
+{
+    .driver = 
+    {
+        .owner = THIS_MODULE,
+        .name  =  "semi_touch",
+        .of_match_table = of_match_ptr(sm_of_match),
+#if CONFIG_PM
+        .pm = &semi_touch_dev_pm_ops,
+#endif
+    },
+    .id_table = sm_ts_id,
+    .probe = semi_touch_probe,
+    .remove = semi_touch_remove,
+};
+
+static int __init i2c_device_init(void)
+{
+    int ret = 0;
+
+    ret = i2c_add_driver(&sm_touch_driver);
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
+
+static void __exit i2c_device_exit(void)
+{
+    i2c_del_driver(&sm_touch_driver);
+}
+
+module_init(i2c_device_init);
+module_exit(i2c_device_exit);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("wasim");
diff --git a/drivers/input/touchscreen/chsc5xxx/platform.h b/drivers/input/touchscreen/chsc5xxx/platform.h
new file mode 100644
index 000000000000..76d865c79cd2
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/platform.h
@@ -0,0 +1,112 @@
+#ifndef __PLATFORM_H__
+#define __PLATFORM_H__
+
+#define SEMI_TOUCH_5472                         0X0400
+#define SEMI_TOUCH_5448                         0X0401
+#define SEMI_TOUCH_5432                         0X0406
+#define SEMI_TOUCH_5816                         0X0500
+#define SEMI_TOUCH_IC                           SEMI_TOUCH_5448                             
+
+#define SOC_PLATFORM_MTK                        0x0100
+#define SOC_PLATFROM_QUAL                       0x0200
+#define SOC_PLATFORM_SPRD                       0x0300
+#define SOC_PLATFORM_SPACEMIT                   0x0400
+#define SOC_PLATFORM_SELECT                     SOC_PLATFORM_SPACEMIT
+
+#define MULTI_PROTOCOL_TYPE_A                   0
+#define MULTI_PROTOCOL_TYPE_B                   1
+#define MULTI_PROTOCOL_TYPE                     MULTI_PROTOCOL_TYPE_B
+
+#define SEMI_TOUCH_PROXIMITY_OPEN               0
+#define SEMI_TOUCH_ESD_CHECK_OPEN               1
+#define SEMI_TOUCH_GESTURE_OPEN                 0
+#define SEMI_TOUCH_GLOVE_OPEN                   0
+#define SEMI_TOUCH_APK_NODE_EN                  1
+#define SEMI_TOUCH_ONLINE_UPDATE_EN             0
+#define SEMI_TOUCH_BOOTUP_UPDATE_EN             1
+
+#define SEMI_TOUCH_DMA_TRANSFER                 0
+#define SEMI_TOUCH_IRQ_VAR_QUEUE                0
+#define SEMI_TOUCH_SUSPEND_BY_TPCMD             1
+#define SEMI_TOUCH_VKEY_MAPPING                 1
+#define SEMI_TOUCH_MAX_POINTS                   5
+#define SEMI_TOUCH_SOLUTION_X                   720
+#define SEMI_TOUCH_SOLUTION_Y                   1440
+#define CHSC_DEVICE_NAME                        "semi_touch"
+#define CHSC_AUTO_UPDATE_PACKET_BIN             "/sdcard/chsc_auto_update_packet.bin"
+
+#define TYPE_OF_IC(X)                           ((X) & 0xff00)
+#define MAX_VKEY_NUMBER                         5
+#define SEMI_TOUCH_KEY_EVT                      {KEY_MENU, KEY_HOME, KEY_BACK, KEY_VOLUMEUP, KEY_VOLUMEDOWN}
+
+
+/*******************************************************************************************/
+#if SOC_PLATFORM_SELECT == SOC_PLATFORM_MTK
+#include "tpd.h"
+#define semi_touch_get_int()                GTP_INT_PORT
+#define semi_touch_get_rst()                GTP_RST_PORT                        
+#define semi_io_pin_low(pin)                tpd_gpio_output(pin, 0)
+#define semi_io_pin_high(pin)               tpd_gpio_output(pin, 1)
+//#define semi_io_pin_level(pin)              mt_get_gpio_in(pin)
+#define semi_io_direction_out(pin, level)   tpd_gpio_output(pin, level)
+#define semi_io_direction_in(pin)           tpd_gpio_as_int(pin)            
+extern  int semi_touch_get_irq(int rst_pin);
+extern  int semi_touch_work_done(void);
+extern  int semi_touch_resource_release(void);
+extern void semi_touch_suspend_entry(struct device* dev);
+extern void semi_touch_resume_entry(struct device* dev);
+
+#elif SOC_PLATFORM_SELECT == SOC_PLATFROM_QUAL
+extern int semi_touch_get_int(void);
+extern int semi_touch_get_rst(void);
+#define semi_io_pin_low(pin)                gpio_set_value(pin,0)
+#define semi_io_pin_high(pin)               gpio_set_value(pin,1)
+//#define semi_io_pin_level(pin)              gpio_get_value(pin)
+#define semi_io_direction_out(pin, level)   gpio_direction_output(pin, level)
+#define semi_io_direction_in(pin)           gpio_direction_input(pin)
+extern int semi_touch_get_irq(int rst_pin);
+extern int semi_touch_work_done(void);
+extern int semi_touch_resource_release(void);
+extern int semi_touch_suspend_entry(struct device* dev);
+extern int semi_touch_resume_entry(struct device* dev);
+
+#elif SOC_PLATFORM_SELECT == SOC_PLATFORM_SPRD
+extern int semi_touch_get_int(void);
+extern int semi_touch_get_rst(void);
+#define semi_io_pin_low(pin)                gpio_set_value(pin,0)
+#define semi_io_pin_high(pin)               gpio_set_value(pin,1)
+//#define semi_io_pin_level(pin)              gpio_get_value(pin)
+#define semi_io_direction_out(pin, level)   gpio_direction_output(pin, level)
+#define semi_io_direction_in(pin)           gpio_direction_input(pin)
+extern int semi_touch_get_irq(int rst_pin);
+extern int semi_touch_work_done(void);
+extern int semi_touch_resource_release(void);
+extern int semi_touch_suspend_entry(struct device* dev);
+extern int semi_touch_resume_entry(struct device* dev);
+
+#elif SOC_PLATFORM_SELECT == SOC_PLATFORM_SPACEMIT
+extern int semi_touch_get_int(void);
+extern int semi_touch_get_rst(void);
+#define semi_io_pin_low(pin)                gpio_set_value(pin,0)
+#define semi_io_pin_high(pin)               gpio_set_value(pin,1)
+//#define semi_io_pin_level(pin)              gpio_get_value(pin)
+#define semi_io_direction_out(pin, level)   gpio_direction_output(pin, level)
+#define semi_io_direction_in(pin)           gpio_direction_input(pin)
+extern int semi_touch_get_irq(int rst_pin);
+extern int semi_touch_work_done(void);
+extern int semi_touch_resource_release(void);
+extern int semi_touch_suspend_entry(struct device* dev);
+extern int semi_touch_resume_entry(struct device* dev);
+#endif
+
+#if SEMI_TOUCH_PROXIMITY_OPEN
+extern int semi_touch_proximity_init(void);
+extern bool semi_touch_proximity_report(unsigned char proximity);
+extern int semi_touch_proximity_stop(void);
+#else
+#define semi_touch_proximity_init()           0
+#define semi_touch_proximity_report(x)        true 
+#define semi_touch_proximity_stop()           0
+#endif
+
+#endif
diff --git a/drivers/input/touchscreen/chsc5xxx/semi_touch_apk.c b/drivers/input/touchscreen/chsc5xxx/semi_touch_apk.c
new file mode 100644
index 000000000000..1af22773b549
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/semi_touch_apk.c
@@ -0,0 +1,391 @@
+#include <linux/version.h>
+#include <linux/proc_fs.h>
+#include <linux/kthread.h>
+#include <linux/delay.h>
+#include "semi_touch_interface.h"
+
+#if SEMI_TOUCH_APK_NODE_EN
+
+struct apk_complex_data apk_comlex;
+
+struct stm_mapped_memory
+{
+    unsigned short map_addr;
+    unsigned char* map_buffer;
+    unsigned short buff_cnt;
+};
+
+typedef int (*semi_touch_host_action)(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_sync_ctp(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_config(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_apk_reset(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_get_adcshort(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_read_write(struct apk_complex_data* apk_comlex_addr);
+
+//#define SYNC_THREAD_PRIORITY                4
+
+#define MAGIC_NO                            0x8000
+#define IOCTL_OP_TYPE(x)                    (MAGIC_NO | x)
+#define MTK_CTP_LINK                        IOCTL_OP_TYPE(0x0001)
+#define MTK_CMD_BUF                         0xb400
+#define MTK_RSP_BUF                         0xb440
+#define MTK_FUNC_BUF                        0xc000
+#define MTK_TXRX_BUF                        0xc400
+#define MTK_DATA_RDY                        0xd209
+#define kind_of_mcap_cmd_packet(p)          (((struct m_ctp_cmd_std_t*)(p))->tag == 0xE9)
+
+#define is_sync_ready()  (1 == apk_comlex.stm_rdy_buffer[0])
+#define set_sync_ready(x) (apk_comlex.stm_rdy_buffer[0] = (x))
+
+
+struct action_wrap
+{
+    unsigned char cmd;
+    semi_touch_host_action action_fun;
+};
+
+static struct stm_mapped_memory mapped_memory_array[] = 
+{
+    { .map_addr = MTK_CTP_LINK, .map_buffer = apk_comlex.stm_ctp_buffer,  .buff_cnt = 4, },
+    { .map_addr = MTK_CMD_BUF,  .map_buffer = apk_comlex.stm_cmd_buffer,  .buff_cnt = 16 },
+    { .map_addr = MTK_RSP_BUF,  .map_buffer = apk_comlex.stm_rsp_buffer,  .buff_cnt = 16 },
+    { .map_addr = MTK_TXRX_BUF, .map_buffer = apk_comlex.stm_txrx_buffer, .buff_cnt = MAX_TX_RX_BUFF_LEN },
+    { .map_addr = MTK_DATA_RDY, .map_buffer = apk_comlex.stm_rdy_buffer,  .buff_cnt = 4},
+};
+
+static const struct action_wrap array_action[] = 
+{
+    {CMD_CTP_RST, semi_touch_apk_reset},
+    {CMD_MEM_WR, semi_touch_memory_write},
+    {CMD_MEM_RD, semi_touch_memory_read},
+    {CMD_DATA_SYNC, semi_touch_sync_ctp},
+    {CMD_CHK_CFG, semi_touch_config},
+    {CMD_BSPR_RW, semi_touch_read_write},
+    {CMD_SHORT_TST, semi_touch_get_adcshort},
+};
+
+int semi_touch_config(struct apk_complex_data* apk_comlex_addr)
+{
+    return 0;
+}
+
+int semi_touch_read_write(struct apk_complex_data* apk_comlex_addr)
+{
+    int ret = SEMI_DRV_ERR_OK, write_len = 0, read_len = 0;
+    struct m_ctp_cmd_std_t *ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+    struct m_ctp_rsp_std_t *ptr_rsp = (struct m_ctp_rsp_std_t*)apk_comlex_addr->stm_rsp_buffer;
+    unsigned char* txrx_buffer = apk_comlex_addr->stm_txrx_buffer;
+    unsigned int addr = swab32(*(unsigned int*)txrx_buffer);
+
+    write_len = ptr_cmd->d0;
+    read_len  = ptr_cmd->d1;
+
+    if(ptr_cmd->d2 == caculate_checksum_u816(txrx_buffer, write_len))
+    {
+        if(read_len > 0)
+        {
+            ret = semi_touch_read_bytes(addr, txrx_buffer, read_len);
+            check_return_if_fail(ret, NULL);
+
+            ptr_rsp->d0 =caculate_checksum_u816(txrx_buffer, read_len);
+        }
+        else
+        {
+            ret = semi_touch_write_bytes(addr, txrx_buffer + 4, write_len - 4);
+            check_return_if_fail(ret, NULL);
+        }
+    }
+
+    return ret;
+}
+
+int semi_touch_apk_reset(struct apk_complex_data* apk_comlex_addr)
+{
+    return semi_touch_reset(do_report_after_reset);
+}
+
+int semi_touch_get_adcshort(struct apk_complex_data* apk_comlex_addr)
+{
+    int u32_para_buff[4];
+    int ret = SEMI_DRV_ERR_OK, index = 0;
+    struct m_ctp_rsp_std_t *ptr_rsp = (struct m_ctp_rsp_std_t*)apk_comlex_addr->stm_rsp_buffer;
+
+    ret = semi_touch_run_ram_code(1/*RAM_CODE_SHORT_DATA_SHARE*/);
+    check_return_if_fail(ret, NULL);
+
+    for(index = 0; index < 10; index++)
+    {
+        mdelay(20);
+        ret = semi_touch_read_bytes(0x20000000, (unsigned char *)u32_para_buff, 12);
+        check_return_if_fail(ret, NULL);
+        if(0x45000000 == u32_para_buff[0])
+        {
+            break;
+        }
+    }
+    if(0x45000000 == u32_para_buff[0])
+    {
+        mdelay(10);
+        ret = semi_touch_read_bytes(u32_para_buff[1], apk_comlex_addr->stm_txrx_buffer, ADC_NUM_MAX << 1);
+        check_return_if_fail(ret, NULL);
+
+        u32_para_buff[3] = caculate_checksum_ex(apk_comlex_addr->stm_txrx_buffer, ADC_NUM_MAX << 1);
+        if(u32_para_buff[3] == u32_para_buff[2])
+        {
+            ptr_rsp->d0 = (unsigned short)(u32_para_buff[3]);
+            ptr_rsp->d1 = (unsigned short)(u32_para_buff[3] >> 16);
+            ret = SEMI_DRV_ERR_OK;
+        }
+        else
+        {
+            ret = -SEMI_DRV_ERR_CHECKSUM;
+            check_return_if_fail(ret, NULL);
+        }
+    }
+    else
+    {
+        ret = -SEMI_DRV_ERR_RESPONSE;
+        check_return_if_fail(ret, NULL);
+    }
+    
+    return ret;
+}
+
+void semi_touch_apk_work_fun(struct work_struct *work)
+{
+    int ret = 0;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+    unsigned short sync_once = MAX_TX_RX_BUFF_LEN;
+
+    sync_once = min(sync_once, apk_comlex.sync.sync_size);
+
+    if(is_sync_ready()) return;
+
+    do
+    {
+        cmd_send_tp.id = CMD_CTP_SSCAN;
+        cmd_send_tp.d0 = 0;
+
+        cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+        //check_break_if_fail(ret, NULL);
+
+        ret = semi_touch_read_bytes(apk_comlex.sync.sync_addr, apk_comlex.stm_txrx_buffer, sync_once);
+        check_break_if_fail(ret, NULL);
+
+        cmd_send_tp.id = CMD_CTP_SSCAN;
+        cmd_send_tp.d0 = 1;
+        cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    }while(0);
+
+    atomic_set(&apk_comlex.sync.atomic_sync_flag, 0);
+    set_sync_ready(1);
+}
+
+int semi_touch_sync_ctp(struct apk_complex_data* apk_comlex_addr)
+{
+    int ret = SEMI_DRV_ERR_OK;
+    struct m_ctp_cmd_std_t *ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+    
+    set_sync_ready(0);
+    apk_comlex_addr->sync.sync_size = ptr_cmd->d1;
+    apk_comlex_addr->sync.sync_addr = (ptr_cmd->d5 << 16) | ptr_cmd->d0;
+    atomic_set(&apk_comlex.sync.atomic_sync_flag, 1);
+
+    ret = semi_touch_queue_asyn_work(work_queue_custom_work, semi_touch_apk_work_fun, 0);
+
+    kernel_log_d("host send sync command...\n");
+
+    return ret;
+}
+
+static void should_wait_for_sync_task(unsigned char cmd)
+{
+    int retry = 100;
+    if(cmd == CMD_DATA_SYNC) return;
+
+    //max wait = 100 * 1 = 100ms
+    for(retry = 0; retry < 100; retry++)
+    {
+        if(0 == atomic_read(&apk_comlex.sync.atomic_sync_flag))
+        {
+            break;
+        }
+        mdelay(1);
+    }
+}
+
+static int host_command_parse_and_respons(void)
+{
+    int ret = -SEMI_DRV_INVALID_CMD;
+    unsigned short index = 0, check_sum = 0, cmd_invoked = 0;
+    struct m_ctp_cmd_std_t* host_cmd = (struct m_ctp_cmd_std_t*)apk_comlex.stm_cmd_buffer;
+    struct m_ctp_rsp_std_t* driv_rsp = (struct m_ctp_rsp_std_t*)apk_comlex.stm_rsp_buffer;
+
+    if(!kind_of_mcap_cmd_packet(host_cmd))  return -EINVAL;
+
+    check_sum = caculate_checksum_u16((unsigned short*)host_cmd, sizeof(struct m_ctp_cmd_std_t));
+    if(0 != check_sum)  return -SEMI_DRV_ERR_CHECKSUM;
+
+    for(index = 0; index < sizeof(array_action) / sizeof(struct action_wrap); index++)
+    {
+        if(array_action[index].cmd == host_cmd->id)
+        {
+            cmd_invoked = 1;
+            should_wait_for_sync_task(host_cmd->id);
+            ret = array_action[index].action_fun(&apk_comlex);
+            break;
+        }
+    }
+
+    if(!cmd_invoked)
+    {
+        should_wait_for_sync_task(host_cmd->id);
+        ret = cmd_send_to_tp(host_cmd, driv_rsp, 200);
+    }
+
+    if(SEMI_DRV_ERR_OK == ret)
+    {
+        driv_rsp->id = host_cmd->id;
+        driv_rsp->cc = 0;
+    }
+    else
+    {
+        driv_rsp->cc = -SEMI_DRV_ERR_RESPONSE;
+    }
+    driv_rsp->chk = 1 + ~caculate_checksum_u16((unsigned short*)&driv_rsp->d0, sizeof(struct m_ctp_rsp_std_t) - 2);
+        
+    return ret;
+}
+
+static ssize_t semi_touch_proc_write(struct file* fp, const char __user *buff, size_t len, loff_t* data)
+{
+    int ret = 0, index = 0;
+
+    //kernel_log_d("proc op_type = %x, ap_addr = %x, write datalen = %d\r\n", apk_comlex.op_type, (unsigned int)apk_comlex.op_args, (int)len);
+    
+    if(len <= 0)  return -EINVAL;
+
+    for(index = 0; index < sizeof(mapped_memory_array) / sizeof(struct stm_mapped_memory); index++)
+    {
+        if(apk_comlex.op_type != mapped_memory_array[index].map_addr)
+            continue;
+
+        //kernel_log_d("len = %d, apk_comlex.op_args = %d, mapped_memory_array[index].buff_cnt = %d\r\n",
+        //    len, apk_comlex.op_args, mapped_memory_array[index].buff_cnt);
+
+        if((len + apk_comlex.op_args) > mapped_memory_array[index].buff_cnt) 
+            ret = -EINVAL;
+        check_break_if_fail(ret, NULL);
+
+        ret = copy_from_user(mapped_memory_array[index].map_buffer + apk_comlex.op_args, buff, len);
+        check_return_if_fail(ret, NULL);
+
+        if(MTK_CMD_BUF == apk_comlex.op_type)
+        {
+            ret = host_command_parse_and_respons();
+            check_break_if_fail(ret, NULL);
+        }
+        else if(MTK_DATA_RDY == apk_comlex.op_type)
+        {
+            atomic_set(&apk_comlex.sync.atomic_sync_flag, 1);
+            semi_touch_queue_asyn_work(work_queue_custom_work, semi_touch_apk_work_fun, 0);
+        }
+    }
+
+    return ret;
+}
+
+static ssize_t semi_touch_proc_read(struct file* fp, char __user *buff, size_t len, loff_t* data)
+{
+    int ret = 0, index = 0;
+    
+    if(len <= 0)  return -EINVAL;
+
+    //kernel_log_d("proc op_type = %x, ap_addr = %x, read datalen = %d\r\n", apk_comlex.op_type, (unsigned int)apk_comlex.op_args, (int)len);
+
+    for(index = 0; index < sizeof(mapped_memory_array) / sizeof(struct stm_mapped_memory); index++)
+    {
+        if(apk_comlex.op_type != mapped_memory_array[index].map_addr)
+            continue;
+
+        if((len + apk_comlex.op_args) > mapped_memory_array[index].buff_cnt) 
+            ret = -EINVAL;
+        check_break_if_fail(ret, NULL);
+
+        ret = copy_to_user(buff, mapped_memory_array[index].map_buffer + apk_comlex.op_args, len);
+        check_return_if_fail(ret, NULL);
+
+        if(data) *data = len;
+    }
+
+    return ret;
+}
+
+static long semi_touch_ioctl(struct file* fp, unsigned int op_type, unsigned long args)
+{
+    apk_comlex.op_type = (unsigned short)op_type;
+    apk_comlex.op_args = args;
+
+    //kernel_log_d("proc op_type = %x, args = %d\r\n", op_type, (int)args);
+
+    return 0;
+}
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0))
+static const struct proc_ops semi_touch_proc_opts = 
+{
+    .proc_write = semi_touch_proc_write,
+    .proc_read  = semi_touch_proc_read,
+    .proc_ioctl = semi_touch_ioctl,
+    #ifdef CONFIG_COMPAT
+    .proc_compat_ioctl = semi_touch_ioctl,
+    #endif
+};
+#endif
+
+#endif//SEMI_TOUCH_APK_NODE_EN
+
+int semi_touch_create_apk_proc(struct sm_touch_dev* st_dev)
+{
+    int ret = 0;
+
+#if SEMI_TOUCH_APK_NODE_EN
+    semi_touch_create_work_queue(work_queue_custom_work, typename(work_queue_custom_work));
+    
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0))
+    st_dev->proc_entry = proc_create(SEMI_TOUCH_PROC_NAME, 0777, NULL, &semi_touch_proc_opts);
+    check_return_if_zero(st_dev->proc_entry, NULL);
+#else
+    st_dev->proc_entry = create_proc_entry(SEMI_TOUCH_PROC_NAME, 0777, NULL);
+    check_return_if_zero(st_dev->proc_entry, NULL);
+    //st_dev->proc_entry->write_proc = semi_touch_proc_write;
+    //st_dev->proc_entry->read_proc = semi_touch_proc_read;
+#endif    
+
+    //apk_comlex.sync.sync_task = NULL;
+    apk_comlex.sync.sync_addr = 0;
+    apk_comlex.sync.sync_size = 0;
+    apk_comlex.stm_ctp_buffer[0] = 0x5C;
+    atomic_set(&apk_comlex.sync.atomic_sync_flag, 0);
+#endif //SEMI_TOUCH_APK_NODE_EN
+        
+    return ret;
+}
+int semi_touch_remove_apk_proc(struct sm_touch_dev* st_dev)
+{
+    int ret = 0;
+
+#if SEMI_TOUCH_APK_NODE_EN
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 10, 0))
+    proc_remove(st_dev->proc_entry);
+#else
+    remove_proc_entry(SEMI_TOUCH_PROC_NAME, NULL);
+#endif
+
+#endif //SEMI_TOUCH_APK_NODE_EN
+
+    return ret;
+}
+
diff --git a/drivers/input/touchscreen/chsc5xxx/semi_touch_custom.c b/drivers/input/touchscreen/chsc5xxx/semi_touch_custom.c
new file mode 100644
index 000000000000..d051aa6f84ef
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/semi_touch_custom.c
@@ -0,0 +1,748 @@
+#include <linux/device.h>
+#include <linux/proc_fs.h>
+#include <linux/kthread.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include "semi_touch_interface.h"
+
+enum entry_type{ chsc_version, chsc_tp_info, chsc_proximity, chsc_guesture, chsc_online_update, chsc_glove, chsc_suspend, chsc_orientation, chsc_esd_check, entry_max };
+
+#if SEMI_TOUCH_MAKE_NODES_DIR == MAKE_NODE_UNDER_PROC
+/******************************************************************************************************************************************/
+/*make custom nodes under proc node*/
+/******************************************************************************************************************************************/
+static struct proc_dir_entry* custom_proc_entry[entry_max];
+
+void semi_touch_create_nodes_dir(void) 
+{
+    if(NULL == st_dev.chsc_nodes_dir) 
+    {
+        st_dev.chsc_nodes_dir = proc_mkdir(SEMI_TOUCH_PROC_DIR, NULL);
+    }
+}
+
+void semi_touch_release_nodes_dir(void)
+{
+    int index = 0;
+    for(index = 0; index < entry_max; index++)
+    {
+        if(NULL != custom_proc_entry[index])
+        {
+            proc_remove(custom_proc_entry[index]);
+        }
+    }
+    if(NULL != st_dev.chsc_nodes_dir) 
+    {
+        proc_remove((struct proc_dir_entry*)st_dev.chsc_nodes_dir);
+    }
+}
+
+static int semi_touch_register_nodefun_imp(enum entry_type etype, char* node_name, const struct proc_ops* opt_addr)
+{
+    struct proc_dir_entry* entry = proc_create(node_name, 0777, st_dev.chsc_nodes_dir, opt_addr);
+    check_return_if_zero(entry, NULL);
+
+    custom_proc_entry[etype] = entry;
+
+    return 0;
+}
+
+#define semi_touch_register_nodefun(etype, fun_write, fun_read) \
+{ \
+    static const struct proc_ops ops_##etype = { \
+    .proc_write = fun_write, \
+    .proc_read  = fun_read, \
+    }; \
+    semi_touch_register_nodefun_imp(etype, #etype, &ops_##etype); \
+}
+
+#define kernel_buffer_prepare(copy, ker_buf, size) \
+char ker_buf[size], *copy = ker_buf; \
+do{memset(ker_buf, 0, sizeof(ker_buf)); if(*ppos) return 0;} while(0)
+
+#define kernel_buffer_to_entry(ker_buf, size) \
+*ppos = size; \
+ret = copy_to_user(buff, ker_buf, size); \
+check_return_if_fail(ret, NULL);
+
+#define kernel_buffer_from_entry(ker_buf, size) \
+ret = copy_from_user(ker_buf, buff, size); \
+check_return_if_fail(ret, NULL);
+
+#define chsc_version_node_write_declare() chsc_version_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_version_node_read_declare() chsc_version_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_tp_info_node_write_declare() chsc_tp_info_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_tp_info_node_read_declare() chsc_tp_info_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_proximity_node_write_declare() chsc_proximity_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_proximity_node_read_declare() chsc_proximity_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_guesture_node_write_declare() chsc_guesture_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_guesture_node_read_declare() chsc_guesture_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_glove_node_write_declare() chsc_glove_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_glove_node_read_declare() chsc_glove_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_suspend_node_write_declare() chsc_suspend_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_suspend_node_read_declare() chsc_suspend_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_online_update_node_write_declare() chsc_online_update_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_online_update_node_read_declare() chsc_online_update_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_orientation_node_write_declare() chsc_orientation_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_orientation_node_read_declare() chsc_orientation_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#define chsc_esd_check_node_write_declare() chsc_esd_check_node_write(struct file* fp, const char __user *buff, size_t len, loff_t* ppos)
+#define chsc_esd_check_node_read_declare() chsc_esd_check_node_read(struct file* fp, char __user *buff, size_t len, loff_t* ppos)
+#elif SEMI_TOUCH_MAKE_NODES_DIR == MAKE_NDDE_UNDER_SYS
+/******************************************************************************************************************************************/
+/*make custom nodes under sys file system*/
+/******************************************************************************************************************************************/
+void semi_touch_create_nodes_dir(void) 
+{
+    if(NULL == st_dev.chsc_nodes_dir) 
+    {
+        st_dev.chsc_nodes_dir = kobject_create_and_add(SEMI_TOUCH_PROC_DIR, NULL);
+    }
+}
+
+void semi_touch_release_nodes_dir(void)
+{
+    if(NULL != st_dev.chsc_nodes_dir) 
+    {
+        kobject_put((struct kobject *)st_dev.chsc_nodes_dir);
+    }
+}
+
+#define semi_touch_register_nodefun(etype, fun_store, fun_show) \
+{ \
+    static struct kobj_attribute etype = __ATTR(etype, 0664, fun_show, fun_store); \
+    ret = sysfs_create_file((struct kobject *)st_dev->chsc_nodes_dir, &etype.attr); \
+    check_return_if_fail(ret, NULL); \
+}
+
+#define kernel_buffer_prepare(copy, ker_buf, size) \
+char ker_buf[size], *copy = ker_buf; \
+do{memset(ker_buf, 0, sizeof(ker_buf));} while(0)
+
+#define kernel_buffer_to_entry(ker_buf, size) \
+memcpy(buff, ker_buf, size); \
+ret = 0
+
+#define kernel_buffer_from_entry(ker_buf, size) \
+memcpy(ker_buf, buff, size); \
+ret = 0
+
+#define chsc_version_node_write_declare() chsc_version_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_version_node_read_declare() chsc_version_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_tp_info_node_write_declare() chsc_tp_info_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_tp_info_node_read_declare() chsc_tp_info_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_proximity_node_write_declare() chsc_proximity_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_proximity_node_read_declare() chsc_proximity_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_guesture_node_write_declare() chsc_guesture_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_guesture_node_read_declare() chsc_guesture_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_glove_node_write_declare() chsc_glove_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_glove_node_read_declare() chsc_glove_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_suspend_node_write_declare() chsc_suspend_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_suspend_node_read_declare() chsc_suspend_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_online_update_node_write_declare() chsc_online_update_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_online_update_node_read_declare() chsc_online_update_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_orientation_node_write_declare() chsc_orientation_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_orientation_node_read_declare() chsc_orientation_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#define chsc_esd_check_node_write_declare() chsc_esd_check_node_write(struct kobject *dev, struct kobj_attribute *attr, const char *buff, size_t len)
+#define chsc_esd_check_node_read_declare() chsc_esd_check_node_read(struct kobject* dev, struct kobj_attribute* attr, char* buff)
+#endif //SEMI_TOUCH_MAKE_NODES_DIR == MAKE_NDDE_UNDER_SYS
+
+const char* const mapping_ic_from_type(unsigned char ictype)
+{
+    static char *ic_name = "un-defined";
+
+    switch (ictype)
+    {
+    case 0x00:
+        ic_name = "CHSC5472";
+        break;
+    case 0x01:
+        ic_name = "CHSC5448";
+        break;
+    case 0x02:
+        ic_name = "CHSC5448A";
+        break;
+    case 0x03:
+        ic_name = "CHSC5460";
+        break;
+    case 0x04:
+        ic_name = "CHSC5468";
+        break;
+	case 0x05:
+        ic_name = "CHSC5432";
+        break;
+    case 0x10:
+        ic_name = "CHSC5816";
+        break;
+    case 0x11:
+        ic_name = "CHSC1716";
+        break;
+    default:
+        break;
+    }
+
+    return ic_name;
+}
+
+static ssize_t chsc_version_node_write_declare()
+{
+    return -EPERM;
+}
+
+static ssize_t chsc_version_node_read_declare()
+{
+    int ret, count;
+    unsigned char readBuffer[8] = {0};
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+
+    ret = semi_touch_read_bytes(0x20000000 + 0x80, readBuffer, 8);
+    check_return_if_fail(ret, NULL);
+
+    szCopy += sprintf(szCopy, "Ic type %s\n", mapping_ic_from_type(readBuffer[0]));
+
+    szCopy += sprintf(szCopy, "config version is %02X\n", readBuffer[1]);
+    szCopy += sprintf(szCopy, "vender id is %d, ", readBuffer[4]);
+    szCopy += sprintf(szCopy, "product id is %d\n", (readBuffer[3] << 8) + readBuffer[2]);
+
+    ret = semi_touch_read_bytes(0x20000000 + 0x10, readBuffer, 8);
+    check_return_if_fail(ret, NULL);
+
+    szCopy += sprintf(szCopy, "boot version is %04X\n", ((readBuffer[5] << 8) + readBuffer[4]));
+    szCopy += sprintf(szCopy, "driver version is %s\n", CHSC_DRIVER_VERSION);
+
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_tp_info_node_write_declare()
+{
+    return -EPERM;
+}
+
+static ssize_t chsc_tp_info_node_read_declare()
+{
+    int ret, count;
+    struct i2c_client *client = st_dev.client;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "Max finger number is %0d\n", SEMI_TOUCH_MAX_POINTS);
+    szCopy += (int)sprintf(szCopy, "Int irq is %d\n", (int)client->irq);
+    szCopy += sprintf(szCopy, "I2c address is 0x%02X(0x%02X)\n", client->addr, (client->addr) << 1);
+    szCopy += sprintf(szCopy, "Run status is 0x%08X\n", st_dev.stc.ctp_run_status);
+    szCopy += sprintf(szCopy, "Fun enable is 0x%04X\n", st_dev.stc.custom_function_en);
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_proximity_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 8);
+    kernel_buffer_from_entry(szKernel, (len > 8) ? 8 : len);
+
+    if('o' == szCopy[0])
+    {
+        open_proximity_function(st_dev.stc.custom_function_en);
+    }
+    else if('c' == szCopy[0])
+    {
+        close_proximity_function(st_dev.stc.custom_function_en);
+    }
+
+    if(is_proximity_function_en(st_dev.stc.custom_function_en)) 
+    {
+        if('0' == szCopy[0])
+        {
+            semi_touch_proximity_switch(0);
+        }
+        else if('1' == szCopy[0])
+        {
+            semi_touch_proximity_switch(1);
+        }
+    }
+
+    return len;
+}
+
+static ssize_t chsc_proximity_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "proximity switch is %d, status is %d.\n", 
+        is_proximity_function_en(st_dev.stc.custom_function_en), is_proximity_activate(st_dev.stc.ctp_run_status));
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_guesture_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 8);
+    kernel_buffer_from_entry(szKernel, (len > 8) ? 8 : len);
+
+    if('o' == szCopy[0])
+    {
+        open_guesture_function(st_dev.stc.custom_function_en);
+    }
+    else if('c' == szCopy[0])
+    {
+        close_guesture_function(st_dev.stc.custom_function_en);
+    }
+
+    if(is_guesture_function_en(st_dev.stc.custom_function_en)) 
+    {
+        if('0' == szCopy[0])
+        {
+            semi_touch_guesture_switch(0);
+        }
+        else if('1' == szCopy[0])
+        {
+            semi_touch_guesture_switch(1);
+        }
+    }
+
+    return len;
+}
+
+static ssize_t chsc_guesture_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "guesture switch is %d, status is %d.\n", 
+        is_guesture_function_en(st_dev.stc.custom_function_en), is_guesture_activate(st_dev.stc.ctp_run_status));
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_glove_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 8);
+    kernel_buffer_from_entry(szKernel, (len > 8) ? 8 : len);
+
+    if('o' == szCopy[0])
+    {
+        open_glove_function(st_dev.stc.custom_function_en);
+        semi_touch_glove_switch(1);
+    }
+    else if('c' == szCopy[0])
+    {
+        semi_touch_glove_switch(0);
+        close_glove_function(st_dev.stc.custom_function_en);
+    }
+
+    if(is_glove_function_en(st_dev.stc.custom_function_en)) 
+    {
+        if('0' == szCopy[0])
+        {
+            semi_touch_glove_switch(0);
+        }
+        else if('1' == szCopy[0])
+        {
+            semi_touch_glove_switch(1);
+        }
+    }
+
+    return len;
+}
+
+static ssize_t chsc_glove_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "glove switch is %d, status is %d.\n", 
+        is_glove_function_en(st_dev.stc.custom_function_en), is_glove_activate(st_dev.stc.ctp_run_status));
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_suspend_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 8);
+    kernel_buffer_from_entry(szKernel, (len > 8) ? 8 : len);
+
+    if('0' == szCopy[0])
+    {
+        semi_touch_resume_entry(&st_dev.client->dev);  //semi_touch_suspend_ctrl(0);
+    }
+    else if('1' == szCopy[0])
+    {
+        semi_touch_suspend_entry(&st_dev.client->dev);//semi_touch_suspend_ctrl(1);
+    }
+
+    return len;
+}
+
+static ssize_t chsc_suspend_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "suspend switch is %d, status is %d.\n", 
+        1, is_suspend_activate(st_dev.stc.ctp_run_status));
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_orientation_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 8);
+    kernel_buffer_from_entry(szKernel, (len > 8) ? 8 : len);
+
+    if('0' == szCopy[0])
+    {
+        semi_touch_orientation_switch(0);
+    }
+    else if('1' == szCopy[0])
+    {
+        semi_touch_orientation_switch(1);
+    }
+
+    return len;
+}
+
+static ssize_t chsc_orientation_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "orientation status is %s.\n", is_orientation_activate(st_dev.stc.ctp_run_status) ? "horizontal" : "vertical");
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_esd_check_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    
+    szCopy += sprintf(szCopy, "esd check switch is %d.\n", is_esd_function_en(st_dev.stc.custom_function_en));
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count;
+}
+
+static ssize_t chsc_esd_check_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 8);
+    kernel_buffer_from_entry(szKernel, (len > 8) ? 8 : len);
+
+    if('o' == szCopy[0])
+    {
+        open_esd_function(st_dev.stc.custom_function_en);
+    }
+    else if('c' == szCopy[0])
+    {
+        close_esd_function(st_dev.stc.custom_function_en);
+    }
+
+    return len;
+}
+
+static ssize_t chsc_online_update_node_write_declare()
+{
+    int ret;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+    kernel_buffer_from_entry(szKernel, (len > 128) ? 128 : len);
+
+    if('1' == szCopy[0])
+    {
+        sprintf(szCopy, "%s", CHSC_AUTO_UPDATE_PACKET_BIN);
+    }
+    else if(len > 1)
+    {
+        szCopy[len - 1] = 0;
+    }
+
+    ret = semi_touch_online_update_check((char*)szCopy);
+
+    return len;
+}
+
+static ssize_t chsc_online_update_node_read_declare()
+{
+    int ret, count;
+    kernel_buffer_prepare(szCopy, szKernel, 128);
+
+    szCopy += sprintf(szCopy, "online update is %s\n", SEMI_TOUCH_ONLINE_UPDATE_EN ? "enabled" : "disabled" );
+    
+    count = szCopy - szKernel;
+
+    kernel_buffer_to_entry(szKernel, count);
+
+    return count ;
+}
+
+/********************************************************************************************************************************/
+/*glove function*/
+int semi_touch_glove_prepare(void)
+{
+#if SEMI_TOUCH_GLOVE_OPEN
+    open_glove_function(st_dev.stc.custom_function_en);
+#endif
+    return 0;
+}
+
+/********************************************************************************************************************************/
+
+/********************************************************************************************************************************/
+/*guesture support*/
+#if SEMI_TOUCH_GESTURE_OPEN
+//#include <linux/wakelock.h>
+#define GESTURE_LEFT                         0x20
+#define GESTURE_RIGHT                        0x21
+#define GESTURE_UP                           0x22
+#define GESTURE_DOWN                         0x23
+#define GESTURE_DOUBLECLICK                  0x24
+#define GESTURE_SINGLECLICK                  0x25
+#define GESTURE_O                            0x30
+#define GESTURE_W                            0x31
+#define GESTURE_M                            0x32
+#define GESTURE_E                            0x33
+#define GESTURE_C                            0x34
+#define GESTURE_S                            0x46
+#define GESTURE_V                            0x54
+#define GESTURE_Z                            0x65
+#define GESTURE_L                            0x44
+//static struct wake_lock gesture_timeout_wakelock;
+int semi_touch_gesture_prepare(void)
+{
+    //open_guesture_function(st_dev.stc.custom_function_en);
+    //wake_lock_init(&gesture_timeout_wakelock, WAKE_LOCK_SUSPEND, "gesture_timeout_wakelock");
+
+    input_set_capability(st_dev.input, EV_KEY, KEY_POWER);
+    input_set_capability(st_dev.input, EV_KEY, KEY_U);
+    input_set_capability(st_dev.input, EV_KEY, KEY_LEFT);
+    input_set_capability(st_dev.input, EV_KEY, KEY_RIGHT);
+    input_set_capability(st_dev.input, EV_KEY, KEY_UP);
+    input_set_capability(st_dev.input, EV_KEY, KEY_DOWN);
+    input_set_capability(st_dev.input, EV_KEY, KEY_D);
+    input_set_capability(st_dev.input, EV_KEY, KEY_O);
+    input_set_capability(st_dev.input, EV_KEY, KEY_W);
+    input_set_capability(st_dev.input, EV_KEY, KEY_M);
+    input_set_capability(st_dev.input, EV_KEY, KEY_E);
+    input_set_capability(st_dev.input, EV_KEY, KEY_C);
+    input_set_capability(st_dev.input, EV_KEY, KEY_S);
+    input_set_capability(st_dev.input, EV_KEY, KEY_V);
+    input_set_capability(st_dev.input, EV_KEY, KEY_Z);
+
+    __set_bit(KEY_POWER, st_dev.input->keybit);
+    __set_bit(KEY_U,     st_dev.input->keybit);
+    __set_bit(KEY_LEFT,  st_dev.input->keybit);
+    __set_bit(KEY_RIGHT, st_dev.input->keybit);
+    __set_bit(KEY_UP,    st_dev.input->keybit);
+    __set_bit(KEY_DOWN,  st_dev.input->keybit);
+    __set_bit(KEY_D,     st_dev.input->keybit);
+    __set_bit(KEY_O,     st_dev.input->keybit);
+    __set_bit(KEY_W,     st_dev.input->keybit);
+    __set_bit(KEY_M,     st_dev.input->keybit);
+    __set_bit(KEY_E,     st_dev.input->keybit);
+    __set_bit(KEY_C,     st_dev.input->keybit);
+    __set_bit(KEY_S,     st_dev.input->keybit);
+    __set_bit(KEY_V,     st_dev.input->keybit);
+    __set_bit(KEY_Z,     st_dev.input->keybit);
+
+    return 0;
+}
+int semi_touch_gesture_stop(void)
+{
+    //if(is_guesture_function_en(st_dev.stc.custom_function_en))
+    //{
+    //    wake_lock_destroy(&gesture_timeout_wakelock);
+    //}
+
+    return 0;
+}
+int semi_touch_wake_lock(void)
+{
+    // if(is_guesture_activate(st_dev.stc.ctp_run_status))
+    // {
+    //     //irq_set_irq_type(st_dev.client->irq, IRQF_TRIGGER_FALLING);
+    //     //wake_lock_timeout(&gesture_timeout_wakelock, msecs_to_jiffies(2500));
+    //     kernel_log_d("int interrupts, guesture on\n");
+    // }
+    return SEMI_DRV_ERR_OK;
+}
+bool semi_touch_gesture_report(unsigned char gesture_id)
+{
+    int keycode = 0;
+
+    //wake_lock_timeout(&gesture_timeout_wakelock, msecs_to_jiffies(2000));
+
+    switch(gesture_id)
+    {
+        case GESTURE_LEFT:
+            keycode = KEY_LEFT;
+            break;
+        case GESTURE_RIGHT:
+            keycode = KEY_RIGHT;
+            break;
+        case GESTURE_UP:
+            keycode = KEY_UP;
+            break;
+        case GESTURE_DOWN:
+            keycode = KEY_DOWN;
+            break;
+        case GESTURE_SINGLECLICK:
+            keycode = KEY_POWER;//KEY_U;    
+            break;
+        case GESTURE_DOUBLECLICK:
+            keycode = KEY_POWER;//KEY_U;    
+            break;
+        case GESTURE_O:
+            keycode = KEY_O;
+            break;
+        case GESTURE_W:
+            keycode = KEY_W;
+            break;
+        case GESTURE_M:
+            keycode = KEY_M;
+            break;
+        case GESTURE_E:
+            keycode = KEY_E;
+            break;
+        case GESTURE_C:
+            keycode = KEY_C;
+            break;
+        case GESTURE_S:
+            keycode = KEY_S;
+            break;
+            case GESTURE_V:
+            keycode = KEY_V;
+            break;
+        case GESTURE_Z:
+            keycode = KEY_UP;
+            break;
+        case GESTURE_L:
+            keycode = KEY_L;
+            break;
+        default:
+            break;
+    }
+
+    if(keycode)
+    {
+        input_report_key(st_dev.input, keycode, 1);
+        input_sync(st_dev.input);
+        input_report_key(st_dev.input, keycode, 0);
+        input_sync(st_dev.input);
+    }
+    
+    return true;
+}
+#else //SEMI_TOUCH_GESTURE_OPEN
+int semi_touch_gesture_prepare(void) { return 0; }
+int semi_touch_gesture_stop(void) { return 0; }
+int semi_touch_wake_lock(void) { return 0; }
+bool semi_touch_gesture_report(unsigned char gesture_id) { return 0; }
+#endif //SEMI_TOUCH_GESTURE_OPEN
+
+/********************************************************************************************************************************/
+/*esd support*/
+#if SEMI_TOUCH_ESD_CHECK_OPEN
+static void semi_touch_esd_work_fun(struct work_struct *work);
+
+int semi_touch_esd_check_prepare(void)
+{
+    open_esd_function(st_dev.stc.custom_function_en);
+    semi_touch_queue_asyn_work(work_queue_custom_work, semi_touch_esd_work_fun, 4000);
+
+    return 0;
+}
+
+static void semi_touch_esd_work_fun(struct work_struct *work)
+{
+    semi_touch_heart_beat();
+
+    semi_touch_queue_asyn_work(work_queue_custom_work, semi_touch_esd_work_fun, 4000);
+}
+
+#else //SEMI_TOUCH_ESD_CHECK_OPEN
+int semi_touch_esd_check_prepare(void) { return 0; }
+#endif //SEMI_TOUCH_ESD_CHECK_OPEN
+
+
+/********************************************************************************************************************************/
+int semi_touch_custom_work(struct sm_touch_dev *st_dev)
+{
+    int ret = 0;
+    //unsigned char readBuffer[8];
+
+    semi_touch_create_nodes_dir();
+    semi_touch_register_nodefun(chsc_version, chsc_version_node_write, chsc_version_node_read);
+    semi_touch_register_nodefun(chsc_tp_info, chsc_tp_info_node_write, chsc_tp_info_node_read);
+    semi_touch_register_nodefun(chsc_proximity, chsc_proximity_node_write, chsc_proximity_node_read);
+    semi_touch_register_nodefun(chsc_guesture, chsc_guesture_node_write, chsc_guesture_node_read);
+    semi_touch_register_nodefun(chsc_glove, chsc_glove_node_write, chsc_glove_node_read);
+    semi_touch_register_nodefun(chsc_suspend, chsc_suspend_node_write, chsc_suspend_node_read);
+    semi_touch_register_nodefun(chsc_online_update, chsc_online_update_node_write, chsc_online_update_node_read);
+    semi_touch_register_nodefun(chsc_orientation, chsc_orientation_node_write, chsc_orientation_node_read);
+    semi_touch_register_nodefun(chsc_esd_check, chsc_esd_check_node_write, chsc_esd_check_node_read);
+
+    ret = semi_touch_proximity_init();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_gesture_prepare();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_esd_check_prepare();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_glove_prepare();
+    check_return_if_fail(ret, NULL);
+
+    //this code tell us how to get tp infomation
+    //ret = semi_touch_read_bytes(0x20000000 + 0x80, readBuffer, sizeof(readBuffer));
+    //check_return_if_fail(ret, NULL);
+
+    // strcat(TP_NAME, mapping_ic_from_type(readBuffer[0]));
+    // TP_FW_VER  = readBuffer[1];
+    // TP_VENDOR  = readBuffer[4];
+    // TP_PRODUCT = readBuffer[3] << 8) + readBuffer[2];
+
+    return ret;
+}
+
+int semi_touch_custom_clean_up(void)
+{
+    int ret;
+
+    semi_touch_release_nodes_dir();
+
+    ret = semi_touch_proximity_stop();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_gesture_stop();
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
diff --git a/drivers/input/touchscreen/chsc5xxx/semi_touch_device.c b/drivers/input/touchscreen/chsc5xxx/semi_touch_device.c
new file mode 100644
index 000000000000..3e638fc46c86
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/semi_touch_device.c
@@ -0,0 +1,412 @@
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/cdev.h>
+//#include <linux/ide.h>
+#include <linux/io.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/irq.h>
+#include <linux/of_irq.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/input/mt.h>
+#include <linux/irq.h>
+#include <linux/of_irq.h>
+#include <linux/kthread.h>
+#include <linux/i2c.h>
+
+#include "platform.h"
+#include "semi_touch_interface.h"
+
+struct sm_touch_dev st_dev = 
+{
+    .stc.initialize_ok = false, 
+    .stc.ctp_run_status = 0,
+    .stc.custom_function_en = 0,
+};
+
+static int input_device_init(struct sm_touch_dev *st_dev)
+{
+    int ret = 0;
+    struct i2c_client *client = st_dev->client;
+
+    st_dev->input = devm_input_allocate_device(&st_dev->client->dev);
+    check_return_if_fail(st_dev->input, NULL);
+
+    st_dev->input->name = client->name;
+    st_dev->input->id.bustype = BUS_I2C;
+    st_dev->input->dev.parent = &client->dev;
+
+    st_dev->input->evbit[0] = BIT_MASK(EV_SYN) | BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+    st_dev->input->keybit[BIT_WORD(BTN_TOUCH)] = BIT_MASK(BTN_TOUCH);
+    __set_bit(INPUT_PROP_DIRECT, st_dev->input->propbit);
+
+    //input_set_abs_params(st_dev->input, ABS_X, 0, SEMI_TOUCH_SOLUTION_X, 0, 0);
+    //input_set_abs_params(st_dev->input, ABS_Y, 0, SEMI_TOUCH_SOLUTION_Y, 0, 0);
+    input_set_abs_params(st_dev->input, ABS_MT_POSITION_X, 0, SEMI_TOUCH_SOLUTION_X, 0, 0);
+    input_set_abs_params(st_dev->input, ABS_MT_POSITION_Y, 0, SEMI_TOUCH_SOLUTION_Y, 0, 0);
+    input_set_abs_params(st_dev->input, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
+    input_set_abs_params(st_dev->input, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+
+#if MULTI_PROTOCOL_TYPE_A == MULTI_PROTOCOL_TYPE
+    input_set_abs_params(st_dev->input, ABS_MT_TRACKING_ID, 0, 255, 0, 0);
+#elif MULTI_PROTOCOL_TYPE_B == MULTI_PROTOCOL_TYPE
+    input_mt_init_slots(st_dev->input, SEMI_TOUCH_MAX_POINTS, INPUT_MT_DIRECT /*1*/);
+#endif
+
+    ret = input_register_device(st_dev->input);
+    check_return_if_fail(ret, NULL);
+
+    return 0;
+}
+
+static int input_device_deinit(void)
+{
+    int ret = 0;
+
+    ret = semi_touch_i2c_i2c_exit();
+
+    if(st_dev.input)
+    {
+        input_unregister_device(st_dev.input);  
+    }
+
+    return ret;  
+}
+
+bool semi_touch_vkey_handled(bool pointed, unsigned int x, unsigned int y)
+{
+#if SEMI_TOUCH_VKEY_MAPPING
+    int key = 0;
+    for(key = 0; key < st_dev.stc.vkey_num; key++)
+    {
+        //kernel_log_d("x = %d, y = %d, key_x = %d, key_y = %d\n", x, y, st_dev.stc.vkey_dim_map[key][0], st_dev.stc.vkey_dim_map[key][1]);
+        if(x == st_dev.stc.vkey_dim_map[key][0] && y == st_dev.stc.vkey_dim_map[key][1])
+        {
+            input_report_key(st_dev.input, st_dev.stc.vkey_evt_arr[key], pointed ? 1 : 0);
+            return true;
+        }
+    }
+#endif
+
+    return false;
+}
+
+#define SEMI_TOUCH_RDBUF_SIZE	0x100
+static irqreturn_t semi_touch_irq_handler_imp(int irq, void *p)
+{
+    bool pointed = 0;
+    int  index = 0, pointNum = 0/*, ioLevel = 0*/;
+    union rpt_point_t* ppt;
+    const unsigned char report_size = ((SEMI_TOUCH_MAX_POINTS * 5 + 2) + 3) & 0xfc;
+    unsigned char readbuffer[SEMI_TOUCH_RDBUF_SIZE];
+
+    //kernel_log_d("st_dev.stc.ctp_run_status = 0x%x\n", st_dev.stc.ctp_run_status);
+
+    //ioLevel = semi_io_pin_level(st_dev.int_pin);
+    //if(1 == ioLevel) return IRQ_RETVAL(IRQ_HANDLED);
+
+    if(!ack_pointing_action(st_dev.stc.ctp_run_status)) return IRQ_RETVAL(IRQ_HANDLED);
+
+    if((int)read_and_report_touch_points(readbuffer, report_size) >= 0)
+    {
+        //int & iic is ok, dog feed
+        semi_touch_watch_dog_feed(st_dev.stc.dog_feed_flag);
+
+        pointNum = (readbuffer[1] & 0x0f);
+        ppt = (union rpt_point_t*)&readbuffer[2];
+
+        if(0xFD == readbuffer[0]) 
+        {
+            //firmware report heatbeat packet
+            return IRQ_RETVAL(IRQ_HANDLED);
+        }
+        else if(0xFC == readbuffer[0] && semi_touch_proximity_report(readbuffer[1]))
+        {
+            return IRQ_RETVAL(IRQ_HANDLED);
+        }
+        else if(0xFE == readbuffer[0] && semi_touch_gesture_report(readbuffer[1]))
+        {
+            return IRQ_RETVAL(IRQ_HANDLED);
+        }
+
+#if MULTI_PROTOCOL_TYPE_A == MULTI_PROTOCOL_TYPE
+        for(index = 0; index < SEMI_TOUCH_MAX_POINTS; index++)
+        { 
+            //EVENT_UP = 0x04
+            pointed = (0x04 == ppt->rp.event) ? false : true;
+
+            if(ppt->rp.id != 0x0f)
+            {
+                if(semi_touch_vkey_handled(pointed, (unsigned int)(ppt->rp.x_h4 << 8) | ppt->rp.x_l8, (unsigned int)(ppt->rp.y_h4 << 8) | ppt->rp.y_l8))
+                {
+
+                }
+                else
+                {
+                    if(pointed)
+                    {
+                        input_report_key(st_dev.input, BTN_TOUCH, 1);
+                        input_report_abs(st_dev.input, ABS_MT_POSITION_X, (unsigned int)(ppt->rp.x_h4 << 8) | ppt->rp.x_l8);
+                        input_report_abs(st_dev.input, ABS_MT_POSITION_Y, (unsigned int)(ppt->rp.y_h4 << 8) | ppt->rp.y_l8);
+                        input_report_abs(st_dev.input, ABS_MT_TOUCH_MAJOR, ppt->rp.z);
+                        input_report_abs(st_dev.input, ABS_MT_WIDTH_MAJOR, ppt->rp.z);
+                        input_report_abs(st_dev.input, ABS_MT_TRACKING_ID, ppt->rp.id);
+                        input_mt_sync(st_dev.input);
+                    }
+                    else
+                    {
+                    }
+                }
+            }
+            ppt++;
+        }
+#elif MULTI_PROTOCOL_TYPE_B == MULTI_PROTOCOL_TYPE
+        for(index = 0; index < SEMI_TOUCH_MAX_POINTS; index++)
+        { 
+            //EVENT_UP = 0x04
+            pointed = (0x04 == ppt->rp.event) ? false : true;
+
+            if(ppt->rp.id != 0x0f)
+            {
+                if(semi_touch_vkey_handled(pointed, (unsigned int)(ppt->rp.x_h4 << 8) | ppt->rp.x_l8, (unsigned int)(ppt->rp.y_h4 << 8) | ppt->rp.y_l8))
+                {
+
+                }
+                else
+                {
+                    input_mt_slot(st_dev.input, ppt->rp.id);
+                    input_mt_report_slot_state(st_dev.input, MT_TOOL_FINGER, pointed);
+                    if(pointed)
+                    {
+                        input_report_abs(st_dev.input, ABS_MT_POSITION_X, (unsigned int)(ppt->rp.x_h4 << 8) | ppt->rp.x_l8);
+                        input_report_abs(st_dev.input, ABS_MT_POSITION_Y, (unsigned int)(ppt->rp.y_h4 << 8) | ppt->rp.y_l8);
+                        input_report_abs(st_dev.input, ABS_MT_TOUCH_MAJOR, ppt->rp.z);
+                        input_report_abs(st_dev.input, ABS_MT_WIDTH_MAJOR, ppt->rp.z);
+                        input_report_key(st_dev.input, BTN_TOUCH, 1);
+                    }
+                    else
+                    {
+                    }
+                }
+            }
+            ppt++;
+        }
+#endif
+    }
+    if(0 == pointNum) 
+    {
+        semi_touch_clear_report();
+    }
+    else
+    {
+        input_sync(st_dev.input);
+    }
+
+    return IRQ_RETVAL(IRQ_HANDLED);
+}
+
+#if SEMI_TOUCH_IRQ_VAR_QUEUE
+static void semi_touch_irq_work_fun(struct work_struct *work)
+{
+    semi_touch_irq_handler_imp(st_dev.client->irq, &st_dev);
+}
+
+static irqreturn_t semi_touch_irq_handler(int irq, void *p)
+{
+    if(SEMI_DRV_ERR_OK == semi_touch_wake_lock())
+    {
+        semi_touch_queue_asyn_work(work_queue_interrupt, semi_touch_irq_work_fun, 0);
+    }
+
+    return IRQ_RETVAL(IRQ_HANDLED);
+}
+#endif
+
+irqreturn_t semi_touch_clear_report(void)
+{
+#if MULTI_PROTOCOL_TYPE_A == MULTI_PROTOCOL_TYPE
+    input_report_key(st_dev.input, BTN_TOUCH, 0);
+    input_mt_sync(st_dev.input);
+    input_sync(st_dev.input);
+#elif MULTI_PROTOCOL_TYPE_B == MULTI_PROTOCOL_TYPE
+    int index = 0;
+    for(index = 0; index < SEMI_TOUCH_MAX_POINTS; index++)
+    {
+        input_mt_slot(st_dev.input, index);
+        input_mt_report_slot_state(st_dev.input, MT_TOOL_FINGER, false);
+        
+    }
+    input_report_key(st_dev.input, BTN_TOUCH, 0);
+    input_sync(st_dev.input);
+#endif
+    
+    return IRQ_RETVAL(IRQ_HANDLED);
+}
+
+static int semi_touch_irq_init(struct sm_touch_dev *st_dev)
+{
+    int ret = 0;
+    struct i2c_client *client = st_dev->client;
+
+    client->irq = semi_touch_get_irq(st_dev->int_pin);
+    check_return_if_fail(client->irq, NULL);
+
+#if SEMI_TOUCH_IRQ_VAR_QUEUE
+    semi_touch_create_work_queue(work_queue_interrupt, typename(work_queue_interrupt));
+    ret = devm_request_irq(&client->dev, client->irq, semi_touch_irq_handler, IRQF_TRIGGER_FALLING | IRQF_ONESHOT | IRQF_NO_SUSPEND, client->name, st_dev);
+#else
+    ret = devm_request_threaded_irq(&client->dev, client->irq, NULL, semi_touch_irq_handler_imp, IRQF_TRIGGER_FALLING | IRQF_ONESHOT | IRQF_NO_SUSPEND, client->name, st_dev);
+#endif
+    check_return_if_fail(ret, NULL);
+
+    return 0;
+}
+
+int semi_touch_resolution_adaption(struct sm_touch_dev *st_dev)
+{
+    int ret = -SEMI_DRV_ERR_HAL_IO;
+    unsigned char readbuffer[256] = {0};
+    unsigned short index, pix_x, pix_y;
+    const int vkey_evt[] = SEMI_TOUCH_KEY_EVT;
+
+    for(index = 0; index < 3; index++)
+    {
+        ret = semi_touch_read_bytes(0x20000080, readbuffer, sizeof(readbuffer));
+        check_return_if_fail(ret, NULL);
+        if(0 == caculate_checksum_u16((unsigned short*)readbuffer, sizeof(readbuffer)))
+        {
+            break;
+        }
+        kernel_log_d("config checksum mismatch, retry = %d\n", index);
+    }
+    
+    //xy switch
+    if(readbuffer[0x0f] & 0x02)
+    {
+        pix_x = (unsigned short)((readbuffer[0x09] << 8) + readbuffer[0x08]);
+        pix_y = (unsigned short)((readbuffer[0x07] << 8) + readbuffer[0x06]);
+    }
+    else
+    {
+        pix_x = (unsigned short)((readbuffer[0x07] << 8) + readbuffer[0x06]);
+        pix_y = (unsigned short)((readbuffer[0x09] << 8) + readbuffer[0x08]);
+    }
+    
+    input_set_abs_params(st_dev->input, ABS_MT_POSITION_X, 0, pix_x, 0, 0);
+    input_set_abs_params(st_dev->input, ABS_MT_POSITION_Y, 0, pix_y, 0, 0);
+
+    kernel_log_d("resolution = (%d, %d)\n", pix_x, pix_y);
+
+    st_dev->stc.vkey_num = readbuffer[0x52];
+    memcpy(st_dev->stc.vkey_evt_arr, vkey_evt, sizeof(int) * MAX_VKEY_NUMBER);
+    //key xy switch
+    for(index = 0; (index < st_dev->stc.vkey_num) && (index < MAX_VKEY_NUMBER); index++)
+    {
+        if(readbuffer[0x53] & 0x02)
+        {
+            pix_x = (readbuffer[0x55] << 8) + readbuffer[0x54];
+            pix_y = st_dev->stc.vkey_num > 5 ? (index + 1) : (readbuffer[0x57 + index * 2] << 8) + readbuffer[0x56 + index * 2];
+        }
+        else
+        {
+            pix_y = (readbuffer[0x55] << 8) + readbuffer[0x54];
+            pix_x = st_dev->stc.vkey_num > 5 ? (index + 1) : (readbuffer[0x57 + index * 2] << 8) + readbuffer[0x56 + index * 2];
+        }
+
+        st_dev->stc.vkey_dim_map[index][0] = pix_x;
+        st_dev->stc.vkey_dim_map[index][1] = pix_y;
+        st_dev->stc.vkey_dim_map[index][2] = 10;
+        st_dev->stc.vkey_dim_map[index][3] = 10;
+
+        set_bit(st_dev->stc.vkey_evt_arr[index], st_dev->input->keybit);   
+        input_set_capability(st_dev->input, EV_KEY, st_dev->stc.vkey_evt_arr[index]);
+
+        kernel_log_d("vkey index = %d, xy = (%d, %d), event = %d\n", index, pix_x, pix_y, st_dev->stc.vkey_evt_arr[index]);
+    }
+
+    return ret;
+}
+
+int semi_touch_init(struct i2c_client *client)
+{
+    int ret = 0;
+    memset(&st_dev, 0, sizeof(st_dev));
+    st_dev.client = client;
+
+    st_dev.pwron = devm_gpiod_get(&(client->dev), "pwr", GPIOD_OUT_LOW);
+    if (IS_ERR(st_dev.pwron))
+	    printk("failed to get tp enable gpio\n");
+    gpiod_set_value(st_dev.pwron, 1);
+    st_dev.int_pin = semi_touch_get_int();
+    check_return_if_fail(st_dev.int_pin, NULL);
+    st_dev.rst_pin = semi_touch_get_rst();
+    check_return_if_fail(st_dev.rst_pin, NULL);
+
+    semi_io_direction_in(st_dev.int_pin);
+    semi_io_direction_out(st_dev.rst_pin, 1);
+
+    mutex_init(&st_dev.hal.bus_lock);
+
+    st_dev.hal.hal_write_fun = i2c_write_bytes;
+    st_dev.hal.hal_read_fun = i2c_read_bytes;
+    st_dev.hal.hal_param = client;
+
+    ret = semi_touch_i2c_init();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_device_prob();
+    check_return_if_fail(ret, NULL);
+
+    ret = input_device_init(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_create_apk_proc(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_reset(do_report_after_reset);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_bootup_update_check();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_mode_init(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_resolution_adaption(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_irq_init(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_custom_work(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_work_done();
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
+
+int semi_touch_deinit(struct i2c_client *client)
+{
+    int ret = 0;
+
+    ret = semi_touch_custom_clean_up();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_destroy_work_queue();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_remove_apk_proc(&st_dev);
+    check_return_if_fail(ret, NULL);
+
+    input_device_deinit();
+
+    semi_touch_resource_release();
+    gpiod_set_value(st_dev.pwron, 0);
+
+    return ret;
+}
diff --git a/drivers/input/touchscreen/chsc5xxx/semi_touch_function.c b/drivers/input/touchscreen/chsc5xxx/semi_touch_function.c
new file mode 100644
index 000000000000..4d5f270c455c
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/semi_touch_function.c
@@ -0,0 +1,538 @@
+
+#include <linux/gpio.h>
+#include <linux/delay.h>
+#include "semi_touch_interface.h"
+
+enum HAL_IO_DIR { HAL_IO_WRITE, HAL_IO_READ, };
+
+int semi_touch_reset(enum reset_action action)
+{
+    int ret = 0, self_check = 0;
+    //struct i2c_client *client = st_dev.client;
+
+    //ptr_cmd = NULL;
+    set_status_ready_upgrade(st_dev.stc.ctp_run_status);
+    //disable_irq(client->irq);
+
+    semi_io_pin_low(st_dev.rst_pin);
+    msleep(30);
+    semi_io_pin_high(st_dev.rst_pin);
+
+    mdelay(5);
+    semi_touch_write_bytes(0x20000018, (unsigned char*)&self_check, 4);
+
+    if(do_report_after_reset == action)
+    {
+        set_status_pointing(st_dev.stc.ctp_run_status);
+        //enable_irq(client->irq);
+    }
+
+    return ret;
+}
+
+int semi_touch_suspend_ctrl(unsigned char en)
+{
+    int ret = 0;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    memset(&cmd_send_tp, 0, sizeof(cmd_send_tp));
+    //struct m_ctp_rsp_std_t ack_from_tp;
+
+    if(en)
+    {
+        cmd_send_tp.id = CMD_CTP_IOCTL;
+        cmd_send_tp.d0 = 0x05;
+        cmd_send_tp.d1 = en;
+
+        ret = cmd_send_to_tp_no_check(&cmd_send_tp);
+        check_return_if_fail(ret, NULL);
+    }
+    else
+    {
+        semi_touch_reset_and_detect();
+    }
+
+    if(en)
+        enter_suspend_gate(st_dev.stc.ctp_run_status);
+    else
+        leave_suspend_gate(st_dev.stc.ctp_run_status);
+
+    return ret;
+}
+
+int semi_touch_proximity_switch(unsigned char en)
+{
+    int ret = 0;
+
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+    memset(&cmd_send_tp, 0, sizeof(cmd_send_tp));
+
+    if(!is_proximity_function_en(st_dev.stc.custom_function_en)) 
+        return ret;
+
+    cmd_send_tp.id = CMD_CTP_IOCTL;
+    cmd_send_tp.d0 = 0x11;
+    cmd_send_tp.d1 = en;
+
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    check_return_if_fail(ret, NULL);
+
+    if(en)
+        enter_proximity_gate(st_dev.stc.ctp_run_status);
+    else
+        leave_proximity_gate(st_dev.stc.ctp_run_status);
+    
+    return ret;
+}
+
+int semi_touch_glove_switch(unsigned char en)
+{
+    int ret = 0;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+    memset(&cmd_send_tp, 0, sizeof(cmd_send_tp));
+
+    if(!is_glove_function_en(st_dev.stc.custom_function_en)) 
+        return ret;
+
+    cmd_send_tp.id = CMD_CTP_IOCTL;
+    cmd_send_tp.d0 = 0x10;
+    cmd_send_tp.d1 = en;
+
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    check_return_if_fail(ret, NULL);
+
+    if(en)
+        enter_glove_gate(st_dev.stc.ctp_run_status);
+    else
+        leave_glove_gate(st_dev.stc.ctp_run_status);
+
+    return ret;
+}
+
+int semi_touch_guesture_switch(unsigned char en)
+{
+    int ret = 0;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+    memset(&cmd_send_tp, 0, sizeof(cmd_send_tp));
+
+    if(!is_guesture_function_en(st_dev.stc.custom_function_en)) 
+        return ret;
+
+    cmd_send_tp.id = CMD_CTP_IOCTL;
+    cmd_send_tp.d0 = 0x02;
+    cmd_send_tp.d1 = en;
+
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    check_return_if_fail(ret, NULL);
+
+    if(en)
+        enter_guesture_gate(st_dev.stc.ctp_run_status);
+    else
+        leave_guesture_gate(st_dev.stc.ctp_run_status);
+
+    return ret;
+}
+
+int semi_touch_orientation_switch(unsigned char en)
+{
+    int ret = 0;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+    memset(&cmd_send_tp, 0, sizeof(cmd_send_tp));
+
+    cmd_send_tp.id = CMD_CTP_IOCTL;
+    cmd_send_tp.d0 = 0x2A;
+    cmd_send_tp.d1 = en;
+
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    check_return_if_fail(ret, NULL);
+
+    if(en)
+        enter_orientation_gate(st_dev.stc.ctp_run_status);
+    else
+        leave_orientation_gate(st_dev.stc.ctp_run_status);
+
+    return ret;
+}
+
+int semi_touch_heart_beat(void)
+{
+    int ret = 0;
+    unsigned int regdata = 0;
+    unsigned int ctp_stc_backup = st_dev.stc.ctp_run_status;
+
+    if(is_suspend_activate(st_dev.stc.ctp_run_status)) 
+        return ret;
+    if(is_guesture_activate(st_dev.stc.ctp_run_status))
+        return ret;
+    if(!is_esd_function_en(st_dev.stc.custom_function_en))
+        return ret;
+
+    //slave report 0xFD to detect if ic is still alive
+    if(semi_touch_check_watch_dog_feed(st_dev.stc.dog_feed_flag))
+    {
+        //dog feed in time
+    }
+    else
+    {
+        ret = semi_touch_read_bytes(0x20000018, (unsigned char*)&regdata, 4);
+        if(SEMI_DRV_ERR_OK != ret)
+        {
+            //reset tp + iic detected
+            ret = semi_touch_reset_and_detect();
+            check_return_if_fail(ret, NULL);  
+
+            if(is_guesture_activate(ctp_stc_backup))
+            {
+                ret = semi_touch_guesture_switch(1);
+                check_return_if_fail(ret, NULL);
+            }
+            if(is_glove_activate(ctp_stc_backup))
+            {
+                ret = semi_touch_glove_switch(1);
+                check_return_if_fail(ret, NULL);
+            }
+            if(is_proximity_activate(ctp_stc_backup))
+            {
+                ret = semi_touch_proximity_switch(1);
+                check_return_if_fail(ret, NULL);
+            }
+        }
+    }
+
+    semi_touch_reset_watch_dog(st_dev.stc.dog_feed_flag);
+    
+    return ret;
+}
+
+int semi_touch_write_bytes(unsigned int reg, const unsigned char* buffer, unsigned short len)
+{
+    int ret = SEMI_DRV_ERR_OK;
+    unsigned int addr = reg;
+    unsigned short once;
+    static struct hal_io_packet packet;
+    const unsigned short max_len = MAX_IO_BUFFER_LEN;
+    mutex_lock(&st_dev.hal.bus_lock);
+
+    while(len > 0)
+    {
+        once = min(len, max_len);
+        packet.io_register = swab32(addr);
+        memcpy(packet.io_buffer, buffer, once);
+        packet.io_length = once;
+        packet.hal_adapter = st_dev.hal.hal_param;
+
+        ret = (*st_dev.hal.hal_write_fun)(&packet);
+        check_break_if_fail(ret, NULL);
+
+        addr += once;
+        buffer += once;
+        len -= once;
+    }
+
+    mutex_unlock(&st_dev.hal.bus_lock);
+    
+    return ret >= 0 ? SEMI_DRV_ERR_OK : ret;
+}
+
+int semi_touch_read_bytes(unsigned int reg, unsigned char* buffer, unsigned short len)
+{
+    int ret = SEMI_DRV_ERR_OK;
+    unsigned int addr = reg;
+    unsigned short once;
+    static struct hal_io_packet packet;
+    const unsigned short max_len = MAX_IO_BUFFER_LEN;
+    mutex_lock(&st_dev.hal.bus_lock);
+
+    while(len > 0)
+    {
+        once = min(len, max_len);
+        packet.io_register = swab32(addr);
+        packet.io_length = once;
+        packet.hal_adapter = st_dev.hal.hal_param;
+
+        ret = (*st_dev.hal.hal_read_fun)(&packet);
+        check_break_if_fail(ret, NULL);
+        memcpy(buffer, packet.io_buffer, once);
+
+        addr += once;
+        buffer += once;
+        len -= once;
+    }
+
+    mutex_unlock(&st_dev.hal.bus_lock);
+    
+    return ret >= 0 ? SEMI_DRV_ERR_OK : ret;
+}
+
+int cmd_send_to_tp(struct m_ctp_cmd_std_t *ptr_cmd, struct m_ctp_rsp_std_t *ptr_rsp, const int delay)
+{
+    int ret = -SEMI_DRV_ERR_HAL_IO;
+    unsigned int retry = 0, cmd_rsp_ok = 0;
+    int once_delay = delay;
+
+    ptr_cmd->tag = 0xE9;
+    ptr_cmd->chk = 1 + ~caculate_checksum_u16((unsigned short*)&ptr_cmd->d0, sizeof(struct m_ctp_cmd_std_t) - 2);
+    ret = semi_touch_write_bytes(TP_CMD_BUFF_ADDR, (unsigned char*)ptr_cmd, sizeof(struct m_ctp_cmd_std_t));
+    check_return_if_fail(ret, NULL);
+
+    while(retry++ < 40)
+    {
+        once_delay = delay;
+        do{ udelay(1000); once_delay-= 1000; }while(once_delay > 0);
+        ret = semi_touch_read_bytes(TP_RSP_BUFF_ADDR, (unsigned char*)ptr_rsp, sizeof(struct m_ctp_rsp_std_t));
+        check_return_if_fail(ret, NULL);
+
+        if(ptr_cmd->id != ptr_rsp->id)
+        {
+            continue;
+        }
+
+        if(!caculate_checksum_u16((unsigned short*)ptr_rsp, sizeof(struct m_ctp_rsp_std_t)))
+        {
+            if(0 == ptr_rsp->cc)
+            {
+                cmd_rsp_ok = 1; //success
+            }
+            break;
+        }
+    }
+
+    if(!cmd_rsp_ok) ret = -SEMI_DRV_ERR_TIMEOUT;
+
+    return ret;
+}
+
+int cmd_send_to_tp_no_check(struct m_ctp_cmd_std_t *ptr_cmd)
+{
+    int ret = -SEMI_DRV_ERR_HAL_IO;
+
+    ptr_cmd->tag = 0xE9;
+    ptr_cmd->chk = 1 + ~caculate_checksum_u16((unsigned short*)&ptr_cmd->d0, sizeof(struct m_ctp_cmd_std_t) - 2);
+    ret = semi_touch_write_bytes(TP_CMD_BUFF_ADDR, (unsigned char*)ptr_cmd, sizeof(struct m_ctp_cmd_std_t));
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
+
+
+int read_and_report_touch_points(unsigned char *readbuffer, unsigned short len)
+{
+    int ret = 0, retry = 0;
+
+    if(!st_dev.stc.initialize_ok)  
+        ret = -SEMI_DRV_ERR_NO_INIT;
+    check_return_if_fail(ret, NULL);
+    
+    if(is_guesture_activate(st_dev.stc.ctp_run_status))
+    {
+        for(retry = 0; retry < 30; retry++)
+        {
+            msleep(10);
+            ret = semi_touch_read_bytes(st_dev.stc.touch_addr, readbuffer, len);
+            if(ret == SEMI_DRV_ERR_OK) break;
+
+            kernel_log_d("guesture read, retry = %d\n", retry);
+        }
+    }
+    else
+    {
+        ret = semi_touch_read_bytes(st_dev.stc.touch_addr, readbuffer, len);
+        check_return_if_fail(ret, NULL);
+    }
+
+    return ret;
+}
+
+int semi_touch_mode_init(struct sm_touch_dev *st_dev)
+{
+    int ret = -SEMI_DRV_ERR_HAL_IO;
+    unsigned char bootCheckOk = 0;
+    unsigned char readbuffer[8] = {0};
+
+    semi_touch_start_up_check(&bootCheckOk, only_sp_check);
+
+    if(!bootCheckOk)
+    {
+        //reset tp + iic detected
+        semi_touch_reset_and_detect();
+        semi_touch_start_up_check(&bootCheckOk, only_sp_check);
+
+        if(!bootCheckOk)
+        {
+            ret = -SEMI_DRV_ERR_TIMEOUT;
+            check_return_if_fail(ret, NULL);
+        }
+    }
+
+    ret = semi_touch_read_bytes(0x20000020, readbuffer, sizeof(readbuffer));
+    check_return_if_fail(ret, NULL);
+
+    st_dev->chsc_nodes_dir = NULL;
+    st_dev->stc.initialize_ok = true;
+    set_status_pointing(st_dev->stc.ctp_run_status);
+    st_dev->stc.rawdata_addr = 0x20000000 + ( (unsigned int)(readbuffer[0x01] << 8) + readbuffer[0x00] );
+    st_dev->stc.differ_addr = 0x20000000 + ( (unsigned int)(readbuffer[0x03] << 8) + readbuffer[0x02] );
+    st_dev->stc.base_addr = 0x20000000 + ( (unsigned int)(readbuffer[0x05] << 8) + readbuffer[0x04] );
+    st_dev->stc.touch_addr = 0x20000000 + 0x2c;
+
+    semi_touch_create_work_queue(work_queue_custom_work, typename(work_queue_custom_work));
+
+    return ret;
+}
+
+/*
+    Judge whether it's Chipsemi by IIC, if YES return SEMI_DRV_ERR_OK.
+*/
+int semi_touch_device_prob(void)
+{
+    int retry, regdata;
+    int ret = -SEMI_DRV_ERR_HAL_IO;
+
+    msleep(10);
+    for(retry = 0; retry < 3; retry++)
+    {
+        ret = semi_touch_read_bytes(0x20000018, (unsigned char*)&regdata, 4);
+        if(ret == SEMI_DRV_ERR_OK)
+        {
+            break;
+        }
+    }
+
+    //regdata = 0xff0 | (1<<17);
+    //semi_touch_write_bytes(0x4000700c, (unsigned char*)&regdata, 4);
+    
+    return (SEMI_DRV_ERR_OK == ret) ? SEMI_DRV_ERR_OK : -SEMI_DRV_ERR_HAL_IO;
+}
+int semi_touch_reset_and_detect(void)
+{
+    int ret = -SEMI_DRV_ERR_HAL_IO;
+
+    semi_touch_reset(no_report_after_reset);
+
+    ret = semi_touch_device_prob();
+
+    msleep(50);
+    set_status_pointing(st_dev.stc.ctp_run_status);
+
+    return ret;
+}
+int semi_touch_start_up_check(unsigned char* checkOK, unsigned char opt)
+{
+    int ret = -EINVAL, retry = 0; 
+    img_header_t image_header;
+
+    st_dev.fw_ver = st_dev.vid_pid = 0;
+
+    for(retry = 0; retry < 10; retry++)
+    {
+        ret = semi_touch_read_bytes(0x20000014, (unsigned char*)&image_header, sizeof(image_header));
+        check_return_if_fail(ret, NULL);
+
+        if(image_header.sig == 0x43534843) //"CHSC"
+        { 
+            *checkOK = 1;
+            st_dev.fw_ver = image_header.fw_ver;
+            st_dev.vid_pid = image_header.vid_pid;
+            break;
+        }
+        else if(image_header.sig == 0x4F525245) //boot self check fail
+        { 
+            *checkOK = 0;
+            kernel_log_d("boot self check fail, upgrade is needed\r\n");
+            break;
+        }
+        else //may be impossible; no firmware? 
+        { 
+            *checkOK = 0;
+            kernel_log_d("retry-%d, firmware is not ready\r\n", retry);
+        }
+
+        msleep(10);
+    }
+
+    if(0 == *checkOK && check_backup_if_fail == opt)
+    {
+        ret = semi_touch_get_backup_pid(&st_dev.vid_pid);
+        check_return_if_fail(ret, NULL);
+    }
+
+    return ret;
+}
+int semi_touch_destroy_work_queue(void) 
+{ 
+    int index = 0;
+
+    for(index = 0; index < st_dev.asyn_work.new_work_idx; index++)
+    {
+        cancel_delayed_work(&st_dev.asyn_work.works_list[index].work);
+    }
+
+    for(index = 0; index < work_queue_max; index++)
+    {
+        if(st_dev.asyn_work.work_queue[index])
+        {
+            destroy_workqueue(st_dev.asyn_work.work_queue[index]);
+            st_dev.asyn_work.work_queue[index] = NULL;
+        }
+    }
+
+    st_dev.asyn_work.new_work_idx = 0;
+
+    return SEMI_DRV_ERR_OK;
+}
+int semi_touch_create_work_queue(enum work_queue_t queue_type, const char* queue_name)
+{
+    if(NULL == st_dev.asyn_work.work_queue[queue_type]) 
+    { 
+        st_dev.asyn_work.work_queue[queue_type] = create_singlethread_workqueue(queue_name); 
+        check_return_if_zero(st_dev.asyn_work.work_queue[queue_type], NULL); 
+    }
+    else
+    {
+        //aready exist!!!
+    }
+
+    return SEMI_DRV_ERR_OK;
+}
+int semi_touch_queue_asyn_work(enum work_queue_t queue_type, work_func_t work_func, int ms)
+{
+    int ret = 0, work_index = 0;
+    struct delayed_work *workimp = NULL;
+
+    check_return_if_zero(st_dev.asyn_work.work_queue[queue_type], NULL);
+
+    for(work_index = 0; work_index < st_dev.asyn_work.new_work_idx; work_index++)
+    {
+        if((unsigned long)work_func == st_dev.asyn_work.works_list[work_index].uid)
+        {
+            workimp = &st_dev.asyn_work.works_list[work_index].work;
+            break;
+        }
+    }
+
+    if(NULL == workimp)
+    {
+        if(st_dev.asyn_work.new_work_idx < ASYN_WORK_MAX)
+        {
+            work_index = st_dev.asyn_work.new_work_idx++;
+            workimp = &st_dev.asyn_work.works_list[work_index].work;
+            st_dev.asyn_work.works_list[work_index].uid = (unsigned long)work_func;
+            INIT_DELAYED_WORK(workimp, work_func);
+        }
+    }
+
+    if(NULL != workimp)
+    {
+        queue_delayed_work(st_dev.asyn_work.work_queue[queue_type], workimp, msecs_to_jiffies(ms));
+    }
+    else
+    {
+        ret = -SEMI_DRV_ERR_NOT_MATCH;
+        check_return_if_fail(ret, NULL);
+    }
+
+    return ret;
+}
\ No newline at end of file
diff --git a/drivers/input/touchscreen/chsc5xxx/semi_touch_interface.h b/drivers/input/touchscreen/chsc5xxx/semi_touch_interface.h
new file mode 100644
index 000000000000..c23f76a6e47d
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/semi_touch_interface.h
@@ -0,0 +1,93 @@
+#ifndef __SEMI_TOUCH_INTERFACE_H__
+#define __SEMI_TOUCH_INTERFACE_H__
+#include "head_def.h"
+#include "fw_code_bin.h"
+/**************************************************************************************************/
+/*basic util interface*/
+/**************************************************************************************************/
+unsigned short caculate_checksum_u16(unsigned short * buf, unsigned int length);
+unsigned short caculate_checksum_u816(unsigned char * buf, unsigned int length);
+unsigned int caculate_checksum_ex(unsigned char * buf, unsigned int length);
+
+
+/**************************************************************************************************/
+/*i2c_communication interface*/
+/**************************************************************************************************/
+int i2c_write_bytes(struct hal_io_packet* ppacket);
+int i2c_read_bytes(struct hal_io_packet* ppacket);
+int semi_touch_i2c_init(void);
+int semi_touch_i2c_i2c_exit(void);
+
+
+/**************************************************************************************************/
+/*semi_touch_function interface*/
+/**************************************************************************************************/
+#define semi_touch_watch_dog_feed(watch_dog_feed)            (watch_dog_feed = true)
+#define semi_touch_check_watch_dog_feed(watch_dog_feed)      (watch_dog_feed == true)
+#define semi_touch_reset_watch_dog(watch_dog_feed)           (watch_dog_feed = false)
+int semi_touch_reset(enum reset_action action);
+int semi_touch_device_prob(void);
+int semi_touch_reset_and_detect(void);
+int semi_touch_start_up_check(unsigned char* checkOK, unsigned char opt);
+int semi_touch_heart_beat(void);
+int semi_touch_write_bytes(unsigned int reg, const unsigned char* buffer, unsigned short len);
+int semi_touch_read_bytes(unsigned int reg, unsigned char* buffer, unsigned short len);
+int cmd_send_to_tp(struct m_ctp_cmd_std_t *ptr_cmd, struct m_ctp_rsp_std_t *ptr_rsp, const int delay);
+int cmd_send_to_tp_no_check(struct m_ctp_cmd_std_t *ptr_cmd);
+int read_and_report_touch_points(unsigned char *readbuffer, unsigned short len);
+int semi_touch_mode_init(struct sm_touch_dev *st_dev);
+int semi_touch_suspend_ctrl(unsigned char en);
+int semi_touch_glove_switch(unsigned char en);
+int semi_touch_guesture_switch(unsigned char en);
+int semi_touch_proximity_switch(unsigned char en);
+int semi_touch_orientation_switch(unsigned char en);
+int semi_touch_queue_asyn_work(enum work_queue_t queue_type, work_func_t work_func, int ms);
+int semi_touch_create_work_queue(enum work_queue_t queue_type, const char* queue_name); 
+int semi_touch_destroy_work_queue(void);
+
+
+/**************************************************************************************************/
+/*semi_touch_apk interface*/
+/**************************************************************************************************/
+#define SEMI_TOUCH_PROC_NAME              "semi_touch_debug"
+int semi_touch_create_apk_proc(struct sm_touch_dev* st_dev);
+int semi_touch_remove_apk_proc(struct sm_touch_dev* st_dev);
+
+
+/**************************************************************************************************/
+/*semi_touch_upgrade interface*/
+/**************************************************************************************************/
+int semi_touch_get_backup_pid(unsigned int *id);
+int semi_touch_run_ram_code(unsigned char code);
+int semi_touch_memory_write(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_memory_read(struct apk_complex_data* apk_comlex_addr);
+int semi_touch_bootup_update_check(void);
+int semi_touch_online_update_check(char* file_path);
+
+
+/**************************************************************************************************/
+/*semi_touch_device interface*/
+/**************************************************************************************************/
+int semi_touch_init(struct i2c_client *client);
+int semi_touch_deinit(struct i2c_client *client);
+irqreturn_t semi_touch_clear_report(void);
+
+
+/**************************************************************************************************/
+/*semi_touch_custom interface*/
+/**************************************************************************************************/
+#define MAKE_NODE_UNDER_PROC                  0
+#define MAKE_NDDE_UNDER_SYS                   1
+#define SEMI_TOUCH_PROC_DIR                   "touchscreen"
+#define SEMI_TOUCH_MAKE_NODES_DIR             MAKE_NODE_UNDER_PROC
+int semi_touch_custom_work(struct sm_touch_dev *st_dev);
+int semi_touch_custom_clean_up(void);
+int semi_touch_wake_lock(void);
+bool semi_touch_gesture_report(unsigned char gesture_id);
+
+/**************************************************************************************************/
+/*factory test interface*/
+/**************************************************************************************************/
+int semi_touch_start_factory_test(void);
+
+#endif//__SEMI_TOUCH_INTERFACE_H__
\ No newline at end of file
diff --git a/drivers/input/touchscreen/chsc5xxx/semi_touch_upgrade.c b/drivers/input/touchscreen/chsc5xxx/semi_touch_upgrade.c
new file mode 100644
index 000000000000..b8985fb64841
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/semi_touch_upgrade.c
@@ -0,0 +1,622 @@
+#include <linux/delay.h>
+#include <linux/kthread.h>
+#include <linux/slab.h>
+#include "semi_touch_interface.h"
+
+#if SEMI_TOUCH_BOOTUP_UPDATE_EN
+#include "fw_update_packet.h"
+#endif
+
+#define BURN_W                              0x0
+#define BURN_R                              0x3
+#define CORE_R                              0x4
+#define CORE_W                              0x5
+
+enum MCAP_RAM_CODE
+{
+    RAM_CODE_BURN_MCAP_SHARE  = 0, 
+    RAM_CODE_SHORT_DATA_SHARE = 1,
+    SEMI_TOUCH_RAM_CODE_COUNT,
+};
+
+struct bin_code_chain bin_code_map[SEMI_TOUCH_RAM_CODE_COUNT] = 
+{
+    {fw_burn_mcapshare, sizeof(fw_burn_mcapshare)},
+    {fw_short_mcapshare, sizeof(fw_short_mcapshare)},
+};
+
+int semi_touch_write_core_data_and_check(unsigned int addr, const unsigned char* buffer, unsigned short len)
+{
+    int ret = 0, once = 0, index = 0, retry = 0;
+    unsigned char core_cmp_buffer[MAX_CORE_WRITE_LEN];
+    const int max_try = 3;
+
+    while(len > 0)
+    {
+        retry = 0;
+        do
+        {
+            ret = SEMI_DRV_ERR_OK;
+            once = min(len, (unsigned short)MAX_CORE_WRITE_LEN);
+            ret = semi_touch_write_bytes(addr, buffer, once);
+            ret = semi_touch_read_bytes(addr, core_cmp_buffer, once);
+            for(index = 0; index < once; index++)
+            {
+                if(core_cmp_buffer[index] != buffer[index])
+                {
+                    //kernel_log_d("err pos = %d\r\n", index);
+                    ret = -SEMI_DRV_ERR_CHECKSUM;
+                    break;
+                }
+            }
+            if(SEMI_DRV_ERR_OK == ret)
+            {
+                break;
+            }         
+        }while(++retry < max_try);
+
+        check_return_if_fail(ret, NULL);
+        
+        addr += once;
+        buffer += once;
+        len-= once;
+    }
+
+    return ret;
+}
+int semi_touch_run_ram_code(unsigned char code)
+{
+    int retry;
+    int ret = 0, reg_value = 0;
+    
+    if(code >= SEMI_TOUCH_RAM_CODE_COUNT) return -EINVAL;
+
+    for(retry = 0; retry < 5; retry++)
+    {
+        //reset mcu
+        semi_touch_reset(no_report_after_reset);
+        
+        //hold mcu
+        reg_value = TP_HOLD_MCU_VAL;
+        ret = semi_touch_write_bytes(TP_HOLD_MCU_ADDR, (unsigned char*)&reg_value, 4);
+        if(ret < 0){
+            continue;
+        }
+        //open auto feed
+        reg_value = TP_AUTO_FEED_VAL;
+        ret = semi_touch_write_bytes(TP_AUTO_FEED_ADDR, (unsigned char*)&reg_value, 4);
+        if(ret < 0){
+            continue;
+        }
+
+        //run ramcode
+        ret = semi_touch_write_core_data_and_check(0x20000000, bin_code_map[code].bin_code_addr, bin_code_map[code].bin_code_len);
+        if(ret < 0){
+            continue;
+        }
+
+        break;
+    }
+    check_return_if_fail(ret, NULL);
+
+    //remap
+    reg_value = TP_REMAP_MCU_VAL;
+    ret = semi_touch_write_bytes(TP_REMAP_MCU_ADDR, (unsigned char*)&reg_value, 4);
+    check_return_if_fail(ret, NULL);
+
+    //release mcu
+    reg_value = TP_RELEASE_MCU_VAL;
+    ret = semi_touch_write_bytes(TP_RELEASE_MCU_ADDR, (unsigned char*)&reg_value, 4);
+    check_return_if_fail(ret, NULL);
+
+    mdelay(30);
+
+    return 0;
+}
+
+/*
+    This function will put IC into NVM mode, call it carefully and must reset 
+    the chip before entering normal mode.
+*/
+int semi_touch_enter_burn_mode(void)
+{
+    int ret = 0;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+
+    cmd_send_tp.id = CMD_IDENTITY;
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    //if empty chip
+
+    if((ack_from_tp.d0 == 0xE9A2) && (ack_from_tp.d1 == 0x165d))
+    {
+        set_status_upgrade_run(st_dev.stc.ctp_run_status);
+        return SEMI_DRV_ERR_OK;
+    }
+
+    ret = semi_touch_run_ram_code(RAM_CODE_BURN_MCAP_SHARE);
+    check_return_if_fail(ret, NULL);
+
+    cmd_send_tp.id = CMD_IDENTITY;
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+    check_return_if_fail(ret, NULL);
+
+    if((ack_from_tp.d0 == 0xE9A2) && (ack_from_tp.d1 == 0x165d))
+    {
+        set_status_upgrade_run(st_dev.stc.ctp_run_status);
+        return SEMI_DRV_ERR_OK;
+    }
+
+    set_status_pointing(st_dev.stc.ctp_run_status);
+    return -SEMI_DRV_ERR_HAL_IO;
+}
+int semi_touch_core_write(struct apk_complex_data* apk_comlex_addr)
+{
+    int ret = -EINVAL;
+    struct m_ctp_cmd_std_t* ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+    unsigned short left = ptr_cmd->d1;
+    unsigned int addr = (ptr_cmd->d5 << 16) + ptr_cmd->d0;
+
+    if(ptr_cmd->d2 != caculate_checksum_u816((unsigned char*)apk_comlex_addr->stm_txrx_buffer, left))
+    {
+        return -SEMI_DRV_ERR_CHECKSUM;
+    }
+
+    ret = semi_touch_write_bytes(addr, apk_comlex_addr->stm_txrx_buffer, left);
+
+    return ret;
+}
+int semi_touch_core_read(struct apk_complex_data* apk_comlex_addr)
+{
+    int ret = -EINVAL;
+    struct m_ctp_cmd_std_t* ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+    struct m_ctp_rsp_std_t* driv_rsp = (struct m_ctp_rsp_std_t*)apk_comlex_addr->stm_rsp_buffer;
+    unsigned short left = ptr_cmd->d1;
+    unsigned int addr = (ptr_cmd->d5 << 16) + ptr_cmd->d0;
+
+    ret = semi_touch_read_bytes(addr, apk_comlex_addr->stm_txrx_buffer, left);
+    driv_rsp->d0 = caculate_checksum_u816(apk_comlex_addr->stm_txrx_buffer, left);
+
+    return ret;
+}
+int semi_touch_burn_write(struct apk_complex_data* apk_comlex_addr)
+{
+    int ret = -EINVAL;
+    struct m_ctp_cmd_std_t* ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+    struct m_ctp_rsp_std_t* driv_rsp = (struct m_ctp_rsp_std_t*)apk_comlex_addr->stm_rsp_buffer;
+    unsigned short left = ptr_cmd->d1;
+
+    ret = semi_touch_enter_burn_mode();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_write_bytes(TP_WR_BUFF_ADDR, apk_comlex_addr->stm_txrx_buffer, left);
+    check_return_if_fail(ret, NULL);
+
+    return cmd_send_to_tp(ptr_cmd, driv_rsp, 7500);
+}
+int semi_touch_burn_read(struct apk_complex_data* apk_comlex_addr)
+{
+    int ret = -EINVAL;
+    struct m_ctp_cmd_std_t *ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+    struct m_ctp_rsp_std_t ack_from_tp;
+    unsigned short left = ptr_cmd->d1;
+
+    ret = semi_touch_enter_burn_mode();
+    check_return_if_fail(ret, NULL);
+
+    ret = cmd_send_to_tp(ptr_cmd, &ack_from_tp, 200);
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_read_bytes(TP_RD_BUFF_ADDR, apk_comlex_addr->stm_txrx_buffer, left);
+    memcpy(apk_comlex_addr->stm_rsp_buffer, &ack_from_tp, sizeof(ack_from_tp));
+
+    return ret;
+}
+int semi_touch_memory_write(struct apk_complex_data* apk_comlex_addr)
+{
+    struct m_ctp_cmd_std_t *ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+
+    if(CORE_W == ptr_cmd->d3)
+    {
+        return semi_touch_core_write(apk_comlex_addr);
+    }
+    else
+    {
+        return semi_touch_burn_write(apk_comlex_addr);
+    }
+}
+int semi_touch_memory_read(struct apk_complex_data* apk_comlex_addr)
+{
+    struct m_ctp_cmd_std_t *ptr_cmd = (struct m_ctp_cmd_std_t*)apk_comlex_addr->stm_cmd_buffer;
+
+    if(CORE_R == ptr_cmd->d3)
+    {
+        return semi_touch_core_read(apk_comlex_addr);
+    }
+    else
+    {
+        return semi_touch_burn_read(apk_comlex_addr);
+    }
+}
+
+int semi_touch_bulk_read(unsigned char *pdes, unsigned int adr, unsigned int len)
+{
+    int ret = -EINVAL;
+    unsigned int left = len;
+    unsigned int local_check, retry;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+
+    cmd_send_tp.id = CMD_MEM_RD;
+
+    while (left) 
+    {
+        len = (left > 1024) ? 1024 : left;
+
+        cmd_send_tp.d0 = adr & 0xffff;
+        cmd_send_tp.d1 = len;
+        cmd_send_tp.d2 = 0;
+        cmd_send_tp.d3 = BURN_R;
+        cmd_send_tp.d5 = (adr >> 16) & 0xffff;
+
+        retry = 0;
+        while (retry++ < 3) 
+        {
+            ack_from_tp.id = CMD_NA;
+            ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 200);
+            if(SEMI_DRV_ERR_OK != ret) continue;
+
+            semi_touch_read_bytes(TP_RD_BUFF_ADDR, pdes, len);
+            local_check = caculate_checksum_ex(pdes, len);
+            if ((ack_from_tp.d0 != (unsigned short)local_check) || (ack_from_tp.d1 != (unsigned short)(local_check >> 16))) continue;
+
+            break;
+        }
+
+        adr  += len;
+        left -= len;
+        pdes += len;
+        check_break_if_fail(ret, NULL);
+    }
+
+    return ret;
+}
+
+int semi_touch_bulk_write(unsigned char *psrc, unsigned int adr, unsigned int len)
+{
+    int ret = -EINVAL;
+    unsigned int left = len;
+    unsigned int retry, combChk;
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+
+    cmd_send_tp.id = CMD_MEM_WR;
+
+    while (left) 
+    {
+        len     = (left > 1024) ? 1024 : left;
+        combChk = caculate_checksum_ex(psrc, len);
+
+        cmd_send_tp.d0 = adr & 0xffff;    /* addrss space[0,64K)  */    
+        cmd_send_tp.d1 = len;
+        cmd_send_tp.d3 = BURN_W;
+        cmd_send_tp.d2 = (unsigned short) combChk;
+        cmd_send_tp.d4 = (unsigned short) (combChk >> 16);
+        cmd_send_tp.d5 = (adr >> 16) & 0xffff;
+
+        retry = 0;
+        while (++retry <= 3) 
+        {
+            ret = semi_touch_write_bytes(TP_WR_BUFF_ADDR, psrc, len);
+            if(SEMI_DRV_ERR_OK != ret) continue;
+
+            ack_from_tp.id = CMD_NA;
+            ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 7500);
+            if(SEMI_DRV_ERR_OK != ret) continue;
+
+            break;
+        }
+        
+        left -= len;
+        adr  += len;
+        psrc += len;
+        check_break_if_fail(ret, NULL);
+    }
+
+    return ret;
+}
+
+int semi_touch_get_backup_pid(unsigned int *id)
+{
+    int ret = SEMI_DRV_ERR_OK;
+
+    ret = semi_touch_enter_burn_mode();
+    check_return_if_fail(ret, NULL);
+
+    ret = semi_touch_bulk_read((unsigned char *)id, VID_PID_BACKUP_ADDR, 4);
+    check_return_if_fail(ret, NULL);
+
+    return ret;
+}
+
+int semi_touch_burn_erase(void)
+{
+    int ret = SEMI_DRV_ERR_OK;
+
+#if TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5816)
+    struct m_ctp_cmd_std_t cmd_send_tp;
+    struct m_ctp_rsp_std_t ack_from_tp;
+
+    cmd_send_tp.id = CMD_FLASH_ERASE;
+    cmd_send_tp.d0 = 0x01;
+
+    ret = cmd_send_to_tp(&cmd_send_tp, &ack_from_tp, 30000);
+    check_return_if_fail(ret, NULL);
+#endif
+
+    return ret;
+}
+
+unsigned int config_to_vid_pid(unsigned char *ptcfg, unsigned int len)
+{
+    unsigned int upd_vid_pid;
+#if TYPE_OF_IC(SEMI_TOUCH_IC) == TYPE_OF_IC(SEMI_TOUCH_5816)
+    unsigned short cfgAddr = (unsigned short)((ptcfg[0x39] << 8) + ptcfg[0x38]);
+    if(cfgAddr + 4 < len)
+    {
+        ptcfg = ptcfg + cfgAddr;
+    }
+#endif
+
+    upd_vid_pid = ptcfg[4];
+    upd_vid_pid = (upd_vid_pid << 8) | ptcfg[3];
+    upd_vid_pid = (upd_vid_pid << 8) | ptcfg[2];
+    upd_vid_pid = (upd_vid_pid << 8) | ptcfg[1];
+
+    return upd_vid_pid;
+}
+
+static int semi_touch_check_cfg_update(unsigned char *parray, unsigned int cfg_single_len, unsigned int cfg_num, unsigned int force_update)
+{
+    int index, ret = SEMI_DRV_ERR_OK;
+    int idx_active;
+    unsigned int upd_vid_pid;
+    unsigned char *ptcfg = parray;
+
+    if(0 == cfg_num) return SEMI_DRV_ERR_OK;
+    if (st_dev.vid_pid == 0) return SEMI_DRV_ERR_OK;     /* no available version information */
+
+    idx_active = -1;
+    for (index = 0; index < cfg_num; index++) 
+    {
+        upd_vid_pid = config_to_vid_pid(ptcfg, cfg_single_len);
+        if((st_dev.vid_pid & 0xffffff00) == (upd_vid_pid & 0xffffff00)) 
+        {
+            kernel_log_d("tp vid_pid = 0x%08x, udp vid_pid = 0x%08x\r\n", st_dev.vid_pid, upd_vid_pid);
+            if ((st_dev.vid_pid < upd_vid_pid) || force_update) 
+            {
+                idx_active = index;
+                break;
+            }
+        }
+
+        ptcfg = ptcfg + cfg_single_len;
+    }
+
+    if(idx_active >= 0) 
+    {
+        if(0 == caculate_checksum_u16((unsigned short*)ptcfg, cfg_single_len))
+        {
+            ret = semi_touch_enter_burn_mode();
+            check_return_if_fail(ret, NULL);
+
+            ret = semi_touch_burn_erase();
+            check_return_if_fail(ret, NULL);
+
+            ret = semi_touch_bulk_write(ptcfg, CFG_ROM_ADDRESS, cfg_single_len);
+            check_return_if_fail(ret, NULL);
+
+            st_dev.vid_pid = upd_vid_pid;
+        }
+        else
+        {
+            ret = -SEMI_DRV_ERR_CHECKSUM;
+            kernel_log_e("firmware config checksum error\n");
+        }
+    }
+
+    return ret;
+}
+
+int semi_touch_check_boot_update(unsigned char *pdata, unsigned int len, unsigned int* vlist, unsigned int n_match, unsigned int force_update)
+{
+    int ret = SEMI_DRV_ERR_OK;
+    int k, idx_active;
+    unsigned short upd_boot_ver = 0;
+
+    idx_active = -1;
+    upd_boot_ver = (pdata[0x3f] << 8) + pdata[0x3e];
+    for (k = 0; k < n_match; k++) 
+    {
+        if ((vlist[k] & 0xffffff00) == (st_dev.vid_pid & 0xffffff00)) 
+        {
+            if((st_dev.fw_ver < upd_boot_ver) || force_update)
+            {
+                kernel_log_d("tp vid_pid = 0x%08x, udp vid_pid = 0x%08x\r\n", st_dev.vid_pid, vlist[k]);
+                idx_active = k;
+                break;
+            }
+        }
+    }
+
+    kernel_log_d("tp boot ver = 0x%x, udp boot ver = 0x%x\r\n", st_dev.fw_ver, upd_boot_ver);
+    /*
+        If we need to compare versions, only update the newer version
+    */
+    if(idx_active >= 0) 
+    {
+        if(*(unsigned int*)(pdata + len - 4) == caculate_checksum_ex(pdata, len - 4))
+        {
+            ret = semi_touch_enter_burn_mode();
+            check_return_if_fail(ret, NULL);
+
+            ret = semi_touch_bulk_write((unsigned char *)pdata, 0x00000000, len);
+            check_return_if_fail(ret, NULL);
+
+            st_dev.fw_ver = upd_boot_ver;
+        }
+        else 
+        {
+            ret = -SEMI_DRV_ERR_CHECKSUM;
+            kernel_log_e("firmware boot checksum error\n");
+        }
+    }
+    
+    return ret;
+}
+
+/*
+    Return Value:
+        0x01: reject caller's request
+        -1  : some error
+        0x00: successfull
+*/
+int semi_touch_update_updfile(const unsigned char *pdata, unsigned int len, unsigned int force_update)
+{
+    int ret = SEMI_DRV_ERR_OK;
+    unsigned int cfg_single_len = 0, cfg_offset = 0;
+    struct chsc_updfile_header *upd_header = (struct chsc_updfile_header *)pdata;
+
+    if (len < sizeof(struct chsc_updfile_header)) return -SEMI_DRV_INVALID_PARAM;
+    if (upd_header->sig != 0x43534843) return -SEMI_DRV_ERR_NOT_MATCH;
+    if(0 == upd_header->n_cfg) return -SEMI_DRV_INVALID_PARAM;
+
+    cfg_offset = (upd_header->n_cfg * 4) + sizeof(struct chsc_updfile_header) - 4;
+    cfg_single_len = upd_header->len_cfg / upd_header->n_cfg;
+
+    if ((cfg_offset + upd_header->len_cfg + upd_header->len_boot) != len)  return -SEMI_DRV_INVALID_PARAM;
+
+    //check if config need update
+    if(SEMI_DRV_ERR_OK == ret) 
+    { 
+        ret = semi_touch_check_cfg_update((unsigned char *) (pdata + cfg_offset), cfg_single_len, upd_header->n_cfg, force_update);
+    }
+
+    //check if boot need update
+    if(SEMI_DRV_ERR_OK == ret)
+    { 
+        ret = semi_touch_check_boot_update((unsigned char*)(pdata + cfg_offset + upd_header->len_cfg), upd_header->len_boot, upd_header->vlist, upd_header->n_cfg, force_update);
+    }
+
+    return ret;
+}
+
+int semi_touch_check_and_update(const unsigned char* udp, unsigned int len, unsigned char bootCheckOk)
+{
+    int ret = -EINVAL; 
+
+    if((0 != st_dev.vid_pid) && (0xffffffff != st_dev.vid_pid))
+    {
+        ret = semi_touch_update_updfile(udp, len, bootCheckOk ? 0 : 1);
+        check_return_if_fail(ret, NULL);
+    }
+    else //we don't know what kind if product it is
+    {
+        ret = -SEMI_DRV_ERR_NOT_MATCH;
+        kernel_log_d("opps! what happeded...\r\n");
+    }
+
+    return ret;
+}
+/*
+    Get and check boot up information of touch IC
+*/
+
+int semi_touch_bootup_update_check(void)
+{
+    int ret = SEMI_DRV_ERR_OK;
+#if SEMI_TOUCH_BOOTUP_UPDATE_EN
+    unsigned int iter = 0;
+    unsigned char matched = 0, bootCheckOk = 0;
+    struct bin_code_chain* firmware = firmware_chain_header; 
+    struct chsc_updfile_header* upd_header = NULL;
+
+    semi_touch_start_up_check(&bootCheckOk, check_backup_if_fail);
+    while(NULL != firmware)
+    {
+        upd_header = (struct chsc_updfile_header*)firmware->bin_code_addr;
+        for(iter = 0; (iter < upd_header->n_cfg) && (iter < 5); iter++)
+        {
+            kernel_log_d("check if firmware need update, product vid_pid = 0x%08x, upd vid_pid = 0x%08x, boot check = %d\r\n", st_dev.vid_pid, *(upd_header->vlist + iter), bootCheckOk);
+
+            if((st_dev.vid_pid & 0xffffff00) != (*(upd_header->vlist + iter) & 0xffffff00)) continue;
+            ret = semi_touch_check_and_update(firmware->bin_code_addr, firmware->bin_code_len, bootCheckOk);   
+            check_break_if_fail(ret, NULL);
+
+            matched = 1;
+            break;
+        }
+
+        firmware = firmware->next;
+        if(matched) break;
+    }
+       
+
+#endif   
+    return ret;                                                                                                                                                                                                
+}
+
+int semi_touch_online_update_check(char* file_path)
+{
+#if SEMI_TOUCH_ONLINE_UPDATE_EN
+    mm_segment_t old_fs;
+    unsigned int file_size, file_sig;
+    const unsigned char* file_buffer = NULL;
+    static struct file *file = NULL;                          
+    loff_t fpos = 0;
+    unsigned char bootCheckOk = 0;
+
+    file = filp_open(file_path, O_RDWR, 0);
+    if(IS_ERR(file))                                                                                                                                                                                                                                                                             
+    {
+        kernel_log_d("open file %s error\n", file_path);
+        return -EINVAL;
+    }
+
+    old_fs = get_fs();
+    set_fs(KERNEL_DS);
+
+    fpos = 0;
+    vfs_llseek(file, 0, SEEK_SET);
+    vfs_read(file, (char*)&file_sig, sizeof(file_sig), &fpos);
+    if(0x43534843 != file_sig) 
+    {
+        filp_close(file, NULL);
+        kernel_log_d("file validation check fail...\n");
+        return -EINVAL;
+    }
+
+    file_sig = 0;
+    file_size = vfs_llseek(file, 0, SEEK_END);
+    file_buffer = kmalloc(file_size, GFP_KERNEL);
+    
+    fpos = 0;
+    vfs_llseek(file, 0, SEEK_SET);
+    if(file_size == vfs_read(file, (char*)file_buffer, file_size, &fpos))
+    {
+        semi_touch_start_up_check(&bootCheckOk, check_backup_if_fail);
+        semi_touch_check_and_update(file_buffer, file_size, bootCheckOk);
+        semi_touch_mode_init(&st_dev);
+
+        //file->f_op->llseek(file, 0, SEEK_SET);
+        //file->f_op->write(file, (char*)&file_sig, sizeof(file_sig), &file->f_pos);
+    }
+
+    kfree(file_buffer);
+    set_fs(old_fs);
+    filp_close(file, NULL);
+#endif //SEMI_TOUCH_ONLINE_UPDATE_EN
+
+    return SEMI_DRV_ERR_OK;
+}
+
diff --git a/drivers/input/touchscreen/chsc5xxx/st.code-workspace b/drivers/input/touchscreen/chsc5xxx/st.code-workspace
new file mode 100755
index 000000000000..dcea87970486
--- /dev/null
+++ b/drivers/input/touchscreen/chsc5xxx/st.code-workspace
@@ -0,0 +1,19 @@
+{
+    "folders": [
+        {
+            "path": "."
+        }
+    ],
+    "settings": {
+        "files.associations": {
+            "semi_touch_function.h": "c",
+            "basic_util.h": "c",
+            "semi_touch_custom.h": "c",
+            "head_def.h": "c",
+            "platform.h": "c",
+            "xutility": "c",
+            "semi_touch_interface.h": "c",
+            "fw_update_packet.h": "c"
+        }
+    }
+}
\ No newline at end of file
diff --git a/drivers/media/platform/spacemit/camera/Makefile b/drivers/media/platform/spacemit/camera/Makefile
index f5e8a1d233b4..ae794b255534 100644
--- a/drivers/media/platform/spacemit/camera/Makefile
+++ b/drivers/media/platform/spacemit/camera/Makefile
@@ -12,6 +12,7 @@ cam_ccic_v2-objs += cam_ccic/ccic_hwreg.o
 cam_ccic_v2-objs += cam_ccic/csiphy.o
 cam_ccic_v2-objs += cam_ccic/ccic_drv.o
 cam_ccic_v2-objs += cam_ccic/dptc_drv.o
+cam_ccic_v2-objs += cam_ccic/ccic_vdev.o
 
 obj-$(CONFIG_SPACEMIT_K1X_CPP_V2) += cam_cpp_v2.o
 cam_cpp_v2-objs += cam_cpp/k1x_cpp.o
diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.c b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.c
index ff8baf3ac03a..2bcaa1a9f834 100644
--- a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.c
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.c
@@ -18,11 +18,13 @@
 #include <media/v4l2-dev.h>
 #include <media/videobuf2-dma-contig.h>
 #include <media/videobuf2-dma-sg.h>
+#include <linux/media-bus-format.h>
 #include <linux/delay.h>
 #include <linux/clk.h>
 #include "ccic_drv.h"
 #include "ccic_hwreg.h"
 #include "csiphy.h"
+#include "ccic_vdev.h"
 
 #ifdef CONFIG_ARCH_ZYNQMP
 #include "dptc_drv.h"
@@ -31,8 +33,19 @@
 
 #define K1X_CCIC_DRV_NAME "k1xccic"
 
+#define CAM_ALIGN(a, b)		({ \
+								unsigned int ___tmp1 = (a); \
+								unsigned int ___tmp2 = (b); \
+								unsigned int ___tmp3 = ___tmp1 % ___tmp2; \
+								___tmp1 /= ___tmp2; \
+								if (___tmp3) \
+									___tmp1++; \
+								___tmp1 *= ___tmp2; \
+								___tmp1; \
+							})
 static LIST_HEAD(ccic_devices);
 static DEFINE_MUTEX(list_lock);
+static void ccic_dma_bh_handler(struct ccic_dma_work_struct *ccic_dma_work);
 
 static void ccic_irqmask(struct ccic_ctrl *ctrl, int on)
 {
@@ -131,17 +144,23 @@ static int ccic_config_csi2_dphy(struct ccic_ctrl *ctrl,
 	return ret;
 }
 
-static int ccic_config_csi2_vc(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1)
+static int ccic_config_csi2_vc_dt(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1, u8 dt0, u8 dt1)
 {
 	int ret = 0;
 	struct ccic_dev *ccic_dev = ctrl->ccic_dev;
 
 	switch (md) {
 	case CCIC_CSI2VC_NM:	/* Normal mode */
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_VCCTRL, CSI2_VCCTRL_DT_ENABLE);
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_DT_FLT, CSI2_DT_FLT0_EN);
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_DT_FLT, CSI2_DT_FLT1_EN);
 		ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL,
 				    CSI2_VCCTRL_MD_NORMAL, CSI2_VCCTRL_MD_MASK);
 		break;
 	case CCIC_CSI2VC_VC:	/* Virtual Channel mode */
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_VCCTRL, CSI2_VCCTRL_DT_ENABLE);
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_DT_FLT, CSI2_DT_FLT0_EN);
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_DT_FLT, CSI2_DT_FLT1_EN);
 		ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL,
 				    CSI2_VCCTRL_MD_VC, CSI2_VCCTRL_MD_MASK);
 		ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL, vc0 << 14,
@@ -150,9 +169,23 @@ static int ccic_config_csi2_vc(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1)
 				    CSI2_VCCTRL_VC1_MASK);
 		break;
 	case CCIC_CSI2VC_DT:	/* TODO: Data-Type Interleaving */
-		ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL,
-				    CSI2_VCCTRL_MD_DT, CSI2_VCCTRL_MD_MASK);
+		//ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL,
+		//		    CSI2_VCCTRL_MD_DT, CSI2_VCCTRL_MD_MASK);
 		pr_err("csi2 vc mode %d todo\n", md);
+		ret = -EINVAL;
+		break;
+	case CCIC_CSI2VC_VCDT:
+		ccic_reg_set_bit(ccic_dev, REG_CSI2_VCCTRL, CSI2_VCCTRL_DT_ENABLE);
+		ccic_reg_set_bit(ccic_dev, REG_CSI2_DT_FLT, CSI2_DT_FLT0_EN);
+		ccic_reg_set_bit(ccic_dev, REG_CSI2_DT_FLT, CSI2_DT_FLT2_EN);
+		ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL, vc0 << 14,
+				    CSI2_VCCTRL_VC0_MASK);
+		ccic_reg_write_mask(ccic_dev, REG_CSI2_VCCTRL, vc1 << 22,
+				    CSI2_VCCTRL_VC1_MASK);
+		ccic_reg_write_mask(ccic_dev, REG_CSI2_DT_FLT, dt0 << CSI2_DT_FLT0_SHIFT,
+				    CSI2_DT_FLT0_MASK);
+		ccic_reg_write_mask(ccic_dev, REG_CSI2_DT_FLT, dt1 << CSI2_DT_FLT2_SHIFT,
+				    CSI2_DT_FLT2_MASK);
 		break;
 	default:
 		dev_err(ccic_dev->dev, "invalid csi2 vc mode %d\n", md);
@@ -292,10 +325,10 @@ static int axi_set_clock_rates(struct clk *clock)
 	return 0;
 }
 
-int ccic_dma_clk_enable(struct ccic_dma *dma, int on)
+static int ccic_dma_clk_enable(struct ccic_dma *dma, int on)
 {
-	struct ccic_dev *ccic = dma->ccic_dev;
-	struct device *dev = &ccic->pdev->dev;
+	struct ccic_dev *ccic_dev = dma->ccic_dev;
+	struct device *dev = &ccic_dev->pdev->dev;
 	int ret;
 
 	if (on) {
@@ -303,30 +336,198 @@ int ccic_dma_clk_enable(struct ccic_dma *dma, int on)
 		if (ret < 0)
 			return ret;
 
-		ret = clk_prepare_enable(ccic->axi_clk);
+		ret = clk_prepare_enable(ccic_dev->axi_clk);
 		if (ret < 0) {
 			pm_runtime_put_sync(dev);
 			return ret;
 		}
-		reset_control_deassert(ccic->isp_ci_reset);
+		reset_control_deassert(ccic_dev->isp_ci_reset);
 
-		ret = axi_set_clock_rates(ccic->axi_clk);
+		ret = axi_set_clock_rates(ccic_dev->axi_clk);
 		if (ret < 0) {
 			pm_runtime_put_sync(dev);
 			return ret;
 		}
-		reset_control_deassert(ccic->isp_ci_reset);
+		reset_control_deassert(ccic_dev->isp_ci_reset);
 	} else {
-		clk_disable_unprepare(ccic->axi_clk);
-		reset_control_assert(ccic->isp_ci_reset);
+		clk_disable_unprepare(ccic_dev->axi_clk);
+		reset_control_assert(ccic_dev->isp_ci_reset);
 		pm_runtime_put_sync(dev);
 	}
 
 	return 0;
 }
 
+static int ccic_dma_enable(struct ccic_dma *dma_dev, int enable)
+{
+	struct ccic_dev *ccic_dev = dma_dev->ccic_dev;
+
+	if (enable) {
+		//ccic_reg_set_bit(ccic_dev, REG_IRQMASK, FRAMEIRQS);
+		ccic_dma_set_burst(ccic_dev);
+		/* 0x3c: enable ccic dma */
+		ccic_reg_set_bit(ccic_dev, REG_CTRL0, BIT(0));
+		ccic_reg_set_bit(ccic_dev, 0x40, BIT(31) | BIT(26));
+		ccic_reg_clear_bit(ccic_dev, 0x40, BIT(25));
+	} else {
+		//ccic_reg_clear_bit(ccic_dev, REG_IRQMASK, FRAMEIRQS);
+		/* 0x3c: disable ccic dma */
+		ccic_reg_clear_bit(ccic_dev, REG_CTRL0, BIT(0));
+	}
+
+	return 0;
+}
+
+static int ccic_dma_set_fmt(struct ccic_dma *dma_dev,
+							unsigned int width,
+							unsigned int height,
+							unsigned int pix_fmt)
+{
+	struct ccic_dev *ccic_dev = dma_dev->ccic_dev;
+	struct device *dev = ccic_dev->dev;
+	unsigned int data_fmt = C0_DF_BAYER, imgsz_w = 0, imgsz_h = 0;
+	unsigned int stride_y = 0, stride_uv = 0;
+
+	switch (pix_fmt) {
+	case MEDIA_BUS_FMT_UYVY8_2X8:
+		data_fmt = C0_DF_BAYER;
+		imgsz_w = width;
+		stride_y = 0;
+		imgsz_h = height;
+		stride_uv = 0;
+		break;
+	case MEDIA_BUS_FMT_SBGGR8_1X8:
+	case MEDIA_BUS_FMT_SGBRG8_1X8:
+	case MEDIA_BUS_FMT_SGRBG8_1X8:
+	case MEDIA_BUS_FMT_SRGGB8_1X8:
+		data_fmt = C0_DF_BAYER;
+		imgsz_w = width;
+		stride_y = 0;//CAM_ALIGN(imgsz_w, 8);
+		imgsz_h = height;
+		stride_uv = 0;
+		break;
+	case MEDIA_BUS_FMT_SBGGR10_1X10:
+	case MEDIA_BUS_FMT_SGBRG10_1X10:
+	case MEDIA_BUS_FMT_SGRBG10_1X10:
+	case MEDIA_BUS_FMT_SRGGB10_1X10:
+		data_fmt = C0_DF_BAYER;
+		imgsz_w = width * 5 / 4;
+		stride_y = 0;//CAM_ALIGN(imgsz_w, 8);
+		imgsz_h = height;
+		stride_uv = 0;
+		break;
+	case MEDIA_BUS_FMT_SBGGR12_1X12:
+	case MEDIA_BUS_FMT_SGBRG12_1X12:
+	case MEDIA_BUS_FMT_SGRBG12_1X12:
+	case MEDIA_BUS_FMT_SRGGB12_1X12:
+		data_fmt = C0_DF_BAYER;
+		imgsz_w = width * 3 / 2;
+		stride_y = 0;//CAM_ALIGN(imgsz_w, 8);
+		imgsz_h = height;
+		stride_uv = 0;
+		break;
+	default:
+		pr_err("%s failed: invalid pixfmt %d\n", __func__, pix_fmt);
+		return -1;
+	}
+
+	dev_info(dev, "stride_y=0x%x, width=%u\n", stride_y, width);
+	ccic_reg_write(ccic_dev, REG_IMGPITCH, stride_uv << 16 | stride_y);
+	ccic_reg_write(ccic_dev, REG_IMGSIZE, imgsz_h << 16 | imgsz_w);
+	ccic_reg_write(ccic_dev, REG_IMGOFFSET, 0x0);
+	ccic_reg_write_mask(ccic_dev, REG_CTRL0, data_fmt, C0_DF_MASK);
+	/* Make sure it knows we want to use hsync/vsync. */
+	ccic_reg_write_mask(ccic_dev, REG_CTRL0, C0_SIF_HVSYNC, C0_SIFM_MASK);
+	/* Need set following bit for auto-recovery */
+	ccic_reg_set_bit(ccic_dev, REG_CTRL0, C0_EOFFLUSH);
+
+	return 0;
+}
+
+static int ccic_dma_set_addr(struct ccic_dma *dma_dev,
+							unsigned long addr_y,
+							unsigned long addr_u,
+							unsigned long addr_v)
+{
+	struct ccic_dev *ccic_dev = dma_dev->ccic_dev;
+
+	ccic_reg_write(ccic_dev, 0x00, (u32)(addr_y & 0xffffffff));
+	ccic_reg_write(ccic_dev, 0x0c, (u32)(addr_u & 0xffffffff));
+	ccic_reg_write(ccic_dev, 0x18, (u32)(addr_v & 0xffffffff));
+
+	return 0;
+}
+
+static int ccic_dma_shadow_ready(struct ccic_dma *dma_dev)
+{
+	struct ccic_dev *ccic_dev = dma_dev->ccic_dev;
+	ccic_reg_set_bit(ccic_dev, REG_CTRL1, C1_SHADOW_RDY);
+
+	return 0;
+}
+
+static int ccic_dma_src_select(struct ccic_dma *dma_dev, int src, unsigned int main_ccic_id)
+{
+	struct ccic_dev *ccic_dev = dma_dev->ccic_dev;
+	return ccic_dma_src_sel(ccic_dev, src, main_ccic_id);
+}
+
+static void ccic_dma_dump_regs(struct ccic_dma *dma_dev)
+{
+	unsigned int reg_val = 0;
+	struct ccic_dev *ccic_dev = dma_dev->ccic_dev;
+
+	reg_val = ccic_reg_read(ccic_dev, 0x30);
+	printk(KERN_INFO "ccic%d [0x30]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x28);
+	printk(KERN_INFO "ccic%d [0x28]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x2c);
+	printk(KERN_INFO "ccic%d [0x2c]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x24);
+	printk(KERN_INFO "ccic%d [0x24]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x34);
+	printk(KERN_INFO "ccic%d [0x34]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x38);
+	printk(KERN_INFO "ccic%d [0x38]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x3c);
+	printk(KERN_INFO "ccic%d [0x3c]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x40);
+	printk(KERN_INFO "ccic%d [0x40]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x44);
+	printk(KERN_INFO "ccic%d [0x44]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x48);
+	printk(KERN_INFO "ccic%d [0x48]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x310);
+	printk(KERN_INFO "ccic%d [0x310]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x60);
+	printk(KERN_INFO "ccic%d [0x60]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x23c);
+	printk(KERN_INFO "ccic%d [0x23c]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x128);
+	printk(KERN_INFO "ccic%d [0x128]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x12c);
+	printk(KERN_INFO "ccic%d [0x12c]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x134);
+	printk(KERN_INFO "ccic%d [0x134]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x138);
+	printk(KERN_INFO "ccic%d [0x138]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x100);
+	printk(KERN_INFO "ccic%d [0x100]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x140);
+	printk(KERN_INFO "ccic%d [0x140]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x144);
+	printk(KERN_INFO "ccic%d [0x144]=0x%08x\n", ccic_dev->index, reg_val);
+	reg_val = ccic_reg_read(ccic_dev, 0x124);
+	printk(KERN_INFO "ccic%d [0x124]=0x%08x\n", ccic_dev->index, reg_val);
+}
 static struct ccic_dma_ops ccic_dma_ops = {
+	.set_fmt = ccic_dma_set_fmt,
+	.shadow_ready = ccic_dma_shadow_ready,
+	.set_addr = ccic_dma_set_addr,
+	.ccic_enable = ccic_dma_enable,
 	.clk_enable = ccic_dma_clk_enable,
+	.src_sel = ccic_dma_src_select,
+	.dump_regs = ccic_dma_dump_regs,
 };
 
 /*
@@ -372,10 +573,13 @@ int ccic_clk_enable(struct ccic_ctrl *ctrl, int en)
 			pr_err("rpm get failed\n");
 			return ret;
 		}
+		pm_stay_awake(&ccic_dev->pdev->dev);
+
+		clk_prepare_enable(ccic_dev->dpu_clk);
+		reset_control_deassert(ccic_dev->mclk_reset);
 
 		//clk_prepare_enable(ccic_dev->ahb_clk);
 		reset_control_deassert(ccic_dev->ahb_reset);
-
 		clk_prepare_enable(ccic_dev->clk4x);
 		reset_control_deassert(ccic_dev->ccic_4x_reset);
 		clk_prepare_enable(ccic_dev->csi_clk);
@@ -394,9 +598,12 @@ int ccic_clk_enable(struct ccic_ctrl *ctrl, int en)
 		clk_disable_unprepare(ccic_dev->clk4x);
 		reset_control_assert(ccic_dev->ccic_4x_reset);
 
+		clk_disable_unprepare(ccic_dev->dpu_clk);
+		reset_control_assert(ccic_dev->mclk_reset);
+
 		//clk_disable_unprepare(ccic_dev->ahb_clk);
 		reset_control_assert(ccic_dev->ahb_reset);
-
+		pm_relax(&ccic_dev->pdev->dev);
 		pm_runtime_put_sync(&ccic_dev->pdev->dev);
 	}
 
@@ -405,13 +612,14 @@ int ccic_clk_enable(struct ccic_ctrl *ctrl, int en)
 	return ret;
 }
 
-int ccic_config_csi2_mbus(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1, int lanes)
+int ccic_config_csi2_mbus(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1, u8 dt0, u8 dt1,
+			  int lanes)
 {
 	int ret;
 	struct ccic_dev *ccic_dev = ctrl->ccic_dev;
 	struct mipi_csi2 csi2para;
 
-	ret = ccic_config_csi2_vc(ctrl, md, vc0, vc1);
+	ret = ccic_config_csi2_vc_dt(ctrl, md, vc0, vc1, dt0, dt1);
 	if (ret)
 		return ret;
 
@@ -545,9 +753,16 @@ static int ccic_init_clk(struct ccic_dev *dev)
 	if (IS_ERR_OR_NULL(dev->isp_ci_reset))
 		return PTR_ERR(dev->isp_ci_reset);
 
+	dev->mclk_reset = devm_reset_control_get_optional_shared(&dev->pdev->dev, "mclk_reset");
+	if (IS_ERR_OR_NULL(dev->mclk_reset))
+		return PTR_ERR(dev->mclk_reset);
+
 	dev->csi_clk = devm_clk_get(&dev->pdev->dev, "csi_func");
 	if (IS_ERR(dev->csi_clk))
 		return PTR_ERR(dev->csi_clk);
+	dev->dpu_clk = devm_clk_get(&dev->pdev->dev, "dpu_mclk");
+	if (IS_ERR(dev->dpu_clk))
+		return PTR_ERR(dev->dpu_clk);
 
 	dev->clk4x = devm_clk_get(&dev->pdev->dev, "ccic_func");
 	return PTR_ERR_OR_ZERO(dev->clk4x);
@@ -650,6 +865,31 @@ void ccic_ctrl_put(struct ccic_ctrl *ctrl)
 
 EXPORT_SYMBOL(ccic_ctrl_put);
 
+
+int ccic_dma_get(struct ccic_dma **ccic_dma, int id)
+{
+	struct ccic_dev *ccic_dev = NULL;
+	struct ccic_dev *tmp = NULL;
+	struct ccic_dma *dma = NULL;
+
+	list_for_each_entry(tmp, &ccic_devices, list) {
+		if (tmp->index == id) {
+			ccic_dev = tmp;
+			break;
+		}
+	}
+	if (!ccic_dev) {
+		pr_err("ccic%d not found", id);
+		return -ENODEV;
+	}
+
+	dma = ccic_dev->dma;
+	*ccic_dma = dma;
+	pr_debug("acquire ccic%d dma dev succeed\n", id);
+
+	return 0;
+}
+EXPORT_SYMBOL(ccic_dma_get);
 static void ipe_error_irq_handler(struct ccic_dev *ccic, u32 ipestatus, u32 csi2status)
 {
 	static DEFINE_RATELIMIT_STATE(rs, 5 * HZ, 20);
@@ -664,10 +904,110 @@ static void ipe_error_irq_handler(struct ccic_dev *ccic, u32 ipestatus, u32 csi2
 	}
 }
 
+static int ccic_put_dma_work(struct ccic_dma_context *dma_ctx,
+                            struct ccic_dma_work_struct *ccic_dma_work)
+{
+    unsigned long flags = 0;
+
+    spin_lock_irqsave(&dma_ctx->slock, flags);
+    list_del_init(&ccic_dma_work->busy_list_entry);
+    list_add(&ccic_dma_work->idle_list_entry, &dma_ctx->dma_work_idle_list);
+    spin_unlock_irqrestore(&dma_ctx->slock, flags);
+
+    return 0;
+}
+
+static int ccic_get_dma_work(struct ccic_dma_context *dma_ctx,
+							struct ccic_dma_work_struct **ccic_dma_work)
+{
+	unsigned long flags = 0;
+
+	spin_lock_irqsave(&dma_ctx->slock, flags);
+	*ccic_dma_work = list_first_entry_or_null(&dma_ctx->dma_work_idle_list, struct ccic_dma_work_struct, idle_list_entry);
+	if (NULL == *ccic_dma_work) {
+		spin_unlock_irqrestore(&dma_ctx->slock, flags);
+		return -1;
+	}
+	list_del_init(&((*ccic_dma_work)->idle_list_entry));
+	list_add(&((*ccic_dma_work)->busy_list_entry), &dma_ctx->dma_work_busy_list);
+	spin_unlock_irqrestore(&dma_ctx->slock, flags);
+
+	return 0;
+}
+
+static void ccic_dma_bh_handler(struct ccic_dma_work_struct *ccic_dma_work)
+{
+	struct spm_ccic_vnode *ac_vnode = ccic_dma_work->ac_vnode;
+	struct device *dev = ac_vnode->ccic_dev->dev;
+	struct ccic_dma_context *dma_ctx = &ac_vnode->dma_ctx;
+	struct spm_ccic_vbuffer *n = NULL, *pos = NULL;
+	//unsigned int irq_status = ccic_dma_work->irq_status;
+	LIST_HEAD(export_list);
+	unsigned long flags = 0;
+
+	spin_lock(&ac_vnode->waitq_head.lock);
+	ac_vnode->in_tasklet = 1;
+	if (ac_vnode->in_streamoff || !ac_vnode->is_streaming) {
+		wake_up_locked(&ac_vnode->waitq_head);
+		spin_unlock(&ac_vnode->waitq_head.lock);
+		goto dma_tasklet_finish;
+	}
+	wake_up_locked(&ac_vnode->waitq_head);
+	spin_unlock(&ac_vnode->waitq_head.lock);
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	list_for_each_entry_safe(pos, n, &ac_vnode->busy_list, list_entry) {
+		if (pos->flags & (AC_BUF_FLAG_HW_ERR | AC_BUF_FLAG_SW_ERR | AC_BUF_FLAG_DONE_TOUCH)) {
+			list_del_init(&(pos->list_entry));
+			atomic_dec(&ac_vnode->busy_buf_cnt);
+			list_add_tail(&(pos->list_entry), &export_list);
+		}
+	}
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	list_for_each_entry_safe(pos, n, &export_list, list_entry) {
+		if (!(pos->flags & AC_BUF_FLAG_SOF_TOUCH)) {
+			dev_warn(dev, "%s export buf index=%u frameid=%u without sof touch\n", ac_vnode->name, pos->vb2_v4l2_buf.vb2_buf.index, pos->vb2_v4l2_buf.sequence);
+		}
+		if (pos->flags & AC_BUF_FLAG_HW_ERR) {
+			//pos->vb2_v4l2_buf.flags |= V4L2_BUF_FLAG_ERROR_HW;
+			dev_warn(dev, "%s export buf index=%u frameid=%u with hw error\n", ac_vnode->name, pos->vb2_v4l2_buf.vb2_buf.index, pos->vb2_v4l2_buf.sequence);
+			spm_cvdev_export_ccic_vbuffer(pos, 1);
+			ac_vnode->hw_err_frm++;
+		} else if (pos->flags & AC_BUF_FLAG_SW_ERR) {
+			//pos->vb2_v4l2_buf.flags |= V4L2_BUF_FLAG_ERROR_SW;
+			dev_warn(dev, "%s export buf index=%u frameid=%u with sw error\n", ac_vnode->name, pos->vb2_v4l2_buf.vb2_buf.index, pos->vb2_v4l2_buf.sequence);
+			spm_cvdev_export_ccic_vbuffer(pos, 1);
+			ac_vnode->sw_err_frm++;
+		} else if (pos->flags & AC_BUF_FLAG_DONE_TOUCH) {
+			spm_cvdev_export_ccic_vbuffer(pos, 0);
+			ac_vnode->ok_frm++;
+		}
+	}
+dma_tasklet_finish:
+	if (ac_vnode) {
+		spin_lock(&ac_vnode->waitq_head.lock);
+		ac_vnode->in_tasklet = 0;
+		wake_up_locked(&ac_vnode->waitq_head);
+		spin_unlock(&ac_vnode->waitq_head.lock);
+	}
+	ccic_put_dma_work(dma_ctx, ccic_dma_work);
+}
+
+static void ccic_dma_tasklet_handler(unsigned long param)
+{
+	struct ccic_dma_work_struct *ccic_dma_work = (struct ccic_dma_work_struct*)param;
+	ccic_dma_bh_handler(ccic_dma_work);
+}
 static irqreturn_t k1x_ccic_isr(int irq, void *data)
 {
 	struct ccic_dev *ccic_dev = data;
-	uint32_t irqs, csi2status;
+	struct spm_ccic_vnode *ac_vnode = (struct spm_ccic_vnode*)ccic_dev->vnode;
+	struct ccic_dma_context *dma_ctx = &ac_vnode->dma_ctx;
+	struct spm_ccic_vbuffer *pos = NULL, *ac_vb = NULL;
+	struct ccic_dma_work_struct *ccic_dma_work = NULL;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	struct device *dev = ac_vnode->ccic_dev->dev;
+	uint32_t irqs = 0, csi2status = 0, tmp = 0;
+	int ret = 0;
 
 	irqs = ccic_reg_read(ccic_dev, REG_IRQSTAT);
 	if (!(irqs & ~IRQ_IDI_PRO_LINE))
@@ -682,8 +1022,8 @@ static irqreturn_t k1x_ccic_isr(int irq, void *data)
 	if (irqs & IRQ_DMA_PRO_LINE)
 		pr_debug("CCIC%d: IRQ_DMA_PRO_LINE\n", ccic_dev->index);
 
-	if (irqs & IRQ_IDI_PRO_LINE)
-		pr_debug("CCIC%d: IRQ_IDI_PRO_LINE\n", ccic_dev->index);
+	//if (irqs & IRQ_IDI_PRO_LINE)
+	//	pr_debug("CCIC%d: IRQ_IDI_PRO_LINE\n", ccic_dev->index);
 
 	if (irqs & IRQ_CSI2IDI_FLUSH)
 		pr_debug("CCIC%d: IRQ_CSI2IDI_FLUSH\n", ccic_dev->index);
@@ -700,6 +1040,84 @@ static irqreturn_t k1x_ccic_isr(int irq, void *data)
 	if (irqs & IRQ_DPHY_LN_ULPS_ACTIVE)
 		pr_debug("CCIC%d: IRQ_DPHY_LN_ULPS_ACTIVE\n", ccic_dev->index);
 
+	//if (irqs & IRQ_DMA_SOF) {
+	//	dev_dbg(dev, "CCIC%d: IRQ_DMA_SOF\n", ccic_dev->index);
+	//}
+	if (irqs & IRQ_DMA_SOF || irqs & IRQ_SHADOW_NOT_RDY) {
+		ac_vnode->frame_id++;
+		ac_vnode->total_frm++;
+	}
+	spin_lock(&ac_vnode->waitq_head.lock);
+	ac_vnode->in_irq = 1;
+	if (ac_vnode->in_streamoff) {
+		ac_vnode->in_irq = 0;
+		wake_up_locked(&ac_vnode->waitq_head);
+		spin_unlock(&ac_vnode->waitq_head.lock);
+		return IRQ_HANDLED;
+	}
+	spin_unlock(&ac_vnode->waitq_head.lock);
+	if (ac_vnode->is_streaming && (irqs & FRAMEIRQS)) {
+		//if (irqs & IRQ_CSI_SOF) {
+		if (irqs & IRQ_DMA_SOF || irqs & IRQ_SHADOW_NOT_RDY) {
+			spm_cvdev_dq_idle_vbuffer(ac_vnode, &ac_vb);
+			if (ac_vb) {
+				spm_cvdev_q_busy_vbuffer(ac_vnode, ac_vb);
+				ccic_update_dma_addr(ac_vnode, ac_vb, 0);
+				ccic_dma->ops->shadow_ready(ccic_dma);
+			}
+		}
+		tmp = irqs;
+		spin_lock(&(ac_vnode->slock));
+		list_for_each_entry(pos, &(ac_vnode->busy_list), list_entry) {
+			if (!tmp)
+				break;
+			if (tmp & (IRQ_DMA_OVERFLOW | IRQ_DMA_NOT_DONE)) {
+				if (!(pos->flags & AC_BUF_FLAG_SOF_TOUCH)) {
+					dev_info(dev, "CCIC%d: dma err(0x%08x) without sof, drop it\n", ccic_dev->index, tmp);
+					tmp &= ~(IRQ_DMA_OVERFLOW | IRQ_DMA_NOT_DONE);
+				} else if (!(pos->flags & AC_BUF_FLAG_HW_ERR)) {
+					pos->flags |= AC_BUF_FLAG_HW_ERR;
+					dev_info(dev, "CCIC%d: dma err(0x%08x)\n", ccic_dev->index, tmp);
+					tmp &= ~(IRQ_DMA_OVERFLOW | IRQ_DMA_NOT_DONE);
+				}
+			}
+			if (tmp & IRQ_DMA_EOF) {
+				if (!(pos->flags & AC_BUF_FLAG_SOF_TOUCH)) {
+					dev_info(dev, "CCIC%d: dma done without sof, drop it\n", ccic_dev->index);
+					tmp &= ~IRQ_DMA_EOF;
+				} else if (!(pos->flags & AC_BUF_FLAG_DONE_TOUCH)) {
+					pos->flags |= AC_BUF_FLAG_DONE_TOUCH;
+					pos->vb2_v4l2_buf.sequence = ac_vnode->frame_id - 1;
+					pos->vb2_v4l2_buf.vb2_buf.timestamp = ktime_get_ns();
+					tmp &= ~IRQ_DMA_EOF;
+					//dev_info(dev, "CCIC%d: dma done\n", ccic_dev->index);
+				}
+			}
+			if (tmp & IRQ_DMA_SOF) {
+				if (pos->flags & AC_BUF_FLAG_SOF_TOUCH) {
+					if (!(pos->flags & (AC_BUF_FLAG_DONE_TOUCH | AC_BUF_FLAG_HW_ERR | AC_BUF_FLAG_SW_ERR))) {
+						dev_warn(dev, "CCIC%d: next sof arrived without dma done or err\n", ccic_dev->index);
+						pos->flags |= AC_BUF_FLAG_SW_ERR;
+					}
+				} else {
+					pos->flags |= (AC_BUF_FLAG_SOF_TOUCH | AC_BUF_FLAG_TIMESTAMPED);
+					tmp &= ~IRQ_DMA_SOF;
+				}
+			}
+		}
+		spin_unlock(&(ac_vnode->slock));
+		ret = ccic_get_dma_work(dma_ctx, &ccic_dma_work);
+		if (ret) {
+			dev_warn(dev, "CCIC%d: dma work idle list was null\n", ccic_dev->index);
+		} else {
+			ccic_dma_work->irq_status = irqs;
+			tasklet_schedule(&(ccic_dma_work->dma_tasklet));
+		}
+	}
+	spin_lock(&ac_vnode->waitq_head.lock);
+	ac_vnode->in_irq = 0;
+	wake_up_locked(&ac_vnode->waitq_head);
+	spin_unlock(&ac_vnode->waitq_head.lock);
 	return IRQ_HANDLED;
 }
 
@@ -710,10 +1128,8 @@ static int k1x_ccic_probe(struct platform_device *pdev)
 	struct ccic_ctrl *ccic_ctrl;
 	struct ccic_dma *ccic_dma;
 	struct device *dev = &pdev->dev;
+	char buf[32];
 	int ret;
-	int irq;
-
-	pr_debug("%s begin to probe\n", dev_name(&pdev->dev));
 
 	ret = of_property_read_u32(np, "cell-index", &pdev->id);
 	if (ret < 0) {
@@ -753,13 +1169,13 @@ static int k1x_ccic_probe(struct platform_device *pdev)
 	}
 
 	/* get irqs */
-	irq = platform_get_irq_byname(pdev, "ipe-irq");
-	if (irq < 0) {
+	ccic_dev->irq = platform_get_irq_byname(pdev, "ipe-irq");
+	if (ccic_dev->irq < 0) {
 		dev_err(&pdev->dev, "no irq resource");
 		return -ENODEV;
 	}
-	dev_dbg(&pdev->dev, "ipe irq: %d\n", irq);
-	ret = devm_request_irq(&pdev->dev, irq, k1x_ccic_isr,
+
+	ret = devm_request_irq(&pdev->dev, ccic_dev->irq, k1x_ccic_isr,
 			       IRQF_SHARED, K1X_CCIC_DRV_NAME, ccic_dev);
 	if (ret) {
 		dev_err(&pdev->dev, "fail to request irq\n");
@@ -786,7 +1202,7 @@ static int k1x_ccic_probe(struct platform_device *pdev)
 	ccic_dev->dev = &pdev->dev;
 	ccic_dev->ctrl = ccic_ctrl;
 	ccic_dev->dma = ccic_dma;
-	ccic_dev->interrupt_mask_value = CSI2PHYERRS;
+	ccic_dev->interrupt_mask_value = CSI2PHYERRS | FRAMEIRQS;
 	dev_set_drvdata(dev, ccic_dev);
 
 	/* enable runtime pm */
@@ -796,7 +1212,24 @@ static int k1x_ccic_probe(struct platform_device *pdev)
 
 	ccic_device_register(ccic_dev);
 
-	pr_debug("%s probed", dev_name(&pdev->dev));
+	dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(33));
+	ret = v4l2_device_register(&pdev->dev, &ccic_dev->v4l2_dev);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to register v4l2 dev\n");
+		return ret;
+	}
+	snprintf(buf, 32, "CCIC%d", ccic_ctrl->index);
+	ccic_dev->vnode = spm_cvdev_create_vnode(buf, ccic_dev->index,
+											&ccic_dev->v4l2_dev,
+											&pdev->dev,
+											ccic_dev,
+											ccic_dma_tasklet_handler,
+											0);
+	if (NULL == ccic_dev->vnode) {
+		dev_err(&pdev->dev, "failed to create ccic vnode\n");
+		return -EPROBE_DEFER;
+	}
+	pr_info("%s probed in %s", dev_name(&pdev->dev), __func__);
 
 	return ret;
 }
@@ -809,6 +1242,8 @@ static int k1x_ccic_remove(struct platform_device *pdev)
 	ccic_dev = dev_get_drvdata(&pdev->dev);
 	dma = ccic_dev->dma;
 
+	spm_cvdev_destroy_vnode((struct spm_ccic_vnode*)ccic_dev->vnode);
+	v4l2_device_unregister(&ccic_dev->v4l2_dev);
 	ccic_device_unregister(ccic_dev);
 
 	/* disable runtime pm */
diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.h b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.h
index e54587c6f0f2..1d9f652816c8 100644
--- a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.h
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_drv.h
@@ -48,8 +48,8 @@ struct mipi_csi2 {
 	int dphy_type;		/* 0: DPHY on chip, 1: DPTC off chip */
 	u32 dphy[5];		/* DPHY:  CSI2_DPHY1, CSI2_DPHY2, CSI2_DPHY3, CSI2_DPHY5, CSI2_DPHY6 */
 	int calc_dphy;
-	int enable_dpcm;
 	struct csi_dphy_desc dphy_desc;
+	int enable_dpcm;
 };
 
 #define HS_SETTLE_POS_MAX (100)
@@ -106,36 +106,27 @@ enum ccic_csi2vc_mode {
 	CCIC_CSI2VC_NM = 0,
 	CCIC_CSI2VC_VC,
 	CCIC_CSI2VC_DT,
+	CCIC_CSI2VC_VCDT,
 };
 
 enum ccic_csi2vc_chnl {
 	CCIC_CSI2VC_MAIN = 0,
-	CCIC_CSI2VC_VCDT,
+	CCIC_CSI2VC_SUB,
 };
 
 struct ccic_ctrl_ops {
 	void (*irq_mask)(struct ccic_ctrl *ctrl, int on);
 	int (*clk_enable)(struct ccic_ctrl *ctrl, int en);
-	int (*config_csi2_mbus)(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1,
-				int lanes);
+	int (*config_csi2_mbus)(struct ccic_ctrl *ctrl, int md, u8 vc0, u8 vc1, u8 dt0, u8 dt1, int lanes);
 	int (*config_csi2idi_mux)(struct ccic_ctrl *ctrl, int chnl, int idi, int en);
 	int (*reset_csi2idi)(struct ccic_ctrl *ctrl, int idi, int rst);
 };
 
 struct ccic_dma {
 	int index;
-	struct v4l2_device v4l2_dev;
-	struct video_device vdev;
 	struct ccic_dev *ccic_dev;
-	struct v4l2_pix_format pix_format;
 	struct mutex ops_mutex;
 	spinlock_t dev_lock;
-	struct list_head pending_bq;
-	struct list_head active_bq;
-	struct vb2_queue vb_queue;
-	u32 csi_sof_cnt;
-	u32 dma_sof_cnt;
-	u32 dma_eof_cnt;
 
 	struct ccic_dma_ops *ops;
 };
@@ -148,11 +139,16 @@ enum ccic_dma_sel {
 };
 
 struct ccic_dma_ops {
-	int (*setup_image)(struct ccic_dma *dma_dev);
-	int (*shadow_ready)(struct ccic_dma *dma_dev, int enable);
-	int (*set_addr)(struct ccic_dma *dma_dev, u8 chnl, u32 addr);
-	int (*ccic_enable)(struct ccic_dma *dma_dev, int enable);
-	int (*clk_enable)(struct ccic_dma *dma_dev, int enable);
+    int (*set_fmt)(struct ccic_dma *dma_dev,
+				unsigned int width,
+				unsigned int height,
+				unsigned int pix_fmt);
+    int (*shadow_ready)(struct ccic_dma *dma_dev);
+    int (*set_addr)(struct ccic_dma *dma_dev, unsigned long addr_y, unsigned long addr_u, unsigned long addr_v);
+    int (*ccic_enable)(struct ccic_dma *dma_dev, int enable);
+    int (*clk_enable)(struct ccic_dma *dma_dev, int enable);
+	int (*src_sel)(struct ccic_dma *dma_dev, int src, unsigned int main_ccic_id);
+	void (*dump_regs)(struct ccic_dma *dma_dev);
 };
 
 struct ccic_dev {
@@ -160,17 +156,19 @@ struct ccic_dev {
 	struct device *dev;
 	struct platform_device *pdev;
 	struct list_head list;
-	struct resource *irq;
+	int irq;
 	struct resource *mem;
 	void __iomem *base;
 	struct clk *csi_clk;
 	struct clk *clk4x;
-//	struct clk *ahb_clk;
+	//struct clk *ahb_clk;
 	struct clk *axi_clk;
+	struct clk *dpu_clk;
 	struct reset_control *ahb_reset;
 	struct reset_control *csi_reset;
 	struct reset_control *ccic_4x_reset;
 	struct reset_control *isp_ci_reset;
+	struct reset_control *mclk_reset;
 
 	int dma_burst;
 	spinlock_t ccic_lock;	/* protect the struct members and HW */
@@ -182,6 +180,8 @@ struct ccic_dev {
 	struct ccic_dma *dma;
 	/* object for csiphy part */
 	struct csiphy_device *csiphy;
+	struct v4l2_device	v4l2_dev;
+	void *vnode;
 };
 
 /*
@@ -220,5 +220,6 @@ static inline void ccic_reg_clear_bit(struct ccic_dev *ccic_dev,
 
 int ccic_ctrl_get(struct ccic_ctrl **ctrl_host, int id,
 		  irqreturn_t(*handler) (struct ccic_ctrl *, u32));
+int ccic_dma_get(struct ccic_dma **ccic_dma, int id);
 int ccic_dphy_hssettle_set(unsigned int ccic_id, unsigned int dphy_freg);
 #endif
diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.c b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.c
index 917877aa63ec..65bca4112aef 100644
--- a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.c
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.c
@@ -64,7 +64,7 @@ int ccic_csi2_lanes_enable(struct ccic_dev *ccic_dev, int lanes)
 
 	return 0;
 }
-
+#if 0
 int ccic_csi2_vc_ctrl(struct ccic_dev *ccic_dev, int md, u8 vc0, u8 vc1)
 {
 	int ret = 0;
@@ -94,27 +94,51 @@ int ccic_csi2_vc_ctrl(struct ccic_dev *ccic_dev, int md, u8 vc0, u8 vc1)
 
 	return ret;
 }
-
-int ccic_dma_src_sel(struct ccic_dev *ccic_dev, int sel)
+#endif
+int ccic_dma_src_sel(struct ccic_dev *ccic_dev, int sel, unsigned int main_ccic_id)
 {
 	switch (sel) {
 	case CCIC_DMA_SEL_LOCAL_MAIN:
-		ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
-		ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDC_SEL);
-		/* FIXME: no need */
-		ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
-		break;
 	case CCIC_DMA_SEL_LOCAL_VCDT:
-		ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
-		ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDC_SEL);
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0,
+				   CSI2_C0_EXT_TIM_ENA);
+		ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
 		/* FIXME: no need */
 		ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
 		break;
 	case CCIC_DMA_SEL_REMOTE_VCDT:
-		ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
-		ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDC_SEL);
-		/* When EXT_TIM_ENA is enabled, this field must be enabled too. */
-		ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+		if (ccic_dev->index == 0) {
+			if (main_ccic_id == 2) {
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
+				ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+			} else {
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+			}
+		} else if (ccic_dev->index == 1) {
+			if (main_ccic_id == 2) {
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
+				ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+			} else {
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+			}
+		} else {
+			if (main_ccic_id == 0) {
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
+				ccic_reg_clear_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+			} else {
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_EXT_TIM_ENA);
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_VCDT_SEL);
+				/* When EXT_TIM_ENA is enabled, this field must be enabled too. */
+				ccic_reg_set_bit(ccic_dev, REG_CSI2_CTRL0, CSI2_C0_ENABLE);
+			}
+		}
 		break;
 	case CCIC_DMA_SEL_REMOTE_MAIN:
 	default:
diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.h b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.h
index 65db3b2711f3..a9e9f533f475 100644
--- a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.h
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_hwreg.h
@@ -8,6 +8,9 @@
 #ifndef __CCIC_HWREG_H__
 #define __CCIC_HWREG_H__
 
+#ifndef BIT
+#define BIT(nr)			(1 << (nr))
+#endif
 #define REG_Y0BAR	0x00
 #define REG_U0BAR	0x0c
 #define REG_V0BAR	0x18
@@ -51,7 +54,7 @@
 #define	IRQ_CSI2PARSE_ERR			(BIT(29))
 #define	IRQ_CSI2GENSHORTPACKVALID	(BIT(30))
 #define	IRQ_CSI2GENSHORTPACK_ERR	(BIT(31))
-// #define              FRAMEIRQS       (IRQ_CSI_SOF | IRQ_CSI_EOF | IRQ_DMA_SOF | IRQ_DMA_EOF)
+// #define              FRAMEIRQS       (IRQ_CSI_SOF | IRQ_CSI_EOF  | IRQ_DMA_SOF | IRQ_DMA_EOF | IRQ_DMA_OVERFLOW | IRQ_DMA_NOT_DONE | IRQ_SHADOW_NOT_RDY)
 #define	FRAMEIRQS		(IRQ_DMA_SOF | IRQ_DMA_EOF | IRQ_DMA_OVERFLOW | IRQ_DMA_NOT_DONE | IRQ_SHADOW_NOT_RDY)
 #define	CSI2PHYERRS		(0xFF0B0000)
 #define	ALLIRQS			(FRAMEIRQS | CSI2PHYERRS | IRQ_CSI2IDI_HBLK2HSYNC)
@@ -151,7 +154,7 @@
 #define	CSI2_C0_EXT_TIM_ENA		(0x1 << 3)
 #define	CSI2_C0_VLEN			(0x4 << 4)
 #define	CSI2_C0_VLEN_MASK		(0xf << 4)
-#define	CSI2_C0_VCDC_SEL		(0x1 << 13)
+#define	CSI2_C0_VCDT_SEL		(0x1 << 13)
 #define	REG_CSI2_VCCTRL	0x114
 #define	CSI2_VCCTRL_MD_MASK		(0x3 << 0)
 #define	CSI2_VCCTRL_MD_NORMAL	(0x0 << 0)
@@ -160,6 +163,17 @@
 #define	CSI2_VCCTRL_VC0_MASK	(0x3 << 14)
 #define	CSI2_VCCTRL_DT1_MASK	(0x3 << 16)
 #define	CSI2_VCCTRL_VC1_MASK	(0x3 << 22)
+#define	CSI2_VCCTRL_DT_ENABLE	(0x1 << 24)
+#define REG_CSI2_DT_FLT			0x11c
+#define	CSI2_DT_FLT0_MASK		(BIT(0)|BIT(1)|BIT(2)|BIT(3)|BIT(4)|BIT(5))
+#define CSI2_DT_FLT0_SHIFT		(0)
+#define	CSI2_DT_FLT0_EN			(BIT(6))
+#define	CSI2_DT_FLT1_MASK		(BIT(8)|BIT(9)|BIT(10)|BIT(11)|BIT(12)|BIT(13))
+#define CSI2_DT_FLT1_SHIFT		(8)
+#define	CSI2_DT_FLT1_EN			(BIT(14))
+#define	CSI2_DT_FLT2_MASK		(BIT(16)|BIT(17)|BIT(18)|BIT(19)|BIT(20)|BIT(21))
+#define CSI2_DT_FLT2_SHIFT		(16)
+#define	CSI2_DT_FLT2_EN			(BIT(22))
 #define REG_CSI2_DPHY1	0x124
 #define	CSI2_DHPY1_ANA_PU		(0x1 << 0)
 #define	CSI2_DHPY1_BIF_EN		(0x1 << 1)
@@ -225,12 +239,11 @@
 
 int ccic_csi2_config_dphy(struct ccic_dev *ccic_dev, int lanes, int enable);
 int ccic_csi2_lanes_enable(struct ccic_dev *ccic_dev, int lanes);
-int ccic_csi2_vc_ctrl(struct ccic_dev *ccic_dev, int md, u8 vc0, u8 vc1);
-int ccic_dma_src_sel(struct ccic_dev *ccic_dev, int sel);
-int ccic_dma_set_out_format(struct ccic_dev *ccic_dev, u32 pixfmt, u32 width,
-			    u32 height);
+//int ccic_csi2_vc_ctrl(struct ccic_dev *ccic_dev, int md, u8 vc0, u8 vc1);
+int ccic_dma_src_sel(struct ccic_dev *ccic_dev, int sel, unsigned int main_ccic_id);
+int ccic_dma_set_out_format(struct ccic_dev *ccic_dev, u32 pixfmt, u32 width, u32 height);
 int ccic_dma_set_burst(struct ccic_dev *ccic_dev);
-void ccic_dma_enable(struct ccic_dev *ccic_dev, int en);
+//void ccic_dma_enable(struct ccic_dev *ccic_dev, int en);
 int ccic_csi2idi_src_sel(struct ccic_dev *ccic_dev, int sel);
 void ccic_csi2idi_reset(struct ccic_dev *ccic_dev, int reset);
 void ccic_hw_dump_regs(struct ccic_dev *ccic_dev);
diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c
new file mode 100644
index 000000000000..c60e5cedf46e
--- /dev/null
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c
@@ -0,0 +1,1407 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * vdev.c - video divece functions
+ *
+ * Copyright(C) 2019 SPM Micro Limited
+ */
+#include <media/v4l2-dev.h>
+#include <media/media-entity.h>
+#include <media/media-device.h>
+#include <media/v4l2-subdev.h>
+#include <media/videobuf2-v4l2.h>
+#include <media/v4l2-ioctl.h>
+#include <linux/media-bus-format.h>
+#include <linux/compat.h>
+#include <media/k1x/k1x_media_bus_format.h>
+#include <media/k1x/k1x_ccic_uapi.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-dma-contig.h>
+#include <linux/pm_runtime.h>
+#include <linux/pm_qos.h>
+#include "ccic_vdev.h"
+
+#define pr_dbg(format, ...)
+
+static struct {
+	__u32 pixelformat;
+	__u8 num_planes;
+	__u32 pixel_width_align;
+	__u32 pixel_height_align;
+	__u32 plane_bytes_align[VIDEO_MAX_PLANES];
+	struct {
+		__u32 num;
+		__u32 den;
+	}plane_bpp[VIDEO_MAX_PLANES];
+	struct {
+		__u32 num;
+		__u32 den;
+	}height_subsampling[VIDEO_MAX_PLANES];
+} spm_ccic_formats_table[] = {
+	/* bayer raw8 */
+	{
+		.pixelformat = V4L2_PIX_FMT_SBGGR8,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 8,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SGBRG8,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 8,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SGRBG8,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 8,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SRGGB8,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 8,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	/* bayer raw10 */
+	{
+		.pixelformat = V4L2_PIX_FMT_SBGGR10P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 10,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SGBRG10P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 10,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SGRBG10P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 10,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SRGGB10P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 10,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	/* bayer raw12 */
+	{
+		.pixelformat = V4L2_PIX_FMT_SBGGR12P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 12,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SGBRG12P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 12,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SGRBG12P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 12,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	{
+		.pixelformat = V4L2_PIX_FMT_SRGGB12P,
+		.num_planes = 1,
+		.pixel_width_align = 1,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 12,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	/* yuv */
+	/* YUYV YUV422 */
+	{
+		.pixelformat = V4L2_PIX_FMT_YUYV,
+		.num_planes = 1,
+		.pixel_width_align = 2,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 16,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+	/* YVYU YUV422 */
+	{
+		.pixelformat = V4L2_PIX_FMT_YVYU,
+		.num_planes = 1,
+		.pixel_width_align = 2,
+		.plane_bytes_align = {
+			[0] = 1,
+		},
+		.plane_bpp = {
+			[0] = {
+				.num = 16,
+				.den = 1,
+			},
+		},
+		.height_subsampling = {
+			[0] = {
+				.num = 1,
+				.den = 1,
+			},
+		},
+	},
+};
+
+static int spm_cvdev_lookup_formats_table(struct v4l2_format *f, int *bit_depth)
+{
+	struct v4l2_pix_format_mplane *pix_fmt = &f->fmt.pix_mp;
+	int loop = 0;
+
+	for (loop = 0; loop < ARRAY_SIZE(spm_ccic_formats_table); loop++) {
+		if (spm_ccic_formats_table[loop].pixelformat == pix_fmt->pixelformat) {
+			*bit_depth = spm_ccic_formats_table[loop].plane_bpp[0].num;
+			break;
+		}
+	}
+	if (loop >= ARRAY_SIZE(spm_ccic_formats_table))
+		return -1;
+
+	return 0;
+}
+
+void spm_cvdev_fill_v4l2_format(struct v4l2_format *f)
+{
+	int loop = 0, plane = 0;
+	unsigned int width = 0, height = 0, stride = 0;
+	struct v4l2_plane_pix_format *plane_fmt = NULL;
+
+	for (loop = 0; loop < ARRAY_SIZE(spm_ccic_formats_table); loop++) {
+		if (f->fmt.pix_mp.pixelformat == spm_ccic_formats_table[loop].pixelformat) {
+			width = CAM_ALIGN(f->fmt.pix_mp.width, spm_ccic_formats_table[loop].pixel_width_align);
+			if (0 == spm_ccic_formats_table[loop].pixel_height_align)
+				spm_ccic_formats_table[loop].pixel_height_align = 1;
+			height = CAM_ALIGN(f->fmt.pix_mp.height, spm_ccic_formats_table[loop].pixel_height_align);
+			pr_dbg("%s width=%u, width_align=%u",__func__ ,width, spm_ccic_formats_table[loop].pixel_width_align);
+			f->fmt.pix_mp.num_planes = spm_ccic_formats_table[loop].num_planes;
+			for (plane = 0; plane < f->fmt.pix_mp.num_planes; plane++) {
+				plane_fmt = &f->fmt.pix_mp.plane_fmt[plane];
+				stride = CAM_ALIGN((width * spm_ccic_formats_table[loop].plane_bpp[plane].num) / (spm_ccic_formats_table[loop].plane_bpp[plane].den * 8),
+								spm_ccic_formats_table[loop].plane_bytes_align[plane]);
+				plane_fmt->sizeimage =
+					height * stride * spm_ccic_formats_table[loop].height_subsampling[plane].num / spm_ccic_formats_table[loop].height_subsampling[plane].den;
+				plane_fmt->bytesperline = stride;
+				pr_dbg("plane%d stride=%u", plane, stride);
+			}
+			break;
+		}
+	}
+}
+
+static int spm_cvdev_queue_setup(struct vb2_queue *q,
+								unsigned int *num_buffers,
+								unsigned int *num_planes,
+								unsigned int sizes[],
+								struct device *alloc_devs[])
+{
+	struct spm_ccic_vnode *ac_vnode = container_of(q, struct spm_ccic_vnode, buf_queue);
+	int loop = 0;
+
+	if (num_buffers && num_planes) {
+		*num_planes = ac_vnode->cur_fmt.fmt.pix_mp.num_planes;
+		pr_dbg("%s num_buffers=%d num_planes=%d ", __func__, *num_buffers, *num_planes);
+		for (loop = 0; loop < *num_planes; loop++) {
+			sizes[loop] = ac_vnode->cur_fmt.fmt.pix_mp.plane_fmt[loop].sizeimage;
+			pr_dbg("plane%d size=%u ", loop, sizes[loop]);
+		}
+	}
+	else {
+		pr_err("%s NULL num_buffers or num_planes\n", __func__);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void spm_cvdev_wait_prepare(struct vb2_queue *q)
+{
+	//going to wait sleep, release all locks that may block any vb2 buf/stream functions
+	struct spm_ccic_vnode *ac_vnode = container_of(q, struct spm_ccic_vnode, buf_queue);
+	mutex_unlock(&ac_vnode->mlock);
+}
+
+static void spm_cvdev_wait_finish(struct vb2_queue *q)
+{
+	//wakeup from wait sleep, reacquire all locks
+	struct spm_ccic_vnode *ac_vnode = container_of(q, struct spm_ccic_vnode, buf_queue);
+	mutex_lock(&ac_vnode->mlock);
+}
+
+static int spm_cvdev_buf_init(struct vb2_buffer *vb)
+{
+	struct spm_ccic_vbuffer *ac_vb = to_ccic_vbuffer(vb);
+
+	INIT_LIST_HEAD(&ac_vb->list_entry);
+	ac_vb->reset_flag = 0;
+	return 0;
+}
+
+static int spm_cvdev_buf_prepare(struct vb2_buffer *vb)
+{
+	struct spm_ccic_vbuffer *ac_vb = to_ccic_vbuffer(vb);
+	struct spm_ccic_vnode *ac_vnode = container_of(vb->vb2_queue, struct spm_ccic_vnode, buf_queue);
+
+	ac_vb->flags = 0;
+	memset(ac_vb->reserved, 0, AC_BUF_RESERVED_DATA_LEN);
+	//ac_vb->vb2_v4l2_buf.flags &= ~V4L2_BUF_FLAG_IGNOR;
+	ac_vb->vb2_v4l2_buf.flags = 0;
+	ac_vb->ac_vnode = ac_vnode;
+	return 0;
+}
+
+static void spm_cvdev_buf_finish(struct vb2_buffer *vb)
+{
+}
+
+static void spm_cvdev_buf_cleanup(struct vb2_buffer *vb)
+{
+
+}
+
+static int spm_cvdev_start_streaming(struct vb2_queue *q, unsigned int count)
+{
+	struct spm_ccic_vnode *ac_vnode = container_of(q, struct spm_ccic_vnode, buf_queue);
+	struct ccic_ctrl *ccic_ctrl = ac_vnode->ccic_dev->ctrl;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	struct device *dev = ac_vnode->ccic_dev->dev;
+	struct spm_ccic_vbuffer *ac_vb = NULL;
+	int ret = 0, csi2idi = 0;
+
+	pr_dbg("%s(%s)", __func__, ac_vnode->name);
+	ac_vnode->total_frm = 0;
+	ac_vnode->sw_err_frm = 0;
+	ac_vnode->hw_err_frm = 0;
+	ac_vnode->ok_frm = 0;
+	ac_vnode->frame_id = 0;
+
+	if (ac_vnode->ccic_dev->index == 0) {
+		csi2idi = CCIC_CSI2IDI0;
+	} else {
+		csi2idi = CCIC_CSI2IDI1;
+	}
+	ret = ccic_ctrl->ops->config_csi2idi_mux(ccic_ctrl, ac_vnode->csi2vc, csi2idi, 1);
+	if (ret) {
+		dev_err(dev, "%s config mux(enable) failed ret=%d\n", __func__, ret);
+		return ret;
+	}
+	if (ac_vnode->ccic_mode == CCIC_MODE_NM) {
+		ret = ccic_ctrl->ops->config_csi2_mbus(ccic_ctrl, CCIC_CSI2VC_NM, 0, 0, 0, 0, ac_vnode->lane_num);
+	} else if (ac_vnode->ccic_mode == CCIC_MODE_VC) {
+		ret = ccic_ctrl->ops->config_csi2_mbus(ccic_ctrl, CCIC_CSI2VC_VC, ac_vnode->main_vc, ac_vnode->sub_vc, 0, 0, ac_vnode->lane_num);
+	} else {
+		ret = ccic_ctrl->ops->config_csi2_mbus(ccic_ctrl, CCIC_CSI2VC_VCDT,
+											ac_vnode->main_vc, ac_vnode->sub_vc,
+											ac_vnode->main_dt, ac_vnode->sub_dt, ac_vnode->lane_num);
+	}
+	if (ret) {
+		dev_err(dev, "%s config mbus(enable) lane=%d failed ret=%d\n", __func__,
+				ac_vnode->lane_num, ret);
+		return ret;
+	}
+	ccic_dma->ops->src_sel(ccic_dma, ac_vnode->src_sel, ac_vnode->main_ccic_id);
+	ccic_dma->ops->ccic_enable(ccic_dma, 1);
+	ccic_ctrl->ops->irq_mask(ccic_ctrl, 1);
+	ret = spm_cvdev_dq_idle_vbuffer(ac_vnode, &ac_vb);
+	if (ret) {
+		dev_info(dev, "%s no initial buffer available\n", __func__);
+	} else {
+		spm_cvdev_q_busy_vbuffer(ac_vnode, ac_vb);
+	}
+	if (ac_vb) {
+		ccic_update_dma_addr(ac_vnode, ac_vb, 0);
+		ccic_dma->ops->shadow_ready(ccic_dma);
+	}
+	ac_vnode->is_streaming = 1;
+	return 0;
+}
+
+static void spm_cvdev_stop_streaming(struct vb2_queue *q)
+{
+	struct spm_ccic_vnode *ac_vnode = container_of(q, struct spm_ccic_vnode, buf_queue);
+	struct ccic_ctrl *ccic_ctrl = ac_vnode->ccic_dev->ctrl;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	int csi2idi = 0;
+	unsigned long flags = 0;
+	//int ret = 0;
+
+	pr_dbg("%s(%s) enter", __func__, ac_vnode->name);
+
+	pr_notice("%s total_frm(%u) sw_err_frm(%u) hw_err_frm(%u) ok_frm(%u)\n",
+			ac_vnode->name, ac_vnode->total_frm, ac_vnode->sw_err_frm, ac_vnode->hw_err_frm, ac_vnode->ok_frm);
+	if (ac_vnode->ccic_dev->index == 0) {
+		csi2idi = CCIC_CSI2IDI0;
+	} else {
+		csi2idi = CCIC_CSI2IDI1;
+	}
+	spin_lock_irqsave(&(ac_vnode->waitq_head.lock), flags);
+	wait_event_interruptible_locked_irq(ac_vnode->waitq_head,
+										!ac_vnode->in_irq && !ac_vnode->in_tasklet);
+	ac_vnode->in_streamoff = 1;
+	spin_unlock_irqrestore(&(ac_vnode->waitq_head.lock), flags);
+	ccic_ctrl->ops->irq_mask(ccic_ctrl, 0);
+	//if (ac_vnode->ccic_mode == CCIC_MODE_NM) {
+		ccic_ctrl->ops->config_csi2_mbus(ccic_ctrl, CCIC_CSI2VC_NM, 0, 0, 0, 0, 0);
+	//} else {
+	//	ccic_ctrl->ops->config_csi2_mbus(ccic_ctrl, CCIC_CSI2VC_VC, ac_vnode->main_vc, ac_vnode->sub_vc, 0);
+	//}
+	ccic_ctrl->ops->config_csi2idi_mux(ccic_ctrl, ac_vnode->csi2vc, csi2idi, 0);
+	ccic_dma->ops->ccic_enable(ccic_dma, 0);
+	ac_vnode->is_streaming = 0;
+	spin_lock_irqsave(&(ac_vnode->waitq_head.lock), flags);
+	ac_vnode->in_streamoff = 0;
+	spin_unlock_irqrestore(&(ac_vnode->waitq_head.lock), flags);
+	pr_dbg("%s(%s) leave", __func__, ac_vnode->name);
+}
+
+static void spm_cvdev_buf_queue(struct vb2_buffer *vb)
+{
+	unsigned long flags = 0;
+	struct spm_ccic_vbuffer *ac_vb = to_ccic_vbuffer(vb);
+	struct vb2_queue *buf_queue = vb->vb2_queue;
+	struct spm_ccic_vnode *ac_vnode = container_of(buf_queue, struct spm_ccic_vnode, buf_queue);
+	//struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	//unsigned int v4l2_buf_flags = ac_vnode->v4l2_buf_flags[vb->index];
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	atomic_inc(&ac_vnode->queued_buf_cnt);
+	list_add_tail(&ac_vb->list_entry, &ac_vnode->queued_list);
+	//if (ac_vnode->is_streaming) {
+	//	if (__spm_cvdev_busy_list_empty(ac_vnode)) {
+	//		__spm_cvdev_dq_idle_vbuffer(ac_vnode, &ac_vb);
+	//		if (ac_vb) {
+	//			__spm_cvdev_q_busy_vbuffer(ac_vnode, ac_vb);
+	//			ccic_update_dma_addr(ac_vnode, ac_vb, 0);
+	//			ccic_dma->ops->shadow_ready(ccic_dma);
+	//		}
+	//	}
+	//}
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+}
+
+static struct vb2_ops spm_ccic_vb2_ops = {
+	.queue_setup = spm_cvdev_queue_setup,
+	.wait_prepare = spm_cvdev_wait_prepare,
+	.wait_finish = spm_cvdev_wait_finish,
+	.buf_init = spm_cvdev_buf_init,
+	.buf_prepare = spm_cvdev_buf_prepare,
+	.buf_finish = spm_cvdev_buf_finish,
+	.buf_cleanup = spm_cvdev_buf_cleanup,
+	.start_streaming = spm_cvdev_start_streaming,
+	.stop_streaming = spm_cvdev_stop_streaming,
+	.buf_queue = spm_cvdev_buf_queue,
+};
+
+static void spm_cvdev_cancel_all_buffers(struct spm_ccic_vnode *ac_vnode)
+{
+	unsigned long flags = 0;
+	struct spm_ccic_vbuffer *pos = NULL, *n = NULL;
+	struct vb2_buffer *vb2_buf = NULL;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	list_for_each_entry_safe(pos, n, &ac_vnode->queued_list, list_entry) {
+		vb2_buf = &(pos->vb2_v4l2_buf.vb2_buf);
+		vb2_buffer_done(vb2_buf, VB2_BUF_STATE_ERROR);
+		list_del_init(&pos->list_entry);
+		atomic_dec(&ac_vnode->queued_buf_cnt);
+	}
+	list_for_each_entry_safe(pos, n, &ac_vnode->busy_list, list_entry) {
+		vb2_buf = &(pos->vb2_v4l2_buf.vb2_buf);
+		vb2_buffer_done(vb2_buf, VB2_BUF_STATE_ERROR);
+		list_del_init(&pos->list_entry);
+		atomic_dec(&ac_vnode->busy_buf_cnt);
+	}
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+}
+
+static int spm_cvdev_vidioc_reqbufs(struct file *file, void *fh, struct v4l2_requestbuffers *b)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+	ret = vb2_reqbufs(&ac_vnode->buf_queue, b);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_querybuf(struct file *file, void *fh, struct v4l2_buffer *b)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+	ret = vb2_querybuf(&ac_vnode->buf_queue, b);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_qbuf(struct file *file, void *fh, struct v4l2_buffer *b)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+	unsigned int i = 0;
+
+	ac_vnode->v4l2_buf_flags[b->index] = b->flags;
+	if (!b->m.planes) {
+		return -EINVAL;
+	}
+	for (i = 0; i < b->length; i++) {
+		ac_vnode->planes_offset[b->index][i] = b->m.planes[i].data_offset;
+	}
+	mutex_lock(&ac_vnode->mlock);
+	ret = vb2_qbuf(&ac_vnode->buf_queue, vnode->v4l2_dev->mdev, b);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_expbuf(struct file *file, void *fh, struct v4l2_exportbuffer *e)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+#ifndef MODULE
+	ret = vb2_expbuf(&ac_vnode->buf_queue, e);
+#endif
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_dqbuf(struct file *file, void *fh, struct v4l2_buffer *b)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+	ret = vb2_dqbuf(&ac_vnode->buf_queue, b, file->f_flags & O_NONBLOCK);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_create_bufs(struct file *file, void *fh, struct v4l2_create_buffers *b)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+#ifndef MODULE
+	ret = vb2_create_bufs(&ac_vnode->buf_queue, b);
+#endif
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_prepare_buf(struct file *file, void *fh, struct v4l2_buffer *b)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+	ret = vb2_prepare_buf(&ac_vnode->buf_queue, vnode->v4l2_dev->mdev, b);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_streamon(struct file *file, void *fn, enum v4l2_buf_type i)
+{
+	int ret = 0;
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	mutex_lock(&ac_vnode->mlock);
+	ret = vb2_streamon(&ac_vnode->buf_queue, i);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_streamoff(struct file *file, void *fn, enum v4l2_buf_type i)
+{
+	int ret = 0;
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	unsigned long flags = 0;
+
+	pr_dbg("%s(%s) enter", __func__, ac_vnode->name);
+	pr_dbg("%s(%s) queued_buf_cnt=%d busy_buf_cnt=%d.", __func__, ac_vnode->name, atomic_read(&ac_vnode->queued_buf_cnt), atomic_read(&ac_vnode->busy_buf_cnt));
+	spin_lock_irqsave(&ac_vnode->waitq_head.lock, flags);
+	wait_event_interruptible_locked_irq(ac_vnode->waitq_head, !ac_vnode->in_tasklet && !ac_vnode->in_irq);
+	ac_vnode->in_streamoff = 1;
+	spin_unlock_irqrestore(&ac_vnode->waitq_head.lock, flags);
+	pr_dbg("%s tasklet clean", ac_vnode->name);
+	mutex_lock(&ac_vnode->mlock);
+	pr_dbg("%s cancel all buffers", ac_vnode->name);
+	spm_cvdev_cancel_all_buffers(ac_vnode);
+	pr_dbg("%s streamoff", ac_vnode->name);
+	ret = vb2_streamoff(&ac_vnode->buf_queue, i);
+	mutex_unlock(&ac_vnode->mlock);
+	spin_lock_irqsave(&ac_vnode->waitq_head.lock, flags);
+	ac_vnode->in_streamoff = 0;
+	spin_unlock_irqrestore(&ac_vnode->waitq_head.lock, flags);
+	pr_dbg("%s(%s) leave", __func__, ac_vnode->name);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_querycap(struct file *file, void *fh, struct v4l2_capability *cap)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+
+	strlcpy(cap->driver, ac_vnode->name, 16);
+	cap->capabilities = V4L2_CAP_DEVICE_CAPS | V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
+	cap->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
+	return 0;
+}
+
+/*
+ * static int spm_cvdev_vidioc_enum_fmt_vid_cap_mplane(struct file *file, void *fh, struct v4l2_fmtdesc *f)
+ * {
+ *     return 0;
+ * }
+ */
+
+static int spm_cvdev_vidioc_g_fmt_vid_cap_mplane(struct file *file, void *fh, struct v4l2_format *f)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+
+	pr_dbg("get format fourcc code[0x%08x] (%dx%d)",
+			ac_vnode->cur_fmt.fmt.pix_mp.pixelformat,
+			ac_vnode->cur_fmt.fmt.pix_mp.width,
+			ac_vnode->cur_fmt.fmt.pix_mp.height);
+	*f = ac_vnode->cur_fmt;
+	return 0;
+}
+
+static int __spm_cvdev_vidioc_s_fmt_vid_cap_mplane(struct file *file, void *fh, struct v4l2_format *f)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	struct vb2_queue *vb2_queue = &ac_vnode->buf_queue;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	struct device *dev = ac_vnode->ccic_dev->dev;
+	int ret = 0, bit_depth = 0;
+	unsigned int fmt_code = 0, width = 0, height = 0;
+
+	pr_dbg("set format fourcc code[0x%08x] (%dx%d)",
+			f->fmt.pix_mp.pixelformat, f->fmt.pix_mp.width, f->fmt.pix_mp.height);
+	width = f->fmt.pix_mp.width;
+	height = f->fmt.pix_mp.height;
+	if (vb2_is_streaming(vb2_queue)) {
+		pr_err("%s set format not allowed while streaming on.\n", __func__);
+		return -EBUSY;
+	}
+	ret = spm_cvdev_lookup_formats_table(f, &bit_depth);
+	if (ret) {
+		pr_err("%s failed to lookup formats table fourcc code[0x%08x]\n", __func__, f->fmt.pix_mp.pixelformat);
+		return ret;
+	}
+
+	if (bit_depth == 8) {
+		fmt_code = MEDIA_BUS_FMT_SBGGR8_1X8;
+	} else if (bit_depth == 10) {
+		fmt_code = MEDIA_BUS_FMT_SBGGR10_1X10;
+	} else if (bit_depth == 12) {
+		fmt_code = MEDIA_BUS_FMT_SBGGR12_1X12;
+	} else if (bit_depth == 16) {
+		fmt_code = MEDIA_BUS_FMT_UYVY8_2X8;
+		width *= 2;
+	} else {
+		dev_err(dev, "unknown bit_depth=%d\n", bit_depth);
+		return -EINVAL;
+	}
+	ret = ccic_dma->ops->set_fmt(ccic_dma, width, height, fmt_code);
+	if (ret) {
+		dev_err(dev, "%s set fmt(%ux%u code:0x%08x) failed\n", __func__,
+				width, height, fmt_code);
+		return ret;
+	}
+	spm_cvdev_fill_v4l2_format(f);
+	ac_vnode->cur_fmt = *f;
+
+	return 0;
+}
+
+static int spm_cvdev_vidioc_s_fmt_vid_cap_mplane(struct file *file, void *fh, struct v4l2_format *f)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	int ret = 0;
+
+	mutex_lock(&ac_vnode->mlock);
+	ret = __spm_cvdev_vidioc_s_fmt_vid_cap_mplane(file, fh, f);
+	mutex_unlock(&ac_vnode->mlock);
+	return ret;
+}
+
+static int spm_cvdev_vidioc_try_fmt_vid_cap_mplane(struct file *file, void *fh, struct v4l2_format *f)
+{
+	return 0;
+}
+
+static long spm_cvdev_vidioc_default(struct file *file,
+									void *fh,
+									bool valid_prio,
+									unsigned int cmd,
+									void *arg)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	struct device *dev = ac_vnode->ccic_dev->dev;
+	struct v4l2_ccic_params *ccic_params = NULL;
+	//int ret = 0;
+
+	switch (cmd) {
+	case VIDIOC_CCIC_S_PARAMS:
+		ccic_params = (struct v4l2_ccic_params*)arg;
+		if (ac_vnode->is_streaming) {
+			dev_err(dev, "%s set params failed, device is busy now\n", ac_vnode->name);
+			return -EBUSY;
+		}
+		ac_vnode->lane_num = ccic_params->lane_num;
+		ac_vnode->ccic_mode = ccic_params->ccic_mode;
+		ac_vnode->ch_mode = ccic_params->ch_mode;
+		ac_vnode->main_vc = ccic_params->main_vc;
+		ac_vnode->sub_vc = ccic_params->sub_vc;
+		ac_vnode->main_dt = ccic_params->main_dt;
+		ac_vnode->sub_dt = ccic_params->sub_dt;
+		ac_vnode->main_ccic_id = ccic_params->main_ccic_id;
+		if (ac_vnode->ch_mode == CCIC_CH_MODE_MAIN) {
+			if (ac_vnode->ccic_mode == CCIC_MODE_NM) {
+				ac_vnode->src_sel = CCIC_DMA_SEL_LOCAL_MAIN;
+			} else {
+				ac_vnode->src_sel = CCIC_DMA_SEL_LOCAL_VCDT;
+			}
+		} else {
+			ac_vnode->src_sel = CCIC_DMA_SEL_REMOTE_VCDT;
+		}
+		dev_info(dev, "%s set mipi lane:%u ccic_mode=%d ch_mode=%d main_vc=%u sub_vc=%u main_dt=%u sub_dt=%u main_ccic_id=%u\n",
+				ac_vnode->name, ccic_params->lane_num, ccic_params->ccic_mode,
+				ccic_params->ch_mode, ccic_params->main_vc, ccic_params->sub_vc,
+				ccic_params->main_dt, ccic_params->sub_dt, ccic_params->main_ccic_id);
+		break;
+	default:
+		pr_err("unknown ioctl cmd(%d)\n", cmd);
+		return -ENOIOCTLCMD;
+	}
+
+	return 0;
+}
+
+static struct v4l2_ioctl_ops spm_ccic_v4l2_ioctl_ops = {
+	/* VIDIOC_QUERYCAP handler */
+	.vidioc_querycap = spm_cvdev_vidioc_querycap,
+	/* VIDIOC_ENUM_FMT handlers */
+	/* .vidioc_enum_fmt_vid_cap = spm_cvdev_vidioc_enum_fmt_vid_cap_mplane, */
+	/* VIDIOC_G_FMT handlers */
+	.vidioc_g_fmt_vid_cap_mplane = spm_cvdev_vidioc_g_fmt_vid_cap_mplane,
+	/* VIDIOC_S_FMT handlers */
+	.vidioc_s_fmt_vid_cap_mplane = spm_cvdev_vidioc_s_fmt_vid_cap_mplane,
+	/* VIDIOC_TRY_FMT handlers */
+	.vidioc_try_fmt_vid_cap_mplane = spm_cvdev_vidioc_try_fmt_vid_cap_mplane,
+	/* Buffer handlers */
+	.vidioc_reqbufs = spm_cvdev_vidioc_reqbufs,
+	.vidioc_querybuf = spm_cvdev_vidioc_querybuf,
+	.vidioc_qbuf = spm_cvdev_vidioc_qbuf,
+	.vidioc_expbuf = spm_cvdev_vidioc_expbuf,
+	.vidioc_dqbuf = spm_cvdev_vidioc_dqbuf,
+	.vidioc_create_bufs = spm_cvdev_vidioc_create_bufs,
+	.vidioc_prepare_buf = spm_cvdev_vidioc_prepare_buf,
+	.vidioc_streamon = spm_cvdev_vidioc_streamon,
+	.vidioc_streamoff = spm_cvdev_vidioc_streamoff,
+	.vidioc_default = spm_cvdev_vidioc_default,
+};
+
+static int spm_cvdev_open(struct file *file)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	struct ccic_ctrl *ccic_ctrl = ac_vnode->ccic_dev->ctrl;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	struct device *dev = ac_vnode->ccic_dev->dev;
+	int ret = 0;
+	pr_dbg("%s in, open vnode(%s - %s).", __func__, ac_vnode->name, video_device_node_name(vnode));
+
+	if (atomic_inc_return(&ac_vnode->ref_cnt) != 1) {
+		pr_err("vnode(%s - %s) was already openned.\n", ac_vnode->name, video_device_node_name(vnode));
+		atomic_dec(&ac_vnode->ref_cnt);
+		return -EBUSY;
+	}
+	ret = pm_runtime_get_sync(dev);
+	if (ret < 0) {
+		dev_err(dev, "%s rpm get failed ret=%d\n", ac_vnode->name, ret);
+		return ret;
+	}
+	ccic_ctrl->ops->clk_enable(ccic_ctrl, 1);
+	ccic_dma->ops->clk_enable(ccic_dma, 1);
+	pr_dbg("%s exit, open vnode(%s - %s).", __func__, ac_vnode->name, video_device_node_name(vnode));
+	return 0;
+}
+
+static void __spm_cvdev_close(struct spm_ccic_vnode *ac_vnode)
+{
+	unsigned long flags = 0;
+
+	pr_dbg("%s(%s) enter", __func__, ac_vnode->name);
+	pr_dbg("%s(%s) queued_buf_cnt=%d busy_buf_cnt=%d.", __func__, ac_vnode->name, atomic_read(&ac_vnode->queued_buf_cnt), atomic_read(&ac_vnode->busy_buf_cnt));
+	spin_lock_irqsave(&ac_vnode->waitq_head.lock, flags);
+	ac_vnode->in_streamoff = 1;
+	wait_event_interruptible_locked_irq(ac_vnode->waitq_head, !ac_vnode->in_tasklet && !ac_vnode->in_irq);
+	spin_unlock_irqrestore(&ac_vnode->waitq_head.lock, flags);
+	pr_dbg("%s tasklet clean", ac_vnode->name);
+	mutex_lock(&ac_vnode->mlock);
+	pr_dbg("%s cancel all buffers", ac_vnode->name);
+	spm_cvdev_cancel_all_buffers(ac_vnode);
+	pr_dbg("%s queue release", ac_vnode->name);
+	vb2_queue_release(&ac_vnode->buf_queue);
+	ac_vnode->buf_queue.owner = NULL;
+	ac_vnode->is_streaming = 0;
+	mutex_unlock(&ac_vnode->mlock);
+	spin_lock_irqsave(&ac_vnode->waitq_head.lock, flags);
+	ac_vnode->in_streamoff = 0;
+	spin_unlock_irqrestore(&ac_vnode->waitq_head.lock, flags);
+	pr_dbg("%s(%s) leave", __func__, ac_vnode->name);
+}
+
+static int spm_cvdev_close(struct file *file)
+{
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+	struct ccic_ctrl *ccic_ctrl = ac_vnode->ccic_dev->ctrl;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	struct device *dev = ac_vnode->ccic_dev->dev;
+
+	if (atomic_dec_and_test(&ac_vnode->ref_cnt)) {
+		__spm_cvdev_close(ac_vnode);
+		ccic_dma->ops->clk_enable(ccic_dma, 0);
+		ccic_ctrl->ops->clk_enable(ccic_ctrl, 0);
+		pm_runtime_put_sync(dev);
+	}
+
+	return v4l2_fh_release(file);
+}
+
+static __poll_t spm_cvdev_poll(struct file *file, struct poll_table_struct *wait)
+{
+	__poll_t ret;
+	struct video_device *vnode = video_devdata(file);
+	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
+
+	ret = vb2_poll(&ac_vnode->buf_queue, file, wait);
+
+	return ret;
+}
+
+#ifdef SPM_CONFIG_COMPAT
+
+static int alloc_userspace(unsigned int size, u32 aux_space,
+			   void __user **new_p64)
+{
+	*new_p64 = compat_alloc_user_space(size + aux_space);
+	if (!*new_p64)
+		return -ENOMEM;
+	if (clear_user(*new_p64, size))
+		return -EFAULT;
+	return 0;
+}
+
+long spm_cvdev_compat_ioctl32(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	void __user *p32 = compat_ptr(arg);
+	void __user *new_p64 = NULL;
+	//void __user *aux_buf;
+	//u32 aux_space;
+	long err = 0;
+	const size_t ioc_size = _IOC_SIZE(cmd);
+	//size_t ioc_size64 = 0;
+
+	//if (_IOC_TYPE(cmd) == 'V') {
+	//	switch (_IOC_NR(cmd)) {
+	//		//int r
+	//		case _IOC_NR(VIDIOC_G_SLICE_MODE):
+	//		case _IOC_NR(VIDIOC_CPU_Z1):
+	//		//int w
+	//		case _IOC_NR(VIDIOC_PUT_PIPELINE):
+	//		case _IOC_NR(VIDIOC_RESET_PIPELINE):
+	//		ioc_size64 = sizeof(int);
+	//		break;
+	//		//unsigned int
+	//		case _IOC_NR(VIDIOC_G_PIPE_STATUS):
+	//		ioc_size64 = sizeof(int);
+	//		break;
+	//		case _IOC_NR(VIDIOC_S_PORT_CFG):
+	//		ioc_size64 = sizeof(struct v4l2_vi_port_cfg);
+	//		break;
+	//		case _IOC_NR(VIDIOC_DBG_REG_WRITE):
+	//		case _IOC_NR(VIDIOC_DBG_REG_READ):
+	//		ioc_size64 = sizeof(struct v4l2_vi_dbg_reg);
+	//		break;
+	//		case _IOC_NR(VIDIOC_CFG_INPUT_INTF):
+	//		ioc_size64 = sizeof(struct v4l2_vi_input_interface);
+	//		break;
+	//		case _IOC_NR(VIDIOC_SET_SELECTION):
+	//		ioc_size64 = sizeof(struct v4l2_vi_selection);
+	//		break;
+	//		case _IOC_NR(VIDIOC_QUERY_SLICE_READY):
+	//		ioc_size64 = sizeof(struct v4l2_vi_slice_info);
+	//		break;
+	//		case _IOC_NR(VIDIOC_S_BANDWIDTH):
+	//		ioc_size64 = sizeof(struct v4l2_vi_bandwidth_info);
+	//		break;
+	//		case _IOC_NR(VIDIOC_G_ENTITY_INFO):
+	//		ioc_size64 = sizeof(struct v4l2_vi_entity_info);
+	//		break;
+	//	}
+	//	pr_dbg("%s cmd_nr=%d ioc_size32=%u ioc_size64=%u",__func__,  _IOC_NR(cmd), ioc_size, ioc_size64);
+	//}
+	if (_IOC_DIR(cmd) != _IOC_NONE) {
+		err = alloc_userspace(ioc_size, 0, &new_p64);
+		if (err) {
+			pr_err("%s alloc userspace failed err=%l cmd=%d ioc_size=%u\n", __func__, err, _IOC_NR(cmd), ioc_size);
+			return err;
+		}
+		if ((_IOC_DIR(cmd) & _IOC_WRITE)) {
+			err = copy_in_user(new_p64, p32, ioc_size);
+			if (err) {
+				pr_err("%s copy in user 1 failed err=%l cmd=%d ioc_size=%u\n", __func__, err, _IOC_NR(cmd), ioc_size);
+				return err;
+			}
+		}
+	}
+
+	err = video_ioctl2(file, cmd, (unsigned long)new_p64);
+	if (err) {
+		return err;
+	}
+
+	if ((_IOC_DIR(cmd) & _IOC_READ)) {
+		err = copy_in_user(p32, new_p64, ioc_size);
+		if (err) {
+			pr_err("%s copy in user 2 failed err=%l cmd=%d ioc_size=%u\n", __func__, err, _IOC_NR(cmd), ioc_size);
+			return err;
+		}
+	}
+
+	//switch (cmd) {
+	//	//int r
+	//	case VIDIOC_G_SLICE_MODE:
+	//	case VIDIOC_CPU_Z1:
+	//	//int w
+	//	case VIDIOC_PUT_PIPELINE:
+	//	case VIDIOC_RESET_PIPELINE:
+	//	err = alloc_userspace(sizeof(int), 0, &new_p64);
+	//	if (!err && assign_in_user((int __user *)new_p64,
+	//				   (compat_int_t __user *)p32))
+	//		err = -EFAULT;
+	//	break;
+	//	//unsigned int
+	//	case VIDIOC_G_PIPE_STATUS:
+	//	err = alloc_userspace(sizeof(unsigned int), 0, &new_p64);
+	//	if (!err && assign_in_user((unsigned int __user *)new_p64,
+	//				   (compat_uint_t __user *)p32))
+	//		err = -EFAULT;
+	//	break;
+	//	case VIDIOC_S_PORT_CFG:
+	//	err = alloc_userspace(sizeof(struct v4l2_vi_port_cfg), 0, &new_p64);
+	//	if (!err) {
+	//		err = -EFAULT;
+	//		break;
+	//	}
+	//	break;
+	//	case VIDIOC_DBG_REG_WRITE:
+	//	case VIDIOC_DBG_REG_READ:
+	//	break;
+	//	case VIDIOC_CFG_INPUT_INTF:
+	//	break;
+	//	case VIDIOC_SET_SELECTION:
+	//	break;
+	//	case VIDIOC_QUERY_SLICE_READY:
+	//	break;
+	//	case VIDIOC_S_BANDWIDTH:
+	//	break;
+	//	case VIDIOC_G_ENTITY_INFO:
+	//	break;
+
+	//}
+	//if (err)
+	//	return err;
+	return 0;
+}
+#endif
+
+static struct v4l2_file_operations spm_ccic_file_operations = {
+	.owner = THIS_MODULE,
+	.poll = spm_cvdev_poll,
+	.unlocked_ioctl = video_ioctl2,
+	.open = spm_cvdev_open,
+	.release = spm_cvdev_close,
+#ifdef SPM_CONFIG_COMPAT
+	.compat_ioctl32 = spm_cvdev_compat_ioctl32,
+#endif
+};
+
+static void spm_cvdev_release(struct video_device *vdev)
+{
+	struct spm_ccic_vnode *ac_vnode = container_of(vdev, struct spm_ccic_vnode, vnode);
+
+	pr_dbg("%s(%s %s) enter.", __func__, ac_vnode->name, video_device_node_name(&ac_vnode->vnode));
+	mutex_destroy(&ac_vnode->mlock);
+}
+/*
+static void spm_cvdev_block_release(struct spm_ccic_block *b)
+{
+	struct spm_ccic_vnode *ac_vnode = container_of(b, struct spm_ccic_vnode, ac_block);
+
+	pr_dbg("%s(%s %s) enter.", __func__, ac_vnode->name, video_device_node_name(&ac_vnode->vnode));
+	vb2_queue_release(&ac_vnode->buf_queue);
+	video_unregister_device(&ac_vnode->vnode);
+}
+*/
+
+void spm_cvdev_destroy_vnode(struct spm_ccic_vnode *ac_vnode)
+{
+	video_unregister_device(&ac_vnode->vnode);
+}
+
+struct spm_ccic_vnode* spm_cvdev_create_vnode(const char *name,
+							unsigned int idx,
+							struct v4l2_device *v4l2_dev,
+							struct device *alloc_dev,
+							struct ccic_dev *ccic_dev,
+							void (*dma_tasklet_handler)(unsigned long),
+							unsigned int min_buffers_needed)
+{
+	int ret = 0, i = 0;
+	struct spm_ccic_vnode *ac_vnode = NULL;
+	struct ccic_dma_context *dma_ctx = NULL;
+	struct ccic_dma_work_struct *ccic_dma_work = NULL;
+
+	if (NULL == name || NULL == v4l2_dev || NULL == alloc_dev || NULL == ccic_dev) {
+		pr_err("%s invalid arguments.\n", __func__);
+		return NULL;
+	}
+	ac_vnode = devm_kzalloc(alloc_dev, sizeof(*ac_vnode), GFP_KERNEL);
+	if (NULL == ac_vnode) {
+		pr_err("%s failed to alloc mem for spm_ccic_vnode(%s).\n", __func__, name);
+		return NULL;
+	}
+	dma_ctx = &ac_vnode->dma_ctx;
+	dma_ctx->ac_vnode = ac_vnode;
+	INIT_LIST_HEAD(&dma_ctx->dma_work_idle_list);
+	INIT_LIST_HEAD(&dma_ctx->dma_work_busy_list);
+	spin_lock_init(&dma_ctx->slock);
+	for (i = 0; i < CCIC_DMA_WORK_MAX_CNT; i++) {
+		ccic_dma_work = devm_kzalloc(alloc_dev, sizeof(*ccic_dma_work), GFP_KERNEL);
+		if (!ccic_dma_work) {
+			dev_err(alloc_dev, "%s not enough mem\n", __func__);
+			return NULL;
+		}
+		tasklet_init(&ccic_dma_work->dma_tasklet, dma_tasklet_handler, (unsigned long)ccic_dma_work);
+		INIT_LIST_HEAD(&ccic_dma_work->idle_list_entry);
+		INIT_LIST_HEAD(&ccic_dma_work->busy_list_entry);
+		ccic_dma_work->ac_vnode = ac_vnode;
+		list_add(&ccic_dma_work->idle_list_entry, &dma_ctx->dma_work_idle_list);
+	}
+	ac_vnode->csi2vc = CCIC_CSI2VC_MAIN;
+	ac_vnode->src_sel = CCIC_DMA_SEL_LOCAL_MAIN;
+	ac_vnode->lane_num = 1;
+	ac_vnode->in_streamoff = 0;
+	ac_vnode->in_irq = 0;
+	ac_vnode->in_tasklet = 0;
+	INIT_LIST_HEAD(&ac_vnode->queued_list);
+	INIT_LIST_HEAD(&ac_vnode->busy_list);
+	atomic_set(&ac_vnode->queued_buf_cnt, 0);
+	atomic_set(&ac_vnode->busy_buf_cnt, 0);
+	spin_lock_init(&ac_vnode->slock);
+	mutex_init(&ac_vnode->mlock);
+	init_waitqueue_head(&ac_vnode->waitq_head);
+	ac_vnode->idx = idx;
+	ac_vnode->buf_queue.timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC | V4L2_BUF_FLAG_TSTAMP_SRC_SOE;
+	ac_vnode->buf_queue.buf_struct_size = sizeof(struct spm_ccic_vbuffer);
+	ac_vnode->buf_queue.type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
+	ac_vnode->buf_queue.io_modes = VB2_DMABUF;
+	ac_vnode->buf_queue.ops = &spm_ccic_vb2_ops;
+	ac_vnode->buf_queue.mem_ops = &vb2_dma_contig_memops;
+	ac_vnode->buf_queue.min_buffers_needed = min_buffers_needed;
+	ac_vnode->buf_queue.dev = alloc_dev;
+	ret = vb2_queue_init(&ac_vnode->buf_queue);
+	if (ret) {
+		pr_err("%s vb2_queue_init failed for spm_ccic_vnode(%s).\n", __func__, name);
+		goto queue_init_fail;
+	}
+
+	strlcpy(ac_vnode->vnode.name, name, 32);
+	strlcpy(ac_vnode->name, name, 32);
+	ac_vnode->ccic_dev = ccic_dev;
+	ac_vnode->vnode.queue = &ac_vnode->buf_queue;
+	ac_vnode->vnode.fops = &spm_ccic_file_operations;
+	ac_vnode->vnode.ioctl_ops = &spm_ccic_v4l2_ioctl_ops;
+	ac_vnode->vnode.release = spm_cvdev_release;
+	ac_vnode->vnode.device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
+	ac_vnode->vnode.v4l2_dev = v4l2_dev;
+	ret = __video_register_device(&ac_vnode->vnode, VFL_TYPE_VIDEO, -1, 1, THIS_MODULE);
+	if (ret) {
+		pr_err("%s video dev register failed for spm_ccic_vnode(%s).\n", __func__, name);
+		goto vdev_register_fail;
+	}
+	ccic_dev->vnode = ac_vnode;
+	pr_dbg("create vnode(%s - %s) successfully.", name, video_device_node_name(&ac_vnode->vnode));
+	return ac_vnode;
+vdev_register_fail:
+	vb2_queue_release(&ac_vnode->buf_queue);
+queue_init_fail:
+	devm_kfree(alloc_dev, ac_vnode);
+	return NULL;
+}
+
+int __spm_cvdev_dq_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	*ac_vb = list_first_entry_or_null(&ac_vnode->queued_list, struct spm_ccic_vbuffer, list_entry);
+	if (NULL == *ac_vb)
+		return -1;
+	list_del_init(&(*ac_vb)->list_entry);
+	atomic_dec(&ac_vnode->queued_buf_cnt);
+	return 0;
+}
+
+int __spm_cvdev_q_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb)
+{
+	list_add_tail(&ac_vb->list_entry, &ac_vnode->queued_list);
+	atomic_inc(&ac_vnode->queued_buf_cnt);
+	return 0;
+}
+
+int spm_cvdev_dq_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	ret = __spm_cvdev_dq_idle_vbuffer(ac_vnode, ac_vb);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	return ret;
+}
+
+int spm_cvdev_q_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	ret = __spm_cvdev_q_idle_vbuffer(ac_vnode, ac_vb);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+
+	return ret;
+}
+
+int spm_cvdev_pick_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	unsigned long flags = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	*ac_vb = list_first_entry_or_null(&ac_vnode->queued_list, struct spm_ccic_vbuffer, list_entry);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	if (NULL == *ac_vb) {
+		return -1;
+	}
+	return 0;
+}
+
+int __spm_cvdev_pick_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	*ac_vb = list_first_entry_or_null(&ac_vnode->queued_list, struct spm_ccic_vbuffer, list_entry);
+	if (NULL == *ac_vb) {
+		return -1;
+	}
+	return 0;
+}
+
+int __spm_cvdev_dq_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	*ac_vb = list_first_entry_or_null(&ac_vnode->busy_list, struct spm_ccic_vbuffer, list_entry);
+	if (NULL == *ac_vb)
+		return -1;
+	list_del_init(&(*ac_vb)->list_entry);
+	atomic_dec(&ac_vnode->busy_buf_cnt);
+	return 0;
+}
+
+int __spm_cvdev_q_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb)
+{
+	list_add_tail(&ac_vb->list_entry, &ac_vnode->busy_list);
+	atomic_inc(&ac_vnode->busy_buf_cnt);
+	return 0;
+}
+
+int spm_cvdev_dq_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	ret = __spm_cvdev_dq_busy_vbuffer(ac_vnode, ac_vb);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	return ret;
+}
+
+int spm_cvdev_pick_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	unsigned long flags = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	*ac_vb = list_first_entry_or_null(&ac_vnode->busy_list, struct spm_ccic_vbuffer, list_entry);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	if (NULL == *ac_vb)
+		return -1;
+
+	return 0;
+}
+
+int __spm_cvdev_pick_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb)
+{
+	*ac_vb = list_first_entry_or_null(&ac_vnode->busy_list, struct spm_ccic_vbuffer, list_entry);
+	if (NULL == *ac_vb)
+		return -1;
+
+	return 0;
+}
+
+int spm_cvdev_q_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	ret = __spm_cvdev_q_busy_vbuffer(ac_vnode, ac_vb);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	return ret;
+}
+
+int spm_cvdev_export_ccic_vbuffer(struct spm_ccic_vbuffer *ac_vb, int with_error)
+{
+	struct vb2_buffer *vb = &ac_vb->vb2_v4l2_buf.vb2_buf;
+	if (with_error)
+		vb2_buffer_done(vb, VB2_BUF_STATE_ERROR);
+	else
+		vb2_buffer_done(vb, VB2_BUF_STATE_DONE);
+	return 0;
+}
+
+int __spm_cvdev_busy_list_empty(struct spm_ccic_vnode *ac_vnode)
+{
+	return list_empty(&ac_vnode->busy_list);
+}
+
+int spm_cvdev_busy_list_empty(struct spm_ccic_vnode *ac_vnode)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	ret = __spm_cvdev_busy_list_empty(ac_vnode);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	return ret;
+}
+
+int __spm_cvdev_idle_list_empty(struct spm_ccic_vnode *ac_vnode)
+{
+	return list_empty(&ac_vnode->queued_list);
+}
+
+int spm_cvdev_idle_list_empty(struct spm_ccic_vnode *ac_vnode)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+
+	spin_lock_irqsave(&ac_vnode->slock, flags);
+	ret = __spm_cvdev_idle_list_empty(ac_vnode);
+	spin_unlock_irqrestore(&ac_vnode->slock, flags);
+	return ret;
+}
diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.h b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.h
new file mode 100644
index 000000000000..c061d4b0f256
--- /dev/null
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.h
@@ -0,0 +1,174 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * vdev.h - video divece functions
+ *
+ * Copyright(C) 2019 SPM Micro Limited
+ */
+
+#ifndef _SPM_VDEV_H_
+#define _SPM_VDEV_H_
+#include <media/v4l2-dev.h>
+#include <media/v4l2-device.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-v4l2.h>
+#include <linux/notifier.h>
+#include "ccic_drv.h"
+
+#define CCIC_DMA_WORK_MAX_CNT    (16)
+
+struct spm_ccic_vbuffer;
+struct spm_ccic_vnode;
+
+struct ccic_dma_context
+{
+	struct list_head dma_work_idle_list;
+	struct list_head dma_work_busy_list;
+	spinlock_t slock;
+	struct spm_ccic_vnode *ac_vnode;
+};
+
+struct spm_ccic_vnode {
+	struct video_device vnode;
+	char name[32];
+	struct vb2_queue buf_queue;
+	struct list_head queued_list;
+	struct list_head busy_list;
+	struct ccic_dma_context dma_ctx;
+	atomic_t queued_buf_cnt;
+	atomic_t busy_buf_cnt;
+	atomic_t ref_cnt;
+	spinlock_t slock;
+	struct mutex mlock;
+	struct v4l2_format cur_fmt;
+	struct wait_queue_head waitq_head;
+	int in_streamoff;
+	int in_tasklet;
+	int in_irq;
+	int is_streaming;
+	unsigned int idx;
+	unsigned int total_frm;
+	unsigned int sw_err_frm;
+	unsigned int hw_err_frm;
+	unsigned int ok_frm;
+	unsigned int planes_offset[VB2_MAX_FRAME][VB2_MAX_PLANES];
+	unsigned int v4l2_buf_flags[VB2_MAX_FRAME];
+	struct ccic_dev *ccic_dev;
+	int csi2vc;
+	int src_sel;
+	int lane_num;
+	int ccic_mode;
+	int ch_mode;
+	unsigned int main_ccic_id;
+	unsigned int main_vc;
+	unsigned int sub_vc;
+	unsigned int main_dt;
+	unsigned int sub_dt;
+	uint64_t frame_id;
+	void *usr_data;
+};
+
+struct ccic_dma_work_struct {
+	struct tasklet_struct dma_tasklet;
+	struct list_head idle_list_entry;
+	struct list_head busy_list_entry;
+	unsigned int irq_status;
+	struct spm_ccic_vnode *ac_vnode;
+};
+
+#define AC_BUF_FLAG_SOF_TOUCH			(1 << 0)
+#define AC_BUF_FLAG_DONE_TOUCH			(1 << 1)
+#define AC_BUF_FLAG_HW_ERR				(1 << 2)
+#define AC_BUF_FLAG_SW_ERR				(1 << 3)
+#define AC_BUF_FLAG_TIMESTAMPED			(1 << 4)
+#define AC_BUF_FLAG_CCIC_TOUCH			(1 << 5)
+
+#define AC_BUF_RESERVED_DATA_LEN		(32)
+struct spm_ccic_vbuffer {
+	struct vb2_v4l2_buffer vb2_v4l2_buf;
+	struct list_head list_entry;
+	unsigned int reset_flag;
+	unsigned int flags;
+	struct spm_ccic_vnode *ac_vnode;
+	unsigned char reserved[AC_BUF_RESERVED_DATA_LEN];
+};
+
+#define vb2_buffer_to_spm_ccic_vbuffer(vb)	((struct spm_ccic_vbuffer*)(vb))
+
+#define CAM_ALIGN(a, b)		({ \
+								unsigned int ___tmp1 = (a); \
+								unsigned int ___tmp2 = (b); \
+								unsigned int ___tmp3 = ___tmp1 % ___tmp2; \
+								___tmp1 /= ___tmp2; \
+								if (___tmp3) \
+									___tmp1++; \
+								___tmp1 *= ___tmp2; \
+								___tmp1; \
+							})
+
+#define is_vnode_streaming(vnode)	((vnode)->buf_queue.streaming)
+
+static inline dma_addr_t spm_vb2_buf_paddr(struct vb2_buffer *vb, unsigned int plane_no)
+{
+	unsigned int offset = 0;
+	dma_addr_t paddr = 0;
+	struct spm_ccic_vbuffer *ac_vb = vb2_buffer_to_spm_ccic_vbuffer(vb);
+	struct spm_ccic_vnode *ac_vnode = ac_vb->ac_vnode;
+	dma_addr_t *dma_addr = (dma_addr_t*)vb2_plane_cookie(vb, plane_no);
+
+	BUG_ON(!ac_vnode);
+	offset = ac_vnode->planes_offset[vb->index][plane_no];
+	paddr = *dma_addr + offset;
+	return paddr;
+}
+
+static inline void ccic_update_dma_addr(struct spm_ccic_vnode *ac_vnode,
+								struct spm_ccic_vbuffer *ac_vbuf, unsigned int offset)
+{
+	dma_addr_t p0 = 0;
+	struct ccic_dma *ccic_dma = ac_vnode->ccic_dev->dma;
+	struct vb2_buffer *vb2_buf = &(ac_vbuf->vb2_v4l2_buf.vb2_buf);
+
+	p0 = spm_vb2_buf_paddr(vb2_buf, 0) + offset;
+	ccic_dma->ops->set_addr(ccic_dma, p0, 0, 0);
+}
+
+static inline void* ac_vnode_get_usrdata(struct spm_ccic_vnode *ac_vnode)
+{
+	return ac_vnode->usr_data;
+}
+
+static inline struct spm_ccic_vbuffer* to_ccic_vbuffer(struct vb2_buffer *vb2)
+{
+	struct vb2_v4l2_buffer *vb2_v4l2_buf = to_vb2_v4l2_buffer(vb2);
+	return container_of(vb2_v4l2_buf, struct spm_ccic_vbuffer, vb2_v4l2_buf);
+}
+
+struct spm_ccic_vnode* spm_cvdev_create_vnode(const char *name,
+											unsigned int idx,
+											struct v4l2_device *v4l2_dev,
+											struct device *alloc_dev,
+											struct ccic_dev *ccic_dev,
+											void (*dma_tasklet_handler)(unsigned long),
+											unsigned int min_buffers_needed);
+void spm_cvdev_destroy_vnode(struct spm_ccic_vnode *ac_vnode);
+
+
+int spm_cvdev_busy_list_empty(struct spm_ccic_vnode *ac_vnode);
+int __spm_cvdev_busy_list_empty(struct spm_ccic_vnode *ac_vnode);
+int spm_cvdev_idle_list_empty(struct spm_ccic_vnode *ac_vnode);
+int __spm_cvdev_idle_list_empty(struct spm_ccic_vnode *ac_vnode);
+int spm_cvdev_dq_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int spm_cvdev_pick_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int __spm_cvdev_pick_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int spm_cvdev_q_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb);
+int __spm_cvdev_dq_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int __spm_cvdev_q_idle_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb);
+int spm_cvdev_dq_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int spm_cvdev_pick_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int __spm_cvdev_pick_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int spm_cvdev_q_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb);
+int __spm_cvdev_dq_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer **ac_vb);
+int __spm_cvdev_q_busy_vbuffer(struct spm_ccic_vnode *ac_vnode, struct spm_ccic_vbuffer *ac_vb);
+int spm_cvdev_export_ccic_vbuffer(struct spm_ccic_vbuffer *ac_vb, int with_error);
+void spm_cvdev_fill_v4l2_format(struct v4l2_format *f);
+#endif
diff --git a/drivers/media/platform/spacemit/camera/cam_cpp/cpp_iommu.c b/drivers/media/platform/spacemit/camera/cam_cpp/cpp_iommu.c
index 73566e36d2ec..66e3cb64f64a 100644
--- a/drivers/media/platform/spacemit/camera/cam_cpp/cpp_iommu.c
+++ b/drivers/media/platform/spacemit/camera/cam_cpp/cpp_iommu.c
@@ -830,4 +830,5 @@ void cpp_iommu_unregister(struct cpp_device *cpp_dev)
 	pr_debug("%s X\n", __func__);
 }
 
+MODULE_IMPORT_NS(DMA_BUF);
 EXPORT_SYMBOL(cpp_iommu_unregister);
diff --git a/drivers/media/platform/spacemit/camera/cam_isp/k1x_isp_drv.c b/drivers/media/platform/spacemit/camera/cam_isp/k1x_isp_drv.c
index a4b199b42942..f8e3374b798d 100644
--- a/drivers/media/platform/spacemit/camera/cam_isp/k1x_isp_drv.c
+++ b/drivers/media/platform/spacemit/camera/cam_isp/k1x_isp_drv.c
@@ -789,6 +789,7 @@ struct platform_driver k1xisp_dev_driver = {
 
 module_platform_driver(k1xisp_dev_driver);
 
+MODULE_IMPORT_NS(DMA_BUF);
 MODULE_AUTHOR("SPACEMIT Inc.");
 MODULE_DESCRIPTION("SPACEMIT K1X ISP device driver");
 MODULE_LICENSE("GPL");
diff --git a/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c b/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c
index 89ff5c3c8a1d..7ee841a1c1d1 100644
--- a/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c
+++ b/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c
@@ -43,6 +43,8 @@ unsigned long phys_cpu2cam(unsigned long phys_addr)
 	return phys_addr;
 }
 
+EXPORT_SYMBOL(phys_cpu2cam);
+
 static void plat_cam_sd_notify(struct v4l2_subdev *sd,
 			       unsigned int notification, void *arg)
 {
diff --git a/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c b/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c
index fadc0631de13..a1bd81c30ee5 100644
--- a/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c
+++ b/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c
@@ -1185,7 +1185,7 @@ static int csi_subdev_video_s_stream(struct v4l2_subdev *sd, int enable)
 			cam_err("%s(%s) config mux(enable) failed ret=%d", __func__, sc_subdev->name, ret);
 			return ret;
 		}
-		ret = csi_ctrl->ops->config_csi2_mbus(csi_ctrl, CCIC_CSI2VC_NM, 0, 0, mipi_lane_num);
+		ret = csi_ctrl->ops->config_csi2_mbus(csi_ctrl, CCIC_CSI2VC_NM, 0, 0, 0, 0, mipi_lane_num);
 		if (ret) {
 			cam_err("%s(%s) config mbus(enable) lane=%d failed ret=%d", __func__, sc_subdev->name, 4, ret);
 			return ret;
@@ -1193,7 +1193,7 @@ static int csi_subdev_video_s_stream(struct v4l2_subdev *sd, int enable)
 		csi_ctrl->ops->irq_mask(csi_ctrl, 1);
 	} else {
 		csi_ctrl->ops->irq_mask(csi_ctrl, 0);
-		csi_ctrl->ops->config_csi2_mbus(csi_ctrl, CCIC_CSI2VC_NM, 0, 0, 0);
+		csi_ctrl->ops->config_csi2_mbus(csi_ctrl, CCIC_CSI2VC_NM, 0, 0, 0, 0, 0);
 		csi_ctrl->ops->config_csi2idi_mux(csi_ctrl, csi2vc, csi2idi, 0);
 		csi_subdev_core_s_power(sd, 0);
 	}
diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_mmu.c b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_mmu.c
index a6d174a03b4f..28c08fe617f9 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_mmu.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_mmu.c
@@ -44,6 +44,8 @@
 #include "mvx_mmu.h"
 #include "mvx_log_group.h"
 
+MODULE_IMPORT_NS(DMA_BUF);
+
 /****************************************************************************
  * Defines
  ****************************************************************************/
diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_fops.c b/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_fops.c
index fd07c7c65a27..b1b457dbcfd3 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_fops.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_fops.c
@@ -114,10 +114,10 @@ int mvx_v4l2_release(struct file *file)
 
 	MVX_SESSION_INFO(&vsession->session, "v4l2: Release.");
 
-	mutex_lock(&vsession->mutex);
-
 	mvx_v4l2_ctrls_done(vsession->fh.ctrl_handler);
 
+	mutex_lock(&vsession->mutex);
+
 	for (i = 0; i < MVX_DIR_MAX; i++)
 		if (vsession->port[i].q_set != false) {
 			vb2_queue_release(&vsession->port[i].vb2_queue);
diff --git a/drivers/mmc/host/sdhci-of-k1x.c b/drivers/mmc/host/sdhci-of-k1x.c
index 4fb3092ac5db..1c91e1a73431 100644
--- a/drivers/mmc/host/sdhci-of-k1x.c
+++ b/drivers/mmc/host/sdhci-of-k1x.c
@@ -665,14 +665,19 @@ static void spacemit_sdhci_set_clock(struct sdhci_host *host, unsigned int clock
 		if (clock >= 200000000) {
 			spacemit->pin = pinctrl_lookup_state(spacemit->pinctrl, "fast");
 			if (IS_ERR(spacemit->pin))
-				pr_warn("could not get sdhci pinctrl state.\n");
+				pr_warn("could not get sdhci fast pinctrl state.\n");
+			else
+				pinctrl_select_state(spacemit->pinctrl, spacemit->pin);
+		} else if (clock == 0) {
+			spacemit->pin = pinctrl_lookup_state(spacemit->pinctrl, "debug");
+			if (IS_ERR(spacemit->pin))
+				pr_debug("could not get sdhci debug pinctrl state. ignore it\n");
 			else
 				pinctrl_select_state(spacemit->pinctrl, spacemit->pin);
-
 		} else {
 			spacemit->pin = pinctrl_lookup_state(spacemit->pinctrl, "default");
 			if (IS_ERR(spacemit->pin))
-				pr_warn("could not get sdhci pinctrl state.\n");
+				pr_warn("could not get sdhci default pinctrl state.\n");
 			else
 				pinctrl_select_state(spacemit->pinctrl, spacemit->pin);
 		}
@@ -1182,7 +1187,7 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 	struct mmc_ios ios = mmc->ios;
 	struct k1x_sdhci_platdata *pdata = mmc->parent->platform_data;
 	struct rx_tuning *rxtuning = &pdata->rxtuning;
-	struct cpufreq_policy *policy;
+	struct cpufreq_policy *policy = NULL;
 	unsigned int clk_rate;
 
 	/*
@@ -1234,7 +1239,7 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 
 	/* specify cpu freq during tuning rx windows if current cpufreq exceed 1.6G */
 	if (pdata->rx_tuning_freq) {
-		clk_rate= cpufreq_generic_get(0);
+		clk_rate = cpufreq_generic_get(0);
 		if (clk_rate && (clk_rate != pdata->rx_tuning_freq)) {
 			policy = cpufreq_cpu_get(0);
 			if (policy) {
@@ -1279,11 +1284,10 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 		mmc_hostname(mmc), rxtuning->select_delay[0]);
 
 restore_freq:
-	if (pdata->rx_tuning_freq) {
+	if (pdata->rx_tuning_freq && policy) {
 		if (clk_rate)
 			cpufreq_driver_target(policy, clk_rate, 0);
-		if (policy)
-			cpufreq_cpu_put(policy);
+		cpufreq_cpu_put(policy);
 	}
 	return ret;
 }
diff --git a/drivers/net/wireless/aic8800/aic8800_fdrv/rwnx_main.c b/drivers/net/wireless/aic8800/aic8800_fdrv/rwnx_main.c
index 8ea066c36974..06f863fd3fa9 100644
--- a/drivers/net/wireless/aic8800/aic8800_fdrv/rwnx_main.c
+++ b/drivers/net/wireless/aic8800/aic8800_fdrv/rwnx_main.c
@@ -6432,11 +6432,11 @@ int rwnx_cfg80211_init(struct rwnx_plat *rwnx_plat, void **platform_data)
 	}
 #endif
 	rtnl_lock();
-
+	wiphy_lock(wiphy);
 	/* Add an initial station interface */
 	vif = rwnx_interface_add(rwnx_hw, "wlan%d", NET_NAME_UNKNOWN,
 								NL80211_IFTYPE_STATION, NULL);
-
+	wiphy_unlock(wiphy);
 	rtnl_unlock();
 
 	if (!vif) {
diff --git a/drivers/net/wireless/realtek/rtl8852be/os_dep/linux/rtw_proc.c b/drivers/net/wireless/realtek/rtl8852be/os_dep/linux/rtw_proc.c
index 9b679c8e9b59..5639ad6a6893 100644
--- a/drivers/net/wireless/realtek/rtl8852be/os_dep/linux/rtw_proc.c
+++ b/drivers/net/wireless/realtek/rtl8852be/os_dep/linux/rtw_proc.c
@@ -5642,7 +5642,7 @@ const struct rtw_proc_hdl adapter_proc_hdls[] = {
 #endif
 #endif
 
-	RTW_PROC_HDL_SSEQ("self_diag_info", proc_get_self_diag_info, proc_set_self_diag_info),
+	//RTW_PROC_HDL_SSEQ("self_diag_info", proc_get_self_diag_info, proc_set_self_diag_info),
 #ifdef CONFIG_USB_HCI
 	RTW_PROC_HDL_SSEQ("usb_mode", proc_get_usb_mode, proc_set_usb_mode),
 #endif
diff --git a/drivers/pinctrl/pinctrl-single.c b/drivers/pinctrl/pinctrl-single.c
index d8dd362434e4..6f0b8ba57e89 100644
--- a/drivers/pinctrl/pinctrl-single.c
+++ b/drivers/pinctrl/pinctrl-single.c
@@ -1488,6 +1488,57 @@ static int pcs_irq_set_wake(struct irq_data *d, unsigned int state)
 	return 0;
 }
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+static inline void _pcs_irq_set_type(struct pcs_soc_data *pcs_soc,
+			       int irq, int flow_type)
+{
+	struct pcs_device *pcs;
+	struct list_head *pos;
+	unsigned mask;
+
+	pcs = container_of(pcs_soc, struct pcs_device, socdata);
+	list_for_each(pos, &pcs->irqs) {
+		struct pcs_interrupt *pcswi;
+		unsigned soc_mask;
+
+		pcswi = list_entry(pos, struct pcs_interrupt, node);
+		if (irq != pcswi->irq)
+			continue;
+
+		soc_mask = pcs_soc->irq_enable_mask;
+		raw_spin_lock(&pcs->lock);
+		mask = pcs->read(pcswi->reg);
+
+		if (flow_type == IRQ_TYPE_EDGE_RISING) {
+			mask |= (1 << EDGE_RISE_EN);
+		} else {
+			mask &= ~(1 << EDGE_RISE_EN);
+		}
+
+		if (flow_type == IRQ_TYPE_EDGE_FALLING) {
+			mask |= (1 << EDGE_FALL_EN);
+		} else {
+			mask &= ~(1 << EDGE_FALL_EN);
+		}
+
+		pcs->write(mask, pcswi->reg);
+
+		/* flush posted write */
+		mask = pcs->read(pcswi->reg);
+		raw_spin_unlock(&pcs->lock);
+	}
+}
+
+static int pcs_irq_set_type(struct irq_data *d, unsigned int flow_type)
+{
+	struct pcs_soc_data *pcs_soc = irq_data_get_irq_chip_data(d);
+
+	_pcs_irq_set_type(pcs_soc, d->irq, flow_type);
+
+	return 0;
+}
+#endif
+
 /**
  * pcs_irq_handle() - common interrupt handler
  * @pcs_soc: SoC specific settings
@@ -1630,6 +1681,10 @@ static int pcs_irq_init_chained_handler(struct pcs_device *pcs,
 	pcs->chip.irq_mask = pcs_irq_mask;
 	pcs->chip.irq_unmask = pcs_irq_unmask;
 	pcs->chip.irq_set_wake = pcs_irq_set_wake;
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	pcs->chip.flags = IRQCHIP_SKIP_SET_WAKE;
+	pcs->chip.irq_set_type = pcs_irq_set_type;
+#endif
 
 	if (PCS_QUIRK_HAS_SHARED_IRQ) {
 		int res;
@@ -2030,7 +2085,7 @@ static int pcs_probe(struct platform_device *pdev)
 	dev_info(pcs->dev, "%i pins, size %u\n", pcs->desc.npins, pcs->size);
 
 #ifdef CONFIG_SOC_SPACEMIT_K1X
-	dev_pm_set_wake_irq(&pdev->dev, pcs->socdata.irq );
+	dev_pm_set_wake_irq(&pdev->dev, pcs->socdata.irq);
 	device_init_wakeup(&pdev->dev, true);
 #endif
 
diff --git a/drivers/power/supply/cw2015_fuel_gauge.c b/drivers/power/supply/cw2015_fuel_gauge.c
index 19d032c4f6b7..82203d02aa47 100644
--- a/drivers/power/supply/cw2015_fuel_gauge.c
+++ b/drivers/power/supply/cw2015_fuel_gauge.c
@@ -219,7 +219,7 @@ static int cw_init(struct cw_battery *cw_bat)
 			if (ret < 0)
 			return ret;
 
-			printk(KERN_INFO "%X\n", reg_val);
+			cw_printk(KERN_INFO "%X\n", reg_val);
 			if (config_info[i] != reg_val)
 				break;
 		}
diff --git a/drivers/reset/reset-spacemit-k1x.c b/drivers/reset/reset-spacemit-k1x.c
index 34f12af0d5af..73470c61b1bb 100644
--- a/drivers/reset/reset-spacemit-k1x.c
+++ b/drivers/reset/reset-spacemit-k1x.c
@@ -139,7 +139,16 @@
 /* end of RCPU register offset */
 
 /* RCPU2 register offset */
-#define RCPU2_PWM_CLK_RST		0x08
+#define RCPU2_PWM0_CLK_RST		0x00
+#define RCPU2_PWM1_CLK_RST		0x04
+#define RCPU2_PWM2_CLK_RST		0x08
+#define RCPU2_PWM3_CLK_RST		0x0c
+#define RCPU2_PWM4_CLK_RST		0x10
+#define RCPU2_PWM5_CLK_RST		0x14
+#define RCPU2_PWM6_CLK_RST		0x18
+#define RCPU2_PWM7_CLK_RST		0x1c
+#define RCPU2_PWM8_CLK_RST		0x20
+#define RCPU2_PWM9_CLK_RST		0x24
 /* end of RCPU2 register offset */
 
 enum spacemit_reset_base_type{
@@ -297,14 +306,23 @@ static const struct spacemit_reset_signal
 	//RCPU
 	[RESET_RCPU_HDMIAUDIO] 	= { RCPU_HDMI_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
 	[RESET_RCPU_CAN] 	= { RCPU_CAN_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
-	//RCPU2
-	[RESET_RCPU2_PWM] 	= { RCPU2_PWM_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
 	//RCPU
 	[RESET_RCPU_I2C0] 	= { RCPU_I2C0_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
 	[RESET_RCPU_SSP0] 	= { RCPU_SSP0_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
 	[RESET_RCPU_IR] 	= { RCPU_IR_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
 	[RESET_RCPU_UART0] 	= { RCPU_UART0_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
 	[RESET_RCPU_UART1] 	= { RCPU_UART1_CLK_RST, BIT(0), BIT(0), 0, RST_BASE_TYPE_RCPU },
+	//RCPU2
+	[RESET_RCPU2_PWM0] 	= { RCPU2_PWM0_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM1] 	= { RCPU2_PWM1_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM2] 	= { RCPU2_PWM2_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM3] 	= { RCPU2_PWM3_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM4] 	= { RCPU2_PWM4_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM5] 	= { RCPU2_PWM5_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM6] 	= { RCPU2_PWM6_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM7] 	= { RCPU2_PWM7_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM8] 	= { RCPU2_PWM8_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
+	[RESET_RCPU2_PWM9] 	= { RCPU2_PWM9_CLK_RST, BIT(2)|BIT(0), BIT(0), BIT(2), RST_BASE_TYPE_RCPU2 },
 };
 
 static struct spacemit_reset *to_spacemit_reset(
diff --git a/drivers/soc/spacemit/Kconfig b/drivers/soc/spacemit/Kconfig
index c1c3536488d8..8f317aeb928a 100644
--- a/drivers/soc/spacemit/Kconfig
+++ b/drivers/soc/spacemit/Kconfig
@@ -43,6 +43,12 @@ config SPACEMI_SOCINFO
 	  Spacemit SoCs information driver, which get information from efuse and
 	  report to userspace.
 
+config SPACEMIT_DDRBW
+	tristate "ddr_bw driver for spacemit k1x soc"
+	depends on SOC_SPACEMIT_K1X
+	help
+	  Spacemit k1x soc ddrbw driver.
+
 source "drivers/soc/spacemit/jpu/Kconfig"
 source "drivers/soc/spacemit/v2d/Kconfig"
 source "drivers/soc/spacemit/spacemit-rf/Kconfig"
diff --git a/drivers/soc/spacemit/Makefile b/drivers/soc/spacemit/Makefile
index 523fe88365b9..cac9938be4c7 100644
--- a/drivers/soc/spacemit/Makefile
+++ b/drivers/soc/spacemit/Makefile
@@ -7,3 +7,4 @@ obj-$(CONFIG_PM) += pm/
 obj-$(CONFIG_SPACEMIT_PM_DOMAINS) += pm_domain/
 obj-$(CONFIG_SPACEMIT_RFKILL)   += spacemit-rf/
 obj-$(CONFIG_SPACEMIT_V2D)    += v2d/
+obj-$(CONFIG_SPACEMIT_DDRBW) += ddr-bw/
diff --git a/drivers/soc/spacemit/ddr-bw/Makefile b/drivers/soc/spacemit/ddr-bw/Makefile
new file mode 100644
index 000000000000..ef9d58fc3cf0
--- /dev/null
+++ b/drivers/soc/spacemit/ddr-bw/Makefile
@@ -0,0 +1 @@
+obj-y += spacemit_ddrbw.o
diff --git a/drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.c b/drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.c
new file mode 100644
index 000000000000..23316490d127
--- /dev/null
+++ b/drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.c
@@ -0,0 +1,1214 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2024 Spacemit Co., Ltd.
+ */
+#include "linux/export.h"
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/delay.h>
+#include <linux/devfreq.h>
+#include <linux/devfreq_cooling.h>
+#include <linux/io.h>
+#include <linux/jiffies.h>
+#include <linux/kthread.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
+#include <linux/platform_device.h>
+#include <linux/pm_qos.h>
+#include <linux/regulator/machine.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/string.h>
+#include <linux/uaccess.h>
+#include <linux/cdev.h>
+#include "spacemit_ddrbw.h"
+
+struct ddr_dev {
+	struct cdev chrdevcdev;
+	int major;
+	dev_t dev;
+	struct class *dev_class;
+};
+static struct ddr_dev ddrdev;
+
+static u32 ddr_bw_info_index;
+static struct ddr_perf_data *ddr_perf_data;
+static struct spacemit_ddr_bw_info ddr_bw_info[DDR_FC_BW_SIZE];
+
+
+static int get_ddr_burst(void __iomem *base)
+{
+	static bool flag = false;
+	static int cmds_len = DDR_LEN_64;
+	u32 burst_len, data_width;
+	u32 val, tmp;
+
+	if (flag)
+		return cmds_len;
+
+	val = readl(base + MC_CONTROL_0);
+	tmp = (val >> MC_DATA_WIDTH) & 0x7;
+	if (tmp == 0x2)
+		data_width = DDR_LEN_16;
+	else if (tmp == 0x3)
+		data_width = DDR_LEN_32;
+	else if (tmp == 0x4)
+		data_width = DDR_LEN_64;
+	else {
+		pr_err("Wrong device data width\n");
+		return cmds_len;
+	}
+
+	tmp = (val >> MC_BURST_LEN) & 0x7;
+	if (tmp == 0x2)
+		burst_len = 4;
+	else if (tmp == 0x3)
+		burst_len = 8;
+	else if (tmp == 0x4)
+		burst_len = 16;
+	else {
+		pr_err("Wrong device burst length\n");
+		return cmds_len;
+	}
+	cmds_len = (burst_len * data_width) / 8;
+	flag = true;
+	return cmds_len;
+}
+
+static void ddraxi_mon_enable(struct ddraxi_mon *monitor, int enable)
+{
+	u32 mon_ctrl;
+
+	if (monitor->master_is_lcd) {
+		mon_ctrl = readl(ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+		if (enable)
+			mon_ctrl |= (MON_CTRL_EN | MON_CTRL_LATCH) ;
+		else
+			mon_ctrl &= ~(MON_CTRL_EN | MON_CTRL_LATCH);
+
+		writel(mon_ctrl, ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+		return;
+	}
+	if (monitor->id == 0) {
+		mon_ctrl = readl(ddraxi_mon_data->reg_base	\
+			+ mon_ctrl_reg(monitor->port_id));
+		if (enable)
+			mon_ctrl |= (MON_CTRL_EN | MON_CTRL_LATCH) ;
+		else
+			mon_ctrl &= ~(MON_CTRL_EN | MON_CTRL_LATCH);
+
+		writel(mon_ctrl, ddraxi_mon_data->reg_base	\
+			+ mon_ctrl_reg(monitor->port_id));
+	}
+	else {
+		mon_ctrl = readl(ddraxi_mon_data->reg_base	\
+			+ mon_id_reg(monitor->port_id));
+		if (enable)
+			mon_ctrl |= (1 << ((monitor->id - 1)  + IDMON_CTRL_EN));
+		else
+			mon_ctrl &= ~(1 << ((monitor->id - 1)  + IDMON_CTRL_EN));
+
+
+		if (enable)
+			mon_ctrl &= ~(1 << ((monitor->id - 1)  + IDMON_CLK_EN));
+		else
+			mon_ctrl |= (1 << ((monitor->id - 1)  + IDMON_CLK_EN));
+
+		writel(mon_ctrl, ddraxi_mon_data->reg_base	\
+			 + mon_id_reg(monitor->port_id));
+
+		mon_ctrl = readl(ddraxi_mon_data->reg_base	\
+			+ mon_id_sel(monitor->id, monitor->port_id));
+		mon_ctrl = (0x3 << 16) | monitor->mid;
+		writel(mon_ctrl, ddraxi_mon_data->reg_base 	\
+			+ mon_id_sel(monitor->id, monitor->port_id));
+	}
+
+}
+
+static void ddraxi_mon_latch(struct ddraxi_mon *monitor, int latch)
+{
+	u32 mon_ctrl;
+
+	if (monitor->master_is_lcd)
+		mon_ctrl = readl(ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+	else
+		mon_ctrl = readl(ddraxi_mon_data->reg_base	\
+			+ mon_ctrl_reg(monitor->port_id));
+
+	if (latch)
+		mon_ctrl |= MON_CTRL_READ;
+	else
+		mon_ctrl &= ~MON_CTRL_READ;
+	if (monitor->master_is_lcd)
+		writel(mon_ctrl, ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+	else
+		writel(mon_ctrl, ddraxi_mon_data->reg_base	\
+			+ mon_ctrl_reg(monitor->port_id));
+}
+
+static void ddraxi_mon_get_id_mon(struct ddraxi_mon *monitor)
+{
+	u32 mon_ctrl;
+
+	mon_ctrl = readl(ddraxi_mon_data->reg_base + mon_id_reg(monitor->port_id));
+	mon_ctrl &= ~SPACEMIT_MON_ID_SEL;
+	mon_ctrl |= monitor->id;
+	writel(mon_ctrl, ddraxi_mon_data->reg_base + mon_id_reg(monitor->port_id));
+}
+
+static void ddraxi_mon_get_evt(struct ddraxi_mon *monitor)
+{
+	u32 mon_ctrl, i;
+	u32 data;
+
+	if (monitor->master_is_lcd)
+		mon_ctrl = readl(ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+	else
+		mon_ctrl = readl(ddraxi_mon_data->reg_base	\
+			+ mon_ctrl_reg(monitor->port_id));
+
+	for (i = 0; i < SPACEMIT_MON_EVT_NUM; i++) {
+		mon_ctrl &= ~SPACEMIT_MON_EVT_MASK;
+		mon_ctrl |= mon_evt_id[i];
+		if (monitor->master_is_lcd) {
+			writel(mon_ctrl, ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+			data = readl(ddraxi_mon_data->ciu_base	\
+				+ LCD_MON_BASE + SPACEMIT_MON_DATA);
+			monitor->evt_num[i] = data;
+		}
+		else {
+			writel(mon_ctrl, ddraxi_mon_data->reg_base	\
+				+ mon_ctrl_reg(monitor->port_id));
+			/* read monitor data register */
+			monitor->evt_num[i] = readl(ddraxi_mon_data->reg_base	\
+				+ mon_data_reg(monitor->port_id));
+		}
+	}
+}
+
+static void ddraxi_mon_get_lat(struct ddraxi_mon *monitor)
+{
+	u32 mon_ctrl, i;
+	u32 data;
+
+	if (monitor->master_is_lcd)
+		mon_ctrl = readl(ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+	else
+		mon_ctrl = readl(ddraxi_mon_data->reg_base	\
+			+ mon_ctrl_reg(monitor->port_id));
+
+	for (i = 0; i < SPACEMIT_MON_LAT_NUM; i++) {
+		mon_ctrl &= ~SPACEMIT_MON_EVT_MASK;
+		mon_ctrl |= mon_lat_id[i];
+		if (monitor->master_is_lcd) {
+			writel(mon_ctrl, ddraxi_mon_data->ciu_base + LCD_MON_BASE);
+			data = readl(ddraxi_mon_data->ciu_base	\
+				+ LCD_MON_BASE + SPACEMIT_MON_DATA);
+			monitor->lat_num[i] = data;
+		}
+		else {
+			writel(mon_ctrl, ddraxi_mon_data->reg_base	\
+				+ mon_ctrl_reg(monitor->port_id));
+			/* read monitor data register */
+			monitor->lat_num[i] = readl(ddraxi_mon_data->reg_base	\
+				+ mon_data_reg(monitor->port_id));
+		}
+
+
+	}
+}
+
+struct ddraxi_mon *ddraxi_mon_get_mon(void)
+{
+	int i;
+
+	for (i = 0; i < SPACEMIT_ID_MON_CTRL_NUM + SPACEMIT_MON_CTRL_NUM + 1; i++)
+		if (ddraxi_mon_data->mon[i].free)
+			return &ddraxi_mon_data->mon[i];
+	return NULL;
+}
+
+int ddraxi_mon_enable_mon(struct ddraxi_mon *monitor)
+{
+	if (is_mon_valid(monitor->id) < 0 || !ddraxi_mon_data)
+		return -EINVAL;
+
+	monitor->init = true;
+
+	spin_lock(&monitor->lock);
+	monitor->free = false;
+
+	/* enable the monitor */
+	ddraxi_mon_enable(monitor, 1);
+
+	spin_unlock(&monitor->lock);
+
+	return 0;
+}
+
+int ddraxi_mon_update_mon(struct ddraxi_mon *monitor)
+{
+	if (!ddraxi_mon_data || is_mon_valid(monitor->id) < 0 || !monitor->init)
+		return -EINVAL;
+
+	/* disable monitor latch */
+	ddraxi_mon_latch(monitor, 0);
+
+	/* latch and update monitor */
+	ddraxi_mon_latch(monitor, 1);
+
+	if (monitor->master_is_lcd == false) {
+		ddraxi_mon_get_id_mon(monitor);
+	}
+	ddraxi_mon_get_evt(monitor);
+
+	if (monitor->lat_en)
+		ddraxi_mon_get_lat(monitor);
+
+	return 0;
+}
+
+int ddraxi_mon_disable_mon(struct ddraxi_mon *monitor)
+{
+	if (is_mon_valid(monitor->id) < 0 || !ddraxi_mon_data)
+		return -EINVAL;
+
+	/* read monitor data */
+	ddraxi_mon_update_mon(monitor);
+
+	spin_lock(&monitor->lock);
+	/* disable the monitor */
+	ddraxi_mon_enable(monitor, 0);
+
+	monitor->free = true;
+	spin_unlock(&monitor->lock);
+
+	return 0;
+}
+
+static void ddraxi_mon_init(struct spacemit_ddraxi_mon_data *data)
+{
+	int i;
+
+	for (i = 0; i < SPACEMIT_MON_CTRL_NUM; i++) {
+		data->mon[i].id = 0;
+		data->mon[i].port_id = i;
+		data->mon[i].lat_th = 0;
+		data->mon[i].init = false;
+		data->mon[i].enable = false;
+		data->mon[i].lat_en = false;
+		data->mon[i].free = true;
+		data->mon[i].master_is_lcd = false;
+		spin_lock_init(&data->mon[i].lock);
+
+		writel(0, data->reg_base + mon_ctrl_reg(data->mon[i].port_id));
+	}
+
+	for (i = SPACEMIT_MON_CTRL_NUM; i < SPACEMIT_MON_CTRL_NUM	\
+			+ SPACEMIT_ID_MON_CTRL_NUM + 1; i++) {
+		data->mon[i].id = ((i - 1) % 3) + 1;
+		data->mon[i].lat_th = 0;
+		data->mon[i].init = false;
+		data->mon[i].enable = false;
+		data->mon[i].lat_en = false;
+		data->mon[i].free = true;
+		/* last monitor for lcd */
+		if (i == SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM)
+			data->mon[i].master_is_lcd = true;
+		spin_lock_init(&data->mon[i].lock);
+	}
+
+}
+
+static int ddr_mon_enable(struct ddr_dfreq_data *data, int en)
+{
+	int ret, i;
+
+	/* enable port monitor */
+	if (((en == DDR_PORT_DEBUG_LAT) || (en == DDR_PORT_DEBUG_BW))	\
+			&& !data->ddr_mon_debug) {
+
+		for (i = 0; i < SPACEMIT_MON_CTRL_NUM; i++) {
+			data->axi_mon[i] = ddraxi_mon_get_mon();
+			if (!data->axi_mon[i]) {
+				pr_err("no free ddr axi mon\n");
+				return -EINVAL;
+			}
+
+			/*
+			 * each port get 3 id  monitors
+			 * id 0 is configured to noraml port id
+			 * without master id mask
+			 */
+			data->axi_mon[i]->id = 0;
+			data->axi_mon[i]->port_id = i;
+			data->axi_mon[i]->mid = 0;
+			if(en == DDR_PORT_DEBUG_LAT)
+				data->axi_mon[i]->lat_en = true;
+			ret = ddraxi_mon_enable_mon(data->axi_mon[i]);
+			if (ret < 0)
+				return ret;
+		}
+		for (i = SPACEMIT_MON_CTRL_NUM; i < SPACEMIT_ID_MASTER_NUM	\
+				+ SPACEMIT_MON_CTRL_NUM; i++) {
+			if((i == 10) || (i == 14) || (i == 18)) {
+				data->axi_mon[i] = kmalloc(sizeof(struct ddraxi_mon), GFP_KERNEL);
+				data->axi_mon[i]->id =  \
+					((i - (SPACEMIT_MON_CTRL_NUM + 3)) % 4) + 1;
+				data->axi_mon[i]->port_id = ((i - 3) / 4);
+				data->axi_mon[i]->mid = master_id[i - SPACEMIT_MON_CTRL_NUM];
+				continue;
+			} else {
+				data->axi_mon[i] = ddraxi_mon_get_mon();
+				if (!data->axi_mon[i]) {
+					pr_err("no free ddr id axi mon\n");
+					return -EINVAL;
+				}
+				if(i >= SPACEMIT_MON_CTRL_NUM + 3) {
+					data->axi_mon[i]->id =  \
+						((i - (SPACEMIT_MON_CTRL_NUM + 3)) % 4) + 1;
+					data->axi_mon[i]->port_id = ((i - 3) / 4);
+				} else {
+					data->axi_mon[i]->id = ((i - 1) % 3) + 1;
+					data->axi_mon[i]->port_id = ((i - 1) / 3) - 1;
+				}
+				data->axi_mon[i]->mid = master_id[i - SPACEMIT_MON_CTRL_NUM];
+				if(en == DDR_PORT_DEBUG_LAT)
+					data->axi_mon[i]->lat_en = true;
+				ret = ddraxi_mon_enable_mon(data->axi_mon[i]);
+				if (ret < 0)
+					return ret;
+			}
+		}
+		i = SPACEMIT_ID_MASTER_NUM + SPACEMIT_MON_CTRL_NUM;
+		data->axi_mon[i] = ddraxi_mon_get_mon();
+		if (!data->axi_mon[i]) {
+			pr_err("no free ddr id axi mon\n");
+			return -EINVAL;
+		}
+		data->axi_mon[i]->id = 0;
+		data->axi_mon[i]->port_id = 0;
+		data->axi_mon[i]->mid = 0;
+		data->axi_mon[i]->master_is_lcd = true;
+		if(en == DDR_PORT_DEBUG_LAT)
+				data->axi_mon[i]->lat_en = true;
+		ret = ddraxi_mon_enable_mon(data->axi_mon[i]);
+		if (ret < 0)
+			return ret;
+
+		data->ddr_mon_debug = en;
+	} else if (!en && data->ddr_mon_debug) {
+		data->ddr_mon_debug = en;
+
+		for (i = 0; i < SPACEMIT_ID_MASTER_NUM	\
+				+ SPACEMIT_MON_CTRL_NUM +1; i++) {
+			if(data->axi_mon[i]->mid == 3)
+				continue;
+			ddraxi_mon_disable_mon(data->axi_mon[i]);
+		}
+	}
+
+	return 0;
+}
+
+/* Get DDR port bandwidth status */
+static int ddr_get_port_bw_a0(struct ddr_dfreq_data *data,
+	u32 time_diff, struct spacemit_ddrbw_status *stat)
+{
+	u64 bw_num, req_num;
+	s64 rd_bytes, wr_bytes, rd_reqs, wr_reqs;
+	u64 max_rd, max_wr;
+	s64 avr_rd, avr_wr;
+	struct ddraxi_mon *t_mon;
+	u32 bw_fixed, req_fixed;
+	int i, burst_len;
+	u64 tmp;
+
+	burst_len = get_ddr_burst(data->base);
+
+	ddr_bw_info[ddr_bw_info_index].curr_freq = stat->current_frequency;
+	ddr_bw_info[ddr_bw_info_index].total_bw = data->throughput;
+
+	for (i = 0; i < SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1; i++) {
+		if(data->axi_mon[i]->mid != 3)
+			ddraxi_mon_update_mon(data->axi_mon[i]);
+	}
+	/* bandwidth len is 256 */
+	bw_fixed = 16;
+	if (unlikely(!bw_fixed))
+		bw_fixed = 1;
+	/* burst len is 64 */
+	req_fixed = burst_len;
+	if (unlikely(!req_fixed))
+		req_fixed = 1;
+
+	for (i = 0; i < SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM; i++) {
+		/* calculate port bandwidth by total rd/wr bytes */
+		if(data->axi_mon[i]->mid != 3) {
+			t_mon = data->axi_mon[i];
+			if (t_mon->evt_num[0] >= data->total_rd_bytes[i])
+				rd_bytes = t_mon->evt_num[0] - data->total_rd_bytes[i];
+			else
+				rd_bytes = (u32)(-1) - data->total_rd_bytes[i] + t_mon->evt_num[0];
+
+			if (t_mon->evt_num[1] >= data->total_wr_bytes[i])
+				wr_bytes = (t_mon->evt_num[1] - data->total_wr_bytes[i]);
+			else
+				wr_bytes = (u32)(-1) - data->total_wr_bytes[i] + t_mon->evt_num[1];
+			/* calculate port bandwidth by total rd/wr requests */
+			if (t_mon->evt_num[2] >= data->rd_reqs[i])
+				rd_reqs = (t_mon->evt_num[2] - data->rd_reqs[i]);
+			else
+				rd_reqs = (u32)(-1) - data->rd_reqs[i] + t_mon->evt_num[2];
+			if (t_mon->evt_num[3] >= data->wr_reqs[i])
+				wr_reqs = (t_mon->evt_num[3] - data->wr_reqs[i]);
+			else
+				wr_reqs = (u32)(-1) - data->wr_reqs[i] + t_mon->evt_num[3];
+
+			/* get latency data */
+			if (data->ddr_mon_debug == DDR_PORT_DEBUG_LAT) {
+				/* prepare latency parameters */
+				t_mon = data->axi_mon[i];
+				max_rd = t_mon->lat_num[0];
+				max_wr = t_mon->lat_num[1];
+
+				tmp = max_rd * 1000;
+				do_div(tmp, DDR_FCLK);
+				max_rd = tmp;
+				tmp = max_wr * 1000;
+				do_div(tmp, DDR_FCLK);
+				max_wr = tmp;
+				/* total ltency*/
+				if (t_mon->lat_num[2] >= data->tol_rd_lat[i])
+					avr_rd = (t_mon->lat_num[2]	\
+						- data->tol_rd_lat[i]);
+				else
+					avr_rd = (u32)(-1) - data->tol_rd_lat[i]	\
+						+ t_mon->lat_num[2];
+
+				if (t_mon->lat_num[3] >= data->tol_wr_lat[i])
+					avr_wr = (t_mon->lat_num[3]	\
+						- data->tol_wr_lat[i]);
+				else
+					avr_wr = (u32)(-1) - data->tol_wr_lat[i]	\
+						+ t_mon->lat_num[3];
+
+				if (rd_reqs == 0)
+					avr_rd = 0;
+				else {
+					tmp = ((avr_rd << 8) * 1000);
+					do_div(tmp, rd_reqs);
+
+					do_div(tmp, DDR_FCLK);
+					avr_rd = tmp;
+				}
+
+				if (wr_reqs == 0)
+					avr_wr = 0;
+				else {
+					tmp = ((avr_wr << 8) * 1000);
+					do_div(tmp, wr_reqs);
+					do_div(tmp, DDR_FCLK);
+					avr_wr = tmp;
+				}
+				data->tol_rd_lat[i] = t_mon->lat_num[2];
+				data->tol_wr_lat[i] = t_mon->lat_num[3];
+				mon_info[i].max_rd = max_rd;
+				mon_info[i].max_wr = max_wr;
+				mon_info[i].avr_wr = avr_wr;
+				mon_info[i].avr_rd = avr_rd;
+			}
+			bw_num = ((rd_bytes + wr_bytes) >> 10) * bw_fixed;
+			if (i == 0) {
+				data->p0_r_thpt = max(rd_bytes * bw_fixed, rd_reqs * bw_fixed);
+				data->p0_w_thpt = max(wr_bytes * bw_fixed, wr_reqs * bw_fixed);
+				data->p0_thpt = data->p0_r_thpt + data->p0_w_thpt;
+			}
+
+			data->total_rd_bytes[i] = t_mon->evt_num[0];
+			data->total_wr_bytes[i] = t_mon->evt_num[1];
+			data->rd_reqs[i] = t_mon->evt_num[2];
+			data->wr_reqs[i] = t_mon->evt_num[3];
+			mon_info[i].wr_bytes = wr_bytes;
+			mon_info[i].rd_bytes = rd_bytes;
+			mon_info[i].rd_reqs = rd_reqs;
+			mon_info[i].wr_reqs = wr_reqs;
+			mon_info[i].byte_thpt = bw_num>>10;
+			mon_info[i].req_thpt = req_num>>10;
+			bw_num = (rd_bytes >> 10) * bw_fixed;
+			mon_info[i].rd_thpt = bw_num>>10;
+			bw_num = (wr_bytes >> 10) * bw_fixed;
+			mon_info[i].wr_thpt = bw_num>>10;
+		}
+		else {
+			int port_index = data->axi_mon[i]->port_id;
+			if(mon_info[port_index].wr_bytes >= (mon_info[i-3].wr_bytes +
+						mon_info[i-2].wr_bytes + mon_info[i-1].wr_bytes))
+				mon_info[i].wr_bytes = mon_info[port_index].wr_bytes	\
+					- mon_info[i-3].wr_bytes - mon_info[i-2].wr_bytes	\
+					- mon_info[i-1].wr_bytes;
+			else
+				 mon_info[i].wr_bytes = 0;
+			if(mon_info[port_index].rd_bytes >= (mon_info[i-3].rd_bytes +
+						mon_info[i-2].rd_bytes + mon_info[i-1].rd_bytes))
+				mon_info[i].rd_bytes = mon_info[port_index].rd_bytes	\
+					- mon_info[i-3].rd_bytes - mon_info[i-2].rd_bytes	\
+					- mon_info[i-1].rd_bytes;
+			else
+				mon_info[i].rd_bytes = 0;
+			if(mon_info[port_index].wr_reqs >= (mon_info[i-3].wr_reqs +
+						mon_info[i-2].wr_reqs + mon_info[i-1].wr_reqs))
+				mon_info[i].wr_reqs = mon_info[port_index].wr_reqs	\
+					- mon_info[i-3].wr_reqs - mon_info[i-2].wr_reqs	\
+					- mon_info[i-1].wr_reqs;
+			else
+				 mon_info[i].wr_reqs = 0;
+			if(mon_info[port_index].rd_reqs >= (mon_info[i-3].rd_reqs +
+						mon_info[i-2].rd_reqs + mon_info[i-1].rd_reqs))
+				mon_info[i].rd_reqs = mon_info[port_index].rd_reqs	\
+					- mon_info[i-3].rd_reqs - mon_info[i-2].rd_reqs	\
+					- mon_info[i-1].rd_reqs;
+			else
+				 mon_info[i].rd_reqs = 0;
+			if(mon_info[port_index].byte_thpt >= (mon_info[i-3].byte_thpt +
+						mon_info[i-2].byte_thpt + mon_info[i-1].byte_thpt))
+				mon_info[i].byte_thpt = mon_info[port_index].byte_thpt	\
+					- mon_info[i-3].byte_thpt - mon_info[i-2].byte_thpt	\
+					- mon_info[i-1].byte_thpt;
+			else
+				 mon_info[i].byte_thpt = 0;
+			if(mon_info[port_index].req_thpt >= (mon_info[i-3].req_thpt +
+						 mon_info[i-2].req_thpt + mon_info[i-1].req_thpt))
+				mon_info[i].req_thpt = mon_info[port_index].req_thpt	\
+					- mon_info[i-3].req_thpt - mon_info[i-2].req_thpt	\
+					- mon_info[i-1].req_thpt;
+			else
+				mon_info[i].req_thpt = 0;
+			bw_num = (mon_info[i].rd_bytes >> 10) * bw_fixed;
+			mon_info[i].rd_thpt = bw_num>>10;
+			bw_num = (mon_info[i].wr_bytes >> 10) * bw_fixed;
+			mon_info[i].wr_thpt = bw_num>>10;
+		}
+	}
+
+	/* lcd monitor */
+	i = SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM;
+	t_mon = data->axi_mon[i];
+	if (t_mon->evt_num[0] >= data->total_rd_bytes[i])
+		rd_bytes = t_mon->evt_num[0] - data->total_rd_bytes[i];
+	else
+		rd_bytes = (u32)(-1) - data->total_rd_bytes[i] + t_mon->evt_num[0];
+
+	if (t_mon->evt_num[1] >= data->total_wr_bytes[i])
+		wr_bytes = (t_mon->evt_num[1] - data->total_wr_bytes[i]);
+	else
+		wr_bytes = (u32)(-1) - data->total_wr_bytes[i] + t_mon->evt_num[1];
+	/* calculate port bandwidth by total rd/wr requests */
+	if (t_mon->evt_num[2] >= data->rd_reqs[i])
+		rd_reqs = (t_mon->evt_num[2] - data->rd_reqs[i]);
+	else
+		rd_reqs = (u32)(-1) - data->rd_reqs[i] + t_mon->evt_num[2];
+	if (t_mon->evt_num[3] >= data->wr_reqs[i])
+		wr_reqs = (t_mon->evt_num[3] - data->wr_reqs[i]);
+	else
+		wr_reqs = (u32)(-1) - data->wr_reqs[i] + t_mon->evt_num[3];
+
+	/* get latency data */
+	if (data->ddr_mon_debug == DDR_PORT_DEBUG_LAT) {
+		/* prepare latency parameters */
+		t_mon = data->axi_mon[i];
+
+		max_rd = t_mon->lat_num[0];
+		max_wr = t_mon->lat_num[1];
+
+		tmp = max_rd * 1000;
+		do_div(tmp, DDR_FCLK);
+		max_rd = tmp;
+		tmp = max_wr * 1000;
+		do_div(tmp, DDR_FCLK);
+		max_wr = tmp;
+		/* total ltency*/
+		if (t_mon->lat_num[2] >= data->tol_rd_lat[i])
+			avr_rd = (t_mon->lat_num[2] - data->tol_rd_lat[i]);
+		else
+			avr_rd = (u32)(-1) - data->tol_rd_lat[i] + t_mon->lat_num[2];
+
+		if (t_mon->lat_num[3] >= data->tol_wr_lat[i])
+			avr_wr = (t_mon->lat_num[3] - data->tol_wr_lat[i]);
+		else
+			avr_wr = (u32)(-1) - data->tol_wr_lat[i] + t_mon->lat_num[3];
+		if (rd_reqs == 0)
+			avr_rd = 0;
+		else {
+			tmp = ((avr_rd << 8) * 1000);
+			do_div(tmp, rd_reqs);
+			do_div(tmp, DDR_FCLK);
+			avr_rd = tmp;
+		}
+		if (wr_reqs == 0)
+			avr_rd = 0;
+		else {
+			tmp = ((avr_wr << 8) * 1000);
+			do_div(tmp, wr_reqs);
+			do_div(tmp, DDR_FCLK);
+			avr_wr = tmp;
+		}
+		data->tol_rd_lat[i] = t_mon->lat_num[2];
+		data->tol_wr_lat[i] = t_mon->lat_num[3];
+		mon_info[i].max_rd = max_rd;
+		mon_info[i].max_wr = max_wr;
+		mon_info[i].avr_wr = avr_wr;
+		mon_info[i].avr_rd = avr_rd;
+	}
+
+	bw_num = ((rd_bytes + wr_bytes) >> 10) * bw_fixed;
+
+	req_num = ((rd_reqs + wr_reqs) >> 10) * req_fixed;
+
+	data->total_rd_bytes[i] = t_mon->evt_num[0];
+	data->total_wr_bytes[i] = t_mon->evt_num[1];
+	data->rd_reqs[i] = t_mon->evt_num[2];
+	data->wr_reqs[i] = t_mon->evt_num[3];
+
+	mon_info[i].wr_bytes = wr_bytes;
+	mon_info[i].rd_bytes = rd_bytes;
+	mon_info[i].rd_reqs = rd_reqs;
+	mon_info[i].wr_reqs = wr_reqs;
+	mon_info[i].byte_thpt = bw_num>>10;
+	mon_info[i].req_thpt = req_num>>10;
+	bw_num = (rd_bytes >> 10) * bw_fixed;
+	mon_info[i].rd_thpt = bw_num>>10;
+	bw_num = (wr_bytes >> 10) * bw_fixed;
+	mon_info[i].wr_thpt = bw_num>>10;
+	ddr_bw_info_index = (ddr_bw_info_index + 1) % DDR_FC_BW_SIZE;
+
+	return 0;
+}
+
+static void ddr_perf_counter_init(struct ddr_perf_data *data)
+{
+	int i;
+
+	for (i = 0; i < PERF_CNT_NUM; i++) {
+		data->cnt[i].id = i;
+		data->cnt[i].evt_sel = PERF_INVALID_EVT_SEL;
+		data->cnt[i].enable = false;
+		data->cnt[i].free = true;
+		spin_lock_init(&data->cnt[i].lock);
+	}
+}
+
+static int ddr_perf_conf(struct ddr_perf_data *data)
+{
+	/* 0: start counting when enabled; 1: start counting on first data access */
+	u32 pc_start_cond = 0, pc_start_index = 0;
+	/* 0: continue count when overflow; 1: stop counting on any overflow */
+	u32 pc_stop_cond = 1, pc_stop_index = 0x4;
+	/* clock should be done in clock tree */
+	u32 pc_control = readl(data->base + PERF_CNT_CTRL);
+
+	pc_control &= ~((0x1 << pc_start_index) | (0x1 << pc_stop_index));
+	pc_control |= ((pc_start_cond << pc_start_index) | (pc_stop_cond << pc_stop_index));
+
+	writel_relaxed(pc_control, data->base + PERF_CNT_CTRL);
+
+	ddr_perf_counter_init(data);
+
+	return 0;
+}
+
+int ddr_perf_init_cnt(struct device *dev, void __iomem *base)
+{
+	ddr_perf_data = devm_kzalloc(dev, sizeof(struct ddr_perf_data), GFP_KERNEL);
+	if (ddr_perf_data == NULL)
+		return -ENOMEM;
+
+	ddr_perf_data->base = base;
+	ddr_perf_conf(ddr_perf_data);
+
+	return 0;
+}
+
+static int ddr_perf_read_cnt(u32 cnt)
+{
+	int val;
+
+	val = readl(ddr_perf_data->base + perf_cnt_reg(cnt));
+
+	return val;
+}
+
+struct ddr_perf_cnt *ddr_perf_cnt_get(void)
+{
+	int i;
+
+	for (i = 0; i < PERF_CNT_NUM; i++)
+		if (ddr_perf_data->cnt[i].free)
+			return &ddr_perf_data->cnt[i];
+	return NULL;
+}
+
+int ddr_perf_cnt_update(struct ddr_perf_cnt *counter)
+{
+	/* read event number */
+	counter->evt_num = ddr_perf_read_cnt(counter->id);
+
+	return 0;
+}
+
+static int ddr_perf_cnt_enable(struct ddr_perf_cnt *counter)
+{
+	union perf_cnt_config cnt_conf;
+	u32 conf, cnt = counter->id, reg_offset = PERF_CNT_CONF0;
+
+	if (is_cnt_valid(cnt) < 0 || !ddr_perf_data	\
+			|| counter->evt_sel == PERF_INVALID_EVT_SEL) {
+		pr_err("wrong performance counter number: 0x%x\n", cnt);
+		return -EINVAL;
+	}
+
+	spin_lock(&counter->lock);
+	counter->enable = true;
+	counter->free = false;
+
+	cnt_conf.bit.enable = 1;
+	cnt_conf.bit.evt_sel = counter->evt_sel;
+	/* clear non-used bit */
+	cnt_conf.conf &= 0xff;
+
+	/* performance counter: 4 - 7 */
+	if (cnt > 3) {
+		cnt = cnt - 4;
+		reg_offset = PERF_CNT_CONF1;
+	}
+
+	conf = readl(ddr_perf_data->base + reg_offset);
+	conf &= ~(0xff << perf_cnt_conf_base(cnt));
+	conf |= (cnt_conf.conf << perf_cnt_conf_base(cnt));
+
+	writel(conf, ddr_perf_data->base + reg_offset);
+	spin_unlock(&counter->lock);
+
+	return 0;
+}
+
+int ddr_perf_cnt_disable(struct ddr_perf_cnt *counter)
+{
+	u32 conf, cnt = counter->id, reg_offset = PERF_CNT_CONF0;
+
+	if (is_cnt_valid(cnt) < 0 || !ddr_perf_data) {
+		pr_err("wrong performance counter number: 0x%x\n", cnt);
+		return -EINVAL;
+	}
+
+	/* performance counter: 4 - 7 */
+	if (cnt > 3) {
+		cnt = cnt - 4;
+		reg_offset = PERF_CNT_CONF1;
+	}
+
+	ddr_perf_cnt_update(counter);
+
+	spin_lock(&counter->lock);
+	/* disable performance counter */
+	conf = readl(ddr_perf_data->base + reg_offset);
+	conf &= ~(PERF_CNT_EN << perf_cnt_conf_base(cnt));
+	writel(conf, ddr_perf_data->base + reg_offset);
+	counter->free = true;
+	counter->enable = false;
+	spin_unlock(&counter->lock);
+
+	return 0;
+}
+
+static int ddr_get_dev_status(struct device *dev, struct spacemit_ddrbw_status *stat)
+{
+	/* add dev freq-change code later */
+	struct spacemit_ddraxi_mon_data *mon_data = dev_get_drvdata(dev);
+	struct ddr_dfreq_data *data = mon_data->data;
+	int ret, burst_len;
+	u64 now;
+	u64 busy_cycle, busy_diff, cmd_number, cmd_diff;
+	u64 clk_diff, clk_cycle, utility, time_diff;
+	u64 last_count = (u32)-1;
+	unsigned long flags;
+	u64 thpt;
+	u64 tmp;
+
+	if (!data)
+		return 0;
+
+	burst_len = get_ddr_burst(data->base);
+
+	//stat->current_frequency = spacemit_get_ddr_freq();
+	stat->current_frequency = 2400000000;
+	/* read ddr channel 0/1 read/write event number */
+	if (!data->cnt_en) {
+		/* clock cycles */
+		data->perf_ch0 = ddr_perf_cnt_get();
+		if (!data->perf_ch0) {
+			dev_err(dev, "no free ddr performance counter\n");
+			return -EINVAL;
+		}
+		data->perf_ch0->evt_sel = DDR_CLK_CYCLES;
+		ret = ddr_perf_cnt_enable(data->perf_ch0);
+		if (ret < 0)
+			return ret;
+
+		/* busy cycles */
+		data->perf_ch1 = ddr_perf_cnt_get();
+		if (!data->perf_ch1) {
+			dev_err(dev, "no free ddr performance counter\n");
+			return -EINVAL;
+		}
+
+		data->perf_ch1->evt_sel = DDR_CH0_BUSY;
+		ret = ddr_perf_cnt_enable(data->perf_ch1);
+		if (ret < 0)
+			return ret;
+
+		/* read/write command number */
+		data->perf_ch2 = ddr_perf_cnt_get();
+		if (!data->perf_ch2) {
+			dev_err(dev, "no free ddr performance counter\n");
+			return -EINVAL;
+		}
+
+		data->perf_ch2->evt_sel = DDR_RD_WR_CMD;
+		ret = ddr_perf_cnt_enable(data->perf_ch2);
+		if (ret < 0)
+			return ret;
+
+		data->ddr_mon_debug = 0;
+		ddr_mon_enable(data, DDR_PORT_DEBUG_LAT);
+
+		data->last_poll = jiffies;
+		data->cnt_en = true;
+
+		data->throughput = 0;
+		return 0;
+	}
+
+	spin_lock_irqsave(&data->lock, flags);
+	now = jiffies;
+
+	/* DDR counter may be udpated and enabled in one jiffies */
+	if (unlikely(now == data->last_poll)) {
+		spin_unlock_irqrestore(&data->lock, flags);
+		return 0;
+	}
+
+	ddr_perf_cnt_update(data->perf_ch0);
+	ddr_perf_cnt_update(data->perf_ch1);
+	ddr_perf_cnt_update(data->perf_ch2);
+
+	clk_cycle = data->perf_ch0->evt_num;
+	busy_cycle = data->perf_ch1->evt_num;
+	cmd_number = data->perf_ch2->evt_num;
+
+	if (clk_cycle < data->clk_cycle)
+		clk_diff = last_count - data->clk_cycle + clk_cycle;
+	else
+		clk_diff = clk_cycle - data->clk_cycle;
+
+	if (busy_cycle < data->busy_cycle)
+		busy_diff = last_count - data->busy_cycle + busy_cycle;
+	else
+		busy_diff = busy_cycle - data->busy_cycle;
+
+	if (cmd_number < data->cmd_number)
+		cmd_diff = last_count - data->cmd_number + cmd_number;
+	else
+		cmd_diff = cmd_number - data->cmd_number;
+
+	if (now < data->last_poll)
+		time_diff = last_count - data->last_poll + now;
+	else
+		time_diff = now - data->last_poll;
+
+	time_diff = jiffies_to_msecs(time_diff);
+
+	thpt = cmd_diff & last_count;
+	thpt = thpt * burst_len * 1000;
+	do_div(thpt, time_diff);
+
+	tmp = (busy_diff + cmd_diff * 8) * 100;
+	do_div(tmp, (clk_diff * 2));
+	utility = tmp;
+	data->last_poll = now;
+
+	data->clk_cycle = clk_cycle;
+	data->busy_cycle = busy_cycle;
+	data->cmd_number = cmd_number;
+	data->cmd_diff = cmd_diff;
+	stat->total_time = time_diff;
+	data->throughput = thpt >> 20;
+
+	if (data->ddr_mon_debug) {
+		ddr_get_port_bw_a0(data, time_diff, stat);
+
+	}
+
+	spin_unlock_irqrestore(&data->lock, flags);
+	return 0;
+}
+
+static void ddr_init_mon_data(struct spacemit_ddraxi_mon_data *mon_data)
+{
+	struct ddr_dfreq_data *data = mon_data->data;
+
+	data->clk_cycle = 0;
+	data->busy_cycle = 0;
+	data->cmd_diff = 0;
+
+	memset(data->rd_reqs, 0, sizeof(data->rd_reqs));
+	memset(data->wr_reqs, 0, sizeof(data->wr_reqs));
+	memset(data->total_rd_bytes, 0, sizeof(data->total_rd_bytes));
+	memset(data->total_wr_bytes, 0, sizeof(data->total_wr_bytes));
+	memset(data->tol_rd_lat, 0, sizeof(data->tol_rd_lat));
+	memset(data->tol_wr_lat, 0, sizeof(data->total_wr_bytes));
+	memset(data->overflow_rd_num, 0, sizeof(data->overflow_rd_num));
+	memset(data->overflow_wr_num, 0, sizeof(data->overflow_wr_num));
+}
+
+static int spacemit_ddrbw_open(struct inode *inode, struct file *file)
+{
+	mon_info = (struct aximon_info*)kcalloc((SPACEMIT_MON_CTRL_NUM	\
+		+ SPACEMIT_ID_MASTER_NUM + 1), 	\
+		sizeof(struct aximon_info), GFP_KERNEL);
+	ddr_init_mon_data(ddraxi_mon_data);
+	return 0;
+}
+
+static int spacemit_ddrbw_release(struct inode *inode, struct file *file)
+{
+	int i;
+	ddr_mon_enable(ddraxi_mon_data->data, 0);
+	ddraxi_mon_data->data->cnt_en = 0;
+	ddr_perf_cnt_disable(ddraxi_mon_data->data->perf_ch0);
+	ddr_perf_cnt_disable(ddraxi_mon_data->data->perf_ch1);
+	ddr_perf_cnt_disable(ddraxi_mon_data->data->perf_ch2);
+	for(i = 0;i < (SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1);i++) {
+		memset(&mon_info[i],0,sizeof(struct aximon_info));
+		if(ddraxi_mon_data->data->axi_mon[i]->mid == 3)
+			kfree(ddraxi_mon_data->data->axi_mon[i]);
+	}
+
+	kfree(mon_info);
+	return 0;
+}
+
+static ssize_t spacemit_ddrbw_read(struct file *fp,	\
+		char __user *buf, size_t size, loff_t *pos)
+{
+	int rc;
+	struct ddrbw_info *bw_info;
+
+	bw_info = kzalloc(sizeof(struct ddrbw_info), GFP_KERNEL);
+	rc = ddr_get_dev_status(ddraxi_mon_data->dev, ddraxi_mon_data->stat);
+	if(rc < 0) {
+		pr_err("get dev status failed!");
+		return -EFAULT;
+	}
+
+	bw_info->total_time = ddraxi_mon_data->stat->total_time;
+	bw_info->clk_cycle = ddraxi_mon_data->data->clk_cycle;
+	bw_info->busy_cycle = ddraxi_mon_data->data->busy_cycle;
+	bw_info->current_frequency = ddraxi_mon_data->stat->current_frequency;
+	bw_info->throughput = ddraxi_mon_data->data->throughput;
+	bw_info->p0_r_thpt = ddraxi_mon_data->data->p0_r_thpt;
+	bw_info->p0_w_thpt = ddraxi_mon_data->data->p0_w_thpt;
+	bw_info->p0_thpt = ddraxi_mon_data->data->p0_thpt;
+	bw_info->cmd_number = ddraxi_mon_data->data->cmd_diff;
+	bw_info->total_num = SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1;
+	bw_info->port_num = SPACEMIT_MON_CTRL_NUM;
+
+	rc = copy_to_user(buf, bw_info, sizeof(struct ddrbw_info));
+	if(rc < 0) {
+		pr_err("copy_to_user failed!");
+		return -EFAULT;
+	}
+	return size;
+}
+
+static long spacemit_ddrbw_ioctl(struct file *file,	\
+		unsigned int cmd, unsigned long arg)
+{
+	int err, i;
+	void __user *argp = (void __user *)arg;
+	for(i = 0; i < SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1; i++)
+	{
+		strcpy(mon_info[i].name,master_name[i]);
+		mon_info[i].id = ddraxi_mon_data->data->axi_mon[i]->id;
+		mon_info[i].port_id = ddraxi_mon_data->data->axi_mon[i]->port_id;
+		mon_info[i].mid = ddraxi_mon_data->data->axi_mon[i]->mid;
+		if(ddraxi_mon_data->data->axi_mon[i]->master_is_lcd == true)
+			mon_info[i].single_master = 1;
+		else
+			mon_info[i].single_master = 0;
+	}
+	switch(cmd){
+	case 0:
+		err = copy_to_user(argp, mon_info, (SPACEMIT_MON_CTRL_NUM	\
+			+ SPACEMIT_ID_MASTER_NUM + 1)	\
+			* sizeof(struct aximon_info)) ? -EFAULT : 0;
+		break;
+	}
+	return err;
+}
+
+static const struct file_operations spacemit_ddrbw_fops = {
+	.owner		= THIS_MODULE,
+	.unlocked_ioctl	= spacemit_ddrbw_ioctl,
+	.read		= spacemit_ddrbw_read,
+	.open		= spacemit_ddrbw_open,
+	.release	= spacemit_ddrbw_release,
+};
+
+static int ddrbw_detect_init(void)
+{
+	int rc = 0, ret = 0;
+	struct device *devices;
+
+	rc = alloc_chrdev_region(&ddrdev.dev, 0, DDRBWTOOL_COUNT, "ddr_dw");
+	if(rc < 0){
+		printk("alloc_chrdev_region error\r\n");
+		ret =  -EBUSY;
+		goto fail;
+	}
+	printk("[ddrbw] MAJOR is %d\n", MAJOR(ddrdev.dev));
+	printk("[ddrbw] MINOR is %d\n", MINOR(ddrdev.dev));
+
+	ddrdev.major = MAJOR(ddrdev.dev);
+	cdev_init(&ddrdev.chrdevcdev, &spacemit_ddrbw_fops);
+	rc = cdev_add(&ddrdev.chrdevcdev, ddrdev.dev, DDRBWTOOL_COUNT);
+	if (rc < 0) {
+		printk("cdev_add error\r\n");
+		ret =  -EBUSY;
+		goto fail1;
+	}
+
+	ddrdev.dev_class = class_create("ddr_bw_class");
+	if (IS_ERR(ddrdev.dev_class)) {
+		printk("class_create error\r\n");
+		ret =  -EBUSY;
+		goto fail2;
+	}
+
+	devices = device_create(ddrdev.dev_class, NULL, 	\
+			MKDEV(ddrdev.major,0), NULL, "ddr_bw");
+	if(NULL == devices){
+		printk("device_create error\r\n");
+		ret =  -EBUSY;
+		goto fail3;
+	}
+
+	return 0;
+
+fail3:
+	class_destroy(ddrdev.dev_class);
+
+fail2:
+	cdev_del(&ddrdev.chrdevcdev);
+fail1:
+	unregister_chrdev_region(ddrdev.dev,DDRBWTOOL_COUNT);
+fail:
+	return ret;
+}
+
+static int ddraxi_mon_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct spacemit_ddraxi_mon_data *data = NULL;
+	struct resource resource;
+	int i = 0;
+	resource_size_t map_base, map_size;
+	int ret = 0;
+
+	data = devm_kzalloc(dev, sizeof(struct spacemit_ddraxi_mon_data), GFP_KERNEL);
+	if (data == NULL)
+		return -ENOMEM;
+
+	data->data = devm_kzalloc(dev, sizeof(struct ddr_dfreq_data), GFP_KERNEL);
+	if (data->data == NULL)
+		return -ENOMEM;
+
+	ret = of_address_to_resource(pdev->dev.of_node, 0, &resource);
+	if (ret) {
+		dev_err(dev, "invalid address\n");
+		return -EINVAL;
+	}
+
+	map_base = resource.start;
+	map_size = resource_size(&resource);
+
+	data->reg_base = devm_ioremap(dev, map_base, map_size);
+	if (!data->reg_base) {
+		dev_err(dev, "Failed to get register\n");
+		return -EIO;
+	}
+	data->ciu_base = ioremap(0xd4282c00, 0x1000);
+	data->data->base = ioremap(0xc0000000, 0x1800);
+
+	platform_set_drvdata(pdev, data);
+
+	for (i = 0; i < SPACEMIT_MON_LAT_NUM; i++)
+		mon_lat_id[i] = mon_lat_id_a0[i];
+
+	ddraxi_mon_data = data;
+	ddraxi_mon_data->dev = dev;
+	ddraxi_mon_data->stat = devm_kzalloc(dev,	\
+		sizeof(struct spacemit_ddrbw_status), GFP_KERNEL);
+	ddraxi_mon_init(data);
+
+	ddr_init_mon_data(ddraxi_mon_data);
+	ddr_perf_init_cnt(dev, data->data->base);
+	ret = ddrbw_detect_init();
+	if(ret){
+		dev_err(dev, "register ddr detect tool failed\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int ddraxi_mon_remove(struct platform_device *pdev)
+{
+	struct spacemit_ddraxi_mon_data *mon_data = platform_get_drvdata(pdev);
+	mon_data = NULL;
+
+	return 0;
+}
+
+static const struct of_device_id spacemit_ddraxi_dt_match[] = {
+	{.compatible = "spacemit,ddraxi-mon" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, spacemit_ddraxi_dt_match);
+
+
+static struct platform_driver spacemit_ddraxi_mon_driver = {
+	.probe = ddraxi_mon_probe,
+	.remove = ddraxi_mon_remove,
+	.driver = {
+		.name = "spacemit-ddraxi-mon",
+		.of_match_table = of_match_ptr(spacemit_ddraxi_dt_match),
+	},
+};
+
+static int __init spacemit_ddraxi_mon_init(void)
+{
+	return platform_driver_register(&spacemit_ddraxi_mon_driver);
+}
+module_init(spacemit_ddraxi_mon_init);
+
+static void __exit spacemit_ddraxi_mon_exit(void)
+{
+	platform_driver_unregister(&spacemit_ddraxi_mon_driver);
+}
+module_exit(spacemit_ddraxi_mon_exit);
+
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("SPACEMIT ddr-axi monitor driver");
diff --git a/drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.h b/drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.h
new file mode 100644
index 000000000000..ed376df7d821
--- /dev/null
+++ b/drivers/soc/spacemit/ddr-bw/spacemit_ddrbw.h
@@ -0,0 +1,363 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2024 Spacemit Co., Ltd.
+ */
+#ifndef __SPACEMIT_DDRBW_H_
+#define __SPACEMIT_DDRBW_H_
+
+#define DDR_FCLK		24
+#define DDR_FC_NODE_LEN		20
+
+#define DDR_UPTHRESHOLD		60
+#define DDR_DOWNDIFF		10
+#define DDR_THPT_CONS		(DDR_PORT_WIDTH * 2)
+
+#define DDR_THPT_DENOM		1000
+#define CMD_LEN			128
+
+#define KHZ			1000
+#define MHZ			1000000
+/* default voltage 1v for opp registration */
+#define DDR_FC_VOL		1000000
+/* avoid to use too slow level0 freq, keep it in case corner cases */
+#define DDR_SLOW_FREQ		100
+#define MC_CONTROL_0		0x44
+#define MC_DATA_WIDTH		8
+#define MC_BURST_LEN		16
+
+#define DDRC_ISR		0x140
+#define DDRC_IER		0x144
+#define DDRC_REFCTRL		0x378
+#define DDR_RFTIMING		0x3fc
+#define PEND_REF_OVERFLOW_CH0	BIT(16)
+#define REFRT_INT_CH0		BIT(14)
+#define REF_EXCEED_LIMIT_CH0	BIT(12)
+#define MB_INT_CH0		BIT(10)
+#define DECODE_ERR		BIT(2)
+#define DDRC_INT_ISR		0x140
+#define DDRC_INT_IER		0x144
+#define DDRC_ERR_INFO		0x150
+#define DDRC_ERR_ADR_L		0x154
+#define DDRC_ERR_ADR_H		0x158
+#define DDRC_ERR_ID		0x15
+
+#define SPACEMIT_PERF_EVT_NUM	4
+#define DDR_FC_BW_SIZE		4
+
+#define SPACEMIT_PERF_CNT_NUM	0x8
+#define PERF_CNT_NUM		0x7
+#define SPACEMIT_MON_CTRL_NUM	0x4
+#define SPACEMIT_ID_MON_CTRL_NUM	12
+#define SPACEMIT_ID_MASTER_NUM	15
+#define SPACEMIT_PERF_CNT_ALL	0xff
+
+#define DDR_RD_WR_EVT_CH0	12
+#define DDR_RD_WR_EVT_CH1	47
+
+/* DDR port width 128bit(16byte) */
+#define DDR_PORT_WIDTH		16
+#define DDR_LEN_16		16
+#define DDR_LEN_32		32
+#define DDR_LEN_64		64
+
+#define DDR_P0_WDW_LEN		6
+#define DDR_P0_NOM		80
+#define DDR_P0_DENOM		100
+#define DDR_P0_DECAY		(DDR_P0_DENOM - DDR_P0_NOM)
+
+#define SPACEMIT_MON_EVT_NUM	6
+#define SPACEMIT_MON_EVT_MASK	0x1f
+#define SPACEMIT_MON_LAT	12
+#define SPACEMIT_MON_LAT_NUM	4
+#define SPACEMIT_MON_LAT_MASK	0xffff
+#define SPACEMIT_MON_ID_SEL	0x7
+
+#define DDR_CLK_CYCLES		0
+#define DDR_CH0_BUSY		0x38
+#define DDR_RD_WR_CMD		0x56
+
+#define DDR_PORT_DEBUG_BW	1
+#define DDR_PORT_DEBUG_LAT	2
+
+#define DDRBWTOOL_COUNT		1
+
+#define DDR_MAX_FREQ_LV		8
+
+#define PERF_CNT_CONF0		0x100
+#define PERF_CNT_CONF1		0x104
+/* check whether overflow or not */
+#define PERF_CNT_STATUS		0x108
+#define PERF_CNT_CTRL		0x10c
+
+#define PERF_CNT_BASE		0x110
+
+#define PERF_CNT_ISR		0x140
+#define PERF_CNT_IER		0x144
+
+/* reg range: 0x10 - 0x2c, step 0x4 */
+#define perf_cnt_reg(n)		(PERF_CNT_BASE + (n << 2))
+
+#define perf_cnt_conf_base(n)	(n << 3)
+#define PERF_CNT_EN		(1 << 7)
+
+#define is_cnt_valid(cnt)	((cnt < PERF_CNT_NUM) ? 0 : -EINVAL)
+
+#define PERF_INVALID_EVT_SEL	0xffff
+#define PERF_SYS_NODE_LEN	20
+
+struct spacemit_ddr_pbw {
+	u64 byte_bw;	/* bytes throughput */
+	u64 req_bw;	/* requests throughtput */
+	u32 rd_reqs;	/* read requests number */
+	u32 wr_reqs;	/* write requests number */
+};
+struct spacemit_ddr_bw_info {
+	u64 curr_freq;
+	u64 total_bw;
+	struct spacemit_ddr_pbw port_bw[4];
+};
+
+struct ddr_perf_cnt {
+	u32 id;
+	u32 evt_sel;
+	u32 evt_num;
+	bool init;
+	bool enable;
+	bool free;
+	spinlock_t lock;
+};
+
+struct devfreq_throughput_table {
+	u64 max;
+	u64 min;
+};
+
+struct devfreq_throughput_data {
+	struct devfreq_throughput_table *ddr_thpt_tbl;
+
+	u32 tbl_len;
+	u32 upthreshold;
+	u32 downdifferential;
+};
+
+struct ddr_perf_mon {
+	u32 id;
+	u32 th_x;
+	u32 th_y;
+	u32 evt_sel;
+	u32 evt_num[SPACEMIT_PERF_EVT_NUM];
+	bool init;
+	bool enable;
+	bool free;
+	spinlock_t lock;
+};
+
+struct ddraxi_mon {
+	u32 mid;
+	u32 port_id;
+	u32 id;
+	u32 lat_th;
+	u32 evt_num[SPACEMIT_MON_EVT_NUM];
+	u32 lat_num[SPACEMIT_MON_LAT_NUM];
+	bool master_is_lcd;
+	bool init;
+	bool enable;
+	bool free;
+	bool lat_en;
+	spinlock_t lock;
+};
+
+struct ddr_dfreq_data {
+	struct ddraxi_mon *axi_mon[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	struct work_struct work_sum_qos;
+	struct devfreq *devfreq;
+	struct clk *ddr_clk;
+	void __iomem *base;
+	int ddr_mon_debug;
+	bool cnt_en;
+
+	unsigned long qos_min_freq;
+	unsigned long qos_max_freq;
+	const char *clk_name;
+
+	spinlock_t lock;
+	u64 last_poll;
+	/* perf-cnt events */
+	u64 clk_cycle;
+	u64 busy_cycle;
+	u64 cmd_number;
+	u64 cmd_diff;
+
+	/* axi monitor events */
+	u64 rd_reqs[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 wr_reqs[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 tol_rd_lat[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 tol_wr_lat[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 total_rd_bytes[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 total_wr_bytes[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 overflow_rd_num[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u64 overflow_wr_num[SPACEMIT_MON_CTRL_NUM + SPACEMIT_ID_MASTER_NUM + 1];
+	u32 ovfl_threshold;
+
+	struct ddr_perf_cnt *perf_ch0;
+	struct ddr_perf_cnt *perf_ch1;
+	struct ddr_perf_cnt *perf_ch2;
+
+	unsigned long throughput;
+	unsigned long p0_r_thpt;
+	unsigned long p0_w_thpt;
+	unsigned long p0_thpt;
+};
+
+struct ddrbw_info {
+	u64 last_poll;
+	/* perf-cnt events */
+	u64 clk_cycle;
+	u64 busy_cycle;
+	u64 cmd_number;
+	int port_num;
+	int total_num;
+	u32 ovfl_threshold;
+	unsigned long throughput;
+	unsigned long p0_r_thpt;
+	unsigned long p0_w_thpt;
+	unsigned long p0_thpt;
+	unsigned long total_time;
+	unsigned long busy_time;
+	unsigned long current_frequency;
+};
+
+struct aximon_info {
+	u32 mid;
+	u32 port_id;
+	u32 id;
+	u32 single_master;
+	s64 rd_bytes;
+	s64 wr_bytes;
+	u64 max_rd;
+	u64 max_wr;
+	u64 avr_rd;
+	u64 avr_wr;
+	u64 rd_reqs;
+	u64 wr_reqs;
+	u64 wr_thpt;
+	u64 rd_thpt;
+	u64 byte_thpt;
+	u64 req_thpt;
+	char name[10];
+};
+struct aximon_info *mon_info;
+char *master_name[20] = {
+	"P0", "P1", "P2", "P3", "CPU", "GPU",
+	"AES", "USBMMC", "GMAC1", "RCPU", "GMAC0",
+	"VPU", "PCIE0", "PCIE1", "PCIE2", "ISP",
+	"DSI", "V2D", "HDMI", "LCD"
+};
+
+/*
+	mid0	mid1	mid2
+  p0  	CPU	GPU	aes
+  p1	USBMMC	GMAC1	RCPU	GMAC0
+  p2	vpu	pcie0	PCIE1	pcie2
+  p3	ISP	dsi	v2d	hdmi
+*/
+
+struct spacemit_ddrbw_status {
+	/* both since the last measure */
+	unsigned long total_time;
+	unsigned long busy_time;
+	unsigned long current_frequency;
+	void *private_data;
+	unsigned long throughput;
+	unsigned long p0_r_thpt;
+	unsigned long p0_w_thpt;
+	unsigned long p0_thpt;
+};
+
+#define LCD_MON_BASE		0x200
+#define SPACEMIT_MON_BASE	0x0
+#define SPACEMIT_MON_ID_BASE	0x8
+#define SPACEMIT_MON_DATA	0xc
+#define SPACEMIT_MON_ID_REG	0x40
+
+/* reg range: 0x0 - 0x30, step 0x10 */
+#define mon_ctrl_reg(n)		(SPACEMIT_MON_BASE + (n << 4))
+/* reg range: 0x3c - 0x6c, step 0x10 */
+#define mon_data_reg(n)		(SPACEMIT_MON_DATA + (n << 4))
+
+/* id monitor reg range 0x08 `0x38, step 0x10 */
+#define mon_id_reg(n)		(SPACEMIT_MON_ID_BASE + (n << 4))
+/* id monitor sel range 0x40 `0x7c, step 0x4 */
+#define mon_id_sel(n, m)	(SPACEMIT_MON_ID_REG + (m << 4) + (n << 2))
+
+#define MON_CTRL_SEL		(1 << 4)
+#define MON_CTRL_LATCH		(1 << 5)
+#define MON_CTRL_READ		(1 << 6)
+#define MON_CTRL_EN		(1 << 31)
+
+/* ID MON */
+#define IDMON_CTRL_EN		24
+#define IDMON_CLK_EN		16
+
+#define is_mon_valid(mon)	((mon < (SPACEMIT_MON_CTRL_NUM + \
+		SPACEMIT_ID_MASTER_NUM + 1)) ? 0 : -EINVAL)
+
+#define PERF_SYS_NODE_LEN	20
+
+/*
+ * bandwidth calculation:
+ * event 16: total read bytes
+ * event 18: total write bytes
+ * event 17: counter numbers of read-lat exceed threshold
+ * event 19: counter numbers of write-lat exceed threshold
+ * event 1: total read request
+ * event 9: total write request
+ * int mon_evt_id[SPACEMIT_MON_EVT_NUM] = {17, 19, 16, 18, 1, 9};
+ */
+/* Monitor bandwidth by default. */
+int mon_evt_id[SPACEMIT_MON_EVT_NUM] = {16, 18, 1, 9, 17, 19};
+/* need to enable/disable monitor for max rd/wr latency data */
+int mon_lat_id[SPACEMIT_MON_LAT_NUM];
+/* we will just use evnet 5 and event 13 on dove z1 */
+int mon_lat_id_z1[SPACEMIT_MON_LAT_NUM] = {5, 13, 5, 13};
+/*
+ * latency for a0:
+ * event 0x14: max rd
+ * event 0x15: max wr
+ * event 0x18: total_read_latency on fclk
+ * evnet 0x19: total_write_latency on fclk
+ */
+int mon_lat_id_a0[SPACEMIT_MON_LAT_NUM] = {0x14, 0x15, 0x18, 0x19};
+struct spacemit_ddraxi_mon_data {
+	void __iomem *reg_base;
+	void __iomem *ciu_base;
+	struct device *dev;
+	struct ddraxi_mon mon[SPACEMIT_ID_MON_CTRL_NUM + SPACEMIT_MON_CTRL_NUM + 1];
+	struct ddr_dfreq_data *data;
+	struct spacemit_ddrbw_status *stat;
+};
+
+static struct spacemit_ddraxi_mon_data *ddraxi_mon_data;
+
+static u32 master_id[SPACEMIT_ID_MASTER_NUM] = {
+	0, 1, 2,
+	0, 1, 2, 3,
+	0, 1, 2, 3,
+	0, 1, 2, 3
+};
+
+union perf_cnt_config {
+	struct {
+		u32 evt_sel:7;
+		u32 enable:1;
+		u32 reserved1:24;
+	} bit;
+	u32 conf;
+};
+
+struct ddr_perf_data {
+	void __iomem *base;
+	struct ddr_perf_cnt cnt[PERF_CNT_NUM];
+};
+
+#endif	/* __SPACEMIT_DDRBW_H_ */
diff --git a/drivers/soc/spacemit/spacemit_lid.c b/drivers/soc/spacemit/spacemit_lid.c
index 1046afe8af1f..1fdc9e672bc6 100644
--- a/drivers/soc/spacemit/spacemit_lid.c
+++ b/drivers/soc/spacemit/spacemit_lid.c
@@ -13,12 +13,14 @@
 #include <linux/pm_wakeirq.h>
 #include <linux/gpio/consumer.h>
 #include <linux/property.h>
+#include <linux/pm_wakeirq.h>
 #include <linux/of.h>
 
 struct _hall {
-	int irq;
+	struct device *dev;
 	struct input_dev *input;
 	struct gpio_desc *gpio;
+	int wakeup_irq, normal_irq;
 };
 
 static irqreturn_t hall_wakeup_detect(int irq, void *arg)
@@ -27,6 +29,9 @@ static irqreturn_t hall_wakeup_detect(int irq, void *arg)
 	struct _hall *hall = (struct _hall *)arg;
 
 	state = gpiod_get_value(hall->gpio);
+
+	pm_wakeup_event(hall->dev, 0);
+
 	input_report_switch(hall->input, SW_LID, !state);
  	input_sync(hall->input);
 
@@ -45,24 +50,27 @@ static int spacemit_lid_probe(struct platform_device *pdev)
 
 	hall->gpio = devm_gpiod_get(&pdev->dev, "lid", GPIOD_IN);
 	if (IS_ERR_OR_NULL(hall->gpio)) {
-		pr_err("get gpio error\n");
 		return PTR_ERR(hall->gpio);
 	}
 
-	hall->irq = platform_get_irq(pdev, 0);
-	if (hall->irq < 0)
+	hall->normal_irq = platform_get_irq(pdev, 0);
+	if (hall->normal_irq < 0)
+		return -EINVAL;
+
+	hall->wakeup_irq = platform_get_irq(pdev, 1);
+	if (hall->wakeup_irq < 0) {
 		return -EINVAL;
+	}
 
-	error = devm_request_any_context_irq(&pdev->dev, hall->irq,
+	error = devm_request_irq(&pdev->dev, hall->normal_irq,
 			hall_wakeup_detect,
-			IRQF_ONESHOT | IRQF_TRIGGER_NONE,
+			IRQF_NO_SUSPEND | IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
 			"hall-detect", (void *)hall);
 	if (error) {
 		pr_err("request hall pinctrl dectect failed\n");
 		return -EINVAL;
 	}
 
-
 	input = devm_input_allocate_device(&pdev->dev);
 	if (!input)
 		return -ENOMEM;
@@ -73,6 +81,7 @@ static int spacemit_lid_probe(struct platform_device *pdev)
 
 	input_set_drvdata(input, hall);
 
+	hall->dev = &pdev->dev;
 	hall->input = input;
 
 	error = input_register_device(input);
@@ -81,6 +90,9 @@ static int spacemit_lid_probe(struct platform_device *pdev)
 		return error;
 	}
 
+	dev_pm_set_dedicated_wake_irq_spacemit(&pdev->dev, hall->wakeup_irq, IRQ_TYPE_EDGE_RISING);
+ 	device_init_wakeup(&pdev->dev, true);
+
 	return 0;
 }
 
diff --git a/drivers/tty/serial/pxa_k1x.c b/drivers/tty/serial/pxa_k1x.c
index 50d49151a097..af1d2d0cad70 100644
--- a/drivers/tty/serial/pxa_k1x.c
+++ b/drivers/tty/serial/pxa_k1x.c
@@ -667,7 +667,7 @@ static void serial_pxa_set_mctrl(struct uart_port *port, unsigned int mctrl)
 
 #ifdef CONFIG_BT
 	if (up->port.line == BT_UART_PORT)
-		pr_info("%s: rts: 0x%x\n", __func__, mcr & UART_MCR_RTS);
+		pr_debug("%s: rts: 0x%x\n", __func__, mcr & UART_MCR_RTS);
 #endif
 }
 
@@ -1557,7 +1557,6 @@ void serial_pxa_get_qos(int port)
 
 	up = serial_pxa_ports[port];
 	if (!mod_timer(&up->pxa_timer, jiffies + PXA_TIMER_TIMEOUT)) {
-		pr_info("bluesleep: %s: get qos\n", __func__);
 		pm_runtime_get_sync(up->port.dev);
 	}
 
@@ -1582,7 +1581,7 @@ void serial_pxa_assert_rts(int port)
 	spin_lock_irqsave(&up->port.lock, flags);
 	if (!serial_pxa_is_open(up)) {
 		spin_unlock_irqrestore(&up->port.lock, flags);
-		pr_info("%s: uart %d is shutdown\n", __func__, port);
+		pr_err("%s: uart %d is shutdown\n", __func__, port);
 		return;
 	}
 	serial_pxa_set_mctrl(&up->port, up->port.mctrl | TIOCM_RTS);
@@ -1610,7 +1609,7 @@ void serial_pxa_deassert_rts(int port)
 	spin_lock_irqsave(&up->port.lock, flags);
 	if (!serial_pxa_is_open(up)) {
 		spin_unlock_irqrestore(&up->port.lock, flags);
-		pr_info("%s: uart %d is shutdown\n", __func__, port);
+		pr_err("%s: uart %d is shutdown\n", __func__, port);
 		return;
 	}
 	serial_pxa_set_mctrl(&up->port, up->port.mctrl & ~TIOCM_RTS);
@@ -2021,9 +2020,6 @@ static void _pxa_timer_handler(struct uart_pxa_port *up)
 #if SUPPORT_POWER_QOS
 	pm_runtime_put_sync(up->port.dev);
 #endif
-	if (up->port.line == BT_UART_PORT) {
-		pr_info("bluesleep: %s: release qos\n", __func__);
-	}
 }
 
 static void pxa_timer_handler(struct timer_list *t)
diff --git a/drivers/usb/typec/husb239.c b/drivers/usb/typec/husb239.c
index 8badc635b179..340f50855b2c 100644
--- a/drivers/usb/typec/husb239.c
+++ b/drivers/usb/typec/husb239.c
@@ -671,6 +671,7 @@ static int husb239_chip_init(struct husb239 *husb239)
 	/* PORTROLE init */
 	ret = regmap_write(husb239->regmap, HUSB239_REG_PORTROLE,
 				HUSB239_REG_PORTROLE_ORIENTDEB |
+				HUSB239_REG_PORTROLE_DRP_TRY_SNK |
 				HUSB239_REG_PORTROLE_AUDIOACC |
 				HUSB239_REG_PORTROLE_DRP);
 	if (ret)
diff --git a/drivers/watchdog/k1x_wdt.c b/drivers/watchdog/k1x_wdt.c
index fad7d1755fe3..1a09822c8ac4 100644
--- a/drivers/watchdog/k1x_wdt.c
+++ b/drivers/watchdog/k1x_wdt.c
@@ -102,6 +102,8 @@ struct spa_wdt_info {
 	int ctrl;
 	bool wdt_clk_open;
 	int enable_restart_handler;
+	unsigned int last_timeout_tick;
+	bool enable_to_suspend;
 	struct notifier_block restart_handler;
 };
 
@@ -178,6 +180,7 @@ static int spa_wdt_set_timeout(struct watchdog_device *wdd, unsigned timeout)
 		tick = timeout << DEFAULT_SHIFT;
 	}
 
+	info->last_timeout_tick = tick;
 	spa_wdt_write(info, WDT_WMR, tick);
 
 	wdd->timeout = timeout;
@@ -600,6 +603,7 @@ static int spa_wdt_probe(struct platform_device *pdev)
 	}
 
 	info->dev = &pdev->dev;
+	info->enable_to_suspend = false;
 
 #ifdef CONFIG_K1X_WDT_TEST
 	irq = platform_get_irq(pdev, 0);
@@ -766,8 +770,15 @@ static int spa_wdt_suspend(struct platform_device *pdev, pm_message_t state)
 		/* turn watchdog off */
 		hrtimer_cancel(&info->feed_timer);
 		spa_wdt_stop(&info->wdt_dev);
+		goto exit;
 	}
 
+	if(spa_wdt_read(info, WDT_WMER)|0x1) {
+		spa_wdt_stop(&info->wdt_dev);
+		info->enable_to_suspend = true;
+	}
+
+exit:
 	return 0;
 }
 
@@ -778,8 +789,15 @@ static int spa_wdt_resume(struct platform_device *pdev)
 	if (info->ctrl) {
 		spa_wdt_start(&info->wdt_dev);
 		hrtimer_start(&info->feed_timer, info->feed_timeout, HRTIMER_MODE_REL);
+		goto exit;
 	}
 
+	if(info->enable_to_suspend == true) {
+		spa_wdt_start(&info->wdt_dev);
+		spa_wdt_write(info, WDT_WMR, info->last_timeout_tick);
+		info->enable_to_suspend = false;
+	}
+exit:
 	return 0;
 }
 
diff --git a/include/dt-bindings/clock/spacemit-k1x-clock.h b/include/dt-bindings/clock/spacemit-k1x-clock.h
index be4c4e1f834b..cff282ac6256 100644
--- a/include/dt-bindings/clock/spacemit-k1x-clock.h
+++ b/include/dt-bindings/clock/spacemit-k1x-clock.h
@@ -195,26 +195,35 @@
 #define CLK_RCPU_CAN        184
 #define CLK_RCPU_CAN_BUS    185
 
-#define CLK_RCPU2_PWM       186
+#define CLK_RCPU_I2C0       186
+#define CLK_RCPU_SSP0       187
+#define CLK_RCPU_IR         188
+#define CLK_RCPU_UART0      189
+#define CLK_RCPU_UART1      190
 
-#define CLK_RCPU_I2C0       187
-#define CLK_RCPU_SSP0       188
-#define CLK_RCPU_IR         189
-#define CLK_RCPU_UART0      190
-#define CLK_RCPU_UART1      191
+#define CLK_DPLL1           191
+#define CLK_DPLL2           192
 
-#define CLK_DPLL1           192
-#define CLK_DPLL2           193
+#define CLK_DFC_LVL0        193
+#define CLK_DFC_LVL1        194
+#define CLK_DFC_LVL2        195
+#define CLK_DFC_LVL3        196
+#define CLK_DFC_LVL4        197
+#define CLK_DFC_LVL5        198
+#define CLK_DFC_LVL6        199
+#define CLK_DFC_LVL7        200
+#define CLK_DDR             201
 
-#define CLK_DFC_LVL0        194
-#define CLK_DFC_LVL1        195
-#define CLK_DFC_LVL2        196
-#define CLK_DFC_LVL3        197
-#define CLK_DFC_LVL4        198
-#define CLK_DFC_LVL5        199
-#define CLK_DFC_LVL6        200
-#define CLK_DFC_LVL7        201
-#define CLK_DDR             202
+#define CLK_RCPU2_PWM0      202
+#define CLK_RCPU2_PWM1      203
+#define CLK_RCPU2_PWM2      204
+#define CLK_RCPU2_PWM3      205
+#define CLK_RCPU2_PWM4      206
+#define CLK_RCPU2_PWM5      207
+#define CLK_RCPU2_PWM6      208
+#define CLK_RCPU2_PWM7      209
+#define CLK_RCPU2_PWM8      210
+#define CLK_RCPU2_PWM9      211
 
-#define CLK_MAX_NO      203
+#define CLK_MAX_NO      212
 #endif /* _DT_BINDINGS_CLK_SPACEMIT_K1X_H_ */
diff --git a/include/dt-bindings/reset/spacemit-k1x-reset.h b/include/dt-bindings/reset/spacemit-k1x-reset.h
index 752995127334..de94abdc7be7 100644
--- a/include/dt-bindings/reset/spacemit-k1x-reset.h
+++ b/include/dt-bindings/reset/spacemit-k1x-reset.h
@@ -115,14 +115,23 @@
 #define	RESET_RCPU_HDMIAUDIO 101
 #define	RESET_RCPU_CAN       102
 
-#define	RESET_RCPU2_PWM      103
+#define	RESET_RCPU_I2C0      103
+#define	RESET_RCPU_SSP0      104
+#define	RESET_RCPU_IR        105
+#define	RESET_RCPU_UART0     106
+#define	RESET_RCPU_UART1     107
 
-#define	RESET_RCPU_I2C0      104
-#define	RESET_RCPU_SSP0      105
-#define	RESET_RCPU_IR        106
-#define	RESET_RCPU_UART0     107
-#define	RESET_RCPU_UART1     108
+#define	RESET_RCPU2_PWM0     108
+#define	RESET_RCPU2_PWM1     109
+#define	RESET_RCPU2_PWM2     110
+#define	RESET_RCPU2_PWM3     111
+#define	RESET_RCPU2_PWM4     112
+#define	RESET_RCPU2_PWM5     113
+#define	RESET_RCPU2_PWM6     114
+#define	RESET_RCPU2_PWM7     115
+#define	RESET_RCPU2_PWM8     116
+#define	RESET_RCPU2_PWM9     117
 
-#define	RESET_NUMBER         109
+#define	RESET_NUMBER         118
 
 #endif /* __DT_BINDINGS_RESET_SAPCEMIT_K1X_H__ */
diff --git a/include/linux/pm_wakeirq.h b/include/linux/pm_wakeirq.h
index d9642c6cf852..b19e8f410b86 100644
--- a/include/linux/pm_wakeirq.h
+++ b/include/linux/pm_wakeirq.h
@@ -8,6 +8,9 @@
 
 extern int dev_pm_set_wake_irq(struct device *dev, int irq);
 extern int dev_pm_set_dedicated_wake_irq(struct device *dev, int irq);
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+extern int dev_pm_set_dedicated_wake_irq_spacemit(struct device *dev, int irq, int trigger_tyep);
+#endif
 extern int dev_pm_set_dedicated_wake_irq_reverse(struct device *dev, int irq);
 extern void dev_pm_clear_wake_irq(struct device *dev);
 
@@ -23,6 +26,13 @@ static inline int dev_pm_set_dedicated_wake_irq(struct device *dev, int irq)
 	return 0;
 }
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+static inline int dev_pm_set_dedicated_wake_irq_spacemit(struct device *dev, int irq)
+{
+	return 0;
+}
+#endif
+
 static inline int dev_pm_set_dedicated_wake_irq_reverse(struct device *dev, int irq)
 {
 	return 0;
diff --git a/include/uapi/media/k1x/k1x_ccic_uapi.h b/include/uapi/media/k1x/k1x_ccic_uapi.h
new file mode 100644
index 000000000000..b4ce3de050f2
--- /dev/null
+++ b/include/uapi/media/k1x/k1x_ccic_uapi.h
@@ -0,0 +1,37 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ * mars11_ccic_uapi.h - Driver uapi for SPACEMIT K1X CCIC
+ *
+ * Copyright (C) 2024 SPACEMIT Micro Limited
+ */
+
+#ifndef _UAPI_LINUX_K1X_CCIC_H_
+#define _UAPI_LINUX_K1X_CCIC_H_
+//#include <linux/videodev2.h>
+
+enum {
+	CCIC_MODE_NM = 0,
+	CCIC_MODE_VC,
+	CCIC_MODE_VCDT,
+};
+
+enum {
+	CCIC_CH_MODE_MAIN = 0,
+	CCIC_CH_MODE_SUB,
+};
+
+struct v4l2_ccic_params {
+	unsigned int lane_num;
+	int ccic_mode;
+	int ch_mode;
+	unsigned int main_ccic_id;
+	unsigned int main_vc;
+	unsigned int sub_vc;
+	unsigned int main_dt;
+	unsigned int sub_dt;
+};
+
+
+#define BASE_VIDIOC_CCIC		(BASE_VIDIOC_PRIVATE + 20)
+#define VIDIOC_CCIC_S_PARAMS	_IOWR('V', BASE_VIDIOC_CCIC + 1, struct v4l2_ccic_params)
+#endif
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 7c89b174d96f..095c7e012410 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -108,6 +108,7 @@ config SND_SOC_ALL_CODECS
 	imply SND_SOC_DMIC
 	imply SND_SOC_ES8156
 	imply SND_SOC_ES8316
+	imply SND_SOC_ES8323
 	imply SND_SOC_ES8326
 	imply SND_SOC_ES8328_SPI
 	imply SND_SOC_ES8328_I2C
@@ -1063,6 +1064,10 @@ config SND_SOC_ES8316
 	tristate "Everest Semi ES8316 CODEC"
 	depends on I2C
 
+config SND_SOC_ES8323
+	tristate "Everest Semi ES8323 CODEC"
+	depends on I2C
+
 config SND_SOC_ES8326
 	tristate "Everest Semi ES8326 CODEC"
 	depends on I2C
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 34764d3d17f6..a983fc4b6946 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -117,6 +117,7 @@ snd-soc-es7210-objs := es7210.o
 snd-soc-es7241-objs := es7241.o
 snd-soc-es8156-objs := es8156.o
 snd-soc-es8316-objs := es8316.o
+snd-soc-es8323-objs := es8323.o
 snd-soc-es8326-objs := es8326.o
 snd-soc-es8328-objs := es8328.o
 snd-soc-es8328-i2c-objs := es8328-i2c.o
@@ -505,6 +506,7 @@ obj-$(CONFIG_SND_SOC_ES7210)	+= snd-soc-es7210.o
 obj-$(CONFIG_SND_SOC_ES7241)	+= snd-soc-es7241.o
 obj-$(CONFIG_SND_SOC_ES8156)	+= snd-soc-es8156.o
 obj-$(CONFIG_SND_SOC_ES8316)    += snd-soc-es8316.o
+obj-$(CONFIG_SND_SOC_ES8323)    += snd-soc-es8323.o
 obj-$(CONFIG_SND_SOC_ES8326)    += snd-soc-es8326.o
 obj-$(CONFIG_SND_SOC_ES8328)	+= snd-soc-es8328.o
 obj-$(CONFIG_SND_SOC_ES8328_I2C)+= snd-soc-es8328-i2c.o
diff --git a/sound/soc/codecs/es8323.c b/sound/soc/codecs/es8323.c
new file mode 100644
index 000000000000..776fe2a41b4e
--- /dev/null
+++ b/sound/soc/codecs/es8323.c
@@ -0,0 +1,957 @@
+// SPDX-License-Identifier: GPL-2.0
+//
+// es8323.c -- es8323 ALSA SoC audio driver
+//
+// Copyright (c) 2016 Rockchip Electronics Co. Ltd.
+//
+// Author: Mark Brown <will@everset-semi.com>
+// Author: Jianqun Xu <jay.xu@rock-chips.com>
+// Author: Nickey Yang <nickey.yang@rock-chips.com>
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/pm.h>
+#include <linux/i2c.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/tlv.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/initval.h>
+#include <linux/proc_fs.h>
+#include "es8323.h"
+#ifdef SPACEMIT_CONFIG_CODEC_ES8323
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#endif
+
+#define NR_SUPPORTED_MCLK_LRCK_RATIOS 5
+static const unsigned int supported_mclk_lrck_ratios[NR_SUPPORTED_MCLK_LRCK_RATIOS] = {
+	256, 384, 512, 768, 1024
+};
+
+#define es8323_DEF_VOL	0x1b
+
+static int es8323_set_bias_level(struct snd_soc_component *component,
+				 enum snd_soc_bias_level level);
+
+static struct reg_default es8323_reg_defaults[] = {
+	{ 0x00, 0x06 },
+	{ 0x01, 0x1c },
+	{ 0x02, 0xc3 },
+	{ 0x03, 0xfc },
+	{ 0x04, 0xc0 },
+	{ 0x05, 0x00 },
+	{ 0x06, 0x00 },
+	{ 0x07, 0x7c },
+	{ 0x08, 0x80 },
+	{ 0x09, 0x00 },
+	{ 0x0a, 0x00 },
+	{ 0x0b, 0x06 },
+	{ 0x0c, 0x00 },
+	{ 0x0d, 0x06 },
+	{ 0x0e, 0x30 },
+	{ 0x0f, 0x30 },
+	{ 0x10, 0xc0 },
+	{ 0x11, 0xc0 },
+	{ 0x12, 0x38 },
+	{ 0x13, 0xb0 },
+	{ 0x14, 0x32 },
+	{ 0x15, 0x06 },
+	{ 0x16, 0x00 },
+	{ 0x17, 0x00 },
+	{ 0x18, 0x06 },
+	{ 0x19, 0x30 },
+	{ 0x1a, 0xc0 },
+	{ 0x1b, 0xc0 },
+	{ 0x1c, 0x08 },
+	{ 0x1d, 0x06 },
+	{ 0x1e, 0x1f },
+	{ 0x1f, 0xf7 },
+	{ 0x20, 0xfd },
+	{ 0x21, 0xff },
+	{ 0x22, 0x1f },
+	{ 0x23, 0xf7 },
+	{ 0x24, 0xfd },
+	{ 0x25, 0xff },
+	{ 0x26, 0x00 },
+	{ 0x27, 0x38 },
+	{ 0x28, 0x38 },
+	{ 0x29, 0x38 },
+	{ 0x2a, 0x38 },
+	{ 0x2b, 0x38 },
+	{ 0x2c, 0x38 },
+};
+
+/* codec private data */
+struct es8323_priv {
+	unsigned int sysclk;
+	unsigned int allowed_rates[NR_SUPPORTED_MCLK_LRCK_RATIOS];
+	struct clk *mclk;
+	struct snd_pcm_hw_constraint_list sysclk_constraints;
+	struct snd_soc_component *component;
+	struct regmap *regmap;
+	#ifdef SPACEMIT_CONFIG_CODEC_ES8323
+	int earphone_sw_gpio;
+	#endif
+};
+
+static int es8323_reset(struct snd_soc_component *component)
+{
+	snd_soc_component_write(component, ES8323_CONTROL1, 0x80);
+	return snd_soc_component_write(component, ES8323_CONTROL1, 0x00);
+}
+
+static const char * const es8323_line_texts[] = {
+	"Line 1", "Line 2", "PGA"
+};
+
+static const unsigned int es8323_line_values[] = {
+	0, 1, 3
+};
+
+static const char * const es8323_pga_sell[] = {"Line 1L", "Line 2L", "DifferentialL"};
+static const char * const es8323_pga_selr[] = {"Line 1R", "Line 2R", "DifferentialR"};
+static const char * const es8323_lin_sell[] = {"Line 1L", "Line 2L", "NC", "MicL"};
+static const char * const es8323_lin_selr[] = {"Line 1R", "Line 2R", "NC", "MicR"};
+
+static const char * const stereo_3d_txt[] = {
+	"No 3D  ", "Level 1", "Level 2",
+	"Level 3", "Level 4", "Level 5",
+	"Level 6", "Level 7"
+};
+
+static const char * const alc_func_txt[] = {
+	"Off", "Right", "Left", "Stereo"
+};
+
+static const char * const ng_type_txt[] = {
+	"Constant PGA Gain", "Mute ADC Output"
+};
+
+static const char * const deemph_txt[] = {
+	"None", "32Khz", "44.1Khz", "48Khz"
+};
+
+static const char * const adcpol_txt[] = {
+	"Normal", "L Invert", "R Invert", "L + R Invert"
+};
+
+static const char * const es8323_mono_mux[] = {
+	"Stereo", "Mono (Left)", "Mono (Right)"
+};
+
+static const char * const es8323_diff_sel[] = {
+	"Line 1", "Line 2"
+};
+
+SOC_VALUE_ENUM_SINGLE_DECL(es8323_left_dac_enum, ES8323_ADCCONTROL2, 6, 3, es8323_pga_sell, es8323_line_values);
+SOC_VALUE_ENUM_SINGLE_DECL(es8323_right_dac_enum, ES8323_ADCCONTROL2, 4, 3, es8323_pga_selr, es8323_line_values);
+static SOC_ENUM_SINGLE_DECL(es8323_diff_enum, ES8323_ADCCONTROL3, 7, es8323_diff_sel);
+static SOC_ENUM_SINGLE_DECL(es8323_llin_enum, ES8323_DACCONTROL16, 3, es8323_lin_sell);
+static SOC_ENUM_SINGLE_DECL(es8323_rlin_enum, ES8323_DACCONTROL16, 0, es8323_lin_selr);
+static SOC_ENUM_SINGLE_DECL(es8323_mono_enum, ES8323_ADCCONTROL3, 3, es8323_mono_mux);
+
+static const struct soc_enum es8323_enum[] = {
+	SOC_VALUE_ENUM_SINGLE(ES8323_DACCONTROL16, 3, 7, ARRAY_SIZE(es8323_line_texts), es8323_line_texts, es8323_line_values),	/* LLINE */
+	SOC_VALUE_ENUM_SINGLE(ES8323_DACCONTROL16, 0, 7, ARRAY_SIZE(es8323_line_texts), es8323_line_texts, es8323_line_values),	/* RLINE */
+	SOC_VALUE_ENUM_SINGLE(ES8323_ADCCONTROL2, 6, 3, ARRAY_SIZE(es8323_pga_sell), es8323_line_texts, es8323_line_values),	/* Left PGA Mux */
+	SOC_VALUE_ENUM_SINGLE(ES8323_ADCCONTROL2, 4, 3, ARRAY_SIZE(es8323_pga_sell), es8323_line_texts, es8323_line_values),	/* Right PGA Mux */
+	SOC_ENUM_SINGLE(ES8323_DACCONTROL7, 2, 8, stereo_3d_txt),	/* stereo-3d */
+	SOC_ENUM_SINGLE(ES8323_ADCCONTROL10, 6, 4, alc_func_txt),	/* alc func */
+	SOC_ENUM_SINGLE(ES8323_ADCCONTROL14, 1, 2, ng_type_txt),	/* noise gate type */
+	SOC_ENUM_SINGLE(ES8323_DACCONTROL6, 6, 4, deemph_txt),	/* Playback De-emphasis */
+	SOC_ENUM_SINGLE(ES8323_ADCCONTROL6, 6, 4, adcpol_txt),
+	SOC_ENUM_SINGLE(ES8323_ADCCONTROL3, 3, 3, es8323_mono_mux),
+	SOC_ENUM_SINGLE(ES8323_ADCCONTROL3, 7, 2, es8323_diff_sel),
+};
+
+static const DECLARE_TLV_DB_SCALE(adc_tlv, -9600, 50, 1);
+static const DECLARE_TLV_DB_SCALE(dac_tlv, -9600, 50, 1);
+static const DECLARE_TLV_DB_SCALE(out_tlv, -4500, 150, 0);
+static const DECLARE_TLV_DB_SCALE(bypass_tlv, 0, 300, 0);
+static const DECLARE_TLV_DB_SCALE(bypass_tlv2, -15, 300, 0);
+
+static const struct snd_kcontrol_new es8323_left_dac_mux_controls = SOC_DAPM_ENUM("Route", es8323_left_dac_enum);
+static const struct snd_kcontrol_new es8323_right_dac_mux_controls = SOC_DAPM_ENUM("Route", es8323_right_dac_enum);
+static const struct snd_kcontrol_new es8323_diffmux_controls = SOC_DAPM_ENUM("Route2", es8323_diff_enum);
+
+static const struct snd_kcontrol_new es8323_snd_controls[] = {
+	SOC_ENUM("3D Mode", es8323_enum[4]),
+	SOC_SINGLE("ALC Capture Target Volume", ES8323_ADCCONTROL11, 4, 15, 0),
+	SOC_SINGLE("ALC Capture Max PGA", ES8323_ADCCONTROL10, 3, 7, 0),
+	SOC_SINGLE("ALC Capture Min PGA", ES8323_ADCCONTROL10, 0, 7, 0),
+	SOC_ENUM("ALC Capture Function", es8323_enum[5]),
+	SOC_SINGLE("ALC Capture ZC Switch", ES8323_ADCCONTROL13, 6, 1, 0),
+	SOC_SINGLE("ALC Capture Hold Time", ES8323_ADCCONTROL11, 0, 15, 0),
+	SOC_SINGLE("ALC Capture Decay Time", ES8323_ADCCONTROL12, 4, 15, 0),
+	SOC_SINGLE("ALC Capture Attack Time", ES8323_ADCCONTROL12, 0, 15, 0),
+	SOC_SINGLE("ALC Capture NG Threshold", ES8323_ADCCONTROL14, 3, 31, 0),
+	SOC_ENUM("ALC Capture NG Type", es8323_enum[6]),
+	SOC_SINGLE("ALC Capture NG Switch", ES8323_ADCCONTROL14, 0, 1, 0),
+	SOC_SINGLE("ZC Timeout Switch", ES8323_ADCCONTROL13, 6, 1, 0),
+	SOC_DOUBLE_R_TLV("Capture Digital Volume", ES8323_ADCCONTROL8,
+			 ES8323_ADCCONTROL9, 0, 192, 1, adc_tlv),
+	SOC_SINGLE("Capture Mute", ES8323_ADCCONTROL7, 2, 1, 0),
+	SOC_SINGLE_TLV("Left Channel Capture Volume", ES8323_ADCCONTROL1, 4, 8,
+		       0, bypass_tlv),
+	SOC_SINGLE_TLV("Right Channel Capture Volume", ES8323_ADCCONTROL1, 0,
+		       8, 0, bypass_tlv),
+	SOC_ENUM("Playback De-emphasis", es8323_enum[7]),
+	SOC_ENUM("Capture Polarity", es8323_enum[8]),
+	SOC_DOUBLE_R_TLV("PCM Volume", ES8323_DACCONTROL4, ES8323_DACCONTROL5,
+			 0, 192, 1, dac_tlv),
+	SOC_SINGLE_TLV("Left Mixer Left Bypass Volume", ES8323_DACCONTROL17, 3,
+		       7, 1, bypass_tlv2),
+	SOC_SINGLE_TLV("Right Mixer Right Bypass Volume", ES8323_DACCONTROL20,
+		       3, 7, 1, bypass_tlv2),
+	SOC_DOUBLE_R_TLV("Output 1 Playback Volume", ES8323_DACCONTROL24,
+			 ES8323_DACCONTROL25, 0, 33, 0, out_tlv),
+	SOC_DOUBLE_R_TLV("Output 2 Playback Volume", ES8323_DACCONTROL26,
+			 ES8323_DACCONTROL27, 0, 33, 0, out_tlv),
+};
+
+static const struct snd_kcontrol_new es8323_left_line_controls =
+SOC_DAPM_ENUM("LLIN Mux", es8323_llin_enum);
+
+static const struct snd_kcontrol_new es8323_right_line_controls =
+SOC_DAPM_ENUM("RLIN Mux", es8323_rlin_enum);
+/* Mono ADC Mux */
+static const struct snd_kcontrol_new es8323_monomux_controls =
+SOC_DAPM_ENUM("Mono Mux", es8323_mono_enum);
+
+/* Left Mixer */
+static const struct snd_kcontrol_new es8323_left_mixer_controls[] = {
+	SOC_DAPM_SINGLE("Left Playback Switch", ES8323_DACCONTROL17, 7, 1, 0),
+	SOC_DAPM_SINGLE("Left Bypass Switch", ES8323_DACCONTROL17, 6, 1, 0),
+};
+
+/* Right Mixer */
+static const struct snd_kcontrol_new es8323_right_mixer_controls[] = {
+	SOC_DAPM_SINGLE("Right Playback Switch", ES8323_DACCONTROL20, 7, 1, 0),
+	SOC_DAPM_SINGLE("Right Bypass Switch", ES8323_DACCONTROL20, 6, 1, 0),
+};
+
+static const struct snd_soc_dapm_widget es8323_dapm_widgets[] = {
+	SND_SOC_DAPM_INPUT("LINPUT1"),
+	SND_SOC_DAPM_INPUT("LINPUT2"),
+	SND_SOC_DAPM_INPUT("RINPUT1"),
+	SND_SOC_DAPM_INPUT("RINPUT2"),
+	SND_SOC_DAPM_MUX("Left PGA Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_left_dac_mux_controls),
+	SND_SOC_DAPM_MUX("Right PGA Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_right_dac_mux_controls),
+	SND_SOC_DAPM_MICBIAS("Mic Bias", ES8323_ADCPOWER, 3, 1),
+
+	SND_SOC_DAPM_MUX("Differential Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_diffmux_controls),
+
+	SND_SOC_DAPM_MUX("Left ADC Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_monomux_controls),
+	SND_SOC_DAPM_MUX("Right ADC Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_monomux_controls),
+
+	SND_SOC_DAPM_MUX("Left Line Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_left_line_controls),
+	SND_SOC_DAPM_MUX("Right Line Mux", SND_SOC_NOPM, 0, 0,
+			 &es8323_right_line_controls),
+
+	SND_SOC_DAPM_ADC("Right ADC", "Right Capture", ES8323_ADCPOWER, 4, 1),
+	SND_SOC_DAPM_ADC("Left ADC", "Left Capture", ES8323_ADCPOWER, 5, 1),
+
+	/* gModify.Cmmt Implement when suspend/startup */
+	SND_SOC_DAPM_DAC("Right DAC", "Right Playback", ES8323_DACPOWER, 6, 1),
+	SND_SOC_DAPM_DAC("Left DAC", "Left Playback", ES8323_DACPOWER, 7, 1),
+
+	SND_SOC_DAPM_AIF_OUT("I2S OUT", "Capture",  0, SND_SOC_NOPM, 0, 0),
+	SND_SOC_DAPM_AIF_IN("I2S IN", "Playback", 0, SND_SOC_NOPM, 0, 0),
+
+	SND_SOC_DAPM_MIXER("Left Mixer", SND_SOC_NOPM, 0, 0,
+			   &es8323_left_mixer_controls[0],
+			   ARRAY_SIZE(es8323_left_mixer_controls)),
+	SND_SOC_DAPM_MIXER("Right Mixer", SND_SOC_NOPM, 0, 0,
+			   &es8323_right_mixer_controls[0],
+			   ARRAY_SIZE(es8323_right_mixer_controls)),
+	SND_SOC_DAPM_PGA("Right ADC Power", ES8323_ADCPOWER, 6, 1, NULL, 0),
+	SND_SOC_DAPM_PGA("Left ADC Power", ES8323_ADCPOWER, 7, 1, NULL, 0),
+	SND_SOC_DAPM_PGA("Right Out 2", ES8323_DACPOWER, 2, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("Left Out 2", ES8323_DACPOWER, 3, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("Right Out 1", ES8323_DACPOWER, 4, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("Left Out 1", ES8323_DACPOWER, 5, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("LAMP", ES8323_ADCCONTROL1, 4, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("RAMP", ES8323_ADCCONTROL1, 0, 0, NULL, 0),
+
+	SND_SOC_DAPM_OUTPUT("LOUT1"),
+	SND_SOC_DAPM_OUTPUT("ROUT1"),
+	SND_SOC_DAPM_OUTPUT("LOUT2"),
+	SND_SOC_DAPM_OUTPUT("ROUT2"),
+	SND_SOC_DAPM_OUTPUT("VREF"),
+};
+
+static const struct snd_soc_dapm_route audio_map[] = {
+	{"Left PGA Mux", "Line 1L", "LINPUT1"},
+	{"Left PGA Mux", "Line 2L", "LINPUT2"},
+	{"Left PGA Mux", "DifferentialL", "Differential Mux"},
+
+	{"Right PGA Mux", "Line 1R", "RINPUT1"},
+	{"Right PGA Mux", "Line 2R", "RINPUT2"},
+	{"Right PGA Mux", "DifferentialR", "Differential Mux"},
+
+	{"Differential Mux", "Line 1", "LINPUT1"},
+	{"Differential Mux", "Line 1", "RINPUT1"},
+	{"Differential Mux", "Line 2", "LINPUT2"},
+	{"Differential Mux", "Line 2", "RINPUT2"},
+
+	{"Left ADC Mux", "Stereo", "Right PGA Mux"},
+	{"Left ADC Mux", "Stereo", "Left PGA Mux"},
+	{"Left ADC Mux", "Mono (Left)", "Left PGA Mux"},
+
+	{"Right ADC Mux", "Stereo", "Left PGA Mux"},
+	{"Right ADC Mux", "Stereo", "Right PGA Mux"},
+	{"Right ADC Mux", "Mono (Right)", "Right PGA Mux"},
+
+	{"Left ADC Power", NULL, "Left ADC Mux"},
+	{"Right ADC Power", NULL, "Right ADC Mux"},
+	{"Left ADC", NULL, "Left ADC Power"},
+	{"Right ADC", NULL, "Right ADC Power"},
+
+	{"I2S OUT", NULL, "Left ADC"},
+	{"I2S OUT", NULL, "Right ADC"},
+
+	{"Left Line Mux", "Line 1L", "LINPUT1"},
+	{"Left Line Mux", "Line 2L", "LINPUT2"},
+	{"Left Line Mux", "MicL", "Left PGA Mux"},
+
+	{"Right Line Mux", "Line 1R", "RINPUT1"},
+	{"Right Line Mux", "Line 2R", "RINPUT2"},
+	{"Right Line Mux", "MicR", "Right PGA Mux"},
+
+	{"Right DAC", NULL, "I2S IN"},
+	{"Left DAC", NULL, "I2S IN"},
+
+	{"Left Mixer", "Left Playback Switch", "Left DAC"},
+	{"Left Mixer", "Left Bypass Switch", "Left Line Mux"},
+
+	{"Right Mixer", "Right Playback Switch", "Right DAC"},
+	{"Right Mixer", "Right Bypass Switch", "Right Line Mux"},
+
+	{"Left Out 1", NULL, "Left Mixer"},
+	{"LOUT1", NULL, "Left Out 1"},
+	{"Right Out 1", NULL, "Right Mixer"},
+	{"ROUT1", NULL, "Right Out 1"},
+
+	{"Left Out 2", NULL, "Left Mixer"},
+	{"LOUT2", NULL, "Left Out 2"},
+	{"Right Out 2", NULL, "Right Mixer"},
+	{"ROUT2", NULL, "Right Out 2"},
+};
+
+struct _coeff_div {
+	u32 mclk;
+	u32 rate;
+	u16 fs;
+	u8 sr:4;
+	u8 usb:1;
+};
+
+/* codec hifi mclk clock divider coefficients */
+static const struct _coeff_div coeff_div[] = {
+	/* 8k */
+	{2048000, 8000, 256, 0x2, 0x0},
+	{4096000, 8000, 512, 0x4, 0x0},
+	{12288000, 8000, 1536, 0xa, 0x0},
+	{11289600, 8000, 1408, 0x9, 0x0},
+	{18432000, 8000, 2304, 0xc, 0x0},
+	{16934400, 8000, 2112, 0xb, 0x0},
+	{12000000, 8000, 1500, 0xb, 0x1},
+
+	/* 11.025k */
+	{11289600, 11025, 1024, 0x7, 0x0},
+	{16934400, 11025, 1536, 0xa, 0x0},
+	{12000000, 11025, 1088, 0x9, 0x1},
+
+	/* 16k */
+	{4096000, 16000, 256, 0x2, 0x0},
+	{8192000, 16000, 512, 0x4, 0x0},
+	{12288000, 16000, 768, 0x6, 0x0},
+	{18432000, 16000, 1152, 0x8, 0x0},
+	{12000000, 16000, 750, 0x7, 0x1},
+
+	/* 22.05k */
+	{11289600, 22050, 512, 0x4, 0x0},
+	{16934400, 22050, 768, 0x6, 0x0},
+	{12000000, 22050, 544, 0x6, 0x1},
+
+	/* 32k */
+	{8192000, 32000, 256, 0x2, 0x0},
+	{16384000, 32000, 512, 0x4, 0x0},
+	{12288000, 32000, 384, 0x3, 0x0},
+	{18432000, 32000, 576, 0x5, 0x0},
+	{12000000, 32000, 375, 0x4, 0x1},
+
+	/* 44.1k */
+	{11289600, 44100, 256, 0x2, 0x0},
+	{16934400, 44100, 384, 0x3, 0x0},
+	{12000000, 44100, 272, 0x3, 0x1},
+
+	/* 48k */
+	{12288000, 48000, 256, 0x2, 0x0},
+	{18432000, 48000, 384, 0x3, 0x0},
+	{12000000, 48000, 250, 0x2, 0x1},
+
+	/* 88.2k */
+	{11289600, 88200, 128, 0x0, 0x0},
+	{16934400, 88200, 192, 0x1, 0x0},
+	{12000000, 88200, 136, 0x1, 0x1},
+
+	/* 96k */
+	{12288000, 96000, 128, 0x0, 0x0},
+	{18432000, 96000, 192, 0x1, 0x0},
+	{12000000, 96000, 125, 0x0, 0x1},
+};
+
+static inline int get_coeff(int mclk, int rate)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(coeff_div); i++) {
+		if (coeff_div[i].rate == rate && coeff_div[i].mclk == mclk)
+			return i;
+	}
+
+	return -EINVAL;
+}
+
+/*
+ * Note that this should be called from init rather than from hw_params.
+ */
+static int es8323_set_dai_sysclk(struct snd_soc_dai *codec_dai,
+				 int clk_id, unsigned int freq, int dir)
+{
+	struct snd_soc_component *component = codec_dai->component;
+	struct es8323_priv *es8323 = snd_soc_component_get_drvdata(component);
+#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+	int i, ret;
+#else
+	int i;
+#endif
+	int count = 0;
+
+	es8323->sysclk = freq;
+	if (freq == 0) {
+		es8323->sysclk_constraints.list = NULL;
+		es8323->sysclk_constraints.count = 0;
+
+		return 0;
+	}
+#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+	ret = clk_set_rate(es8323->mclk, freq);
+	if (ret)
+		return ret;
+#endif
+	/* Limit supported sample rates to ones that can be autodetected
+	 * by the codec running in slave mode.
+	 */
+	for (i = 0; i < NR_SUPPORTED_MCLK_LRCK_RATIOS; i++) {
+		const unsigned int ratio = supported_mclk_lrck_ratios[i];
+
+		if (freq % ratio == 0)
+			es8323->allowed_rates[count++] = freq / ratio;
+	}
+
+	es8323->sysclk_constraints.list = es8323->allowed_rates;
+	es8323->sysclk_constraints.count = count;
+
+	return 0;
+}
+
+static int es8323_set_dai_fmt(struct snd_soc_dai *codec_dai, unsigned int fmt)
+{
+	struct snd_soc_component *component = codec_dai->component;
+	u8 iface = 0;
+	u8 adciface = 0;
+	u8 daciface = 0;
+
+	iface = snd_soc_component_read(component, ES8323_IFACE);
+	adciface = snd_soc_component_read(component, ES8323_ADC_IFACE);
+	daciface = snd_soc_component_read(component, ES8323_DAC_IFACE);
+
+	/* set master/slave audio interface */
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBM_CFM:	/* MASTER MODE */
+		iface |= 0x80;
+		break;
+	case SND_SOC_DAIFMT_CBS_CFS:	/* SLAVE MODE */
+		iface &= 0x7F;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* interface format */
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+		adciface &= 0xFC;
+		daciface &= 0xF9;
+		break;
+	case SND_SOC_DAIFMT_RIGHT_J:
+		break;
+	case SND_SOC_DAIFMT_LEFT_J:
+		break;
+	case SND_SOC_DAIFMT_DSP_A:
+		break;
+	case SND_SOC_DAIFMT_DSP_B:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* clock inversion */
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		iface &= 0xDF;
+		adciface &= 0xDF;
+		daciface &= 0xBF;
+		break;
+	case SND_SOC_DAIFMT_IB_IF:
+		iface |= 0x20;
+		adciface |= 0x20;
+		daciface |= 0x40;
+		break;
+	case SND_SOC_DAIFMT_IB_NF:
+		iface |= 0x20;
+		adciface &= 0xDF;
+		daciface &= 0xBF;
+		break;
+	case SND_SOC_DAIFMT_NB_IF:
+		iface &= 0xDF;
+		adciface |= 0x20;
+		daciface |= 0x40;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	snd_soc_component_write(component, ES8323_IFACE, iface);
+	snd_soc_component_write(component, ES8323_ADC_IFACE, adciface);
+	snd_soc_component_write(component, ES8323_DAC_IFACE, daciface);
+
+	return 0;
+}
+
+static int es8323_pcm_startup(struct snd_pcm_substream *substream,
+			      struct snd_soc_dai *dai)
+{
+	return 0;
+}
+
+static int es8323_pcm_hw_params(struct snd_pcm_substream *substream,
+				struct snd_pcm_hw_params *params,
+				struct snd_soc_dai *dai)
+{
+	struct snd_soc_component *component = dai->component;
+	struct es8323_priv *es8323 = snd_soc_component_get_drvdata(component);
+	u16 srate = snd_soc_component_read(component, ES8323_IFACE) & 0x80;
+	u16 adciface = snd_soc_component_read(component, ES8323_ADC_IFACE) & 0xE3;
+	u16 daciface = snd_soc_component_read(component, ES8323_DAC_IFACE) & 0xC7;
+	int coeff;
+	int i;
+
+	/* Validate supported sample rates that are autodetected from MCLK */
+	for (i = 0; i < NR_SUPPORTED_MCLK_LRCK_RATIOS; i++) {
+		const unsigned int ratio = supported_mclk_lrck_ratios[i];
+
+		if (es8323->sysclk % ratio != 0)
+			continue;
+		if (es8323->sysclk / ratio == params_rate(params))
+			break;
+	}
+	if (i == NR_SUPPORTED_MCLK_LRCK_RATIOS) {
+		dev_err(component->dev,
+			"Unsupported sample rate %dHz with %dHz MCLK\n",
+			params_rate(params), es8323->sysclk);
+		return -EINVAL;
+	}
+	coeff = get_coeff(es8323->sysclk, params_rate(params));
+	if (coeff < 0) {
+		coeff = get_coeff(es8323->sysclk / 2, params_rate(params));
+		srate |= 0x40;
+	}
+	if (coeff < 0) {
+		dev_err(component->dev,
+			"Unable to configure sample rate %dHz with %dHz MCLK\n",
+			params_rate(params), es8323->sysclk);
+		return coeff;
+	}
+
+	/* bit size */
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		adciface |= 0x000C;
+		daciface |= 0x0018;
+		break;
+	case SNDRV_PCM_FORMAT_S20_3LE:
+		adciface |= 0x0004;
+		daciface |= 0x0008;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		adciface |= 0x0010;
+		daciface |= 0x0020;
+		break;
+	}
+
+	/* set iface & srate */
+	snd_soc_component_write(component, ES8323_DAC_IFACE, daciface);
+	snd_soc_component_write(component, ES8323_ADC_IFACE, adciface);
+
+	if (coeff >= 0) {
+		snd_soc_component_write(component, ES8323_IFACE, srate);
+		snd_soc_component_write(component, ES8323_ADCCONTROL5,
+					coeff_div[coeff].sr |
+					coeff_div[coeff].usb << 4);
+		snd_soc_component_write(component, ES8323_DACCONTROL2,
+					coeff_div[coeff].sr |
+					coeff_div[coeff].usb << 4);
+	}
+
+	return 0;
+}
+
+static int es8323_mute(struct snd_soc_dai *dai, int mute, int stream)
+{
+	return 0;
+}
+
+static int es8323_set_bias_level(struct snd_soc_component *component,
+				 enum snd_soc_bias_level level)
+{
+	#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+	struct es8323_priv *es8323 = snd_soc_component_get_drvdata(component);
+	int ret;
+	#endif
+
+	switch (level) {
+	case SND_SOC_BIAS_ON:
+		dev_dbg(component->dev, "%s on\n", __func__);
+		break;
+	case SND_SOC_BIAS_PREPARE:
+		dev_dbg(component->dev, "%s prepare\n", __func__);
+		#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+		if (IS_ERR(es8323->mclk))
+			break;
+		if (snd_soc_component_get_bias_level(component) == SND_SOC_BIAS_ON) {
+			clk_disable_unprepare(es8323->mclk);
+		} else {
+			ret = clk_prepare_enable(es8323->mclk);
+			if (ret)
+				return ret;
+		}
+		#endif
+		snd_soc_component_write(component, ES8323_ANAVOLMANAG, 0x7C);
+		snd_soc_component_write(component, ES8323_CHIPLOPOW1, 0x00);
+		snd_soc_component_write(component, ES8323_CHIPLOPOW2, 0x00);
+		snd_soc_component_write(component, ES8323_CHIPPOWER, 0x00);
+		snd_soc_component_write(component, ES8323_ADCPOWER, 0x59);
+		break;
+	case SND_SOC_BIAS_STANDBY:
+		dev_dbg(component->dev, "%s standby\n", __func__);
+		snd_soc_component_write(component, ES8323_ANAVOLMANAG, 0x7C);
+		snd_soc_component_write(component, ES8323_CHIPLOPOW1, 0x00);
+		snd_soc_component_write(component, ES8323_CHIPLOPOW2, 0x00);
+		snd_soc_component_write(component, ES8323_CHIPPOWER, 0x00);
+		snd_soc_component_write(component, ES8323_ADCPOWER, 0x59);
+		break;
+	case SND_SOC_BIAS_OFF:
+		dev_dbg(component->dev, "%s off\n", __func__);
+		snd_soc_component_write(component, ES8323_ADCPOWER, 0xFF);
+		snd_soc_component_write(component, ES8323_DACPOWER, 0xC0);
+		snd_soc_component_write(component, ES8323_CHIPLOPOW1, 0xFF);
+		snd_soc_component_write(component, ES8323_CHIPLOPOW2, 0xFF);
+		snd_soc_component_write(component, ES8323_CHIPPOWER, 0xFF);
+		snd_soc_component_write(component, ES8323_ANAVOLMANAG, 0x7B);
+		break;
+	}
+	return 0;
+}
+
+#define es8323_RATES SNDRV_PCM_RATE_8000_96000
+
+#define es8323_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE |\
+	SNDRV_PCM_FMTBIT_S24_LE)
+
+static struct snd_soc_dai_ops es8323_ops = {
+	.startup = es8323_pcm_startup,
+	.hw_params = es8323_pcm_hw_params,
+	.set_fmt = es8323_set_dai_fmt,
+	.set_sysclk = es8323_set_dai_sysclk,
+	.mute_stream = es8323_mute,
+	.no_capture_mute = 1,
+};
+
+static struct snd_soc_dai_driver es8323_dai = {
+	.name = "ES8323 HiFi",
+	.playback = {
+		     .stream_name = "Playback",
+		     .channels_min = 1,
+		     .channels_max = 2,
+		     .rates = es8323_RATES,
+		     .formats = es8323_FORMATS,
+		     },
+	.capture = {
+		    .stream_name = "Capture",
+		    .channels_min = 1,
+		    .channels_max = 2,
+		    .rates = es8323_RATES,
+		    .formats = es8323_FORMATS,
+		    },
+	.ops = &es8323_ops,
+	.symmetric_rate = 1,
+};
+
+static int es8323_suspend(struct snd_soc_component *component)
+{
+	struct es8323_priv *es8323 = snd_soc_component_get_drvdata(component);
+
+	snd_soc_component_write(component, 0x19, 0x06);
+	snd_soc_component_write(component, 0x30, 0x00);
+	snd_soc_component_write(component, 0x31, 0x00);
+	snd_soc_component_write(component, ES8323_ADCPOWER, 0xFF);
+	snd_soc_component_write(component, ES8323_DACPOWER, 0xc0);
+	snd_soc_component_write(component, ES8323_CHIPPOWER, 0xF3);
+	snd_soc_component_write(component, 0x00, 0x00);
+	snd_soc_component_write(component, 0x01, 0x58);
+	snd_soc_component_write(component, 0x2b, 0x9c);
+	usleep_range(18000, 20000);
+	regcache_cache_only(es8323->regmap, true);
+	regcache_mark_dirty(es8323->regmap);
+	return 0;
+}
+
+static int es8323_resume(struct snd_soc_component *component)
+{
+	struct es8323_priv *es8323 = snd_soc_component_get_drvdata(component);
+
+	regcache_cache_only(es8323->regmap, false);
+	snd_soc_component_cache_sync(component);
+	snd_soc_component_write(component, 0x2b, 0x80);
+	snd_soc_component_write(component, 0x01, 0x50);
+	snd_soc_component_write(component, 0x00, 0x32);
+	snd_soc_component_write(component, ES8323_CHIPPOWER, 0x00);
+	snd_soc_component_write(component, ES8323_DACPOWER, 0x0c);
+	snd_soc_component_write(component, ES8323_ADCPOWER, 0x59);
+	snd_soc_component_write(component, 0x31, es8323_DEF_VOL);
+	snd_soc_component_write(component, 0x30, es8323_DEF_VOL);
+	snd_soc_component_write(component, 0x19, 0x02);
+	return 0;
+}
+
+static int es8323_probe(struct snd_soc_component *component)
+{
+	struct es8323_priv *es8323 = snd_soc_component_get_drvdata(component);
+	int ret = 0;
+
+#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+	es8323->mclk = devm_clk_get(component->dev, "mclk");
+	if (IS_ERR(es8323->mclk)) {
+		dev_err(component->dev, "%s mclk is missing or invalid\n", __func__);
+		return PTR_ERR(es8323->mclk);
+	}
+	ret = clk_prepare_enable(es8323->mclk);
+	if (ret)
+		return ret;
+#endif
+	es8323->component = component;
+
+	ret = es8323_reset(component);
+	if (ret < 0) {
+		dev_err(component->dev, "Failed to issue reset\n");
+		#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+		clk_disable_unprepare(es8323->mclk);
+		#endif
+		return ret;
+	}
+
+	snd_soc_component_write(component, 0x01, 0x60);
+	snd_soc_component_write(component, 0x02, 0xF3);
+	snd_soc_component_write(component, 0x02, 0xF0);
+	snd_soc_component_write(component, 0x2B, 0x80);
+	snd_soc_component_write(component, 0x00, 0x36);
+	snd_soc_component_write(component, 0x08, 0x00);
+	snd_soc_component_write(component, 0x04, 0x00);
+	snd_soc_component_write(component, 0x06, 0xC3);
+	snd_soc_component_write(component, 0x19, 0x02);
+	snd_soc_component_write(component, 0x09, 0x00);
+	snd_soc_component_write(component, 0x0A, 0x00);
+	snd_soc_component_write(component, 0x0B, 0x02);
+	snd_soc_component_write(component, 0x0C, 0x4C);
+	snd_soc_component_write(component, 0x0D, 0x02);
+	snd_soc_component_write(component, 0x10, 0x00);
+	snd_soc_component_write(component, 0x11, 0x00);
+	snd_soc_component_write(component, 0x12, 0xea);
+	snd_soc_component_write(component, 0x13, 0xc0);
+	snd_soc_component_write(component, 0x14, 0x05);
+	snd_soc_component_write(component, 0x15, 0x06);
+	snd_soc_component_write(component, 0x16, 0x53);
+
+	snd_soc_component_write(component, 0x17, 0x18);
+	snd_soc_component_write(component, 0x18, 0x02);
+	snd_soc_component_write(component, 0x1A, 0x00);
+	snd_soc_component_write(component, 0x1B, 0x00);
+	snd_soc_component_write(component, 0x27, 0xB8);
+	snd_soc_component_write(component, 0x2A, 0xB8);
+	#ifndef SPACEMIT_CONFIG_CODEC_ES8323
+	snd_soc_component_write(component, 0x35, 0xA0);
+	#endif
+	usleep_range(18000, 20000);
+	snd_soc_component_write(component, 0x2E, 0x1E);
+	snd_soc_component_write(component, 0x2F, 0x1E);
+	snd_soc_component_write(component, 0x30, 0x1E);
+	snd_soc_component_write(component, 0x31, 0x1E);
+	snd_soc_component_write(component, 0x03, 0x09);
+	snd_soc_component_write(component, 0x02, 0x00);
+	usleep_range(18000, 20000);
+	snd_soc_component_write(component, 0x04, 0x3C);
+
+	es8323_set_bias_level(component, SND_SOC_BIAS_STANDBY);
+	return 0;
+}
+
+static void es8323_remove(struct snd_soc_component *component)
+{
+	es8323_set_bias_level(component, SND_SOC_BIAS_OFF);
+}
+
+static const struct snd_soc_component_driver soc_codec_dev_es8323 = {
+	.probe = es8323_probe,
+	.remove = es8323_remove,
+	.suspend = es8323_suspend,
+	.resume = es8323_resume,
+	.set_bias_level = es8323_set_bias_level,
+	.dapm_widgets		= es8323_dapm_widgets,
+	.num_dapm_widgets	= ARRAY_SIZE(es8323_dapm_widgets),
+	.dapm_routes		= audio_map,
+	.num_dapm_routes	= ARRAY_SIZE(audio_map),
+	.controls		= es8323_snd_controls,
+	.num_controls		= ARRAY_SIZE(es8323_snd_controls),
+};
+
+static const struct regmap_config es8323_regmap_config = {
+	.reg_bits	= 8,
+	.val_bits	= 8,
+	.max_register	= ES8323_DACCONTROL30,
+	.cache_type	= REGCACHE_RBTREE,
+	.reg_defaults	= es8323_reg_defaults,
+	.num_reg_defaults = ARRAY_SIZE(es8323_reg_defaults),
+	.use_single_read = true,
+	.use_single_write = true,
+};
+
+static int es8323_i2c_probe(struct i2c_client *i2c)
+{
+	struct es8323_priv *es8323;
+	int ret = -1;
+	struct i2c_adapter *adapter = to_i2c_adapter(i2c->dev.parent);
+	char reg;
+
+	if (!i2c_check_functionality(adapter, I2C_FUNC_I2C)) {
+		dev_warn(&adapter->dev,
+			 "I2C-Adapter doesn't support I2C_FUNC_I2C\n");
+		return -EIO;
+	}
+
+	es8323 = devm_kzalloc(&i2c->dev, sizeof(struct es8323_priv), GFP_KERNEL);
+	if (!es8323)
+		return -ENOMEM;
+
+	es8323->regmap = devm_regmap_init_i2c(i2c, &es8323_regmap_config);
+	if (IS_ERR(es8323->regmap))
+		return PTR_ERR(es8323->regmap);
+
+	i2c_set_clientdata(i2c, es8323);
+
+	reg = ES8323_DACCONTROL18;
+	ret = i2c_master_recv(i2c, &reg, 1);
+	if (ret < 0) {
+		dev_err(&i2c->dev, "i2c recv Failed\n");
+		return ret;
+	}
+
+#ifdef SPACEMIT_CONFIG_CODEC_ES8323
+	es8323->earphone_sw_gpio = of_get_named_gpio(i2c->dev.of_node,
+			"earphone-sw-gpio", 0);
+	if (es8323->earphone_sw_gpio < 0) {
+		dev_info(&i2c->dev, "Can not read property earphone_sw_gpio\n");
+		es8323->earphone_sw_gpio = -1;
+	} else {
+		ret = devm_gpio_request_one(&i2c->dev, es8323->earphone_sw_gpio,
+			GPIOF_DIR_OUT, NULL);
+		if (ret) {
+			dev_err(&i2c->dev, "Failed to request earphone_sw_gpio\n");
+			return ret;
+		}
+		gpio_set_value(es8323->earphone_sw_gpio, true);
+	}
+#endif
+	ret = devm_snd_soc_register_component(&i2c->dev,
+					      &soc_codec_dev_es8323,
+					      &es8323_dai, 1);
+	return ret;
+}
+
+static void es8323_i2c_remove(struct i2c_client *client)
+{
+	snd_soc_unregister_component(&client->dev);
+}
+
+static const struct i2c_device_id es8323_i2c_id[] = {
+	{"es8323", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, es8323_i2c_id);
+
+static void es8323_i2c_shutdown(struct i2c_client *client)
+{
+	struct es8323_priv *es8323 = i2c_get_clientdata(client);
+
+	regmap_write(es8323->regmap, ES8323_CONTROL2, 0x58);
+	regmap_write(es8323->regmap, ES8323_CONTROL1, 0x32);
+	regmap_write(es8323->regmap, ES8323_CHIPPOWER, 0xf3);
+	regmap_write(es8323->regmap, ES8323_DACPOWER, 0xc0);
+	mdelay(50);
+	regmap_write(es8323->regmap, ES8323_DACCONTROL26, 0x00);
+	regmap_write(es8323->regmap, ES8323_DACCONTROL27, 0x00);
+	mdelay(50);
+	regmap_write(es8323->regmap, ES8323_CONTROL1, 0x30);
+	regmap_write(es8323->regmap, ES8323_CONTROL1, 0x34);
+}
+
+static const struct of_device_id es8323_of_match[] = {
+	{ .compatible = "everest,es8323", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, es8323_of_match);
+
+static struct i2c_driver es8323_i2c_driver = {
+	.driver = {
+		.name = "ES8323",
+		.of_match_table = of_match_ptr(es8323_of_match),
+		},
+	.shutdown = es8323_i2c_shutdown,
+	.probe = es8323_i2c_probe,
+	.remove = es8323_i2c_remove,
+	.id_table = es8323_i2c_id,
+};
+module_i2c_driver(es8323_i2c_driver);
+
+MODULE_DESCRIPTION("ASoC es8323 driver");
+MODULE_AUTHOR("Mark Brown <will@everset-semi.com>");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/es8323.h b/sound/soc/codecs/es8323.h
new file mode 100644
index 000000000000..f8e2f83f890d
--- /dev/null
+++ b/sound/soc/codecs/es8323.h
@@ -0,0 +1,155 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2005 Openedhand Ltd.
+ *
+ * Author: Richard Purdie <richard@openedhand.com>
+ */
+
+#ifndef _ES8323_H
+#define _ES8323_H
+
+#define CONFIG_HHTECH_MINIPMP	1
+
+/* ES8323 register space */
+
+#define ES8323_CONTROL1         0x00
+#define ES8323_CONTROL2         0x01
+#define ES8323_CHIPPOWER        0x02
+#define ES8323_ADCPOWER         0x03
+#define ES8323_DACPOWER         0x04
+#define ES8323_CHIPLOPOW1       0x05
+#define ES8323_CHIPLOPOW2       0x06
+#define ES8323_ANAVOLMANAG      0x07
+#define ES8323_MASTERMODE       0x08
+#define ES8323_ADCCONTROL1      0x09
+#define ES8323_ADCCONTROL2      0x0a
+#define ES8323_ADCCONTROL3      0x0b
+#define ES8323_ADCCONTROL4      0x0c
+#define ES8323_ADCCONTROL5      0x0d
+#define ES8323_ADCCONTROL6      0x0e
+#define ES8323_ADCCONTROL7      0x0f
+#define ES8323_ADCCONTROL8      0x10
+#define ES8323_ADCCONTROL9      0x11
+#define ES8323_ADCCONTROL10     0x12
+#define ES8323_ADCCONTROL11     0x13
+#define ES8323_ADCCONTROL12     0x14
+#define ES8323_ADCCONTROL13     0x15
+#define ES8323_ADCCONTROL14     0x16
+
+#define ES8323_DACCONTROL1      0x17
+#define ES8323_DACCONTROL2      0x18
+#define ES8323_DACCONTROL3      0x19
+#define ES8323_DACCONTROL4      0x1a
+#define ES8323_DACCONTROL5      0x1b
+#define ES8323_DACCONTROL6      0x1c
+#define ES8323_DACCONTROL7      0x1d
+#define ES8323_DACCONTROL8      0x1e
+#define ES8323_DACCONTROL9      0x1f
+#define ES8323_DACCONTROL10     0x20
+#define ES8323_DACCONTROL11     0x21
+#define ES8323_DACCONTROL12     0x22
+#define ES8323_DACCONTROL13     0x23
+#define ES8323_DACCONTROL14     0x24
+#define ES8323_DACCONTROL15     0x25
+#define ES8323_DACCONTROL16     0x26
+#define ES8323_DACCONTROL17     0x27
+#define ES8323_DACCONTROL18     0x28
+#define ES8323_DACCONTROL19     0x29
+#define ES8323_DACCONTROL20     0x2a
+#define ES8323_DACCONTROL21     0x2b
+#define ES8323_DACCONTROL22     0x2c
+#define ES8323_DACCONTROL23     0x2d
+#define ES8323_DACCONTROL24     0x2e
+#define ES8323_DACCONTROL25     0x2f
+#define ES8323_DACCONTROL26     0x30
+#define ES8323_DACCONTROL27     0x31
+#define ES8323_DACCONTROL28     0x32
+#define ES8323_DACCONTROL29     0x33
+#define ES8323_DACCONTROL30     0x34
+
+#define ES8323_LADC_VOL         ES8323_ADCCONTROL8
+#define ES8323_RADC_VOL         ES8323_ADCCONTROL9
+
+#define ES8323_LDAC_VOL         ES8323_DACCONTROL4
+#define ES8323_RDAC_VOL         ES8323_DACCONTROL5
+
+#define ES8323_LOUT1_VOL        ES8323_DACCONTROL24
+#define ES8323_ROUT1_VOL        ES8323_DACCONTROL25
+#define ES8323_LOUT2_VOL        ES8323_DACCONTROL26
+#define ES8323_ROUT2_VOL        ES8323_DACCONTROL27
+
+#define ES8323_ADC_MUTE         ES8323_ADCCONTROL7
+#define ES8323_DAC_MUTE         ES8323_DACCONTROL3
+
+
+
+#define ES8323_IFACE            ES8323_MASTERMODE
+
+#define ES8323_ADC_IFACE        ES8323_ADCCONTROL4
+#define ES8323_ADC_SRATE        ES8323_ADCCONTROL5
+
+#define ES8323_DAC_IFACE        ES8323_DACCONTROL1
+#define ES8323_DAC_SRATE        ES8323_DACCONTROL2
+
+
+
+#define ES8323_CACHEREGNUM      53
+#define ES8323_SYSCLK	        0
+
+struct es8323_setup_data {
+	int i2c_bus;
+	unsigned short i2c_address;
+};
+
+#if 1 //lzcx
+#define ES8323_PLL1			0
+#define ES8323_PLL2			1
+
+/* clock inputs */
+#define ES8323_MCLK		0
+#define ES8323_PCMCLK		1
+
+/* clock divider id's */
+#define ES8323_PCMDIV		0
+#define ES8323_BCLKDIV		1
+#define ES8323_VXCLKDIV		2
+
+/* PCM clock dividers */
+#define ES8323_PCM_DIV_1	(0 << 6)
+#define ES8323_PCM_DIV_3	(2 << 6)
+#define ES8323_PCM_DIV_5_5	(3 << 6)
+#define ES8323_PCM_DIV_2	(4 << 6)
+#define ES8323_PCM_DIV_4	(5 << 6)
+#define ES8323_PCM_DIV_6	(6 << 6)
+#define ES8323_PCM_DIV_8	(7 << 6)
+
+/* BCLK clock dividers */
+#define ES8323_BCLK_DIV_1	(0 << 7)
+#define ES8323_BCLK_DIV_2	(1 << 7)
+#define ES8323_BCLK_DIV_4	(2 << 7)
+#define ES8323_BCLK_DIV_8	(3 << 7)
+
+/* VXCLK clock dividers */
+#define ES8323_VXCLK_DIV_1	(0 << 6)
+#define ES8323_VXCLK_DIV_2	(1 << 6)
+#define ES8323_VXCLK_DIV_4	(2 << 6)
+#define ES8323_VXCLK_DIV_8	(3 << 6)
+#define ES8323_VXCLK_DIV_16	(4 << 6)
+
+#define ES8323_DAI_HIFI		0
+#define ES8323_DAI_VOICE		1
+
+#define ES8323_1536FS 1536
+#define ES8323_1024FS	1024
+#define ES8323_768FS	768
+#define ES8323_512FS	512
+#define ES8323_384FS	384
+#define ES8323_256FS	256
+#define ES8323_128FS	128
+#endif
+
+#if IS_ENABLED(CONFIG_SND_SOC_SPACEMIT)
+#define SPACEMIT_CONFIG_CODEC_ES8323 1
+#endif
+
+#endif
diff --git a/sound/soc/codecs/es8326.c b/sound/soc/codecs/es8326.c
index ad76b53828e4..560b230953f2 100644
--- a/sound/soc/codecs/es8326.c
+++ b/sound/soc/codecs/es8326.c
@@ -844,20 +844,12 @@ static void es8326_jack_detect_handler(struct work_struct *work)
 		es8326_disable_micbias(es8326->component);
 		if (es8326->jack->status & SND_JACK_HEADPHONE) {
 			dev_dbg(comp->dev, "Report hp remove event\n");
-			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
-			es8326_enable_spk(es8326, true);
-			#endif
 			snd_soc_jack_report(es8326->jack, 0,
 				    SND_JACK_BTN_0 | SND_JACK_BTN_1 | SND_JACK_BTN_2);
 			snd_soc_jack_report(es8326->jack, 0, SND_JACK_HEADSET);
 			/* mute adc when mic path switch */
-			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
-			regmap_write(es8326->regmap, ES8326_ADC1_SRC, es8326->mic1_src);
-			regmap_write(es8326->regmap, ES8326_ADC2_SRC, es8326->mic2_src);
-			#else
 			regmap_write(es8326->regmap, ES8326_ADC1_SRC, 0x44);
 			regmap_write(es8326->regmap, ES8326_ADC2_SRC, 0x66);
-			#endif
 		}
 		es8326->hp = 0;
 		regmap_update_bits(es8326->regmap, ES8326_HPDET_TYPE, 0x03, 0x01);
-- 
2.47.0

