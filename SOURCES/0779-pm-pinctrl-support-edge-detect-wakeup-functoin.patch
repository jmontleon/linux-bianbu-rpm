From 2de0040077fb2a794184a2f330c97bd10e90955a Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Mon, 1 Jul 2024 20:23:18 +0800
Subject: [PATCH 0779/1206] pm:pinctrl: support edge-detect wakeup functoin

Change-Id: I7e9480e078d24cd1e842e2430bf75c385f16549f
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi        |  15 ++-
 arch/riscv/boot/dts/spacemit/k1-x_deb1.dts    |   6 +
 drivers/pinctrl/pinctrl-single.c              | 122 ++++++++++++++++++
 .../soc/spacemit/pm_domain/k1x-pm_domain.c    |   8 +-
 4 files changed, 148 insertions(+), 3 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index f994ad354933..0bb6c5093ac6 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -698,8 +698,9 @@ &cpu7_intc 11 &cpu7_intc 9
 		};
 
 		pinctrl: pinctrl@d401e000 {
-			compatible = "pinconf-single";
-			reg = <0x0 0xd401e000 0x0 0x400>;
+			compatible = "pinconf-single-aib";
+			reg = <0x0 0xd401e000 0x0 0x400>,
+				<0x0 0xd4019800 0x0 0x10>;
 			#address-cells = <1>;
 			#size-cells = <1>;
 			#pinctrl-cells = <2>;
@@ -708,6 +709,16 @@ pinctrl: pinctrl@d401e000 {
 			pinctrl-single,register-width = <32>;
 			pinctrl-single,function-mask = <0xff77>;
 
+			clocks = <&ccu CLK_AIB>;
+			clock-names = "clk_aib";
+			resets = <&reset RESET_AIB>;
+			reset-names = "aib_rst";
+
+			interrupt-parent = <&intc>;
+			interrupts = <60>;
+			interrupt-controller;
+			#interrupt-cells = <1>;
+
 			range: gpio-range {
 				#pinctrl-single,gpio-range-cells = <3>;
 			};
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts b/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
index ea30bf701e0d..796786ea6a70 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
@@ -572,6 +572,12 @@ K1X_PADCONF(GPIO_43, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_i
 			K1X_PADCONF(GPIO_46, MUX_MODE1, (EDGE_NONE | PULL_DIS | PAD_1V8_DS2))	/* gmac1_clk_ref */
 		>;
 	};
+
+	pinctrl_wlan_wakeup: wlan_wakeup_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_66, MUX_MODE0, (EDGE_FALL | PULL_DOWN | PAD_3V_DS2))   /* wifi edge detect */
+		>;
+	};
 };
 
 &gpio{
diff --git a/drivers/pinctrl/pinctrl-single.c b/drivers/pinctrl/pinctrl-single.c
index f1916ac1f557..bdbcd3975379 100644
--- a/drivers/pinctrl/pinctrl-single.c
+++ b/drivers/pinctrl/pinctrl-single.c
@@ -28,6 +28,11 @@
 #include <linux/pinctrl/pinmux.h>
 
 #include <linux/platform_data/pinctrl-single.h>
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+#include <linux/pm_wakeirq.h>
+#include <linux/reset.h>
+#include <linux/clk.h>
+#endif
 
 #include "core.h"
 #include "devicetree.h"
@@ -37,6 +42,10 @@
 #define DRIVER_NAME			"pinctrl-single"
 #define PCS_OFF_DISABLED		~0U
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+#define EDGE_CLEAR			6
+#endif
+
 /**
  * struct pcs_func_vals - mux function register offset and value pair
  * @reg:	register virtual address
@@ -171,6 +180,11 @@ struct pcs_soc_data {
 struct pcs_device {
 	struct resource *res;
 	void __iomem *base;
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	struct resource *gedge_flag_res;
+	void __iomem *gedge_flag_base;
+	unsigned gedge_flag_size;
+#endif
 	void *saved_vals;
 	unsigned size;
 	struct device *dev;
@@ -1434,7 +1448,11 @@ static void pcs_irq_mask(struct irq_data *d)
 {
 	struct pcs_soc_data *pcs_soc = irq_data_get_irq_chip_data(d);
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	pcs_irq_set(pcs_soc, d->irq, true);
+#else
 	pcs_irq_set(pcs_soc, d->irq, false);
+#endif
 }
 
 /**
@@ -1445,7 +1463,11 @@ static void pcs_irq_unmask(struct irq_data *d)
 {
 	struct pcs_soc_data *pcs_soc = irq_data_get_irq_chip_data(d);
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	pcs_irq_set(pcs_soc, d->irq, false);
+#else
 	pcs_irq_set(pcs_soc, d->irq, true);
+#endif
 }
 
 /**
@@ -1486,6 +1508,7 @@ static int pcs_irq_handle(struct pcs_soc_data *pcs_soc)
 		unsigned mask;
 
 		pcswi = list_entry(pos, struct pcs_interrupt, node);
+#ifndef CONFIG_SOC_SPACEMIT_K1X
 		raw_spin_lock(&pcs->lock);
 		mask = pcs->read(pcswi->reg);
 		raw_spin_unlock(&pcs->lock);
@@ -1494,6 +1517,22 @@ static int pcs_irq_handle(struct pcs_soc_data *pcs_soc)
 						  pcswi->hwirq);
 			count++;
 		}
+#else
+		unsigned reg_offset, bit_offset;
+
+		reg_offset = (pcswi->hwirq / 4 - 1) / 32 * 4;
+		bit_offset = (pcswi->hwirq / 4 - 1) - reg_offset / 4 * 32;
+
+		raw_spin_lock(&pcs->lock);
+		mask = pcs->read(pcs->gedge_flag_base + reg_offset);
+		raw_spin_unlock(&pcs->lock);
+
+		if (mask & (1 << bit_offset)) {
+			generic_handle_domain_irq(pcs->domain,
+						pcswi->hwirq);
+			count++;
+		}
+#endif
 	}
 
 	return count;
@@ -1770,6 +1809,11 @@ static int pcs_quirk_missing_pinctrl_cells(struct pcs_device *pcs,
 	return error;
 }
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+static struct clk *psc_clk;
+static struct reset_control *psc_rst;
+#endif
+
 static int pcs_probe(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
@@ -1778,11 +1822,44 @@ static int pcs_probe(struct platform_device *pdev)
 	struct pcs_device *pcs;
 	const struct pcs_soc_data *soc;
 	int ret;
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	unsigned val;
+	void __iomem *mem_base;
+#endif
 
 	soc = of_device_get_match_data(&pdev->dev);
 	if (WARN_ON(!soc))
 		return -EINVAL;
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	psc_rst = devm_reset_control_get_exclusive(&pdev->dev, "aib_rst");
+	if (IS_ERR(psc_rst)) {
+		ret = PTR_ERR(psc_rst);
+		dev_err(&pdev->dev, "Failed to get reset: %d\n", ret);
+		return -EINVAL;
+	}
+
+	/* deasser clk  */
+	ret = reset_control_deassert(psc_rst);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to deassert reset: %d\n", ret);
+		return -EINVAL;
+	}
+
+	psc_clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(psc_clk)) {
+		dev_err(&pdev->dev, "Fail to get pinctrl clock, error %ld.\n",
+			PTR_ERR(psc_clk));
+		return PTR_ERR(psc_clk);
+	}
+
+	ret = clk_prepare_enable(psc_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Fail to enable pinctrl clock, error %d.\n", ret);
+		return ret;
+	}
+#endif
+
 	pcs = devm_kzalloc(&pdev->dev, sizeof(*pcs), GFP_KERNEL);
 	if (!pcs)
 		return -ENOMEM;
@@ -1850,6 +1927,29 @@ static int pcs_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	if (!res) {
+		dev_err(pcs->dev, "could not get resource\n");
+		return -ENODEV;
+	}
+
+	pcs->gedge_flag_res = devm_request_mem_region(pcs->dev, res->start,
+			resource_size(res), DRIVER_NAME);
+	if (!pcs->gedge_flag_res) {
+		dev_err(pcs->dev, "could not get mem_region\n");
+		return -EBUSY;
+	}
+
+	pcs->gedge_flag_size = resource_size(pcs->gedge_flag_res);
+	pcs->gedge_flag_base = devm_ioremap(pcs->dev, pcs->gedge_flag_res->start,
+			pcs->gedge_flag_size);
+	if (!pcs->gedge_flag_base) {
+		dev_err(pcs->dev, "could not ioremap\n");
+		return -ENODEV;
+	}
+#endif
+
 	platform_set_drvdata(pdev, pcs);
 
 	switch (pcs->width) {
@@ -1913,6 +2013,11 @@ static int pcs_probe(struct platform_device *pdev)
 
 	dev_info(pcs->dev, "%i pins, size %u\n", pcs->desc.npins, pcs->size);
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	dev_pm_set_wake_irq(&pdev->dev, pcs->socdata.irq );
+	device_init_wakeup(&pdev->dev, true);
+#endif
+
 	ret = pinctrl_enable(pcs->pctl);
 	if (ret)
 		goto free;
@@ -1929,6 +2034,12 @@ static void pcs_remove(struct platform_device *pdev)
 	struct pcs_device *pcs = platform_get_drvdata(pdev);
 
 	pcs_free_resources(pcs);
+
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	clk_disable_unprepare(psc_clk);
+
+	reset_control_assert(psc_rst);
+#endif
 }
 
 static const struct pcs_soc_data pinctrl_single_omap_wkup = {
@@ -1958,6 +2069,14 @@ static const struct pcs_soc_data pinctrl_single_j7200 = {
 	.flags = PCS_CONTEXT_LOSS_OFF,
 };
 
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+static const struct pcs_soc_data pinconf_single_aib = {
+	.flags = PCS_QUIRK_SHARED_IRQ,
+	.irq_enable_mask = (1 << EDGE_CLEAR),	/* WAKEUPENABLE */
+	.irq_status_mask = (1 << EDGE_CLEAR),	/* WAKEUPENABLE */
+};
+#endif
+
 static const struct pcs_soc_data pinctrl_single = {
 };
 
@@ -1976,6 +2095,9 @@ static const struct of_device_id pcs_of_match[] = {
 	{ .compatible = "ti,j7200-padconf", .data = &pinctrl_single_j7200 },
 	{ .compatible = "pinctrl-single", .data = &pinctrl_single },
 	{ .compatible = "pinconf-single", .data = &pinconf_single },
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	{ .compatible = "pinconf-single-aib", .data = &pinconf_single_aib },
+#endif
 	{ },
 };
 MODULE_DEVICE_TABLE(of, pcs_of_match);
diff --git a/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c b/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
index 4a2dd1b2e553..cd741e311313 100644
--- a/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
+++ b/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
@@ -41,7 +41,8 @@
 /* wakeup set */
 /* pmic */
 #define WAKEUP_SOURCE_WAKEUP_7	7
-
+/* gpio */
+#define WAKEUP_SOURCE_WAKEUP_2	2
 
 #define PM_QOS_BLOCK_C1		0x0 /* core wfi */
 #define PM_QOS_BLOCK_C2		0x2 /* core power off */
@@ -811,6 +812,11 @@ static int acpr_per_suspend(void)
 	apcr_per |= (1 << WAKEUP_SOURCE_WAKEUP_7);
 	regmap_write(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, apcr_per);
 
+	/* enable pinctrl edge detect wakeup */
+	regmap_read(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, &apcr_per);
+	apcr_per |= (1 << WAKEUP_SOURCE_WAKEUP_2);
+	regmap_write(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, apcr_per);
+
 	return 0;
 }
 
-- 
2.47.0

