From 8ceafae7029a4c778dcc75e911901289fc054606 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Cweijinmei=E2=80=9D?= <jinmei.wei@spacemit.com>
Date: Fri, 22 Dec 2023 20:39:59 +0800
Subject: [PATCH 0231/1202] clock: fix set_rate function, it change rate by div
 and mux

Change-Id: Ide3cc6b0b9ab0d31fcfc574be94487dee26ee226
---
 drivers/clk/spacemit/ccu-spacemit-k1x.h |   2 +
 drivers/clk/spacemit/ccu_mix.c          | 288 +++++++++++++++---------
 drivers/clk/spacemit/ccu_mix.h          |  47 ++--
 3 files changed, 223 insertions(+), 114 deletions(-)

diff --git a/drivers/clk/spacemit/ccu-spacemit-k1x.h b/drivers/clk/spacemit/ccu-spacemit-k1x.h
index 4fb6a2392137..e31dee144bfe 100755
--- a/drivers/clk/spacemit/ccu-spacemit-k1x.h
+++ b/drivers/clk/spacemit/ccu-spacemit-k1x.h
@@ -26,6 +26,8 @@ enum {
 	CLK_DIV_TYPE_1REG_FC_V2,
 	CLK_DIV_TYPE_2REG_NOFC_V3,
 	CLK_DIV_TYPE_2REG_FC_V4,
+	CLK_DIV_TYPE_1REG_FC_DIV_V5,
+	CLK_DIV_TYPE_1REG_FC_MUX_V6,
 };
 
 struct ccu_common {
diff --git a/drivers/clk/spacemit/ccu_mix.c b/drivers/clk/spacemit/ccu_mix.c
index 4cedf35a29ae..cda4f714beb7 100755
--- a/drivers/clk/spacemit/ccu_mix.c
+++ b/drivers/clk/spacemit/ccu_mix.c
@@ -29,20 +29,20 @@ static void ccu_mix_disable(struct clk_hw *hw)
 	if (common->lock)
 		spin_lock_irqsave(common->lock, flags);
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		tmp = readl(common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		tmp = readl(common->base + common->reg_sel);
+	else
+		tmp = readl(common->base + common->reg_ctrl);
 
 	tmp &= ~gate->gate_mask;
 	tmp |= gate->val_disable;
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		writel(tmp, common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		writel(tmp, common->base + common->reg_sel);
+	else
+		writel(tmp, common->base + common->reg_ctrl);
 
 	if (gate->flags & SPACEMIT_CLK_GATE_NEED_DELAY) {
 		rate = clk_hw_get_rate(&common->hw);
@@ -76,34 +76,34 @@ static int ccu_mix_enable(struct clk_hw *hw)
 	if (common->lock)
 		spin_lock_irqsave(common->lock, flags);
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		tmp = readl(common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		tmp = readl(common->base + common->reg_sel);
+	else
+		tmp = readl(common->base + common->reg_ctrl);
 
 	tmp &= ~gate->gate_mask;
 	tmp |= gate->val_enable;
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		writel(tmp, common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		writel(tmp, common->base + common->reg_sel);
-
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		val = readl(common->base + common->reg_ctrl);
 	else
+		writel(tmp, common->base + common->reg_ctrl);
+
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		val = readl(common->base + common->reg_sel);
+	else
+		val = readl(common->base + common->reg_ctrl);
 
 	while ((val & gate->gate_mask) != gate->val_enable && (timeout_power < TIMEOUT_LIMIT)) {
 		udelay(timeout_power);
-		if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-			|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-			val = readl(common->base + common->reg_ctrl);
-		else
+		if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 			val = readl(common->base + common->reg_sel);
+		else
+			val = readl(common->base + common->reg_ctrl);
 		timeout_power *= 10;
 	}
 
@@ -145,11 +145,11 @@ static int ccu_mix_is_enabled(struct clk_hw *hw)
 	if (common->lock)
 		spin_lock_irqsave(common->lock, flags);
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		tmp = readl(common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		tmp = readl(common->base + common->reg_sel);
+	else
+		tmp = readl(common->base + common->reg_ctrl);
 
 	if (common->lock)
 		spin_unlock_irqrestore(common->lock, flags);
@@ -172,11 +172,11 @@ static unsigned long ccu_mix_recalc_rate(struct clk_hw *hw,
 		else
 		    return parent_rate;
 	}
-    if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		reg = readl(common->base + common->reg_ctrl);
-	else
+    if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		reg = readl(common->base + common->reg_sel);
+	else
+		reg = readl(common->base + common->reg_ctrl);
 
 	val = reg >> div->shift;
 	val &= (1 << div->width) - 1;
@@ -187,16 +187,94 @@ static unsigned long ccu_mix_recalc_rate(struct clk_hw *hw,
 	return val;
 }
 
+
+static int ccu_mix_trigger_fc(struct clk_hw *hw)
+{
+	struct ccu_mix *mix = hw_to_ccu_mix(hw);
+	struct ccu_common * common = &mix->common;
+	unsigned long flags;
+	unsigned long val = 0;
+
+	int ret = 0, timeout = 50;
+
+	spin_lock_irqsave(common->lock, flags);
+
+	if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4
+		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_DIV_V5
+		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_MUX_V6) {
+
+		timeout = 50;
+		val = readl(common->base + common->reg_ctrl);
+		val |= common->fc;
+		writel(val, common->base + common->reg_ctrl);
+
+		do {
+			val = readl(common->base + common->reg_ctrl);
+			timeout--;
+			if (!(val & (common->fc)))
+				break;
+		} while (timeout);
+
+		if (timeout == 0) {
+			timeout = 5000;
+			do {
+				val = readl(common->base + common->reg_ctrl);
+				timeout--;
+				if (!(val & (common->fc)))
+					break;
+			} while (timeout);
+			if (timeout != 0) {
+				ret = 0;
+
+			} else {
+				ret = -1;
+			}
+		}
+	}
+
+	spin_unlock_irqrestore(common->lock, flags);
+	return ret;
+
+}
+
 static long ccu_mix_round_rate(struct clk_hw *hw, unsigned long rate,
 				unsigned long *prate)
+{
+	return rate;
+}
+
+unsigned long ccu_mix_calc_best_rate(struct clk_hw *hw, unsigned long rate, u32 *mux_val, u32 *div_val)
 {
 	struct ccu_mix *mix = hw_to_ccu_mix(hw);
-	struct ccu_div_config *div = mix->div;
+	struct ccu_common * common = &mix->common;
+	struct ccu_div_config *div = mix->div? mix->div: NULL;
+	struct clk_hw *parent;
+	unsigned long parent_rate = 0, best_rate = 0;
+	u32 i, j, div_max;
+
+	for (i = 0; i < common->num_parents; i++) {
+
+		parent = clk_hw_get_parent_by_index(hw, i);
+		if (!parent)
+			continue;
+		parent_rate = clk_hw_get_rate(parent);
 
-	if (!div)
-		return *prate;
-	return divider_round_rate(hw, rate, prate, div->table,
-				  div->width, CLK_DIVIDER_ROUND_CLOSEST);
+		if(div)
+			div_max = 1 << div->width;
+		else
+			div_max = 1;
+
+		for(j = 1; j <= div_max; j++){
+			if(abs(parent_rate/j - rate) < abs(best_rate - rate)){
+				best_rate = DIV_ROUND_UP_ULL(parent_rate, j);
+				*mux_val = i;
+				*div_val = j - 1;
+			}
+		}
+	}
+
+	return best_rate;
 }
 
 static int ccu_mix_set_rate(struct clk_hw *hw, unsigned long rate,
@@ -204,72 +282,68 @@ static int ccu_mix_set_rate(struct clk_hw *hw, unsigned long rate,
 {
 	struct ccu_mix *mix = hw_to_ccu_mix(hw);
 	struct ccu_common * common = &mix->common;
-	struct ccu_div_config *div = mix->div;
+	struct ccu_div_config *div = mix->div? mix->div: NULL;
+	struct ccu_mux_config *mux = mix->mux? mix->mux: NULL;
+	unsigned long best_rate = 0;
 	unsigned long flags;
-	unsigned long val;
+	u32 cur_mux, cur_div, mux_val = 0, div_val = 0;
 	u32 reg;
-	int ret, timeout = 50;
+	int ret;
 
-    if (!div)
+	if(!div && !mux){
 		return 0;
-	val = divider_get_val(rate, parent_rate, div->table, div->width,
-			      div->flags);
-
-	spin_lock_irqsave(common->lock, flags);
+	}
 
-    if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		reg = readl(common->base + common->reg_ctrl);
+	best_rate = ccu_mix_calc_best_rate(hw, rate, &mux_val, &div_val);
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
+		reg = readl(common->base + common->reg_sel);
 	else
+		reg = readl(common->base + common->reg_ctrl);
+
+	if(mux){
+		cur_mux = reg >> mux->shift;
+		cur_mux &= (1 << mux->width) - 1;
+		if(cur_mux != mux_val)
+			clk_hw_set_parent(hw, clk_hw_get_parent_by_index(hw, mux_val));
+	}
+	if(div){
+		cur_div = reg >> div->shift;
+		cur_div &= (1 << div->width) - 1;
+		if(cur_div == div_val)
+			return 0;
+	}else{
+		return 0;
+	}
+
+	spin_lock_irqsave(common->lock, flags);
+    if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		reg = readl(common->base + common->reg_sel);
+	else
+		reg = readl(common->base + common->reg_ctrl);
 
 	reg &= ~GENMASK(div->width + div->shift - 1, div->shift);
 
-    if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		writel(reg | (val << div->shift),
-	       common->base + common->reg_ctrl);
-	else
-		writel(reg | (val << div->shift),
+    if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
+		writel(reg | (div_val << div->shift),
 	       common->base + common->reg_sel);
+	else
+		writel(reg | (div_val << div->shift),
+	       common->base + common->reg_ctrl);
 
-   if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
-		   || common->reg_type == CLK_DIV_TYPE_2REG_FC_V4) {
-		   timeout = 50;
-		   val = readl(common->base + common->reg_ctrl);
-		   val |= common->fc;
-		   writel(val, common->base + common->reg_ctrl);
-
-		   do {
-			   val = readl(common->base + common->reg_ctrl);
-			   timeout--;
-			   if (!(val & (common->fc)))
-				   break;
-		   } while (timeout);
-
-		   if (timeout == 0) {
-		   	   printk("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
-			   timeout = 5000;
-			   do {
-				   val = readl(common->base + common->reg_ctrl);
-				   timeout--;
-				   if (!(val & (common->fc)))
-					   break;
-			   } while (timeout);
-			   if (timeout != 0) {
-			   	   ret = 0;
-
-			   } else {
-				   ret = -EBUSY;
-				   goto error;
-			   }
-		   }
-	   }
-
-error:
 	spin_unlock_irqrestore(common->lock, flags);
 
-	return ret;
+	if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4
+		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_DIV_V5) {
+
+		ret = ccu_mix_trigger_fc(hw);
+		if(ret)
+			pr_err("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
+	}
+	return 0;
 }
 
 static u8 ccu_mix_get_parent(struct clk_hw *hw)
@@ -283,11 +357,11 @@ static u8 ccu_mix_get_parent(struct clk_hw *hw)
 	if(!mux)
 		return 0;
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		reg = readl(common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		reg = readl(common->base + common->reg_sel);
+	else
+		reg = readl(common->base + common->reg_ctrl);
 
 	parent = reg >> mux->shift;
 	parent &= (1 << mux->width) - 1;
@@ -310,27 +384,39 @@ static int ccu_mix_set_parent(struct clk_hw *hw, u8 index)
 	struct ccu_mux_config *mux = mix->mux;
 	unsigned long flags;
 	u32 reg;
+	int ret;
+
+	if(!mux)
+		return 0;
 
 	if (mux->table)
 		index = mux->table[index];
 
 	spin_lock_irqsave(common->lock, flags);
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		reg = readl(common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		reg = readl(common->base + common->reg_sel);
+	else
+		reg = readl(common->base + common->reg_ctrl);
 
 	reg &= ~GENMASK(mux->width + mux->shift - 1, mux->shift);
 
-	if (common->reg_type == CLK_DIV_TYPE_1REG_NOFC_V1
-	|| common->reg_type == CLK_DIV_TYPE_1REG_FC_V2)
-		writel(reg | (index << mux->shift), common->base + common->reg_ctrl);
-	else
+	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		writel(reg | (index << mux->shift), common->base + common->reg_sel);
+	else
+		writel(reg | (index << mux->shift), common->base + common->reg_ctrl);
 
 	spin_unlock_irqrestore(common->lock, flags);
+	if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
+		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4
+		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_MUX_V6) {
+
+		ret = ccu_mix_trigger_fc(hw);
+		if(ret)
+			pr_err("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
+	}
 
 	return 0;
 }
diff --git a/drivers/clk/spacemit/ccu_mix.h b/drivers/clk/spacemit/ccu_mix.h
index 920f3509d8a2..6e417f4f56f4 100755
--- a/drivers/clk/spacemit/ccu_mix.h
+++ b/drivers/clk/spacemit/ccu_mix.h
@@ -87,6 +87,7 @@ struct ccu_mix {
 		.common	= {						\
 			.reg_ctrl		= _reg,				\
 			.base_type 		= _base_type,       \
+			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 						      _parent,		\
 						      &ccu_mix_ops,	\
@@ -100,6 +101,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.num_parents	= 0,		\
 			.hw.init	= CLK_HW_INIT_NO_PARENT(_name,	\
 							  &ccu_mix_ops, \
 							  _flags),		\
@@ -111,6 +113,7 @@ struct ccu_mix {
 	struct ccu_mix _struct = {					\
 		.factor	= CCU_FACTOR_INIT(_div, _mul),	 \
 		.common = { 					\
+			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
 							  &ccu_mix_ops, \
@@ -125,10 +128,12 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.parent_names	= _parents,         \
+			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,	\
 							  _parents,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		}							\
 	}
 
@@ -139,10 +144,11 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		}							\
 	}
 
@@ -155,6 +161,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
 							  &ccu_mix_ops, \
@@ -171,10 +178,12 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.parent_names	= _parents,         \
+			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,	\
 							  _parents,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		}							\
 	}
 
@@ -186,10 +195,11 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		}							\
 	}
 
@@ -206,14 +216,16 @@ struct ccu_mix {
 		.common	= {						\
 			.reg_ctrl		= _reg_ctrl,				\
 			.base_type 		= _base_type,       \
+			.parent_names	= _parents,         \
+			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,	\
 							      _parents, \
 							      &ccu_mix_ops, \
-							      _flags),	\
+							      _flags|CLK_GET_RATE_NOCACHE),	\
 		},							\
 	}
 
-#define SPACEMIT_CCU_DIV2_FC_MUX_GATE(_struct, _name, _parent, _base_type, _reg_ctrl, _reg_sel,	\
+#define SPACEMIT_CCU_DIV2_FC_MUX_GATE(_struct, _name, _parents, _base_type, _reg_ctrl, _reg_sel,	\
 						  _mshift, _mwidth, _fc, _muxshift, _muxwidth, _gate_mask, _val_enable, _val_disable, 		\
 						  _flags)					\
 	struct ccu_mix _struct = {					\
@@ -226,15 +238,17 @@ struct ccu_mix {
 			.reg_sel		= _reg_sel, 	 \
 			.fc 			= _fc,		   \
 			.base_type		= _base_type,		\
+			.parent_names	= _parents,         \
+			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
-							  _parent,		\
+							  _parents,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		},							\
 	}
 
 
-#define SPACEMIT_CCU_DIV_FC_MUX_GATE(_struct, _name, _parent, _base_type, _reg_ctrl,	\
+#define SPACEMIT_CCU_DIV_FC_MUX_GATE(_struct, _name, _parents, _base_type, _reg_ctrl,	\
 						  _mshift, _mwidth, _fc, _muxshift, _muxwidth, _gate_mask, _val_enable, _val_disable, 		\
 						  _flags)					\
 	struct ccu_mix _struct = {					\
@@ -246,10 +260,12 @@ struct ccu_mix {
 			.reg_ctrl		= _reg_ctrl,			\
 			.fc 			= _fc,		   \
 			.base_type		= _base_type,		\
+			.parent_names	= _parents,         \
+			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
-							  _parent,		\
+							  _parents,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		},							\
 	}
 
@@ -261,13 +277,15 @@ struct ccu_mix {
 		.gate	= CCU_GATE_INIT(_gate_mask, _val_enable, _val_disable, 0),	\
 		.div	= CCU_DIV_INIT(_mshift, _mwidth, NULL, 0),		\
 		.common = { 					\
+			.reg_type = CLK_DIV_TYPE_1REG_FC_V2,	\
 			.reg_ctrl		= _reg_ctrl, 			\
 			.fc 			= _fc,         \
 			.base_type		= _base_type,		\
+			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,		\
 							  _parent,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		},							\
 	}
 
@@ -277,13 +295,16 @@ struct ccu_mix {
 		.div	= CCU_DIV_INIT(_mshift, _mwidth, NULL, 0),		\
 		.mux	= CCU_MUX_INIT(_muxshift, _muxwidth, NULL, 0), \
 		.common = { 					\
+			.reg_type = CLK_DIV_TYPE_1REG_FC_V2,	\
 			.reg_ctrl		= _reg_ctrl, 			\
 			.fc 			= _fc,         \
 			.base_type		= _base_type,		\
+			.parent_names	= _parents,         \
+			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
 							  _parents,		\
 							  &ccu_mix_ops, \
-							  _flags),		\
+							  _flags|CLK_GET_RATE_NOCACHE),		\
 		},							\
 	}
 static inline struct ccu_mix *hw_to_ccu_mix(struct clk_hw *hw)
-- 
2.47.0

