From c62fa34b41c0b836a271024b23996586c1177f42 Mon Sep 17 00:00:00 2001
From: lilijun <lijun.li@spacemit.com>
Date: Mon, 29 Apr 2024 17:42:13 +0800
Subject: [PATCH 0644/1451] display: fix dpu under run issues

Change-Id: Ie4a498a4ccd958fa0d52ea0dc6ca0d38ff3e4c7a
---
 arch/riscv/boot/dts/spacemit/k1-x-hdmi.dtsi   |   5 +
 arch/riscv/boot/dts/spacemit/k1-x-lcd.dtsi    |   2 +
 drivers/gpu/drm/spacemit/dpu/dpu_saturn.c     | 114 +++++++--
 drivers/gpu/drm/spacemit/spacemit_dpu.c       | 220 +++++++++---------
 drivers/gpu/drm/spacemit/spacemit_dpu.h       |   1 +
 drivers/gpu/drm/spacemit/spacemit_hdmi.c      |  70 +++++-
 .../gpu/drm/spacemit/spacemit_mipi_panel.c    |   2 -
 include/dt-bindings/display/spacemit-dpu.h    |   4 +
 8 files changed, 286 insertions(+), 132 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x-hdmi.dtsi b/arch/riscv/boot/dts/spacemit/k1-x-hdmi.dtsi
index dffc749ef95f..e7ca43a1db36 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x-hdmi.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x-hdmi.dtsi
@@ -20,6 +20,8 @@ dpu_online2_hdmi: port@c0440000 {
 		power-domains = <&power K1X_PMU_HDMI_PWR_DOMAIN>;
 		pipeline-id = <ONLINE2>;
 		ip = "spacemit-saturn";
+		type = <HDMI>;
+		clk,pm-runtime,no-sleep;
 		status = "disabled";
 
 		dpu_online2_hdmi_out: endpoint@0 {
@@ -38,7 +40,10 @@ hdmi: hdmi@C0400500 {
 		interrupts = <136>;
 		clocks = <&ccu CLK_HDMI>;
 		clock-names = "hmclk";
+		resets = <&reset RESET_HDMI>;
+		reset-names= "hdmi_reset";
 		power-domains = <&power K1X_PMU_HDMI_PWR_DOMAIN>;
+		clk,pm-runtime,no-sleep;
 		status = "disabled";
 
 		port {
diff --git a/arch/riscv/boot/dts/spacemit/k1-x-lcd.dtsi b/arch/riscv/boot/dts/spacemit/k1-x-lcd.dtsi
index 6c955c0440af..a4000423fd35 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x-lcd.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x-lcd.dtsi
@@ -28,6 +28,8 @@ dpu_online2_dsi: port@c0340000 {
 		pipeline-id = <ONLINE2>;
 		ip = "spacemit-saturn";
 		spacemit-dpu-min-mclk = <40960000>;
+		type = <DSI>;
+		clk,pm-runtime,no-sleep;
 		status = "disabled";
 
 		dpu_online2_dsi_out: endpoint@0 {
diff --git a/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c b/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
index c769afdb57f2..9e18561bbd08 100644
--- a/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
+++ b/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
@@ -472,6 +472,29 @@ static int dpu_update_bw(struct spacemit_dpu *dpu, uint64_t bw)
 	return 0;
 }
 
+static int dpu_finish_uboot(struct spacemit_dpu *dpu)
+{
+	void __iomem *base;
+
+	if (dpu->type == HDMI) {
+		base = (void __iomem *)ioremap(0xC0440000, 0x2A000);
+		writel(0x00, base + 0x560);
+		writel(0x01, base + 0x56c);
+		udelay(100);
+		iounmap(base);
+	} else if (dpu->type == DSI) {
+		base = (void __iomem *)ioremap(0xc0340000, 0x2A000);
+		writel(0x00, base + 0x560);
+		writel(0x01, base + 0x56c);
+		udelay(100);
+		iounmap(base);
+	} else {
+		return 0;
+	}
+
+	return 0;
+}
+
 static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 {
 	struct dpu_clk_context *clk_ctx = &dpu->clk_ctx;
@@ -479,8 +502,28 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 	struct drm_display_mode *mode = &crtc->mode;
 	uint64_t clk_val;
 	uint64_t set_clk_val;
-	struct spacemit_drm_private *priv = dpu->crtc.dev->dev_private;
-	struct spacemit_hw_device *hwdev = priv->hwdev;
+	struct spacemit_drm_private *priv;
+	struct spacemit_hw_device *hwdev;
+
+	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
+
+	if (!dpu->is_probed) {
+		if (dpu->type == HDMI) {
+			clk_prepare_enable(clk_ctx->hmclk);
+		} else if (dpu->type == DSI) {
+			clk_prepare_enable(clk_ctx->pxclk);
+			clk_prepare_enable(clk_ctx->mclk);
+			clk_prepare_enable(clk_ctx->hclk);
+			clk_prepare_enable(clk_ctx->escclk);
+			clk_prepare_enable(clk_ctx->bitclk);
+		}
+		udelay(10);
+		dpu_finish_uboot(dpu);
+		return 0;
+	}
+
+	priv = dpu->crtc.dev->dev_private;
+	hwdev = priv->hwdev;
 
 	if (hwdev->is_hdmi) {
 		clk_prepare_enable(clk_ctx->hmclk);
@@ -490,15 +533,16 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 			clk_val = clk_round_rate(clk_ctx->hmclk, DPU_MCLK_DEFAULT);
 			if (dpu_mclk_exclusive_get()) {
 				clk_set_rate(clk_ctx->hmclk, clk_val);
-				DRM_DEBUG("mclk=%lld\n", clk_val);
+				DRM_DEBUG("set hdmi mclk=%lld\n", clk_val);
 				dpu_mclk_exclusive_put();
 			}
 		}
 
 		clk_val = clk_get_rate(clk_ctx->hmclk);
-		DRM_INFO("hmclk=%lld\n", clk_val);
-	} else {
+		DRM_INFO("get hdmi mclk=%lld\n", clk_val);
 
+		udelay(10);
+	} else {
 		clk_prepare_enable(clk_ctx->pxclk);
 		clk_prepare_enable(clk_ctx->mclk);
 		clk_prepare_enable(clk_ctx->hclk);
@@ -513,7 +557,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 			clk_val = clk_get_rate(clk_ctx->pxclk);
 			if(clk_val != set_clk_val){
 				clk_set_rate(clk_ctx->pxclk, set_clk_val);
-				DRM_DEBUG("pxclk=%lld\n", clk_val);
+				DRM_DEBUG("set pxclk=%lld\n", clk_val);
 			}
 		}
 
@@ -522,7 +566,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 			clk_val = clk_round_rate(clk_ctx->mclk, DPU_MCLK_DEFAULT);
 			if (dpu_mclk_exclusive_get()) {
 				clk_set_rate(clk_ctx->mclk, clk_val);
-				DRM_DEBUG("mclk=%lld\n", clk_val);
+				DRM_DEBUG("set mclk=%lld\n", clk_val);
 				dpu_mclk_exclusive_put();
 			}
 		}
@@ -531,7 +575,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 		if(clk_val != DPU_ESCCLK_DEFAULT){
 			clk_val = clk_round_rate(clk_ctx->escclk, DPU_ESCCLK_DEFAULT);
 			clk_set_rate(clk_ctx->escclk, clk_val);
-			DRM_DEBUG("escclk=%lld\n", clk_val);
+			DRM_DEBUG("set escclk=%lld\n", clk_val);
 		}
 
 		clk_val = clk_get_rate(clk_ctx->bitclk);
@@ -539,19 +583,21 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 		if(clk_val != set_clk_val){
 			clk_val = clk_round_rate(clk_ctx->bitclk, set_clk_val);
 			clk_set_rate(clk_ctx->bitclk, clk_val);
-			DRM_DEBUG("bitclk=%lld\n", clk_val);
+			DRM_DEBUG("set bitclk=%lld\n", clk_val);
 		}
 
 		clk_val = clk_get_rate(clk_ctx->pxclk);
-		DRM_INFO("pxclk=%lld\n", clk_val);
+		DRM_INFO("get pxclk=%lld\n", clk_val);
 		clk_val = clk_get_rate(clk_ctx->mclk);
-		DRM_INFO("mclk=%lld\n", clk_val);
+		DRM_INFO("get mclk=%lld\n", clk_val);
 		clk_val = clk_get_rate(clk_ctx->hclk);
-		DRM_INFO("hclk=%lld\n", clk_val);
+		DRM_INFO("get hclk=%lld\n", clk_val);
 		clk_val = clk_get_rate(clk_ctx->escclk);
-		DRM_INFO("escclk=%lld\n", clk_val);
+		DRM_INFO("get escclk=%lld\n", clk_val);
 		clk_val = clk_get_rate(clk_ctx->bitclk);
-		DRM_INFO("bitclk=%lld\n", clk_val);
+		DRM_INFO("get bitclk=%lld\n", clk_val);
+
+		udelay(10);
 	}
 
 	trace_dpu_enable_clocks(dpu->dev_id);
@@ -562,11 +608,29 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 static int dpu_disable_clocks(struct spacemit_dpu *dpu)
 {
 	struct dpu_clk_context *clk_ctx = &dpu->clk_ctx;
-	struct spacemit_drm_private *priv = dpu->crtc.dev->dev_private;
-	struct spacemit_hw_device *hwdev = priv->hwdev;
+	struct spacemit_drm_private *priv;
+	struct spacemit_hw_device *hwdev;
+
+	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
 
 	trace_dpu_disable_clocks(dpu->dev_id);
 
+	if (!dpu->is_probed) {
+		if (dpu->type == HDMI) {
+			clk_disable_unprepare(clk_ctx->hmclk);
+		} else if (dpu->type == DSI) {
+			clk_disable_unprepare(clk_ctx->pxclk);
+			clk_disable_unprepare(clk_ctx->mclk);
+			clk_disable_unprepare(clk_ctx->hclk);
+			clk_disable_unprepare(clk_ctx->escclk);
+			clk_disable_unprepare(clk_ctx->bitclk);
+		}
+		return 0;
+	}
+
+	priv = dpu->crtc.dev->dev_private;
+	hwdev = priv->hwdev;
+
 	if (hwdev->is_hdmi) {
 		clk_disable_unprepare(clk_ctx->hmclk);
 	} else {
@@ -1359,11 +1423,11 @@ static void saturn_init_regs(struct spacemit_dpu *dpu)
 	dpu_write_reg(hwdev, OUTCTRL_TOP_X_REG, base, eof1_irq_mask, 1);
 	dpu_write_reg(hwdev, OUTCTRL_TOP_X_REG, base, underflow1_irq_mask, 1);
 
-	if (hwdev->is_hdmi) {
-		dpu_write_reg(hwdev, OUTCTRL_TOP_X_REG, base, disp_ready_man_en, 1);
-		val = dpu_read_reg(hwdev, OUTCTRL_TOP_X_REG, base, value32[31]);
-		DRM_INFO("%s read OUTCTRL_TOP_X_REG value32[31] 0x%x", __func__, val);
-	}
+	// if (hwdev->is_hdmi) {
+	// 	dpu_write_reg(hwdev, OUTCTRL_TOP_X_REG, base, disp_ready_man_en, 1);
+	// 	val = dpu_read_reg(hwdev, OUTCTRL_TOP_X_REG, base, value32[31]);
+	// 	DRM_INFO("%s read OUTCTRL_TOP_X_REG value32[31] 0x%x", __func__, val);
+	// }
 
 	dpu_write_reg(hwdev, DPU_CTL_REG, DPU_CTRL_BASE_ADDR, ctl2_video_mod, 0x1);
 	dpu_write_reg(hwdev, DPU_CTL_REG, DPU_CTRL_BASE_ADDR, ctl2_dbg_mod, 0x0);
@@ -1480,11 +1544,13 @@ static int dpu_init(struct spacemit_dpu *dpu)
 
 	// modified hdmi and mipi dsi qos
 	value = readl_relaxed(ciu_addr + 0x011c);
-	DRM_INFO("%s ciu offset 0x011c:0x%x\n", __func__, value);
+	DRM_DEBUG("%s ciu offset 0x011c:0x%x\n", __func__, value);
+	value = readl_relaxed(ciu_addr + 0x0124);
+	DRM_DEBUG("%s ciu offset 0x0124:0x%x\n", __func__, value);
 	writel(value | 0xffff, ciu_addr + 0x0124);
 	udelay(2);
 	value = readl_relaxed(ciu_addr + 0x0124);
-	DRM_INFO("%s ciu offset 0x0124:0x%x\n", __func__, value);
+	DRM_DEBUG("%s ciu offset 0x0124:0x%x\n", __func__, value);
 
 	saturn_init_regs(dpu);
 	saturn_setup_dma_top(dpu);
@@ -1628,7 +1694,7 @@ static void dpu_run(struct drm_crtc *crtc,
 	saturn_ctrl_cfg_ready(dpu, true);
 
 	if (unlikely(dpu->is_1st_f)) {
-		DRM_INFO("DPU %d Start!\n", dpu->dev_id);
+		DRM_INFO("DPU type %d id %d Start!\n", dpu->type, dpu->dev_id);
 		dpu->is_1st_f = false;
 		saturn_ctrl_sw_start(dpu, true);
 	}
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.c b/drivers/gpu/drm/spacemit/spacemit_dpu.c
index 5213dc3a3fc0..cbb43fbc1f84 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.c
@@ -293,9 +293,6 @@ static void spacemit_crtc_atomic_enable(struct drm_crtc *crtc,
 				   struct drm_atomic_state *old_state)
 {
 	struct spacemit_dpu *dpu = crtc_to_dpu(crtc);
-	struct spacemit_drm_private *priv = dpu->crtc.dev->dev_private;
-	struct spacemit_hw_device *hwdev = priv->hwdev;
-	int result;
 
 	DRM_INFO("%s(power on)\n", __func__);
 	trace_spacemit_crtc_atomic_enable(dpu->dev_id);
@@ -306,12 +303,6 @@ static void spacemit_crtc_atomic_enable(struct drm_crtc *crtc,
 		spacemit_dpu_free_bootloader_mem();
 	}
 
-	if (hwdev->is_hdmi && (!IS_ERR_OR_NULL(dpu->hdmi_reset))) {
-		result = reset_control_deassert(dpu->hdmi_reset);
-		if (result < 0) {
-			DRM_INFO("Failed to deassert hdmi: %d\n", result);
-		}
-	}
 	pm_runtime_get_sync(dpu->dev);
 
 #ifdef CONFIG_SPACEMIT_DEBUG
@@ -327,9 +318,6 @@ static void spacemit_crtc_atomic_disable(struct drm_crtc *crtc,
 {
 	struct spacemit_dpu *dpu = crtc_to_dpu(crtc);
 	struct drm_device *drm = dpu->crtc.dev;
-	struct spacemit_drm_private *priv = dpu->crtc.dev->dev_private;
-	struct spacemit_hw_device *hwdev = priv->hwdev;
-	int result;
 
 	DRM_INFO("%s(power off)\n", __func__);
 	trace_spacemit_crtc_atomic_disable(dpu->dev_id);
@@ -342,12 +330,6 @@ static void spacemit_crtc_atomic_disable(struct drm_crtc *crtc,
 #endif
 
 	pm_runtime_put(dpu->dev);
-	if (hwdev->is_hdmi && (!IS_ERR_OR_NULL(dpu->hdmi_reset))) {
-		result = reset_control_assert(dpu->hdmi_reset);
-		if (result < 0) {
-			DRM_INFO("Failed to assert hdmi: %d\n", result);
-		}
-	}
 
 	spin_lock_irq(&drm->event_lock);
 	if (crtc->state->event) {
@@ -647,7 +629,7 @@ int spacemit_dpu_run(struct drm_crtc *crtc,
 {
 	struct spacemit_dpu *dpu = crtc_to_dpu(crtc);
 
-	DRM_DEBUG("%s()\n", __func__);
+	DRM_DEBUG("%s() type %d \n", __func__, dpu->type);
 	trace_spacemit_dpu_run(dpu->dev_id);
 
 	if (unlikely(spacemit_dpu_logo_booton))
@@ -661,6 +643,7 @@ int spacemit_dpu_run(struct drm_crtc *crtc,
 
 int spacemit_dpu_stop(struct spacemit_dpu *dpu)
 {
+	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
 	trace_spacemit_dpu_stop(dpu->dev_id);
 
 	if (dpu->core && dpu->core->stop)
@@ -796,6 +779,7 @@ static int spacemit_dpu_bind(struct device *dev, struct device *master, void *da
 #ifdef CONFIG_SPACEMIT_DEBUG
 	struct dpu_clk_context *clk_ctx = NULL;
 #endif
+	DRM_DEBUG("%s()\n", __func__);
 
 	ret = spacemit_dpu_irqs_init(dpu, np, pdev);
 	if (ret)
@@ -866,37 +850,6 @@ static void spacemit_dpu_unbind(struct device *dev, struct device *master,
 
 	DRM_DEBUG("%s()\n", __func__);
 
-	if (!IS_ERR_OR_NULL(dpu->esc_reset)) {
-		result = reset_control_assert(dpu->esc_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to assert esc_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->lcd_reset)) {
-		result = reset_control_assert(dpu->lcd_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to assert lcd_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->mclk_reset)) {
-		result = reset_control_assert(dpu->mclk_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to assert mclk_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->dsi_reset)) {
-		result = reset_control_assert(dpu->dsi_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to assert dsi_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->hdmi_reset)) {
-		result = reset_control_assert(dpu->hdmi_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to assert hdmi_reset: %d\n", result);
-		}
-	}
-
 	pm_runtime_disable(dev);
 	of_reserved_mem_device_release(dpu->dev);
 	drm_crtc_cleanup(&dpu->crtc);
@@ -923,6 +876,7 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 #endif
 	const char *str;
 	u32 dpu_id;
+	u32 dpu_type;
 	int result;
 
 	DRM_DEBUG("%s()\n", __func__);
@@ -943,6 +897,10 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 		return -EINVAL;
 	dpu->dev_id = dpu_id;
 
+	if (of_property_read_u32(np, "type", &dpu_type))
+		return -EINVAL;
+	dpu->type = dpu_type;
+
 	if (!of_property_read_string(np, "ip", &str)) {
 		dpu->core = dpu_core_ops_attach(str);
 	} else
@@ -966,25 +924,33 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	}
 #endif
 
-	dpu->dsi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "dsi_reset");
-	if (IS_ERR_OR_NULL(dpu->dsi_reset)) {
-		DRM_DEV_DEBUG(dev, "not found dsi_reset\n");
-	}
-	dpu->mclk_reset = devm_reset_control_get_optional_shared(&pdev->dev, "mclk_reset");
-	if (IS_ERR_OR_NULL(dpu->mclk_reset)) {
-		DRM_DEV_DEBUG(dev, "not found mclk_reset\n");
-	}
-	dpu->lcd_reset = devm_reset_control_get_optional_shared(&pdev->dev, "lcd_reset");
-	if (IS_ERR_OR_NULL(dpu->lcd_reset)) {
-		DRM_DEV_DEBUG(dev, "not found lcd_reset\n");
-	}
-	dpu->esc_reset = devm_reset_control_get_optional_shared(&pdev->dev, "esc_reset");
-	if (IS_ERR_OR_NULL(dpu->esc_reset)) {
-		DRM_DEV_DEBUG(dev, "not found esc_reset\n");
-	}
-	dpu->hdmi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "hdmi_reset");
-	if (IS_ERR_OR_NULL(dpu->hdmi_reset)) {
-		DRM_DEV_DEBUG(dev, "not found hdmi_reset\n");
+	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
+
+	if (dpu->type == DSI) {
+		dpu->dsi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "dsi_reset");
+		if (IS_ERR_OR_NULL(dpu->dsi_reset)) {
+			DRM_DEV_DEBUG(dev, "not found dsi_reset\n");
+		}
+		dpu->mclk_reset = devm_reset_control_get_optional_shared(&pdev->dev, "mclk_reset");
+		if (IS_ERR_OR_NULL(dpu->mclk_reset)) {
+			DRM_DEV_DEBUG(dev, "not found mclk_reset\n");
+		}
+		dpu->esc_reset = devm_reset_control_get_optional_shared(&pdev->dev, "esc_reset");
+		if (IS_ERR_OR_NULL(dpu->esc_reset)) {
+			DRM_DEV_DEBUG(dev, "not found esc_reset\n");
+		}
+		dpu->lcd_reset = devm_reset_control_get_optional_shared(&pdev->dev, "lcd_reset");
+		if (IS_ERR_OR_NULL(dpu->lcd_reset)) {
+			DRM_DEV_DEBUG(dev, "not found lcd_reset\n");
+		}
+	} else if (dpu->type == HDMI) {
+		dpu->hdmi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "hdmi_reset");
+		if (IS_ERR_OR_NULL(dpu->hdmi_reset)) {
+			DRM_DEV_DEBUG(dev, "not found hdmi_reset\n");
+		}
+	} else {
+		DRM_DEV_ERROR(dev, "can't find dpu type %d\n", dpu->type);
+		return -ENODEV;
 	}
 
 	// reset dpu
@@ -1002,37 +968,6 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	if (spacemit_dpu_logo_booton)
 		pm_runtime_get_sync(&pdev->dev);
 
-	if (!IS_ERR_OR_NULL(dpu->dsi_reset)) {
-		result = reset_control_deassert(dpu->dsi_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to deassert dsi_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->mclk_reset)) {
-		result = reset_control_deassert(dpu->mclk_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to deassert mclk_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->esc_reset)) {
-		result = reset_control_deassert(dpu->esc_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to deassert esc_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->lcd_reset)) {
-		result = reset_control_deassert(dpu->lcd_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to deassert lcd_reset: %d\n", result);
-		}
-	}
-	if (!IS_ERR_OR_NULL(dpu->hdmi_reset)) {
-		result = reset_control_deassert(dpu->hdmi_reset);
-		if (result < 0) {
-			DRM_DEV_INFO(dev, "Failed to deassert hdmi_reset: %d\n", result);
-		}
-	}
-
 	dpu->is_probed = true;
 
 	return component_add(dev, &dpu_component_ops);
@@ -1047,22 +982,99 @@ static int spacemit_dpu_remove(struct platform_device *pdev)
 static int dpu_rt_pm_suspend(struct device *dev)
 {
 	struct spacemit_dpu *dpu = dev_get_drvdata(dev);
+	// struct spacemit_drm_private *priv;
+	// struct spacemit_hw_device *hwdev;
+	// priv = dpu->crtc.dev->dev_private;
+	// hwdev = priv->hwdev;
+	int result;
 
-	if (!dpu->is_probed)
-		return 0;
+	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
 
 	if (dpu->core && dpu->core->disable_clk)
 		dpu->core->disable_clk(dpu);
 
+	if (dpu->type == HDMI) {
+		if (!IS_ERR_OR_NULL(dpu->hdmi_reset)) {
+			result = reset_control_assert(dpu->hdmi_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to assert hdmi_reset: %d\n", result);
+			}
+		}
+	} else if (dpu->type == DSI) {
+
+		if (!IS_ERR_OR_NULL(dpu->lcd_reset)) {
+			result = reset_control_assert(dpu->lcd_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to assert lcd_reset: %d\n", result);
+			}
+		}
+		if (!IS_ERR_OR_NULL(dpu->esc_reset)) {
+			result = reset_control_assert(dpu->esc_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to assert esc_reset: %d\n", result);
+			}
+		}
+		if (!IS_ERR_OR_NULL(dpu->mclk_reset)) {
+			result = reset_control_assert(dpu->mclk_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to assert mclk_reset: %d\n", result);
+			}
+		}
+		if (!IS_ERR_OR_NULL(dpu->dsi_reset)) {
+			result = reset_control_assert(dpu->dsi_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to assert dsi_reset: %d\n", result);
+			}
+		}
+	}
+
 	return 0;
 }
 
 static int dpu_rt_pm_resume(struct device *dev)
 {
 	struct spacemit_dpu *dpu = dev_get_drvdata(dev);
+	// struct spacemit_drm_private *priv;
+	// struct spacemit_hw_device *hwdev;
+	// priv = dpu->crtc.dev->dev_private;
+	// hwdev = priv->hwdev;
+	int result;
 
-	if (!dpu->is_probed)
-		return 0;
+	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
+
+	if (dpu->type == HDMI) {
+		if (!IS_ERR_OR_NULL(dpu->hdmi_reset)) {
+			result = reset_control_deassert(dpu->hdmi_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to deassert hdmi_reset: %d\n", result);
+			}
+		}
+	} else if (dpu->type == DSI){
+		if (!IS_ERR_OR_NULL(dpu->dsi_reset)) {
+			result = reset_control_deassert(dpu->dsi_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to deassert dsi_reset: %d\n", result);
+			}
+		}
+		if (!IS_ERR_OR_NULL(dpu->mclk_reset)) {
+			result = reset_control_deassert(dpu->mclk_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to deassert mclk_reset: %d\n", result);
+			}
+		}
+		if (!IS_ERR_OR_NULL(dpu->esc_reset)) {
+			result = reset_control_deassert(dpu->esc_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to deassert esc_reset: %d\n", result);
+			}
+		}
+		if (!IS_ERR_OR_NULL(dpu->lcd_reset)) {
+			result = reset_control_deassert(dpu->lcd_reset);
+			if (result < 0) {
+				DRM_INFO("Failed to deassert lcd_reset: %d\n", result);
+			}
+		}
+	}
 
 	if (dpu->core && dpu->core->enable_clk)
 		dpu->core->enable_clk(dpu);
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.h b/drivers/gpu/drm/spacemit/spacemit_dpu.h
index d57fce633833..a7d986d32495 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.h
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.h
@@ -125,6 +125,7 @@ struct spacemit_dpu {
 	struct work_struct work_update_bw;
 	struct dpu_mmu_tbl mmu_tbl;
 	int dev_id;
+	int type;
 	bool enable_dump_reg;
 	bool enable_dump_fps;
 	bool enable_auto_fc;
diff --git a/drivers/gpu/drm/spacemit/spacemit_hdmi.c b/drivers/gpu/drm/spacemit/spacemit_hdmi.c
index 0ddcdea834fd..50c954e1f770 100644
--- a/drivers/gpu/drm/spacemit/spacemit_hdmi.c
+++ b/drivers/gpu/drm/spacemit/spacemit_hdmi.c
@@ -66,6 +66,9 @@ struct spacemit_hdmi {
 	struct drm_connector	connector;
 	struct drm_encoder encoder;
 
+	struct reset_control *hdmi_reset;
+	struct clk *hdmi_mclk;
+
 	unsigned int tmds_rate;
 
 	bool edid_done;
@@ -838,7 +841,27 @@ static int spacemit_hdmi_bind(struct device *dev, struct device *master,
 	else
 		hdmi->use_no_edid = false;
 
+	hdmi->hdmi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "hdmi_reset");
+	if (IS_ERR_OR_NULL(hdmi->hdmi_reset)) {
+		DRM_INFO("Failed to found hdmi_reset\n");
+	}
+
+	hdmi->hdmi_mclk = of_clk_get_by_name(dev->of_node, "hmclk");
+	if (IS_ERR(hdmi->hdmi_mclk)) {
+		DRM_INFO("Failed to found hdmi mclk\n");
+	}
+
+	dev_set_drvdata(dev, hdmi);
+
 	pm_runtime_enable(&pdev->dev);
+
+	if (!IS_ERR_OR_NULL(hdmi->hdmi_reset)) {
+		ret = reset_control_deassert(hdmi->hdmi_reset);
+		if (ret < 0) {
+			DRM_INFO("Failed to deassert hdmi_reset\n");
+		}
+	}
+
 	pm_runtime_get_sync(&pdev->dev);
 
 	irq = platform_get_irq(pdev, 0);
@@ -853,8 +876,6 @@ static int spacemit_hdmi_bind(struct device *dev, struct device *master,
 
 	ret = spacemit_hdmi_register(drm, hdmi);
 
-	dev_set_drvdata(dev, hdmi);
-
 	ret = devm_request_threaded_irq(dev, irq, spacemit_hdmi_hardirq,
 					spacemit_hdmi_irq, IRQF_SHARED,
 					dev_name(dev), hdmi);
@@ -875,6 +896,7 @@ static void spacemit_hdmi_unbind(struct device *dev, struct device *master,
 {
 	struct platform_device *pdev = to_platform_device(dev);
 	struct spacemit_hdmi *hdmi = dev_get_drvdata(dev);
+	int ret;
 
 	DRM_INFO("%s() \n", __func__);
 
@@ -882,6 +904,12 @@ static void spacemit_hdmi_unbind(struct device *dev, struct device *master,
 	hdmi->encoder.funcs->destroy(&hdmi->encoder);
 
 	pm_runtime_put_sync(&pdev->dev);
+	if (!IS_ERR_OR_NULL(hdmi->hdmi_reset)) {
+		ret = reset_control_assert(hdmi->hdmi_reset);
+		if (ret < 0) {
+			DRM_INFO("Failed to assert hdmi_reset\n");
+		}
+	}
 	pm_runtime_disable(dev);
 }
 
@@ -906,6 +934,43 @@ static int spacemit_hdmi_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static int hdmi_rt_pm_resume(struct device *dev)
+{
+	struct spacemit_hdmi *hdmi = dev_get_drvdata(dev);
+	uint64_t clk_val;
+
+	DRM_DEBUG("%s()\n", __func__);
+
+	clk_prepare_enable(hdmi->hdmi_mclk);
+
+	clk_val = clk_get_rate(hdmi->hdmi_mclk);
+	DRM_INFO("get hdmi mclk=%lld\n", clk_val);
+	if(clk_val != DPU_MCLK_DEFAULT){
+		clk_val = clk_round_rate(hdmi->hdmi_mclk, DPU_MCLK_DEFAULT);
+		clk_set_rate(hdmi->hdmi_mclk, clk_val);
+		DRM_INFO("set hdmi mclk=%lld\n", clk_val);
+	}
+
+	return 0;
+}
+
+static int hdmi_rt_pm_suspend(struct device *dev)
+{
+	struct spacemit_hdmi *hdmi = dev_get_drvdata(dev);
+
+	DRM_DEBUG("%s()\n", __func__);
+
+	clk_disable_unprepare(hdmi->hdmi_mclk);
+
+	return 0;
+}
+
+static const struct dev_pm_ops hdmi_pm_ops = {
+	SET_RUNTIME_PM_OPS(hdmi_rt_pm_suspend,
+			hdmi_rt_pm_resume,
+			NULL)
+};
+
 static const struct of_device_id spacemit_hdmi_dt_ids[] = {
 	{ .compatible = "spacemit,hdmi",
 	},
@@ -919,6 +984,7 @@ struct platform_driver spacemit_hdmi_driver = {
 	.driver = {
 		.name = "spacemit-hdmi-drv",
 		.of_match_table = spacemit_hdmi_dt_ids,
+		.pm = &hdmi_pm_ops,
 	},
 };
 
diff --git a/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c b/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c
index 39acde5f6f57..1a83ecb18275 100644
--- a/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c
+++ b/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c
@@ -653,8 +653,6 @@ static int spacemit_panel_probe(struct mipi_dsi_device *slave)
 
 	drm_panel_add(&panel->base);
 
-	backlight_enable(panel->base.backlight);
-
 	slave->lanes = panel->info.lanes;
 	slave->format = panel->info.format;
 	slave->mode_flags = panel->info.mode_flags;
diff --git a/include/dt-bindings/display/spacemit-dpu.h b/include/dt-bindings/display/spacemit-dpu.h
index cac81efd508f..e1c51f95a5f2 100644
--- a/include/dt-bindings/display/spacemit-dpu.h
+++ b/include/dt-bindings/display/spacemit-dpu.h
@@ -3,6 +3,10 @@
 #ifndef SPACEMIT_DT_BINDINGS_DISPLAY_DPU_H
 #define SPACEMIT_DT_BINDINGS_DISPLAY_DPU_H
 
+/* DPU type */
+#define HDMI            0
+#define DSI             1
+
 /* DPU sub component */
 #define ONLINE0		0
 #define ONLINE1		1
-- 
2.47.0

