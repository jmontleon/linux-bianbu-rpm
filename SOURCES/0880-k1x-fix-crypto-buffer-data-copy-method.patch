From 2660286bb12ea7ae793b8ac09fbdc835da245368 Mon Sep 17 00:00:00 2001
From: yanhaodong <haodong.yan@spacemit.com>
Date: Thu, 20 Jun 2024 17:24:41 +0800
Subject: [PATCH 0880/1203] k1x:fix crypto buffer data copy method

Change-Id: Id15a97c465d4b2e75e73e6cb2c0975487c7dd7e2
---
 drivers/crypto/spacemit/spacemit-ce-glue.c | 24 +++++++++++-----------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/crypto/spacemit/spacemit-ce-glue.c b/drivers/crypto/spacemit/spacemit-ce-glue.c
index b7315a95e284..a6cc7f5a0cdd 100644
--- a/drivers/crypto/spacemit/spacemit-ce-glue.c
+++ b/drivers/crypto/spacemit/spacemit-ce-glue.c
@@ -65,10 +65,10 @@ static int ecb_encrypt(struct skcipher_request *req)
 			page_len = singal_len = total_len;
 
 		if(singal_len % AES_BLOCK_SIZE)
-			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
+			singal_len = (page_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = start_srcsg,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len < page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -126,10 +126,10 @@ static int ecb_decrypt(struct skcipher_request *req)
 		else
 			page_len = singal_len = total_len;
 		if(singal_len % AES_BLOCK_SIZE)
-			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
+			singal_len = (page_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = start_srcsg,len = 0;len<page_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len < page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -187,10 +187,10 @@ static int cbc_encrypt(struct skcipher_request *req)
 			page_len = singal_len = total_len;
 
 		if(singal_len % AES_BLOCK_SIZE)
-			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
+			singal_len = (page_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = start_srcsg,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len < page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -248,10 +248,10 @@ static int cbc_decrypt(struct skcipher_request *req)
 		else
 			page_len = singal_len = total_len;
 		if(singal_len % AES_BLOCK_SIZE)
-			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
+			singal_len = (page_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = start_srcsg,len = 0;len<page_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len < page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -310,10 +310,10 @@ static int xts_encrypt(struct skcipher_request *req)
 			page_len = singal_len = total_len;
 
 		if(singal_len % AES_BLOCK_SIZE)
-			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
+			singal_len = (page_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = start_srcsg,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len < page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -372,10 +372,10 @@ static int xts_decrypt(struct skcipher_request *req)
 		else
 			page_len = singal_len = total_len;
 		if(singal_len % AES_BLOCK_SIZE)
-			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
+			singal_len = (page_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = start_srcsg,len = 0;len<page_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len < page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
-- 
2.47.0

