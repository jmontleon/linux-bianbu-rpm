From 8e7d385634393430a4de811b109f06e2207c75ac Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Tue, 28 Nov 2023 14:26:57 +0800
Subject: [PATCH 0166/1203] qspi: update the opertions of clk and reset for k1x
 qspi driver

Change-Id: I1b8b987a06d86aa5be7227992140e55a6953c1c2
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi |  4 +-
 drivers/spi/spi-k1x-qspi.c             | 60 +++++++++-----------------
 2 files changed, 23 insertions(+), 41 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index a57d9b62be2a..0bcdbd971a50 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -917,8 +917,10 @@ qspi: spi@d420c000 {
 			k1x,qspi-sfa2ad = <0x100000>;
 			k1x,qspi-sfb1ad = <0x100000>;
 			k1x,qspi-sfb2ad = <0x100000>;
-			//clocks = <&clock CLK_QSPI &clock CLK_QSPI_BUS>;
+			clocks = <&ccu CLK_QSPI>,
+				<&ccu CLK_QSPI_BUS>;
 			clock-names = "qspi_clk", "qspi_bus_clk";
+			reset-names = "qspi_reset", "qspi_bus_reset";
 			k1x,qspi-pmuap-reg = <0xd4282860>;
 			k1x,qspi-mpmu-acgr-reg = <0xd4051024>;
 			k1x,qspi-freq = <26500000>;
diff --git a/drivers/spi/spi-k1x-qspi.c b/drivers/spi/spi-k1x-qspi.c
index dd2339e2928a..25913e050d2f 100755
--- a/drivers/spi/spi-k1x-qspi.c
+++ b/drivers/spi/spi-k1x-qspi.c
@@ -29,7 +29,7 @@
 #include <linux/sizes.h>
 #include <linux/spi/spi.h>
 #include <linux/spi/spi-mem.h>
-
+#include <linux/reset.h>
 
 //#define K1X_DUMP_QSPI_REG
 
@@ -313,6 +313,8 @@ struct k1x_qspi {
 	u32 dma_enable;
 
 	struct clk *clk, *bus_clk;
+	struct reset_control *resets;
+
 	struct completion cmd_completion;
 	struct mutex lock;
 	struct dev_pm_qos_request pm_qos_req;
@@ -387,43 +389,8 @@ static u32 qspi_readl(struct k1x_qspi *qspi, void __iomem *addr)
 		return ioread32(addr);
 }
 
-static void qspi_bus_clk_enable(struct k1x_qspi *qspi, int enable)
-{
-	u32 mask = 0x9;
-	u32 val = 0, enable_val = 0x1, disable_val = 0x0;
-
-	val = readl(qspi->pmuap_addr);
-	if (enable) {
-		val |= (mask & enable_val);
-		val &= ~(mask & disable_val);
-	} else {
-		val |= (mask & disable_val);
-		val &= ~(mask & enable_val);
-	}
-
-	writel(val, qspi->pmuap_addr);
-}
-
-static void qspi_clk_enable(struct k1x_qspi *qspi, int enable)
-{
-	u32 mask = 0x12;
-	u32 val = 0, enable_val = 0x2, disable_val = 0x0;
-
-	val = readl(qspi->pmuap_addr);
-	if (enable) {
-		val |= (mask & enable_val);
-		val &= ~(mask & disable_val);
-	} else {
-		val |= (mask & disable_val);
-		val &= ~(mask & enable_val);
-	}
-
-	writel(val, qspi->pmuap_addr);
-}
-
 static int qspi_set_func_clk(struct k1x_qspi *qspi)
 {
-#if 0
 	int ret = 0;
 
 	qspi->clk = devm_clk_get(qspi->dev, "qspi_clk");
@@ -454,10 +421,6 @@ static int qspi_set_func_clk(struct k1x_qspi *qspi)
 		dev_err(qspi->dev, "fail to enable clk, ret:%d\n", ret);
 		return ret;
 	}
-#endif
-
-	qspi_bus_clk_enable(qspi, 1);
-	qspi_clk_enable(qspi, 1);
 
 	dev_notice(qspi->dev, "bus clock %dHz, PMUap reg[0x%08x]:0x%08x\n",
 		qspi->max_hz, qspi->pmuap_reg, qspi_readl(qspi, qspi->pmuap_addr));
@@ -465,6 +428,19 @@ static int qspi_set_func_clk(struct k1x_qspi *qspi)
 	return 0;
 }
 
+static int qspi_controller_reset(struct k1x_qspi *qspi)
+{
+	qspi->resets = devm_reset_control_array_get_optional_exclusive(qspi->dev);
+	if (IS_ERR(qspi->resets)) {
+		dev_err(qspi->dev, "Failed to get qspi's resets\n");
+		return PTR_ERR(qspi->resets);
+	}
+
+	reset_control_deassert(qspi->resets);
+	return 0;
+}
+
+
 static void qspi_config_mfp(struct k1x_qspi *qspi)
 {
 	int cs = qspi->cs_selected;
@@ -1363,6 +1339,9 @@ static int k1x_qspi_host_init(struct k1x_qspi *qspi)
 	/* set PMUap */
 	qspi_set_func_clk(qspi);
 
+	/* reset qspi controller */
+	qspi_controller_reset(qspi);
+
 	/* rest qspi */
 	qspi_reset(qspi);
 
@@ -1654,6 +1633,7 @@ static int k1x_qspi_remove(struct platform_device *pdev)
 	mutex_destroy(&qspi->lock);
 	iounmap(qspi->pmuap_addr);
 
+	reset_control_assert(qspi->resets);
 	clk_disable_unprepare(qspi->clk);
 	clk_disable_unprepare(qspi->bus_clk);
 
-- 
2.47.0

