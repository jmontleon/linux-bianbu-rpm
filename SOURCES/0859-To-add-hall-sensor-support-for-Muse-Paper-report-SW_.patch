From 0ef7ac81ae3b28f115cddb43c011e3746b85ee49 Mon Sep 17 00:00:00 2001
From: goumin <min.gou@spacemit.com>
Date: Tue, 30 Jul 2024 15:40:04 +0800
Subject: [PATCH 0859/1200] To add hall sensor support for Muse-Paper, report
 SW_LID and KEY_POWER events.

Change-Id: Ia91bf1d3966e5a0fa8c67e4c37a7b1a9e1fb0bc7
---
 .../boot/dts/spacemit/k1-x_MUSE-Paper.dts     |  11 ++
 arch/riscv/configs/k1_defconfig               |   1 +
 drivers/input/misc/Kconfig                    |   7 ++
 drivers/input/misc/Makefile                   |   1 +
 drivers/input/misc/hall_sensor_as1911.c       | 118 ++++++++++++++++++
 5 files changed, 138 insertions(+)
 create mode 100755 drivers/input/misc/hall_sensor_as1911.c

diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts
index 0492d40ddbd3..ecec756d1645 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Paper.dts
@@ -161,6 +161,17 @@ bt_pwrseq: bt-pwrseq {
 			reset-gpios     = <&gpio 63 0>;
 		};
 	};
+
+	usb2hub: usb2hub {
+		compatible = "spacemit,usb3-hub";
+		vbus-gpios = <&gpio 91 0>;	/* for usb2 hub output vbus */
+		status = "okay";
+	};
+
+	hall_sensor: hall-sensor {
+		compatible = "spacemit,hall-sensor-as1911";
+		detect-gpio = <&gpio 74 0>;
+	};
 };
 
 &uart0 {
diff --git a/arch/riscv/configs/k1_defconfig b/arch/riscv/configs/k1_defconfig
index a9927f1de318..e59775825179 100644
--- a/arch/riscv/configs/k1_defconfig
+++ b/arch/riscv/configs/k1_defconfig
@@ -365,6 +365,7 @@ CONFIG_TOUCHSCREEN_GOODIX=y
 CONFIG_INPUT_MISC=y
 CONFIG_INPUT_UINPUT=y
 CONFIG_INPUT_SPACEMIT_POWERKEY=y
+CONFIG_HALL_SENSOR_AS1911=y
 CONFIG_SERIO_LIBPS2=y
 CONFIG_SERIAL_EARLYCON_RISCV_SBI=y
 CONFIG_SERIAL_PXA=y
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index e3f2eeb3d237..c2aa3c1d06d5 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -926,6 +926,13 @@ config INPUT_SPACEMIT_POWERKEY
 	  To compile this driver as a module, choose M here: the
 	  module will be called spacemit-pwrkey.
 
+config HALL_SENSOR_AS1911
+	tristate "Spacemit Hall Sensor Driver"
+	depends on INPUT
+	help
+	  Say Y here if you want to enable the Hall sensor AS1911 driver with
+	  interrupt support.
+
 config INPUT_RAVE_SP_PWRBUTTON
 	tristate "RAVE SP Power button Driver"
 	depends on RAVE_SP_CORE
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 30d4ed8dadc6..a6f6411da4d4 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -93,3 +93,4 @@ obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
 obj-$(CONFIG_INPUT_SPACEMIT_POWERKEY)	+= spacemit-pwrkey.o
+obj-$(CONFIG_HALL_SENSOR_AS1911)	+= hall_sensor_as1911.o
\ No newline at end of file
diff --git a/drivers/input/misc/hall_sensor_as1911.c b/drivers/input/misc/hall_sensor_as1911.c
new file mode 100755
index 000000000000..c80dfff44696
--- /dev/null
+++ b/drivers/input/misc/hall_sensor_as1911.c
@@ -0,0 +1,118 @@
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/input.h>
+#include <linux/gpio.h>
+#include <linux/property.h>
+#include <linux/of.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/of_gpio.h>
+
+/**
+ * struct hall_sensor
+ *
+ * This struct is used by the hall_sensor driver to setup GPIO lines and to
+ * detect state changes using interrupts.
+ */
+struct hall_sensor {
+	int gpio;
+	int irq;
+	struct input_dev *input;
+	int lid_open;  // Indicates the lid state: 1 means the lid is open, 0 means the lid is closed
+};
+
+static irqreturn_t hall_sensor_isr(int irq, void *dev_id)
+{
+	struct hall_sensor *sensor = dev_id;
+	int state = gpio_get_value(sensor->gpio);
+
+	if (sensor->lid_open != state) {
+		sensor->lid_open = state;
+
+		// Report the lid state
+		input_report_switch(sensor->input, SW_LID, state);
+
+		// Send KEY_POWER event
+		input_report_key(sensor->input, KEY_POWER, 1);
+		input_sync(sensor->input);
+		input_report_key(sensor->input, KEY_POWER, 0);
+		input_sync(sensor->input);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static int hall_sensor_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct hall_sensor *sensor;
+	int err;
+	int detect_pin;
+
+	sensor = devm_kzalloc(dev, sizeof(*sensor), GFP_KERNEL);
+	if (!sensor)
+		return -ENOMEM;
+
+	detect_pin = of_get_named_gpio(dev->of_node, "detect-gpio", 0);
+	if (detect_pin < 0)
+		return -EINVAL;
+
+	err = devm_gpio_request_one(dev, detect_pin, GPIOF_IN, "detect-gpio");
+	if (err)
+		return err;
+
+	sensor->gpio = detect_pin;
+
+	sensor->irq = gpio_to_irq(detect_pin);
+	if (sensor->irq < 0)
+		return sensor->irq;
+
+	sensor->input = devm_input_allocate_device(dev);
+	if (!sensor->input)
+		return -ENOMEM;
+
+	sensor->input->name = pdev->name;
+	sensor->input->id.bustype = BUS_HOST;
+
+	input_set_drvdata(sensor->input, sensor);
+
+	input_set_capability(sensor->input, EV_SW, SW_LID);
+	input_set_capability(sensor->input, EV_KEY, KEY_POWER);
+
+	err = devm_request_threaded_irq(
+		dev, sensor->irq, NULL, hall_sensor_isr,
+		IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
+		"hall_sensor", sensor);
+	if (err)
+		return err;
+
+	sensor->lid_open = gpio_get_value(sensor->gpio);
+
+	err = input_register_device(sensor->input);
+	if (err)
+		return err;
+
+	return 0;
+}
+
+static const struct of_device_id hall_sensor_of_match[] = {
+	{
+		.compatible = "spacemit,hall-sensor-as1911",
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, hall_sensor_of_match);
+
+static struct platform_driver hall_sensor_device_driver = {
+	.probe = hall_sensor_probe,
+	.driver = {
+		.name = "hall-sensor-as1911",
+		.of_match_table = hall_sensor_of_match,
+	}
+};
+module_platform_driver(hall_sensor_device_driver);
+
+MODULE_AUTHOR("goumin");
+MODULE_DESCRIPTION("Hall sensor driver with interrupt support");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:hall-sensor");
-- 
2.47.0

