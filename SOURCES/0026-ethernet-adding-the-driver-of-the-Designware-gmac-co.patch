From 5e3edbaf61655802c41546f9a21cee34ec8d8e0f Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Mon, 22 May 2023 19:59:48 +0800
Subject: [PATCH 0026/1205] ethernet: adding the driver of the Designware gmac
 controller

Change-Id: I4d50d83d82bdd7edf50de2708d1d319fa625a302
---
 arch/riscv/boot/dts/spacemit/k1-pro.dtsi      |  21 +-
 arch/riscv/configs/k1-pro_fpga_defconfig      |  44 ++-
 drivers/net/ethernet/stmicro/stmmac/Kconfig   |   9 +
 drivers/net/ethernet/stmicro/stmmac/Makefile  |   1 +
 .../ethernet/stmicro/stmmac/dwmac-spacemit.c  | 332 ++++++++++++++++++
 5 files changed, 404 insertions(+), 3 deletions(-)
 create mode 100755 drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c

diff --git a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
index ae3ae0fad51b..028601ce2f6f 100644
--- a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
@@ -310,7 +310,26 @@ qspi0: spi@2ce00000 {
                        status = "disabled";
                };
 
-
+               gmac0: ethernet@2cc00000 {
+                       compatible = "spacemit,k1-pro-mac";
+                       reg = <0x00 0x2cc00000 0x0 0x10000
+                              0x00 0x2f028004 0x0 0x4>;
+                       reg-names = "gmac", "sys_gmac_cfg";
+                       interrupt-parent = <&intc>;
+                       interrupts = <132>;
+                       interrupt-names = "macirq";
+		       resets = <&reset RESET_USB_GMAC_GSR>, <&reset RESET_GMAC_CSR>, <&reset RESET_GMAC_DMA>, <&reset RESET_USB_GMAC2VBUS>;
+                       reset-names = "usb_gmac_gsr", "gmac_csr", "gmac_dma", "usb_gmac2vbus";
+                       snps,pbl = <32>;
+                       snps,fixed-burst;
+                       snps,axi-config = <&stmmac_axi_setup>;
+
+                       stmmac_axi_setup: stmmac-axi-config {
+                               snps,wr_osr_lmt = <3>;
+                               snps,rd_osr_lmt = <3>;
+                               snps,blen = <16 8 4 0 0 0 0>;
+                       };
+               };
 
 	};
 };
diff --git a/arch/riscv/configs/k1-pro_fpga_defconfig b/arch/riscv/configs/k1-pro_fpga_defconfig
index 1dd9b6a758a6..607b3100ad1a 100644
--- a/arch/riscv/configs/k1-pro_fpga_defconfig
+++ b/arch/riscv/configs/k1-pro_fpga_defconfig
@@ -53,6 +53,48 @@ CONFIG_BLK_DEV_SD=y
 # CONFIG_BLK_DEV_BSG is not set
 # CONFIG_SCSI_LOWLEVEL is not set
 CONFIG_NETDEVICES=y
+# CONFIG_NET_VENDOR_ALACRITECH is not set
+# CONFIG_NET_VENDOR_AMAZON is not set
+# CONFIG_NET_VENDOR_AQUANTIA is not set
+# CONFIG_NET_VENDOR_ARC is not set
+# CONFIG_NET_VENDOR_ASIX is not set
+# CONFIG_NET_VENDOR_BROADCOM is not set
+# CONFIG_NET_VENDOR_CADENCE is not set
+# CONFIG_NET_VENDOR_CAVIUM is not set
+# CONFIG_NET_VENDOR_CORTINA is not set
+# CONFIG_NET_VENDOR_DAVICOM is not set
+# CONFIG_NET_VENDOR_ENGLEDER is not set
+# CONFIG_NET_VENDOR_EZCHIP is not set
+# CONFIG_NET_VENDOR_FUNGIBLE is not set
+# CONFIG_NET_VENDOR_GOOGLE is not set
+# CONFIG_NET_VENDOR_HUAWEI is not set
+# CONFIG_NET_VENDOR_INTEL is not set
+# CONFIG_NET_VENDOR_WANGXUN is not set
+# CONFIG_NET_VENDOR_ADI is not set
+# CONFIG_NET_VENDOR_LITEX is not set
+# CONFIG_NET_VENDOR_MARVELL is not set
+# CONFIG_NET_VENDOR_MICREL is not set
+# CONFIG_NET_VENDOR_MICROCHIP is not set
+# CONFIG_NET_VENDOR_MICROSEMI is not set
+# CONFIG_NET_VENDOR_MICROSOFT is not set
+# CONFIG_NET_VENDOR_NI is not set
+# CONFIG_NET_VENDOR_NATSEMI is not set
+# CONFIG_NET_VENDOR_NETRONOME is not set
+# CONFIG_NET_VENDOR_PENSANDO is not set
+# CONFIG_NET_VENDOR_QUALCOMM is not set
+# CONFIG_NET_VENDOR_RENESAS is not set
+# CONFIG_NET_VENDOR_ROCKER is not set
+# CONFIG_NET_VENDOR_SAMSUNG is not set
+# CONFIG_NET_VENDOR_SEEQ is not set
+# CONFIG_NET_VENDOR_SOLARFLARE is not set
+# CONFIG_NET_VENDOR_SOCIONEXT is not set
+CONFIG_STMMAC_ETH=y
+CONFIG_DWMAC_SPACEMIT=y
+# CONFIG_NET_VENDOR_SYNOPSYS is not set
+# CONFIG_NET_VENDOR_VERTEXCOM is not set
+# CONFIG_NET_VENDOR_VIA is not set
+# CONFIG_NET_VENDOR_WIZNET is not set
+# CONFIG_NET_VENDOR_XILINX is not set
 CONFIG_USB_USBNET=y
 # CONFIG_USB_NET_AX8817X is not set
 # CONFIG_USB_NET_NET1080 is not set
@@ -76,7 +118,6 @@ CONFIG_SPI=y
 CONFIG_SPI_DESIGNWARE_EXT=y
 # CONFIG_PTP_1588_CLOCK is not set
 # CONFIG_HWMON is not set
-CONFIG_MFD_SYSCON=y
 # CONFIG_VGA_CONSOLE is not set
 CONFIG_USB_ULPI_BUS=y
 CONFIG_USB=y
@@ -95,7 +136,6 @@ CONFIG_UDMABUF=y
 # CONFIG_VIRTIO_MENU is not set
 # CONFIG_VHOST_MENU is not set
 # CONFIG_IOMMU_SUPPORT is not set
-CONFIG_RESET_CONTROLLER=y
 # CONFIG_NVMEM is not set
 CONFIG_EXT4_FS=y
 CONFIG_EXT4_FS_POSIX_ACL=y
diff --git a/drivers/net/ethernet/stmicro/stmmac/Kconfig b/drivers/net/ethernet/stmicro/stmmac/Kconfig
index 6658536a4e17..4a82a2e3122f 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Kconfig
+++ b/drivers/net/ethernet/stmicro/stmmac/Kconfig
@@ -288,6 +288,15 @@ config DWMAC_VISCONTI
 	help
 	  Support for ethernet controller on Visconti SoCs.
 
+config DWMAC_SPACEMIT
+	tristate "Spacemit DWMAC support"
+	help
+	  Support for ethernet controller on Spacemit SOCs.
+
+	  This selects Spacemit SoC glue layer support for the stmmac
+	  device driver. This driver is used for the Spacemit series
+	  SOCs GMAC ethernet controller.
+
 endif
 
 config DWMAC_INTEL
diff --git a/drivers/net/ethernet/stmicro/stmmac/Makefile b/drivers/net/ethernet/stmicro/stmmac/Makefile
index 2389fd261344..7458d19d838a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Makefile
+++ b/drivers/net/ethernet/stmicro/stmmac/Makefile
@@ -28,6 +28,7 @@ obj-$(CONFIG_DWMAC_STI)		+= dwmac-sti.o
 obj-$(CONFIG_DWMAC_STM32)	+= dwmac-stm32.o
 obj-$(CONFIG_DWMAC_SUNXI)	+= dwmac-sunxi.o
 obj-$(CONFIG_DWMAC_SUN8I)	+= dwmac-sun8i.o
+obj-$(CONFIG_DWMAC_SPACEMIT)	+= dwmac-spacemit.o
 obj-$(CONFIG_DWMAC_THEAD)	+= dwmac-thead.o
 obj-$(CONFIG_DWMAC_DWC_QOS_ETH)	+= dwmac-dwc-qos-eth.o
 obj-$(CONFIG_DWMAC_INTEL_PLAT)	+= dwmac-intel-plat.o
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c
new file mode 100755
index 000000000000..28cbbfb019a2
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c
@@ -0,0 +1,332 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/**
+ * DOC: dwmac-spacemit.c - Spacemit DWMAC specific glue layer
+ *
+ * Copyright (c) 2023, spacemit Corporation.
+ */
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_net.h>
+#include <linux/platform_device.h>
+#include <linux/reset.h>
+
+#include "stmmac_platform.h"
+
+struct spacemit_dwmac_data {
+	u32 addr_width;
+};
+
+struct spacemit_dwmac_priv_data {
+	int id;
+	void __iomem *sys_gmac_cfg;
+	phy_interface_t interface;
+	struct clk *gmac_pll_clk;
+	unsigned long gmac_pll_clk_freq;
+	struct reset_control *usb_gmac_gsr_rstc;
+    struct reset_control *usb_gmac2vbus_rstc;
+	struct reset_control *gmac_csr_rstc;
+	struct reset_control *gmac_dma_rstc;
+
+	const struct spacemit_dwmac_data *data;
+};
+
+static struct spacemit_dwmac_data k1_pro_dwmac_data = {
+	.addr_width = 40,
+};
+
+static const struct of_device_id spacemit_dwmac_match[] = {
+	{ .compatible = "spacemit,k1-pro-mac", .data = &k1_pro_dwmac_data},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, spacemit_dwmac_match);
+
+/* set gmac speed */
+static void spacemit_dwmac_set_speed(void __iomem *sys_gmac_cfg, int interface,
+				unsigned int speed)
+{
+	volatile unsigned int reg;
+
+	if (sys_gmac_cfg == NULL)
+		return;
+
+	if (interface == PHY_INTERFACE_MODE_MII
+	    || interface == PHY_INTERFACE_MODE_RMII) {
+		reg = readl(sys_gmac_cfg);
+		reg |= BIT(0);
+		writel(reg, sys_gmac_cfg);
+		return;
+	} else if (interface == PHY_INTERFACE_MODE_GMII
+		|| interface == PHY_INTERFACE_MODE_RGMII
+		|| interface == PHY_INTERFACE_MODE_RGMII_ID
+		|| interface == PHY_INTERFACE_MODE_RGMII_RXID
+		|| interface == PHY_INTERFACE_MODE_RGMII_TXID) {
+        reg = readl(sys_gmac_cfg);
+		reg &= ~BIT(0);
+		writel(reg, sys_gmac_cfg);
+	} else {
+		pr_err("phy interface %d not supported\n", interface);
+		return;
+	}
+}
+
+static int spacemit_dwmac_init(struct platform_device *pdev, void *bsp_priv)
+{
+    struct spacemit_dwmac_priv_data *spacemit_plat_dat = bsp_priv;
+	struct device *dev = &pdev->dev;
+	struct device_node *np = pdev->dev.of_node;
+	struct resource *res;
+	void __iomem *ptr;
+	struct clk *clktmp;
+	int ret;
+
+	spacemit_plat_dat->id = of_alias_get_id(np, "ethernet");
+	if (spacemit_plat_dat->id < 0) {
+		spacemit_plat_dat->id = 0;
+	}
+	dev_info(dev, "id: %d\n", spacemit_plat_dat->id);
+
+	if (of_get_phy_mode(dev->of_node, &(spacemit_plat_dat->interface))) {
+		dev_err(dev, "of_get_phy_mode error\n");
+		return -1;
+	}
+
+	dev_info(dev, "phy interface: %d\n", spacemit_plat_dat->interface);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "sys_gmac_cfg");
+	if ((res != NULL) && (resource_type(res) == IORESOURCE_MEM)) {
+		ptr = devm_ioremap(dev, res->start, resource_size(res));
+		if (!ptr) {
+			dev_err(dev, "phy interface register not exist, skipped it\n");
+		} else {
+			spacemit_plat_dat->sys_gmac_cfg = ptr;
+		}
+	}
+
+    /* get gmac pll clk */
+	clktmp = devm_clk_get(dev, "gmac_pll_clk");
+	if (IS_ERR(clktmp)) {
+		dev_err(dev, "gmac_pll_clk not exist, skipped it\n");
+	} else {
+		spacemit_plat_dat->gmac_pll_clk = clktmp;
+
+		ret = clk_prepare_enable(spacemit_plat_dat->gmac_pll_clk);
+		if (ret) {
+			dev_err(dev, "Failed to enable clk 'gmac_pll_clk'\n");
+			return -1;
+		}
+
+		spacemit_plat_dat->gmac_pll_clk_freq =
+				clk_get_rate(spacemit_plat_dat->gmac_pll_clk);
+	}
+
+    spacemit_plat_dat->usb_gmac_gsr_rstc = devm_reset_control_get_optional_shared(&pdev->dev, "usb_gmac_gsr");
+	spacemit_plat_dat->usb_gmac2vbus_rstc = devm_reset_control_get_optional_shared(&pdev->dev, "usb_gmac2vbus");
+    spacemit_plat_dat->gmac_csr_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_csr");
+    spacemit_plat_dat->gmac_dma_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_dma");
+	if (IS_ERR(spacemit_plat_dat->usb_gmac_gsr_rstc) \
+	    || IS_ERR(spacemit_plat_dat->usb_gmac2vbus_rstc) \
+		|| IS_ERR(spacemit_plat_dat->gmac_csr_rstc) \
+		|| IS_ERR(spacemit_plat_dat->gmac_dma_rstc)) {
+		ret = PTR_ERR(spacemit_plat_dat->usb_gmac_gsr_rstc);
+		dev_err(&pdev->dev, "failed to get reset.\n");
+		return -1;
+	}
+	reset_control_deassert(spacemit_plat_dat->usb_gmac_gsr_rstc);
+	reset_control_deassert(spacemit_plat_dat->usb_gmac2vbus_rstc);
+	reset_control_deassert(spacemit_plat_dat->gmac_csr_rstc);
+	reset_control_deassert(spacemit_plat_dat->gmac_dma_rstc);
+
+    /* default speed is 1Gbps */
+    spacemit_dwmac_set_speed(spacemit_plat_dat->sys_gmac_cfg,
+				spacemit_plat_dat->interface, SPEED_1000);
+
+	return 0;
+}
+
+static void spacemit_dwmac_fix_speed(void *bsp_priv, unsigned int speed)
+{
+	struct spacemit_dwmac_priv_data *spacemit_plat_dat = bsp_priv;
+
+	spacemit_dwmac_set_speed(spacemit_plat_dat->sys_gmac_cfg,
+				spacemit_plat_dat->interface, speed);
+}
+
+/**
+ * dwmac1000_validate_mcast_bins - validates the number of Multicast filter bins
+ * @mcast_bins: Multicast filtering bins
+ * Description:
+ * this function validates the number of Multicast filtering bins specified
+ * by the configuration through the device tree. The Synopsys GMAC supports
+ * 64 bins, 128 bins, or 256 bins. "bins" refer to the division of CRC
+ * number space. 64 bins correspond to 6 bits of the CRC, 128 corresponds
+ * to 7 bits, and 256 refers to 8 bits of the CRC. Any other setting is
+ * invalid and will cause the filtering algorithm to use Multicast
+ * promiscuous mode.
+ */
+static int dwmac1000_validate_mcast_bins(int mcast_bins)
+{
+	int x = mcast_bins;
+
+	switch (x) {
+	case HASH_TABLE_SIZE:
+	case 128:
+	case 256:
+		break;
+	default:
+		x = 0;
+		pr_info("Hash table entries set to unexpected value %d",
+			mcast_bins);
+		break;
+	}
+	return x;
+}
+
+/**
+ * dwmac1000_validate_ucast_entries - validate the Unicast address entries
+ * @ucast_entries: number of Unicast address entries
+ * Description:
+ * This function validates the number of Unicast address entries supported
+ * by a particular Synopsys 10/100/1000 controller. The Synopsys controller
+ * supports 1..32, 64, or 128 Unicast filter entries for it's Unicast filter
+ * logic. This function validates a valid, supported configuration is
+ * selected, and defaults to 1 Unicast address if an unsupported
+ * configuration is selected.
+ */
+static int dwmac1000_validate_ucast_entries(int ucast_entries)
+{
+	int x = ucast_entries;
+
+	switch (x) {
+	case 1 ... 32:
+	case 64:
+	case 128:
+		break;
+	default:
+		x = 1;
+		pr_info("Unicast table entries set to unexpected value %d\n",
+			ucast_entries);
+		break;
+	}
+	return x;
+}
+
+static int spacemit_dwmac_probe(struct platform_device *pdev)
+{
+	struct plat_stmmacenet_data *plat_dat;
+	struct stmmac_resources stmmac_res;
+	struct spacemit_dwmac_priv_data *spacemit_plat_dat;
+	const struct spacemit_dwmac_data *data;
+    struct device *dev = &pdev->dev;
+	struct device_node *np = pdev->dev.of_node;
+	int ret;
+
+    spacemit_plat_dat = devm_kzalloc(dev, sizeof(*spacemit_plat_dat), GFP_KERNEL);
+	if (spacemit_plat_dat == NULL) {
+		dev_err(&pdev->dev, "allocate memory failed\n");
+		return -ENOMEM;
+	}
+
+    ret = stmmac_get_platform_resources(pdev, &stmmac_res);
+	if (ret)
+		return ret;
+
+	if (pdev->dev.of_node) {
+		plat_dat = stmmac_probe_config_dt(pdev, stmmac_res.mac);
+		if (IS_ERR(plat_dat)) {
+			dev_err(&pdev->dev, "dt configuration failed\n");
+			return PTR_ERR(plat_dat);
+		}
+	} else {
+		plat_dat = dev_get_platdata(&pdev->dev);
+		if (!plat_dat) {
+			dev_err(&pdev->dev, "no platform data provided\n");
+			return  -EINVAL;
+		}
+
+		/* Set default value for multicast hash bins */
+		plat_dat->multicast_filter_bins = HASH_TABLE_SIZE;
+
+		/* Set default value for unicast filter entries */
+		plat_dat->unicast_filter_entries = 1;
+	}
+
+    data = of_device_get_match_data(&pdev->dev);
+	if (!data) {
+		dev_err(&pdev->dev, "failed to get match data\n");
+		ret = -EINVAL;
+		goto err_match_data;
+	}
+    spacemit_plat_dat->data = data;
+
+	/* Custom initialisation (if needed) */
+	if (plat_dat->init) {
+		ret = plat_dat->init(pdev, plat_dat->bsp_priv);
+		if (ret)
+			goto err_remove_config_dt;
+	}
+
+    /* populate bsp private data */
+	plat_dat->bsp_priv = spacemit_plat_dat;
+	plat_dat->fix_mac_speed = spacemit_dwmac_fix_speed;
+	of_property_read_u32(np, "max-frame-size", &plat_dat->maxmtu);
+	of_property_read_u32(np, "snps,multicast-filter-bins",
+			     &plat_dat->multicast_filter_bins);
+	of_property_read_u32(np, "snps,perfect-filter-entries",
+			     &plat_dat->unicast_filter_entries);
+	plat_dat->unicast_filter_entries = dwmac1000_validate_ucast_entries(
+				       plat_dat->unicast_filter_entries);
+	plat_dat->multicast_filter_bins = dwmac1000_validate_mcast_bins(
+				      plat_dat->multicast_filter_bins);
+	plat_dat->has_gmac = 1;
+	plat_dat->pmt = 1;
+	plat_dat->multi_msi_en = 0;
+	plat_dat->addr64 = spacemit_plat_dat->data->addr_width;
+
+	ret = spacemit_dwmac_init(pdev, plat_dat->bsp_priv);
+	if (ret)
+		goto err_exit;
+
+	ret = stmmac_dvr_probe(&pdev->dev, plat_dat, &stmmac_res);
+	if (ret)
+		goto err_exit;
+
+err_exit:
+	if (plat_dat->exit)
+		plat_dat->exit(pdev, plat_dat->bsp_priv);
+err_remove_config_dt:
+err_match_data:
+	if (pdev->dev.of_node)
+		stmmac_remove_config_dt(pdev, plat_dat);
+
+	return ret;
+}
+
+static int spacemit_dwmac_remove(struct platform_device *pdev)
+{
+	struct net_device *ndev = platform_get_drvdata(pdev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	struct spacemit_dwmac_priv_data *spacemit_plat_dat = priv->plat->bsp_priv;
+    
+	stmmac_pltfr_remove(pdev);
+	reset_control_assert(spacemit_plat_dat->gmac_dma_rstc);
+	reset_control_assert(spacemit_plat_dat->gmac_csr_rstc);
+	reset_control_assert(spacemit_plat_dat->usb_gmac2vbus_rstc);
+	reset_control_assert(spacemit_plat_dat->usb_gmac_gsr_rstc);
+
+	return 0;
+}
+
+static struct platform_driver spacemit_dwmac_driver = {
+	.probe  = spacemit_dwmac_probe,
+	.remove = spacemit_dwmac_remove,
+	.driver = {
+		.name           = "spacemit_dwmac_eth",
+		.pm		= &stmmac_pltfr_pm_ops,
+		.of_match_table = of_match_ptr(spacemit_dwmac_match),
+	},
+};
+module_platform_driver(spacemit_dwmac_driver);
+
+MODULE_DESCRIPTION("Spacemit DWMAC specific glue layer");
+MODULE_LICENSE("GPL v2");
-- 
2.47.0

