From 5ea720db697824e82ee0a7d80bf9da500a07fa2a Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Sat, 3 Jun 2023 11:21:18 +0800
Subject: [PATCH 0038/1206] pcie: support spacemit k1-pro pcie controller RC
 mode

Change-Id: Idfa11a7f7b1d6df612de509d9addf5caff49bb07
---
 arch/riscv/boot/dts/spacemit/k1-pro.dtsi      |  26 +++
 arch/riscv/configs/k1-pro_fpga_defconfig      |   7 +
 drivers/pci/controller/dwc/Kconfig            |   9 +
 drivers/pci/controller/dwc/Makefile           |   1 +
 .../pci/controller/dwc/pcie-designware-host.c |   6 +-
 drivers/pci/controller/dwc/pcie-spacemit.c    | 209 ++++++++++++++++++
 6 files changed, 257 insertions(+), 1 deletion(-)
 create mode 100755 drivers/pci/controller/dwc/pcie-spacemit.c

diff --git a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
index c8d5653d137d..d08bf407cac4 100644
--- a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
@@ -401,6 +401,32 @@ stmmac_axi_setup: stmmac-axi-config {
 				snps,blen = <16 8 4 0 0 0 0>;
 			};
 		};
+
+                pcie5: pcie@41400000 {
+                        compatible = "spacemit,k1-pro-pcie";
+                        reg = <0x0 0x41400000 0x0 0x400000>,
+                              <0x0 0x44500000 0x0 0x100000>,
+                              <0x0 0x70000000 0x0 0x100000>;
+                        reg-names = "dbi", "app", "config";
+                        num-lanes = <4>;
+                        device_type = "pci";
+
+                        #address-cells = <3>;
+                        #size-cells = <2>;
+                        ranges = <0x81000000 0 0x70100000 0 0x70100000 0 0x00100000>,   /* downstream I/O */
+                                 <0x82000000 0 0x70200000 0 0x70200000 0 0x05e00000>,   /* non-prefetchable memory */
+                                 <0xc3000000 0 0x76000000 0 0x76000000 0 0x02000000>;   /* mem prefetchable */
+                        bus-range = <0x00 0xff>;
+
+                        interrupt-parent = <&intc>;
+                        interrupts = <157>;
+                        interrupt-names = "msi";
+
+                        resets = <&reset RESET_PCIE5_POWERUP>,
+                                 <&reset RESET_PCIE5_PERST>;
+                        reset-names = "powerup", "perst";
+                        status = "disabled";
+               };
 	};
 
 	pmu {
diff --git a/arch/riscv/configs/k1-pro_fpga_defconfig b/arch/riscv/configs/k1-pro_fpga_defconfig
index 0c83d64e11f4..661867dbee0d 100644
--- a/arch/riscv/configs/k1-pro_fpga_defconfig
+++ b/arch/riscv/configs/k1-pro_fpga_defconfig
@@ -1,3 +1,5 @@
+CONFIG_COMPILE_TEST=y
+# CONFIG_WERROR is not set
 CONFIG_SYSVIPC=y
 CONFIG_POSIX_MQUEUE=y
 CONFIG_NO_HZ_IDLE=y
@@ -42,12 +44,17 @@ CONFIG_DNS_RESOLVER=y
 CONFIG_NETLINK_DIAG=y
 CONFIG_FAILOVER=y
 # CONFIG_ETHTOOL_NETLINK is not set
+CONFIG_PCI=y
+CONFIG_PCIE_SPACEMIT=y
 CONFIG_DEVTMPFS=y
 CONFIG_DEVTMPFS_MOUNT=y
 CONFIG_MTD=y
 CONFIG_MTD_BLOCK=y
 CONFIG_BLK_DEV_LOOP=y
 CONFIG_VIRTIO_BLK=y
+CONFIG_BLK_DEV_NVME=y
+CONFIG_NVME_MULTIPATH=y
+CONFIG_NVME_VERBOSE_ERRORS=y
 CONFIG_SCSI=y
 CONFIG_BLK_DEV_SD=y
 # CONFIG_BLK_DEV_BSG is not set
diff --git a/drivers/pci/controller/dwc/Kconfig b/drivers/pci/controller/dwc/Kconfig
index b6d6778b0698..153acd86608c 100644
--- a/drivers/pci/controller/dwc/Kconfig
+++ b/drivers/pci/controller/dwc/Kconfig
@@ -459,4 +459,13 @@ config PCIE_VISCONTI_HOST
 	  Say Y here if you want PCIe controller support on Toshiba Visconti SoC.
 	  This driver supports TMPV7708 SoC.
 
+config PCIE_SPACEMIT
+	bool "Spacemit PCIe controller"
+	depends on CONFIG_SOC_SPACEMIT || COMPILE_TEST
+	depends on PCI_MSI_IRQ_DOMAIN
+	select PCIE_DW_HOST
+	help
+	  Say Y here to enable PCIe controller support on Spacemit SoCs. The
+	  PCIe controller uses the DesignWare core plus Spacemit hardware wrappers.
+
 endmenu
diff --git a/drivers/pci/controller/dwc/Makefile b/drivers/pci/controller/dwc/Makefile
index a8308d9ea986..5e8408757226 100644
--- a/drivers/pci/controller/dwc/Makefile
+++ b/drivers/pci/controller/dwc/Makefile
@@ -28,6 +28,7 @@ obj-$(CONFIG_PCIE_UNIPHIER) += pcie-uniphier.o
 obj-$(CONFIG_PCIE_UNIPHIER_EP) += pcie-uniphier-ep.o
 obj-$(CONFIG_PCIE_VISCONTI_HOST) += pcie-visconti.o
 obj-$(CONFIG_PCIE_RCAR_GEN4) += pcie-rcar-gen4.o
+obj-$(CONFIG_PCIE_SPACEMIT) += pcie-spacemit.o
 
 # The following drivers are for devices that use the generic ACPI
 # pci_root.c driver but don't support standard ECAM config access.
diff --git a/drivers/pci/controller/dwc/pcie-designware-host.c b/drivers/pci/controller/dwc/pcie-designware-host.c
index d2291c3ceb8b..4ef9ce007096 100644
--- a/drivers/pci/controller/dwc/pcie-designware-host.c
+++ b/drivers/pci/controller/dwc/pcie-designware-host.c
@@ -372,7 +372,11 @@ static int dw_pcie_msi_host_init(struct dw_pcie_rp *pp)
 	 * done by allocating from the artificially limited DMA-coherent
 	 * memory.
 	 */
-	ret = dma_set_coherent_mask(dev, DMA_BIT_MASK(32));
+	if (IS_ENABLED(CONFIG_SOC_SPACEMIT_K1PRO))
+		ret = dma_set_coherent_mask(dev, DMA_BIT_MASK(40));
+	else
+		ret = dma_set_coherent_mask(dev, DMA_BIT_MASK(32));
+
 	if (!ret)
 		msi_vaddr = dmam_alloc_coherent(dev, sizeof(u64), &pp->msi_data,
 						GFP_KERNEL);
diff --git a/drivers/pci/controller/dwc/pcie-spacemit.c b/drivers/pci/controller/dwc/pcie-spacemit.c
new file mode 100755
index 000000000000..0c8fb7dfc67d
--- /dev/null
+++ b/drivers/pci/controller/dwc/pcie-spacemit.c
@@ -0,0 +1,209 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Spacemit PCIe root complex driver
+ *
+ * Copyright (c) 2023, spacemit Corporation.
+ *
+ */
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/of.h>
+#include <linux/pci.h>
+#include <linux/phy/phy.h>
+#include <linux/platform_device.h>
+#include <linux/resource.h>
+#include <linux/reset.h>
+
+#include "pcie-designware.h"
+
+#define  PCIE_APP_TYPE         0x000
+#define  DEVICE_TYPE_RC      0x4
+
+#define  PCIE_APP_CTL          0x004
+#define  CTL_LTSSM_ENABLE    BIT(0)
+
+#define  PCIE_APP_INTEN        0x100
+#define  PCIE_APP_INTSTA       0x104
+#define  PCIE_APP_STATE        0x200
+#define  LTSSM_STATE_MASK    GENMASK(5, 0)
+
+struct spacemit_pcie {
+	struct dw_pcie		*pci;
+	void __iomem		*app_base;
+	struct phy		*phy;
+	struct clk		*clk;
+	struct reset_control *reset;
+};
+
+#define to_spacemit_pcie(x)		dev_get_drvdata((x)->dev)
+
+static int spacemit_pcie_start_link(struct dw_pcie *pci)
+{
+	struct spacemit_pcie *spacemit_pcie = to_spacemit_pcie(pci);
+        u64 ctl_reg = spacemit_pcie->app_base + PCIE_APP_CTL;
+
+        writel(readl(ctl_reg) | CTL_LTSSM_ENABLE, ctl_reg);
+	return 0;
+}
+
+static int spacemit_pcie_link_up(struct dw_pcie *pci)
+{
+        volatile u32 ltssm_state = 0;
+        struct spacemit_pcie *spacemit_pcie = to_spacemit_pcie(pci);
+	u64 state_reg = spacemit_pcie->app_base + PCIE_APP_STATE;
+
+        ltssm_state = readl(state_reg) & LTSSM_STATE_MASK;
+	return !!ltssm_state;
+}
+
+static irqreturn_t spacemit_pcie_irq_handler(int irq, void *arg)
+{
+	struct spacemit_pcie *spacemit_pcie = arg;
+	struct dw_pcie *pci = spacemit_pcie->pci;
+	struct dw_pcie_rp *pp = &pci->pp;
+	u64    intsta_reg = 0;
+	unsigned int status;
+
+        intsta_reg = spacemit_pcie->app_base + PCIE_APP_INTSTA;
+	status = readl(intsta_reg);
+
+	if (status & 3) {
+		BUG_ON(!IS_ENABLED(CONFIG_PCI_MSI));
+		dw_handle_msi_irq(pp);
+	}
+
+	writel(status, intsta_reg);
+
+	return IRQ_HANDLED;
+}
+
+static void spacemit_pcie_enable_interrupts(struct spacemit_pcie *spacemit_pcie)
+{
+	u64 inten_reg = spacemit_pcie->app_base + PCIE_APP_INTEN;
+}
+
+static int spacemit_pcie_host_init(struct dw_pcie_rp *pp)
+{
+	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
+	struct spacemit_pcie *spacemit_pcie = to_spacemit_pcie(pci);
+        int ret;
+
+        if (!IS_ERR(spacemit_pcie->clk)) {
+                ret = clk_prepare_enable(spacemit_pcie->clk);
+	        if (ret) {
+		        printk(KERN_ERR "couldn't enable clk for pcie\n");
+		        return ret;
+	        }
+	}
+
+	reset_control_deassert(spacemit_pcie->reset);
+
+	//set rc mode
+        writel(DEVICE_TYPE_RC, spacemit_pcie->app_base + PCIE_APP_TYPE);
+	return 0;
+}
+
+static const struct dw_pcie_host_ops spacemit_pcie_host_ops = {
+	.host_init = spacemit_pcie_host_init,
+};
+
+static const struct dw_pcie_ops dw_pcie_ops = {
+	.link_up = spacemit_pcie_link_up,
+	.start_link = spacemit_pcie_start_link,
+};
+
+static int spacemit_pcie_probe(struct platform_device *pdev)
+{
+        struct device *dev = &pdev->dev;
+	struct dw_pcie_rp *pp;
+	struct dw_pcie *pci;
+	struct spacemit_pcie *spacemit_pcie;
+	struct device_node *np = dev->of_node;
+	int ret;
+
+        spacemit_pcie = devm_kzalloc(dev, sizeof(*spacemit_pcie), GFP_KERNEL);
+	if (!spacemit_pcie)
+		return -ENOMEM;
+
+        pci = devm_kzalloc(dev, sizeof(*pci), GFP_KERNEL);
+	if (!pci)
+		return -ENOMEM;
+
+        pci->dev = dev;
+	pci->ops = &dw_pcie_ops;
+	pp = &pci->pp;
+
+	spacemit_pcie->pci = pci;
+
+        pm_runtime_enable(dev);
+	ret = pm_runtime_get_sync(dev);
+	if (ret < 0)
+		goto err_pm_runtime_put;
+
+        spacemit_pcie->app_base = devm_platform_ioremap_resource_byname(pdev, "app");
+	if (IS_ERR(spacemit_pcie->app_base)) {
+        ret = PTR_ERR(spacemit_pcie->app_base);
+		goto err_pm_runtime_put;
+	}
+
+        spacemit_pcie->phy = devm_phy_optional_get(dev, "pciephy");
+	if (IS_ERR(spacemit_pcie->phy)) {
+		ret = PTR_ERR(spacemit_pcie->phy);
+		goto err_pm_runtime_put;
+	}
+
+        ret = phy_init(spacemit_pcie->phy);
+	if (ret)
+		goto err_pm_runtime_put;
+
+        spacemit_pcie->clk = devm_clk_get(dev, NULL);
+	if (IS_ERR(spacemit_pcie->clk)) {
+		dev_err(dev, "pcie clk not exist, skipped it\n");
+	}
+
+        spacemit_pcie->reset = devm_reset_control_array_get_optional_exclusive(&pdev->dev);
+	if (IS_ERR(spacemit_pcie->reset)) {
+		dev_err(dev, "Failed to get pcie's resets\n");
+		ret = PTR_ERR(spacemit_pcie->reset);
+		goto err_phy_exit;
+        }
+
+        platform_set_drvdata(pdev, spacemit_pcie);
+
+        pp->ops = &spacemit_pcie_host_ops;
+
+	ret = dw_pcie_host_init(pp);
+	if (ret < 0) {
+		dev_err(dev, "failed to initialize host\n");
+		goto err_phy_exit;
+	}
+
+	return 0;
+
+err_phy_exit:
+	phy_exit(spacemit_pcie->phy);
+err_pm_runtime_put:
+	pm_runtime_put(dev);
+	pm_runtime_disable(dev);
+
+    return ret;
+}
+
+
+static const struct of_device_id spacemit_pcie_of_match[] = {
+	{ .compatible = "spacemit,k1-pro-pcie"},
+	{},
+};
+
+static struct platform_driver spacemit_pcie_driver = {
+	.probe		= spacemit_pcie_probe,
+	.driver = {
+		.name	= "spacemit-pcie",
+		.of_match_table = spacemit_pcie_of_match,
+		.suppress_bind_attrs = true,
+	},
+};
+
+builtin_platform_driver(spacemit_pcie_driver);
-- 
2.47.0

