From afbf2c03d5e597d008a98b3e28fa32984778610b Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Wed, 13 Mar 2024 10:21:07 +0800
Subject: [PATCH 0479/1203] k1x:system_suspend: support pmic wakeup source

1. rtc alarm can wakeup the system
2. power-key can wakeup the system
3. only p1 support the feature above

Change-Id: Ia4705bf110c4a308c427c778eb543a1679087e78
---
 drivers/input/misc/spacemit-pwrkey.c          |  2 +
 drivers/irqchip/irq-sifive-plic.c             |  8 +++
 drivers/mfd/spacemit-mfd.c                    |  4 ++
 drivers/rtc/rtc-spt-pmic.c                    |  1 +
 .../soc/spacemit/pm_domain/k1x-pm_domain.c    | 64 ++++++++++++++++++-
 5 files changed, 78 insertions(+), 1 deletion(-)

diff --git a/drivers/input/misc/spacemit-pwrkey.c b/drivers/input/misc/spacemit-pwrkey.c
index e65d20fbd3ac..d76b0a8e913b 100644
--- a/drivers/input/misc/spacemit-pwrkey.c
+++ b/drivers/input/misc/spacemit-pwrkey.c
@@ -8,6 +8,7 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/pm_wakeirq.h>
 #include <linux/mfd/spacemit/spacemit_pmic.h>
 
 static irqreturn_t pwrkey_fall_irq(int irq, void *_pwr)
@@ -118,6 +119,7 @@ static int spacemit_pwrkey_probe(struct platform_device *pdev)
 	}
 
 	platform_set_drvdata(pdev, pwr);
+	dev_pm_set_wake_irq(&pdev->dev, fall_irq);
 	device_init_wakeup(&pdev->dev, true);
 
 	return 0;
diff --git a/drivers/irqchip/irq-sifive-plic.c b/drivers/irqchip/irq-sifive-plic.c
index a648f7458a0b..c4bed017bea0 100644
--- a/drivers/irqchip/irq-sifive-plic.c
+++ b/drivers/irqchip/irq-sifive-plic.c
@@ -224,8 +224,12 @@ static struct irq_chip plic_edge_chip = {
 	.irq_set_affinity = plic_set_affinity,
 #endif
 	.irq_set_type	= plic_irq_set_type,
+#ifdef CONFIG_SOC_SPACEMIT
+	.flags		= IRQCHIP_AFFINITY_PRE_STARTUP | IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND | IRQCHIP_SKIP_SET_WAKE,
+#else
 	.flags		= IRQCHIP_SKIP_SET_WAKE |
 			  IRQCHIP_AFFINITY_PRE_STARTUP,
+#endif
 };
 
 static struct irq_chip plic_chip = {
@@ -239,8 +243,12 @@ static struct irq_chip plic_chip = {
 	.irq_set_affinity = plic_set_affinity,
 #endif
 	.irq_set_type	= plic_irq_set_type,
+#ifdef CONFIG_SOC_SPACEMIT
+	.flags		= IRQCHIP_AFFINITY_PRE_STARTUP | IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND | IRQCHIP_SKIP_SET_WAKE,
+#else
 	.flags		= IRQCHIP_SKIP_SET_WAKE |
 			  IRQCHIP_AFFINITY_PRE_STARTUP,
+#endif
 };
 
 static int plic_irq_set_type(struct irq_data *d, unsigned int type)
diff --git a/drivers/mfd/spacemit-mfd.c b/drivers/mfd/spacemit-mfd.c
index f2779cfae373..aa789eb3fe76 100644
--- a/drivers/mfd/spacemit-mfd.c
+++ b/drivers/mfd/spacemit-mfd.c
@@ -8,6 +8,7 @@
 #include <linux/regmap.h>
 #include <linux/reboot.h>
 #include <linux/ioport.h>
+#include <linux/pm_wakeirq.h>
 #include <linux/mfd/spacemit/spacemit_pmic.h>
 
 SPM8821_REGMAP_CONFIG;
@@ -167,6 +168,9 @@ static int spacemit_pmic_probe(struct i2c_client *client,
 				return ret;
 			}
 		}
+
+		dev_pm_set_wake_irq(&client->dev, client->irq);
+		device_init_wakeup(&client->dev, true);
 	}
 
 	ret = devm_mfd_add_devices(&client->dev, PLATFORM_DEVID_NONE,
diff --git a/drivers/rtc/rtc-spt-pmic.c b/drivers/rtc/rtc-spt-pmic.c
index 3ab5a80adab6..4deb649a3dcc 100644
--- a/drivers/rtc/rtc-spt-pmic.c
+++ b/drivers/rtc/rtc-spt-pmic.c
@@ -389,6 +389,7 @@ static int spacemit_rtc_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+	dev_pm_set_wake_irq(&pdev->dev, rtc->irq);
 	device_init_wakeup(&pdev->dev, 1);
 
 	rtc->rtc_dev = devm_rtc_allocate_device(&pdev->dev);
diff --git a/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c b/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
index be86ad07f1e4..9ed5dcd60534 100644
--- a/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
+++ b/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
@@ -21,6 +21,7 @@
 #include <linux/spinlock_types.h>
 #include <linux/regulator/consumer.h>
 #include <dt-bindings/pmu/k1x_pmu.h>
+#include <linux/syscore_ops.h>
 #include "atomic_qos.h"
 
 #define MAX_REGMAP		5
@@ -31,6 +32,12 @@
 
 #define APMU_POWER_STATUS_REG	0xf0
 #define MPMU_APCR_PER_REG	0x1098
+#define MPMU_AWUCRM_REG		0x104c
+
+/* wakeup set */
+/* pmic */
+#define WAKEUP_SOURCE_WAKEUP_7	7
+
 
 #define PM_QOS_BLOCK_C1		0x0 /* core wfi */
 #define PM_QOS_BLOCK_C2		0x2 /* core power off */
@@ -116,6 +123,7 @@ struct spacemit_pmu {
 
 static DEFINE_SPINLOCK(spacemit_apcr_qos_lock);
 
+static unsigned int g_acpr_per;
 static struct spacemit_pmu *gpmu;
 
 static struct atomic_freq_constraints afreq_constraints;
@@ -138,7 +146,7 @@ static int spacemit_pd_power_off(struct generic_pm_domain *domain)
 	/**
 	 * if all the devices in this power domain don't want the pm-domain driver taker over
 	 * the power-domian' on/off, return directly.
-	 * */
+	 */
 	list_for_each_entry(pos, &spd->qos_head, qos_node) {
 		if (!pos->handle_pm_domain)
 			return 0;
@@ -723,9 +731,60 @@ static void spacemit_pm_domain_cleanup(struct spacemit_pmu *pmu)
 	}
 
 	/* devm will free our memory */
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int acpr_per_suspend(void)
+{
+	unsigned int apcr_per;
+	unsigned int apcr_clear = 0, apcr_set = (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET);
+
+	spin_lock(&spacemit_apcr_qos_lock);
+
+	apcr_set |= (1 << PM_QOS_AXISDD_OFFSET);
+	apcr_set |= (1 << PM_QOS_DDRCORSD_OFFSET);
+	apcr_set |= (1 << PM_QOS_APBSD_OFFSET);
+	apcr_set |= (1 << PM_QOS_VCTCXOSD_OFFSET);
+	apcr_set |= (1 << PM_QOS_STBYEN_OFFSET);
+
+	regmap_read(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_APCR_PER_REG, &apcr_per);
+	g_acpr_per = apcr_per;
+	apcr_per &= ~(apcr_clear);
+	apcr_per |= apcr_set;
+	regmap_write(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_APCR_PER_REG, apcr_per);
 
+	spin_unlock(&spacemit_apcr_qos_lock);
+
+	/* enable pmic wakeup */
+	regmap_read(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, &apcr_per);
+	apcr_per |= (1 << WAKEUP_SOURCE_WAKEUP_7);
+	regmap_write(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, apcr_per);
+
+	return 0;
+}
+
+static void acpr_per_resume(void)
+{
+	unsigned int apcr_per;
+
+	spin_lock(&spacemit_apcr_qos_lock);
+
+	regmap_write(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_APCR_PER_REG, g_acpr_per);
+
+	spin_unlock(&spacemit_apcr_qos_lock);
+
+	/* disable pmic wakeup */
+	regmap_read(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, &apcr_per);
+	apcr_per &= ~(1 << WAKEUP_SOURCE_WAKEUP_7);
+	regmap_write(gpmu->regmap[MPMU_REGMAP_INDEX], MPMU_AWUCRM_REG, apcr_per);
 }
 
+static struct syscore_ops acpr_per_syscore_ops = {
+	.suspend = acpr_per_suspend,
+	.resume = acpr_per_resume,
+};
+#endif
+
 static int spacemit_pm_domain_probe(struct platform_device *pdev)
 {
 	int err = 0, i;
@@ -808,6 +867,9 @@ static int spacemit_pm_domain_probe(struct platform_device *pdev)
 
 	gpmu = pmu;
 
+#ifdef CONFIG_PM_SLEEP
+	register_syscore_ops(&acpr_per_syscore_ops);
+#endif
 	return 0;
 
 err_out:
-- 
2.47.0

