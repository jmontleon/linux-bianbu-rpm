From cb2150e54ed88c0948301cc375e7ab2b97799813 Mon Sep 17 00:00:00 2001
From: lilijun <lijun.li@spacemit.com>
Date: Wed, 27 Nov 2024 21:17:56 +0800
Subject: [PATCH 1315/1448] display: add ocp2138 driver for setting lcd bias

Change-Id: I30c57677874fb65cf821d5146d4cf5b959340f3e
---
 drivers/misc/Kconfig   |  7 ++++
 drivers/misc/Makefile  |  1 +
 drivers/misc/ocp2138.c | 93 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 101 insertions(+)
 create mode 100644 drivers/misc/ocp2138.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 81dabf98902f..97028ce88daf 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -569,6 +569,13 @@ config SPACEMIT_TCM
 	help
 	  This driver allows you to alloc tcm for userspace.
 
+config OCP2138
+	tristate "Driver for ocp2138"
+	default y
+
+	help
+	  Support for ocp2138.
+
 config ICM42607
         tristate "ICM42607 sensor support"
         depends on I2C
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index f24f4abdf4c9..af9c1df50acc 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -68,4 +68,5 @@ obj-$(CONFIG_TMR_INJECT)	+= xilinx_tmr_inject.o
 obj-$(CONFIG_TPS6594_ESM)	+= tps6594-esm.o
 obj-$(CONFIG_TPS6594_PFSM)	+= tps6594-pfsm.o
 obj-$(CONFIG_SPACEMIT_TCM)	+= tcm.o
+obj-$(CONFIG_OCP2138)	+= ocp2138.o
 obj-$(CONFIG_ICM42607)		+= icm42607.o input-polldev.o
diff --git a/drivers/misc/ocp2138.c b/drivers/misc/ocp2138.c
new file mode 100644
index 000000000000..d645ef2b3026
--- /dev/null
+++ b/drivers/misc/ocp2138.c
@@ -0,0 +1,93 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2023 Spacemit Co., Ltd.
+ *
+ */
+
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of_graph.h>
+#include <linux/regmap.h>
+
+struct ocp2138_dev {
+	struct device *dev;
+	struct regmap *regmap;
+	struct i2c_client *client;
+};
+
+static const struct regmap_config ocp2138_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.max_register = 0xff,
+};
+
+static int ocp2138_probe(struct i2c_client *client)
+{
+	struct ocp2138_dev *ocp2138;
+	unsigned int value;
+
+	dev_info(&client->dev, "%s()\n", __func__);
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "Failed check I2C functionality");
+		return -ENODEV;
+	}
+
+	ocp2138 = devm_kzalloc(&client->dev, sizeof(*ocp2138), GFP_KERNEL);
+	if (!ocp2138)
+		return -ENOMEM;
+
+	i2c_set_clientdata(client, ocp2138);
+	ocp2138->dev = &client->dev;
+	ocp2138->client = client;
+
+	ocp2138->regmap = devm_regmap_init_i2c(client, &ocp2138_regmap_config);
+	if (IS_ERR(ocp2138->regmap)) {
+		dev_err(ocp2138->dev, "regmap i2c init failed\n");
+		return PTR_ERR(ocp2138->regmap);
+	}
+
+	regmap_write(ocp2138->regmap, 0x00, 0x14);
+	regmap_write(ocp2138->regmap, 0x01, 0x14);
+	regmap_write(ocp2138->regmap, 0xff, 0x80);
+
+	regmap_read(ocp2138->regmap, 0x00, &value);
+	dev_info(ocp2138->dev, "%s() 0x00 %d\n", __func__, value);
+	regmap_read(ocp2138->regmap, 0x01, &value);
+	dev_info(ocp2138->dev, "%s() 0x01 %d\n", __func__, value);
+	regmap_read(ocp2138->regmap, 0xff, &value);
+	dev_info(ocp2138->dev, "%s() 0xff %d\n", __func__, value);
+
+	return 0;
+}
+
+static void ocp2138_remove(struct i2c_client *client)
+{
+	dev_info(&client->dev, "%s()\n", __func__);
+}
+
+static const struct i2c_device_id ocp2138_ids[] = {
+	{ "ocp2138", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(i2c, ocp2138_ids);
+
+static const struct of_device_id ocp2138_of_match[] = {
+	{ .compatible = "spacemit,lcd_bias_ocp2138", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ocp2138_of_match);
+
+static struct i2c_driver ocp2138_i2c_driver = {
+	.driver = {
+		.name = "ocp2138",
+		.of_match_table = ocp2138_of_match,
+	},
+	.probe = ocp2138_probe,
+	.remove = ocp2138_remove,
+	.id_table = ocp2138_ids,
+};
+module_i2c_driver(ocp2138_i2c_driver);
+
+MODULE_DESCRIPTION("OCP2138 I2C Driver");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
-- 
2.47.0

