From 39613389245eb339529caff3c97b0b95fdf45410 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Cweijinmei=E2=80=9D?= <jinmei.wei@spacemit.com>
Date: Tue, 26 Dec 2023 21:08:40 +0800
Subject: [PATCH 0255/1189] clock: twsi8 clk/reset reg is write-only, don't
 read it

Change-Id: I946c2ce6e9d725666249d6b6c3997be191621129
---
 drivers/clk/spacemit/ccu-spacemit-k1x.c |  2 +-
 drivers/clk/spacemit/ccu_mix.c          | 60 ++++++++++++++++++++++++-
 drivers/clk/spacemit/ccu_mix.h          | 15 +++++++
 drivers/reset/reset-spacemit-k1x.c      |  3 ++
 4 files changed, 78 insertions(+), 2 deletions(-)

diff --git a/drivers/clk/spacemit/ccu-spacemit-k1x.c b/drivers/clk/spacemit/ccu-spacemit-k1x.c
index 97fede50d908..9da72995438f 100755
--- a/drivers/clk/spacemit/ccu-spacemit-k1x.c
+++ b/drivers/clk/spacemit/ccu-spacemit-k1x.c
@@ -587,7 +587,7 @@ static SPACEMIT_CCU_MUX_GATE(twsi7_clk, "twsi7_clk", twsi_parent_names,
 	0);
 static SPACEMIT_CCU_MUX_GATE(twsi8_clk, "twsi8_clk", twsi_parent_names,
 	BASE_TYPE_APBC, APBC_TWSI8_CLK_RST,
-	4, 3, 0x3, 0x3, 0x0,
+	4, 3, 0x7, 0x3, 0x4,
 	0);
 static const char *timer_parent_names[] = {
 	"pll1_d192_12p8", "clk_32k", "pll1_d384_6p4", "vctcxo_3", "vctcxo_1"
diff --git a/drivers/clk/spacemit/ccu_mix.c b/drivers/clk/spacemit/ccu_mix.c
index cda4f714beb7..041d771cb1aa 100755
--- a/drivers/clk/spacemit/ccu_mix.c
+++ b/drivers/clk/spacemit/ccu_mix.c
@@ -14,7 +14,8 @@
 #include "ccu_mix.h"
 
 #define TIMEOUT_LIMIT (20000) /* max timeout 10000us */
-
+static int twsi8_reg_val = 0x04;
+const char * tswi8_clk_name = "twsi8_clk";
 static void ccu_mix_disable(struct clk_hw *hw)
 {
 	struct ccu_mix *mix = hw_to_ccu_mix(hw);
@@ -26,6 +27,19 @@ static void ccu_mix_disable(struct clk_hw *hw)
 
 	if (!gate)
 		return;
+
+	if (!strcmp(common->name, tswi8_clk_name)){
+		twsi8_reg_val &= ~gate->gate_mask;;
+		twsi8_reg_val |= gate->val_disable;
+		tmp = twsi8_reg_val;
+		if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+			|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
+			writel(tmp, common->base + common->reg_sel);
+		else
+			writel(tmp, common->base + common->reg_ctrl);
+		return;
+	}
+
 	if (common->lock)
 		spin_lock_irqsave(common->lock, flags);
 
@@ -73,6 +87,19 @@ static int ccu_mix_enable(struct clk_hw *hw)
 
     if (!gate)
 		return 0;
+
+	if (!strcmp(common->name, tswi8_clk_name)){
+		twsi8_reg_val &= ~gate->gate_mask;;
+		twsi8_reg_val |= gate->val_enable;
+		tmp = twsi8_reg_val;
+		if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+			|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
+			writel(tmp, common->base + common->reg_sel);
+		else
+			writel(tmp, common->base + common->reg_ctrl);
+		return 0;
+	}
+
 	if (common->lock)
 		spin_lock_irqsave(common->lock, flags);
 
@@ -142,6 +169,10 @@ static int ccu_mix_is_enabled(struct clk_hw *hw)
 	if (!gate)
 		return 1;
 
+	if (!strcmp(common->name, tswi8_clk_name)){
+		return (twsi8_reg_val & gate->gate_mask) == gate->val_enable;
+	}
+
 	if (common->lock)
 		spin_lock_irqsave(common->lock, flags);
 
@@ -295,6 +326,15 @@ static int ccu_mix_set_rate(struct clk_hw *hw, unsigned long rate,
 	}
 
 	best_rate = ccu_mix_calc_best_rate(hw, rate, &mux_val, &div_val);
+	if (!strcmp(common->name, tswi8_clk_name)){
+		if(mux){
+		cur_mux = twsi8_reg_val >> mux->shift;
+		cur_mux &= (1 << mux->width) - 1;
+		if(cur_mux != mux_val)
+			clk_hw_set_parent(hw, clk_hw_get_parent_by_index(hw, mux_val));
+		}
+		return 0;
+	}
 	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
 		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		reg = readl(common->base + common->reg_sel);
@@ -357,6 +397,12 @@ static u8 ccu_mix_get_parent(struct clk_hw *hw)
 	if(!mux)
 		return 0;
 
+	if (!strcmp(common->name, tswi8_clk_name)){
+		parent = twsi8_reg_val >> mux->shift;
+		parent &= (1 << mux->width) - 1;
+		return parent;
+	}
+
 	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
 		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
 		reg = readl(common->base + common->reg_sel);
@@ -392,6 +438,18 @@ static int ccu_mix_set_parent(struct clk_hw *hw, u8 index)
 	if (mux->table)
 		index = mux->table[index];
 
+	if (!strcmp(common->name, tswi8_clk_name)){
+		twsi8_reg_val &= ~GENMASK(mux->width + mux->shift - 1, mux->shift);
+		twsi8_reg_val |= (index << mux->shift);
+		reg = twsi8_reg_val;
+		if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
+			|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4)
+			writel(reg, common->base + common->reg_sel);
+		else
+			writel(reg, common->base + common->reg_ctrl);
+		return 0;
+	}
+
 	spin_lock_irqsave(common->lock, flags);
 
 	if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
diff --git a/drivers/clk/spacemit/ccu_mix.h b/drivers/clk/spacemit/ccu_mix.h
index 636ae25a4656..f0dfeb91b713 100755
--- a/drivers/clk/spacemit/ccu_mix.h
+++ b/drivers/clk/spacemit/ccu_mix.h
@@ -87,6 +87,7 @@ struct ccu_mix {
 		.common	= {						\
 			.reg_ctrl		= _reg,				\
 			.base_type 		= _base_type,       \
+			.name			= _name,       \
 			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 						      _parent,		\
@@ -101,6 +102,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.num_parents	= 0,		\
 			.hw.init	= CLK_HW_INIT_NO_PARENT(_name,	\
 							  &ccu_mix_ops, \
@@ -113,6 +115,7 @@ struct ccu_mix {
 	struct ccu_mix _struct = {					\
 		.factor	= CCU_FACTOR_INIT(_div, _mul),	 \
 		.common = { 					\
+			.name			= _name,    \
 			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
@@ -128,6 +131,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.parent_names	= _parents,         \
 			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,	\
@@ -144,6 +148,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
@@ -161,6 +166,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
@@ -178,6 +184,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.parent_names	= _parents,         \
 			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,	\
@@ -195,6 +202,7 @@ struct ccu_mix {
 		.common = { 					\
 			.reg_ctrl		= _reg, 			\
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,	\
 							  _parent,		\
@@ -216,6 +224,7 @@ struct ccu_mix {
 		.common	= {						\
 			.reg_ctrl		= _reg_ctrl,				\
 			.base_type 		= _base_type,       \
+			.name			= _name,       \
 			.parent_names	= _parents,         \
 			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,	\
@@ -238,6 +247,7 @@ struct ccu_mix {
 			.reg_sel		= _reg_sel, 	 \
 			.fc 			= _fc,		   \
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.parent_names	= _parents,         \
 			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
@@ -260,6 +270,7 @@ struct ccu_mix {
 			.reg_ctrl		= _reg_ctrl,			\
 			.fc 			= _fc,		   \
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.parent_names	= _parents,         \
 			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
@@ -281,6 +292,7 @@ struct ccu_mix {
 				.reg_ctrl		= _reg_ctrl,			\
 				.fc 			= _fc,		   \
 				.base_type		= _base_type,		\
+				.name			= _name,       \
 				.parent_names	= _parents, 		\
 				.num_parents	= ARRAY_SIZE(_parents), 	\
 				.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
@@ -302,6 +314,7 @@ struct ccu_mix {
 			.reg_ctrl		= _reg_ctrl, 			\
 			.fc 			= _fc,         \
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.num_parents	= 1,		\
 			.hw.init	= CLK_HW_INIT(_name,		\
 							  _parent,		\
@@ -320,6 +333,7 @@ struct ccu_mix {
 			.reg_ctrl		= _reg_ctrl, 			\
 			.fc 			= _fc,         \
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.parent_names	= _parents,         \
 			.num_parents	= ARRAY_SIZE(_parents),		\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
@@ -338,6 +352,7 @@ struct ccu_mix {
 			.reg_ctrl		= _reg_ctrl,			\
 			.fc 			= _fc,		   \
 			.base_type		= _base_type,		\
+			.name			= _name,       \
 			.parent_names	= _parents, 		\
 			.num_parents	= ARRAY_SIZE(_parents), 	\
 			.hw.init	= CLK_HW_INIT_PARENTS(_name,		\
diff --git a/drivers/reset/reset-spacemit-k1x.c b/drivers/reset/reset-spacemit-k1x.c
index f05e7d851cdf..a4d9ab3848ee 100644
--- a/drivers/reset/reset-spacemit-k1x.c
+++ b/drivers/reset/reset-spacemit-k1x.c
@@ -367,6 +367,9 @@ static int spacemit_reset_update(struct reset_controller_dev *rcdev,
 	if(id < RESET_UART1 || id >= RESET_NUMBER)
 		return 0;
 
+	if (id == RESET_TWSI8)
+		return 0;
+
 	spin_lock_irqsave(reset->lock, flags);
 	if(assert == true){
 		spacemit_reset_set(rcdev, id, assert);
-- 
2.47.1

