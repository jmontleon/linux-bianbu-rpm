From 2921828c83e18a8e4ab5e1504c5e19f95aa1517f Mon Sep 17 00:00:00 2001
From: wanlong <long.wan@spacemit.com>
Date: Wed, 10 Jan 2024 20:22:53 +0800
Subject: [PATCH 0346/1203] spacemit-rf: add wifi platform driver

Change-Id: Iecea4dfd765c076e1a367f0ed5696fa9cb8cfb8a
---
 drivers/soc/spacemit/Kconfig                  |   1 +
 drivers/soc/spacemit/Makefile                 |   1 +
 drivers/soc/spacemit/spacemit-rf/Kconfig      |   9 +
 drivers/soc/spacemit/spacemit-rf/Makefile     |   6 +
 .../spacemit/spacemit-rf/spacemit-pwrseq.c    | 290 ++++++++++++++++++
 .../soc/spacemit/spacemit-rf/spacemit-wlan.c  | 179 +++++++++++
 6 files changed, 486 insertions(+)
 create mode 100755 drivers/soc/spacemit/spacemit-rf/Kconfig
 create mode 100755 drivers/soc/spacemit/spacemit-rf/Makefile
 create mode 100755 drivers/soc/spacemit/spacemit-rf/spacemit-pwrseq.c
 create mode 100755 drivers/soc/spacemit/spacemit-rf/spacemit-wlan.c

diff --git a/drivers/soc/spacemit/Kconfig b/drivers/soc/spacemit/Kconfig
index b193f5905c28..cb6f565ab3ee 100644
--- a/drivers/soc/spacemit/Kconfig
+++ b/drivers/soc/spacemit/Kconfig
@@ -29,3 +29,4 @@ config SPACEMI_K1X_DMA_RANGE
           effective
 
 source "drivers/soc/spacemit/jpu/Kconfig"
+source "drivers/soc/spacemit/spacemit-rf/Kconfig"
diff --git a/drivers/soc/spacemit/Makefile b/drivers/soc/spacemit/Makefile
index 217b9a1f199a..39afd7a33819 100644
--- a/drivers/soc/spacemit/Makefile
+++ b/drivers/soc/spacemit/Makefile
@@ -1,4 +1,5 @@
 obj-$(CONFIG_SPACEMIT_PM_DOMAINS) += pm_domain/
 obj-$(CONFIG_CHIP_MEDIA_JPU)    += jpu/
+obj-$(CONFIG_SPACEMIT_RFKILL)   += spacemit-rf/
 obj-$(CONFIG_SPACEMIT_REBOOT_CONTROL)	+= spacemit_reboot.o
 obj-$(CONFIG_SPACEMI_K1X_DMA_RANGE) += k1x-dma-range.o
diff --git a/drivers/soc/spacemit/spacemit-rf/Kconfig b/drivers/soc/spacemit/spacemit-rf/Kconfig
new file mode 100755
index 000000000000..8410233ee4bc
--- /dev/null
+++ b/drivers/soc/spacemit/spacemit-rf/Kconfig
@@ -0,0 +1,9 @@
+#
+# Spacemit rfkill driver.
+#
+config SPACEMIT_RFKILL
+  tristate "Spacemit rfkill driver"
+  depends on WIRELESS || RFKILL
+  help
+    Spacemit rfkill driver
+
diff --git a/drivers/soc/spacemit/spacemit-rf/Makefile b/drivers/soc/spacemit/spacemit-rf/Makefile
new file mode 100755
index 000000000000..522245a0ba52
--- /dev/null
+++ b/drivers/soc/spacemit/spacemit-rf/Makefile
@@ -0,0 +1,6 @@
+
+#
+# Makefile for wifi bluetooth power controller drivers
+#
+
+obj-$(CONFIG_SPACEMIT_RFKILL)   += spacemit-pwrseq.o spacemit-wlan.o
diff --git a/drivers/soc/spacemit/spacemit-rf/spacemit-pwrseq.c b/drivers/soc/spacemit/spacemit-rf/spacemit-pwrseq.c
new file mode 100755
index 000000000000..cc7d910cd0bc
--- /dev/null
+++ b/drivers/soc/spacemit/spacemit-rf/spacemit-pwrseq.c
@@ -0,0 +1,290 @@
+/*
+ * spacemit-pwrseq.c -- power on/off pwrseq part of SoC
+ *
+ * Copyright 2023, Spacemit Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+ 
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <linux/err.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/of_gpio.h>
+#include <linux/clk.h>
+#include <linux/of_platform.h>
+#include <linux/regulator/consumer.h>
+#include <linux/platform_device.h>
+
+struct spacemit_pwrseq {
+	struct device		*dev;
+	bool clk_enabled;
+	u32 power_on_delay_ms;
+
+	struct clk *ext_clk;
+	struct gpio_descs *pwr_gpios;
+	struct regulator *vdd_supply;
+	struct regulator *io_supply;
+	int	vdd_voltage;
+	int io_voltage;
+};
+
+static void spacemit_set_gpios_value(struct spacemit_pwrseq *pwrseq,
+						int value)
+{
+	struct gpio_descs *pwr_gpios = pwrseq->pwr_gpios;
+
+	if (!IS_ERR(pwr_gpios)) {
+		unsigned long *values;
+		int nvalues = pwr_gpios->ndescs;
+
+		values = bitmap_alloc(nvalues, GFP_KERNEL);
+		if (!values)
+			return;
+
+		if (value)
+			bitmap_fill(values, nvalues);
+		else
+			bitmap_zero(values, nvalues);
+
+		gpiod_set_array_value_cansleep(nvalues, pwr_gpios->desc,
+					       pwr_gpios->info, values);
+
+		bitmap_free(values);
+	}
+}
+
+static int spacemit_regulator_set_voltage_if_supported(struct regulator *regulator,
+						  int min_uV, int target_uV,
+						  int max_uV)
+{
+	int current_uV;
+
+	/*
+	 * Check if supported first to avoid errors since we may try several
+	 * signal levels during power up and don't want to show errors.
+	 */
+	if (!regulator_is_supported_voltage(regulator, min_uV, max_uV))
+		return -EINVAL;
+
+	/*
+	 * The voltage is already set, no need to switch.
+	 * Return 1 to indicate that no switch happened.
+	 */
+	current_uV = regulator_get_voltage(regulator);
+	if (current_uV == target_uV)
+		return 1;
+
+	return regulator_set_voltage_triplet(regulator, min_uV, target_uV,
+					     max_uV);
+}
+
+static void spacemit_regulator_on(struct spacemit_pwrseq *pwrseq,
+						struct regulator *regulator, bool on_off)
+{
+	struct device *dev = pwrseq->dev;
+	int ret;
+
+	if(on_off){
+		if(regulator == pwrseq->io_supply){
+			ret = spacemit_regulator_set_voltage_if_supported(regulator,
+						1700000, pwrseq->io_voltage, 1950000);
+		}else{
+			ret = spacemit_regulator_set_voltage_if_supported(regulator,
+						2700000, pwrseq->vdd_voltage, 3600000);
+		}
+
+		if (ret < 0) {
+			dev_err(dev, "set vdd_supply voltage failed!\n");
+			return;
+		}
+
+		ret = regulator_enable(regulator);
+		if (ret < 0) {
+			dev_err(dev, "enable vdd_supply failed\n");
+			return;
+		}
+
+		ret = regulator_get_voltage(regulator);
+		if (ret < 0) {
+			dev_err(dev, "get vdd_supply voltage failed\n");
+			return;
+		}
+
+		dev_info(dev, "check vdd_supply voltage: %d\n", ret);
+	}else{
+		regulator_disable(regulator);
+	}
+}
+
+static void spacemit_pre_power_on(struct spacemit_pwrseq *pwrseq,
+						bool on_off)
+{
+	if(!IS_ERR(pwrseq->vdd_supply))
+		spacemit_regulator_on(pwrseq, pwrseq->vdd_supply, on_off);
+
+	if(!IS_ERR(pwrseq->io_supply))
+		spacemit_regulator_on(pwrseq, pwrseq->io_supply, on_off);
+}
+
+static void spacemit_post_power_on(struct spacemit_pwrseq *pwrseq,
+						bool on_off)
+{
+	if (!IS_ERR(pwrseq->ext_clk)) {
+		if(on_off && !pwrseq->clk_enabled){
+			clk_prepare_enable(pwrseq->ext_clk);
+			pwrseq->clk_enabled = true;
+		}
+
+		if(!on_off && pwrseq->clk_enabled){
+			clk_disable_unprepare(pwrseq->ext_clk);
+			pwrseq->clk_enabled = false;
+		}
+	}
+}
+
+void spacemit_power_on(struct spacemit_pwrseq *pwrseq,
+						bool on_off)
+{
+	if(on_off){
+		spacemit_pre_power_on(pwrseq, on_off);
+		spacemit_set_gpios_value(pwrseq, on_off);
+		if (pwrseq->power_on_delay_ms)
+			msleep(pwrseq->power_on_delay_ms);
+		spacemit_post_power_on(pwrseq, on_off);
+	}else{
+		spacemit_post_power_on(pwrseq, on_off);
+		spacemit_set_gpios_value(pwrseq, on_off);
+		spacemit_pre_power_on(pwrseq, on_off);
+	}
+}
+
+static int spacemit_pwrseq_probe(struct platform_device *pdev)
+{
+	struct device		*dev = &pdev->dev;
+	struct device_node	*node = dev->of_node;
+	struct spacemit_pwrseq *pwrseq;
+	int ret;
+
+	pwrseq = devm_kzalloc(dev, sizeof(*pwrseq), GFP_KERNEL);
+	if (!pwrseq)
+		return -ENOMEM;
+
+	pwrseq->dev = dev;
+	platform_set_drvdata(pdev, pwrseq);
+
+	pwrseq->vdd_supply = devm_regulator_get_optional(dev, "vdd");
+	if (IS_ERR(pwrseq->vdd_supply)) {
+		if (PTR_ERR(pwrseq->vdd_supply) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		dev_dbg(dev, "No vdd regulator found\n");
+	}else{
+		if (!device_property_read_u32(dev, "vdd_voltage", &pwrseq->vdd_voltage)) {
+			pwrseq->vdd_voltage = 3300000;
+			dev_dbg(dev, "failed get vdd voltage,use default value (%u)\n", pwrseq->vdd_voltage);
+		}
+	}
+
+	pwrseq->io_supply = devm_regulator_get_optional(dev, "io");
+	if (IS_ERR(pwrseq->io_supply)) {
+		if (PTR_ERR(pwrseq->io_supply) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		dev_dbg(dev, "No io regulator found\n");
+	}else{
+		if (!device_property_read_u32(dev, "io_voltage", &pwrseq->io_voltage)) {
+			pwrseq->io_voltage = 1800000;
+			dev_dbg(dev, "failed get io voltage,use default value (%u)\n", pwrseq->io_voltage);
+		}
+	}
+
+	pwrseq->pwr_gpios = devm_gpiod_get_array(dev, "pwr",
+							GPIOD_OUT_LOW);
+	if (IS_ERR(pwrseq->pwr_gpios) &&
+		PTR_ERR(pwrseq->pwr_gpios) != -ENOENT &&
+		PTR_ERR(pwrseq->pwr_gpios) != -ENOSYS) {
+		return PTR_ERR(pwrseq->pwr_gpios);
+	}
+
+	pwrseq->ext_clk = devm_clk_get(dev, "clock");
+	if (IS_ERR(pwrseq->ext_clk) && PTR_ERR(pwrseq->ext_clk) != -ENOENT){
+		dev_dbg(dev, "failed get ext clock\n");
+		return PTR_ERR(pwrseq->ext_clk);
+	}
+
+	device_property_read_u32(dev, "power-on-delay-ms",
+				 &pwrseq->power_on_delay_ms);
+
+	if (node) {
+		ret = of_platform_populate(node, NULL, NULL, dev);
+		if (ret) {
+			dev_err(dev, "failed to add sub pwrseq\n");
+			return ret;
+		}
+	} else {
+		dev_err(dev, "no device node, failed to add sub pwrseq\n");
+		ret = -ENODEV;
+		return ret;
+	}
+
+	spacemit_power_on(pwrseq, 1);
+	return 0;
+}
+
+static int spacemit_pwrseq_remove(struct platform_device *pdev)
+{
+	struct spacemit_pwrseq	*pwrseq = platform_get_drvdata(pdev);
+
+	of_platform_depopulate(&pdev->dev);
+
+	if (pwrseq->ext_clk >= 0)
+		clk_disable_unprepare(pwrseq->ext_clk);
+
+	return 0;
+}
+
+static const struct of_device_id spacemit_pwrseq_ids[] = {
+	{ .compatible = "spacemit,rf-pwrseq" },
+	{ /* Sentinel */ }
+};
+
+#ifdef CONFIG_PM_SLEEP
+static int spacemit_pwrseq_suspend(struct device *dev)
+{
+	return 0;
+}
+
+static int spacemit_pwrseq_resume(struct device *dev)
+{
+	return 0;
+}
+
+static const struct dev_pm_ops spacemit_pwrseq_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(spacemit_pwrseq_suspend, spacemit_pwrseq_resume)
+};
+
+#define DEV_PM_OPS	(&spacemit_pwrseq_dev_pm_ops)
+#else
+#define DEV_PM_OPS	NULL
+#endif /* CONFIG_PM_SLEEP */
+
+static struct platform_driver spacemit_pwrseq_driver = {
+	.probe		= spacemit_pwrseq_probe,
+	.remove	= spacemit_pwrseq_remove,
+	.driver	= {
+		.owner	= THIS_MODULE,
+		.name	= "spacemit-rf-pwrseq",
+		.of_match_table	= spacemit_pwrseq_ids,
+	},
+};
+
+module_platform_driver(spacemit_pwrseq_driver);
+
+MODULE_DESCRIPTION("spacemit rf pwrseq driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/soc/spacemit/spacemit-rf/spacemit-wlan.c b/drivers/soc/spacemit/spacemit-rf/spacemit-wlan.c
new file mode 100755
index 000000000000..ffa3d0eb6054
--- /dev/null
+++ b/drivers/soc/spacemit/spacemit-rf/spacemit-wlan.c
@@ -0,0 +1,179 @@
+/*
+ * spacemit-wlan.c -- power on/off wlan part of SoC
+ *
+ * Copyright 2023, Spacemit Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+ 
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <linux/err.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/platform_device.h>
+
+struct wlan_pwrseq {
+	struct device		*dev;
+	bool power_state;
+	u32 power_on_delay_ms;
+
+	struct gpio_desc *regon;
+	struct gpio_desc *hostwake;
+};
+
+static struct wlan_pwrseq *pdata = NULL;
+static int spacemit_wlan_on(struct wlan_pwrseq *pwrseq, bool on_off);
+static DEFINE_MUTEX(spacemit_wlan_mutex);
+
+void spacemit_wlan_set_power(bool on_off)
+{
+	struct wlan_pwrseq *pwrseq = pdata;
+	int ret = 0;
+
+	if (!pwrseq)
+		return;
+
+	mutex_lock(&spacemit_wlan_mutex);
+	if (on_off != pwrseq->power_state) {
+		ret = spacemit_wlan_on(pwrseq, on_off);
+		if (ret)
+			dev_err(pwrseq->dev, "set power failed\n");
+	}
+
+	mutex_unlock(&spacemit_wlan_mutex);
+}
+EXPORT_SYMBOL_GPL(spacemit_wlan_set_power);
+
+int spacemit_wlan_get_oob_irq(void)
+{
+	struct wlan_pwrseq *pwrseq = pdata;
+	int host_oob_irq = 0;
+
+	if (!pwrseq || IS_ERR(pwrseq->hostwake))
+		return 0;
+
+	host_oob_irq = gpiod_to_irq(pwrseq->hostwake);
+	if (host_oob_irq < 0)
+		dev_err(pwrseq->dev, "map hostwake gpio to virq failed\n");
+
+	return host_oob_irq;
+}
+EXPORT_SYMBOL_GPL(spacemit_wlan_get_oob_irq);
+
+int spacemit_wlan_get_oob_irq_flags(void)
+{
+	struct wlan_pwrseq *pwrseq = pdata;
+	int oob_irq_flags;
+
+	if (!pwrseq)
+		return 0;
+
+	oob_irq_flags = (IRQF_TRIGGER_HIGH | IRQF_SHARED | IRQF_NO_SUSPEND);
+
+	return oob_irq_flags;
+}
+EXPORT_SYMBOL_GPL(spacemit_wlan_get_oob_irq_flags);
+
+static int spacemit_wlan_on(struct wlan_pwrseq *pwrseq, bool on_off)
+{
+	if (!pwrseq || IS_ERR(pwrseq->regon))
+		return 0;
+
+	if (on_off){
+		gpiod_set_value(pwrseq->regon, 1);
+		if (pwrseq->power_on_delay_ms)
+			msleep(pwrseq->power_on_delay_ms);
+	}else{
+		gpiod_set_value(pwrseq->regon, 0);
+	}
+
+	pwrseq->power_state = on_off;
+	return 0;
+}
+
+static int spacemit_wlan_probe(struct platform_device *pdev)
+{
+	struct device		*dev = &pdev->dev;
+	struct wlan_pwrseq *pwrseq;
+
+	pwrseq = devm_kzalloc(dev, sizeof(*pwrseq), GFP_KERNEL);
+	if (!pwrseq)
+		return -ENOMEM;
+
+	pwrseq->dev = dev;
+	pdata = pwrseq;
+	platform_set_drvdata(pdev, pwrseq);
+
+	pwrseq->regon = devm_gpiod_get_index(dev, "regon",
+							0, GPIOD_OUT_LOW);
+	if (IS_ERR(pwrseq->regon) &&
+		PTR_ERR(pwrseq->regon) != -ENOENT &&
+		PTR_ERR(pwrseq->regon) != -ENOSYS) {
+		return PTR_ERR(pwrseq->regon);
+	}
+
+	pwrseq->hostwake = devm_gpiod_get_index(dev, "hostwake",
+							1, GPIOD_IN);
+	if (IS_ERR(pwrseq->hostwake) &&
+		PTR_ERR(pwrseq->hostwake) != -ENOENT &&
+		PTR_ERR(pwrseq->hostwake) != -ENOSYS) {
+		return PTR_ERR(pwrseq->hostwake);
+	}
+
+	device_property_read_u32(dev, "power-on-delay-ms",
+				 &pwrseq->power_on_delay_ms);
+	return 0;
+}
+
+static int spacemit_wlan_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id spacemit_wlan_ids[] = {
+	{ .compatible = "spacemit,wlan-pwrseq" },
+	{ /* Sentinel */ }
+};
+
+#ifdef CONFIG_PM_SLEEP
+static int spacemit_wlan_suspend(struct device *dev)
+{
+	return 0;
+}
+
+static int spacemit_wlan_resume(struct device *dev)
+{
+	return 0;
+}
+
+static const struct dev_pm_ops spacemit_wlan_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(spacemit_wlan_suspend, spacemit_wlan_resume)
+};
+
+#define DEV_PM_OPS	(&spacemit_wlan_dev_pm_ops)
+#else
+#define DEV_PM_OPS	NULL
+#endif /* CONFIG_PM_SLEEP */
+
+static struct platform_driver spacemit_wlan_driver = {
+	.probe		= spacemit_wlan_probe,
+	.remove	= spacemit_wlan_remove,
+	.driver	= {
+		.owner	= THIS_MODULE,
+		.name	= "spacemit-wlan",
+		.of_match_table	= spacemit_wlan_ids,
+	},
+};
+
+module_platform_driver(spacemit_wlan_driver);
+
+MODULE_DESCRIPTION("spacemit wlan pwrseq driver");
+MODULE_LICENSE("GPL");
-- 
2.47.0

