From c0718ef8c6cc9505f1092213553b4487b1276b7c Mon Sep 17 00:00:00 2001
From: Pan Junzhong <junzhong.pan@spacemit.com>
Date: Mon, 1 Apr 2024 20:09:44 +0800
Subject: [PATCH 0538/1204] usb: spacemit_onboard_hub: fix bug caused by no
 delay before enable vbus, support debugfs

Change-Id: Ie091132052ec774cc56caab82e34d2b0536af4a2
---
 arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts |   3 +-
 arch/riscv/boot/dts/spacemit/k1-x_deb1.dts    |   3 +-
 arch/riscv/boot/dts/spacemit/k1-x_deb2.dts    |   3 +-
 drivers/usb/misc/spacemit_onboard_hub.c       | 137 ++++++++++++++++--
 drivers/usb/misc/spacemit_onboard_hub.h       | 136 +++++++++++++++++
 5 files changed, 264 insertions(+), 18 deletions(-)
 create mode 100644 drivers/usb/misc/spacemit_onboard_hub.h

diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts b/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts
index 7661c63787d7..106be807779c 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts
@@ -597,9 +597,10 @@ &combphy {
 };
 
 &usb3hub {
-	nub-gpios = <&gpio 97 0	/* gpio_97 for usb3 pwren */
+	hub-gpios = <
 		&gpio 123 0	/* usb3 hub en */
 		&gpio 124 0>;	/* usb3 hub rst*/
+	vbus-gpios = <&gpio 97 0>;	/* gpio_97 for usb3 hub output vbus */
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts b/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
index 63b8f3faf8d5..b06526852872 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
@@ -779,9 +779,10 @@ &combphy {
 };
 
 &usb3hub {
-	hub-gpios = <&gpio 97 0	/* gpio_97 for usb3 pwren */
+	hub-gpios = <
 		&gpio 123 0	/* usb3 hub en */
 		&gpio 124 0>;	/* usb3 hub rst*/
+	vbus-gpios = <&gpio 97 0>;	/* gpio_97 for usb3 hub output vbus */
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts b/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts
index dd7b38f614aa..bced90483a40 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts
@@ -741,9 +741,10 @@ &combphy {
 };
 
 &usb3hub {
-	hub-gpios = <&gpio 97 0	/* gpio_97 for usb3 pwren */
+	hub-gpios = <
 		&gpio 123 0	/* usb3 hub en */
 		&gpio 124 0>;	/* usb3 hub rst*/
+	vbus-gpios = <&gpio 97 0>;	/* gpio_97 for usb3 hub output vbus */
 	status = "okay";
 };
 
diff --git a/drivers/usb/misc/spacemit_onboard_hub.c b/drivers/usb/misc/spacemit_onboard_hub.c
index fa12fb718bae..8ccde42e2393 100644
--- a/drivers/usb/misc/spacemit_onboard_hub.c
+++ b/drivers/usb/misc/spacemit_onboard_hub.c
@@ -17,30 +17,139 @@
 #include <linux/of_address.h>
 #include <linux/gpio/consumer.h>
 
-struct spacemit_hub_priv {
-	struct gpio_descs *gpios;
-};
+#include "spacemit_onboard_hub.h"
+
+#define DRIVER_VERSION "v1.0.0"
+
+static void spacemit_hub_enable(struct spacemit_hub_priv *spacemit, bool on)
+{
+	unsigned i;
+	int active_val = spacemit->hub_gpio_active_low ? 0 : 1;
+	dev_dbg(spacemit->dev, "do hub enable %s\n", on ? "on" : "off");
+
+	if (on) {
+		for (i = 0; i < spacemit->hub_gpios->ndescs; i++) {
+			gpiod_set_value(spacemit->hub_gpios->desc[i],
+					active_val);
+			if (spacemit->hub_inter_delay_ms) {
+				msleep(spacemit->hub_inter_delay_ms);
+			}
+		}
+	} else {
+		for (i = spacemit->hub_gpios->ndescs; i > 0; --i) {
+			gpiod_set_value(spacemit->hub_gpios->desc[i - 1],
+					!active_val);
+			if (spacemit->hub_inter_delay_ms) {
+				msleep(spacemit->hub_inter_delay_ms);
+			}
+		}
+	}
+	spacemit->is_hub_on = on;
+}
+
+static void spacemit_hub_vbus_enable(struct spacemit_hub_priv *spacemit,
+					 bool on)
+{
+	unsigned i;
+	int active_val = spacemit->vbus_gpio_active_low ? 0 : 1;
+
+	dev_dbg(spacemit->dev, "do hub vbus on %s\n", on ? "on" : "off");
+	if (on) {
+		for (i = 0; i < spacemit->vbus_gpios->ndescs; i++) {
+			gpiod_set_value(spacemit->vbus_gpios->desc[i],
+					active_val);
+			if (spacemit->vbus_inter_delay_ms) {
+				msleep(spacemit->vbus_inter_delay_ms);
+			}
+		}
+	} else {
+		for (i = spacemit->vbus_gpios->ndescs; i > 0; --i) {
+			gpiod_set_value(spacemit->vbus_gpios->desc[i - 1],
+					!active_val);
+			if (spacemit->vbus_inter_delay_ms) {
+				msleep(spacemit->vbus_inter_delay_ms);
+			}
+		}
+	}
+	spacemit->is_vbus_on = on;
+}
+
+static void spacemit_hub_configure(struct spacemit_hub_priv *spacemit, bool on)
+{
+	dev_dbg(spacemit->dev, "do hub configure %s\n", on ? "on" : "off");
+	mutex_lock(&spacemit->hub_mutex);
+	if (on) {
+		spacemit_hub_enable(spacemit, true);
+		if (spacemit->vbus_delay_ms && spacemit->vbus_gpios->ndescs) {
+			msleep(spacemit->vbus_delay_ms);
+		}
+		spacemit_hub_vbus_enable(spacemit, true);
+	} else {
+		spacemit_hub_vbus_enable(spacemit, false);
+		if (spacemit->vbus_delay_ms && spacemit->vbus_gpios->ndescs) {
+			msleep(spacemit->vbus_delay_ms);
+		}
+		spacemit_hub_enable(spacemit, false);
+	}
+	mutex_unlock(&spacemit->hub_mutex);
+}
+
+static void spacemit_read_u32_prop(struct device *dev, const char *name,
+				   u32 init_val, u32 *pval)
+{
+	if (device_property_read_u32(dev, name, pval))
+		*pval = init_val;
+	dev_dbg(dev, "hub %s, delay: %u ms\n", name, *pval);
+}
 
 static int spacemit_hub_probe(struct platform_device *pdev)
 {
 	struct spacemit_hub_priv *spacemit;
-	unsigned i;
+	struct device *dev = &pdev->dev;
+
+	dev_info(&pdev->dev, "%s\n", DRIVER_VERSION);
 
 	spacemit = devm_kzalloc(&pdev->dev, sizeof(*spacemit), GFP_KERNEL);
 	if (!spacemit)
 		return -ENOMEM;
 
-	spacemit->gpios = devm_gpiod_get_array(&pdev->dev, "hub", GPIOD_OUT_HIGH);
-	if (IS_ERR(spacemit->gpios)) {
+	spacemit_read_u32_prop(dev, "hub_inter_delay_ms", 0,
+				   &spacemit->hub_inter_delay_ms);
+	spacemit_read_u32_prop(dev, "vbus_inter_delay_ms", 0,
+				   &spacemit->vbus_inter_delay_ms);
+	spacemit_read_u32_prop(dev, "vbus_delay_ms", 10,
+				   &spacemit->vbus_delay_ms);
+
+	spacemit->hub_gpio_active_low =
+		device_property_read_bool(dev, "hub_gpio_active_low");
+	spacemit->vbus_gpio_active_low =
+		device_property_read_bool(dev, "vbus_gpio_active_low");
+
+	spacemit->hub_gpios = devm_gpiod_get_array(
+		&pdev->dev, "hub",
+		spacemit->hub_gpio_active_low ? GPIOD_OUT_HIGH : GPIOD_OUT_LOW);
+	if (IS_ERR(spacemit->hub_gpios)) {
 		dev_err(&pdev->dev, "failed to retrieve hub-gpios from dts\n");
-		return PTR_ERR(spacemit->gpios);
+		return PTR_ERR(spacemit->hub_gpios);
 	}
-	for (i = 0; i < spacemit->gpios->ndescs; i++) {
-		gpiod_set_value(spacemit->gpios->desc[i], 1);
+
+	spacemit->vbus_gpios = devm_gpiod_get_array(
+		&pdev->dev, "vbus",
+		spacemit->vbus_gpio_active_low ? GPIOD_OUT_HIGH : GPIOD_OUT_LOW);
+	if (IS_ERR(spacemit->vbus_gpios)) {
+		dev_err(&pdev->dev, "failed to retrieve vbus-gpios from dts\n");
+		return PTR_ERR(spacemit->vbus_gpios);
 	}
-	dev_info(&pdev->dev, "onboard usb hub driver probed, hub configured\n");
 
 	platform_set_drvdata(pdev, spacemit);
+	spacemit->dev = &pdev->dev;
+	mutex_init(&spacemit->hub_mutex);
+
+	spacemit_hub_configure(spacemit, true);
+
+	dev_info(&pdev->dev, "onboard usb hub driver probed, hub configured\n");
+
+	spacemit_hub_debugfs_init(spacemit);
 
 	return 0;
 }
@@ -48,12 +157,10 @@ static int spacemit_hub_probe(struct platform_device *pdev)
 static int spacemit_hub_remove(struct platform_device *pdev)
 {
 	struct spacemit_hub_priv *spacemit = platform_get_drvdata(pdev);
-	unsigned i;
-
-	for (i = 0; i < spacemit->gpios->ndescs; i++) {
-		gpiod_set_value(spacemit->gpios->desc[i], 0);
-	}
 
+	spacemit_hub_configure(spacemit, false);
+	debugfs_remove(debugfs_lookup(dev_name(&pdev->dev), usb_debug_root));
+	mutex_destroy(&spacemit->hub_mutex);
 	dev_info(&pdev->dev, "onboard usb hub driver exit, disable hub\n");
 	return 0;
 }
diff --git a/drivers/usb/misc/spacemit_onboard_hub.h b/drivers/usb/misc/spacemit_onboard_hub.h
new file mode 100644
index 000000000000..a59c80059dd4
--- /dev/null
+++ b/drivers/usb/misc/spacemit_onboard_hub.h
@@ -0,0 +1,136 @@
+#include <linux/property.h>
+#include <linux/delay.h>
+#include <linux/usb.h>
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
+#include <linux/mutex.h>
+
+
+struct spacemit_hub_priv {
+	struct device *dev;
+	bool is_hub_on;
+	bool is_vbus_on;
+
+	struct gpio_descs *hub_gpios;
+	struct gpio_descs *vbus_gpios;
+	bool hub_gpio_active_low;
+	bool vbus_gpio_active_low;
+
+	u32 hub_inter_delay_ms;
+	u32 vbus_delay_ms;
+	u32 vbus_inter_delay_ms;
+
+	struct mutex hub_mutex;
+};
+
+static void spacemit_hub_enable(struct spacemit_hub_priv *spacemit, bool on);
+
+static void spacemit_hub_vbus_enable(struct spacemit_hub_priv *spacemit,
+					bool on);
+
+static int spacemit_hub_enable_show(struct seq_file *s, void *unused)
+{
+	struct spacemit_hub_priv *spacemit = s->private;
+	mutex_lock(&spacemit->hub_mutex);
+	seq_puts(s, spacemit->is_hub_on ? "true\n" : "false\n");
+	mutex_unlock(&spacemit->hub_mutex);
+	return 0;
+}
+
+static ssize_t spacemit_hub_enable_write(struct file *file,
+					   const char __user *ubuf, size_t count,
+					   loff_t *ppos)
+{
+	struct seq_file *s = file->private_data;
+	struct spacemit_hub_priv *spacemit = s->private;
+	bool on = false;
+	char buf[32];
+
+	if (copy_from_user(&buf, ubuf, min_t(size_t, sizeof(buf) - 1, count)))
+		return -EFAULT;
+
+	if ((!strncmp(buf, "true", 4)) || (!strncmp(buf, "1", 1)))
+		on = true;
+	if ((!strncmp(buf, "false", 5)) || !strncmp(buf, "0", 1))
+		on = false;
+
+	mutex_lock(&spacemit->hub_mutex);
+	if (on != spacemit->is_hub_on) {
+		spacemit_hub_enable(spacemit, on);
+	}
+	mutex_unlock(&spacemit->hub_mutex);
+
+	return count;
+}
+
+static int spacemit_hub_enable_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, spacemit_hub_enable_show, inode->i_private);
+}
+
+struct file_operations spacemit_hub_enable_fops = {
+	.open = spacemit_hub_enable_open,
+	.write = spacemit_hub_enable_write,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int spacemit_hub_vbus_show(struct seq_file *s, void *unused)
+{
+	struct spacemit_hub_priv *spacemit = s->private;
+	mutex_lock(&spacemit->hub_mutex);
+	seq_puts(s, spacemit->is_vbus_on ? "true\n" : "false\n");
+	mutex_unlock(&spacemit->hub_mutex);
+	return 0;
+}
+
+static ssize_t spacemit_hub_vbus_write(struct file *file,
+					   const char __user *ubuf, size_t count,
+					   loff_t *ppos)
+{
+	struct seq_file *s = file->private_data;
+	struct spacemit_hub_priv *spacemit = s->private;
+	bool on = false;
+	char buf[32];
+
+	if (copy_from_user(&buf, ubuf, min_t(size_t, sizeof(buf) - 1, count)))
+		return -EFAULT;
+
+	if ((!strncmp(buf, "true", 4)) || (!strncmp(buf, "1", 1)))
+		on = true;
+	if ((!strncmp(buf, "false", 5)) || !strncmp(buf, "0", 1))
+		on = false;
+
+	mutex_lock(&spacemit->hub_mutex);
+	if (on != spacemit->is_vbus_on) {
+		spacemit_hub_vbus_enable(spacemit, on);
+	}
+	mutex_unlock(&spacemit->hub_mutex);
+
+	return count;
+}
+
+static int spacemit_hub_vbus_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, spacemit_hub_vbus_show, inode->i_private);
+}
+
+struct file_operations spacemit_hub_vbus_fops = {
+	.open = spacemit_hub_vbus_open,
+	.write = spacemit_hub_vbus_write,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static void spacemit_hub_debugfs_init(struct spacemit_hub_priv *spacemit)
+{
+	struct dentry *root;
+
+	root = debugfs_create_dir(dev_name(spacemit->dev), usb_debug_root);
+	debugfs_create_file("vbus_on", 0644, root, spacemit,
+				&spacemit_hub_vbus_fops);
+	debugfs_create_file("hub_on", 0644, root, spacemit,
+				&spacemit_hub_enable_fops);
+}
-- 
2.47.0

