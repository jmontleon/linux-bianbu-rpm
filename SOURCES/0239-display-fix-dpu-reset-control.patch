From f250ff3fdc61760f85c7cc2fa4fd5f5c02d579be Mon Sep 17 00:00:00 2001
From: lilijun <lijun.li@spacemit.com>
Date: Mon, 25 Dec 2023 15:35:51 +0800
Subject: [PATCH 0239/1448] display: fix dpu reset control

Change-Id: Ic1ea591edd0a32a18ce4772459813716271b3b80
---
 drivers/gpu/drm/spacemit/spacemit_dpu.c | 84 +++++++++++++++----------
 drivers/gpu/drm/spacemit/spacemit_dsi.c |  8 ++-
 2 files changed, 56 insertions(+), 36 deletions(-)

diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.c b/drivers/gpu/drm/spacemit/spacemit_dpu.c
index 224e8c52d10f..1fda1a52f861 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.c
@@ -839,11 +839,38 @@ static void spacemit_dpu_unbind(struct device *dev, struct device *master,
 	void *data)
 {
 	struct spacemit_dpu *dpu = dev_get_drvdata(dev);
+	int result;
 #ifdef CONFIG_SPACEMIT_DEBUG
 	struct dpu_clk_context *clk_ctx = &dpu->clk_ctx;
 #endif
 
 	DRM_INFO("%s()\n", __func__);
+
+	if (IS_ERR_OR_NULL(dpu->esc_reset)) {
+		result = reset_control_assert(dpu->esc_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to assert esc_reset: %d\n", result);
+		}
+	}
+	if (IS_ERR_OR_NULL(dpu->lcd_reset)) {
+		result = reset_control_assert(dpu->lcd_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to assert lcd_reset: %d\n", result);
+		}
+	}
+	if (IS_ERR_OR_NULL(dpu->mclk_reset)) {
+		result = reset_control_assert(dpu->mclk_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to assert mclk_reset: %d\n", result);
+		}
+	}
+	if (IS_ERR_OR_NULL(dpu->dsi_reset)) {
+		result = reset_control_assert(dpu->dsi_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to assert dsi_reset: %d\n", result);
+		}
+	}
+
 	pm_runtime_disable(dev);
 	of_reserved_mem_device_release(dpu->dev);
 	drm_crtc_cleanup(&dpu->crtc);
@@ -912,19 +939,19 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	}
 #endif
 
-	dpu->dsi_reset = devm_reset_control_get_exclusive(&pdev->dev, "dsi_reset");
+	dpu->dsi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "dsi_reset");
 	if (IS_ERR_OR_NULL(dpu->dsi_reset)) {
 		DRM_DEV_ERROR(dev, "not found dsi_reset\n");
 	}
-	dpu->mclk_reset = devm_reset_control_get_exclusive(&pdev->dev, "mclk_reset");
+	dpu->mclk_reset = devm_reset_control_get_optional_shared(&pdev->dev, "mclk_reset");
 	if (IS_ERR_OR_NULL(dpu->mclk_reset)) {
 		DRM_DEV_ERROR(dev, "not found mclk_reset\n");
 	}
-	dpu->lcd_reset = devm_reset_control_get_exclusive(&pdev->dev, "lcd_reset");
+	dpu->lcd_reset = devm_reset_control_get_optional_shared(&pdev->dev, "lcd_reset");
 	if (IS_ERR_OR_NULL(dpu->lcd_reset)) {
 		DRM_DEV_ERROR(dev, "not found lcd_reset\n");
 	}
-	dpu->esc_reset = devm_reset_control_get_exclusive(&pdev->dev, "esc_reset");
+	dpu->esc_reset = devm_reset_control_get_optional_shared(&pdev->dev, "esc_reset");
 	if (IS_ERR_OR_NULL(dpu->esc_reset)) {
 		DRM_DEV_ERROR(dev, "not found esc_reset\n");
 	}
@@ -938,38 +965,29 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	if (spacemit_dpu_logo_booton)
 		pm_runtime_get_sync(&pdev->dev);
 
-	result = reset_control_assert(dpu->esc_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to assert esc_reset: %d\n", result);
-	}
-	result = reset_control_assert(dpu->lcd_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to assert lcd_reset: %d\n", result);
-	}
-	result = reset_control_assert(dpu->mclk_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to assert mclk_reset: %d\n", result);
-	}
-	result = reset_control_assert(dpu->dsi_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to assert dsi_reset: %d\n", result);
-	}
-	udelay(2);
-	result = reset_control_deassert(dpu->dsi_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to deassert dsi_reset: %d\n", result);
+	if (IS_ERR_OR_NULL(dpu->dsi_reset)) {
+		result = reset_control_deassert(dpu->dsi_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to deassert dsi_reset: %d\n", result);
+		}
 	}
-	result = reset_control_deassert(dpu->mclk_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to deassert mclk_reset: %d\n", result);
+	if (IS_ERR_OR_NULL(dpu->mclk_reset)) {
+		result = reset_control_deassert(dpu->mclk_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to deassert mclk_reset: %d\n", result);
+		}
 	}
-	result = reset_control_deassert(dpu->lcd_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to deassert lcd_reset: %d\n", result);
+	if (IS_ERR_OR_NULL(dpu->lcd_reset)) {
+		result = reset_control_deassert(dpu->lcd_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to deassert lcd_reset: %d\n", result);
+		}
 	}
-	result = reset_control_deassert(dpu->esc_reset);
-	if (result < 0) {
-		DRM_DEV_ERROR(dev, "Failed to deassert esc_reset: %d\n", result);
+	if (IS_ERR_OR_NULL(dpu->esc_reset)) {
+		result = reset_control_deassert(dpu->esc_reset);
+		if (result < 0) {
+			DRM_DEV_ERROR(dev, "Failed to deassert esc_reset: %d\n", result);
+		}
 	}
 
 	return component_add(dev, &dpu_component_ops);
diff --git a/drivers/gpu/drm/spacemit/spacemit_dsi.c b/drivers/gpu/drm/spacemit/spacemit_dsi.c
index 403e120038eb..f12cc6cb9573 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dsi.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dsi.c
@@ -83,7 +83,7 @@ static void spacemit_dsi_encoder_mode_set(struct drm_encoder *encoder,
 {
 	struct spacemit_dsi *dsi = encoder_to_dsi(encoder);
 
-	DRM_INFO("%s()\n", __func__);
+	DRM_DEBUG("%s()\n", __func__);
 
 	drm_display_mode_to_videomode(mode, &dsi->ctx.vm);
 }
@@ -92,7 +92,7 @@ static int spacemit_dsi_encoder_atomic_check(struct drm_encoder *encoder,
 				    struct drm_crtc_state *crtc_state,
 				    struct drm_connector_state *conn_state)
 {
-	DRM_INFO("%s()\n", __func__);
+	DRM_DEBUG("%s()\n", __func__);
 
 	return 0;
 }
@@ -115,6 +115,8 @@ static int spacemit_dsi_encoder_init(struct drm_device *drm, struct spacemit_dsi
 	u32 crtc_mask;
 	int ret;
 
+	DRM_DEBUG("%s()\n", __func__);
+
 	crtc_mask = drm_of_find_possible_crtcs(drm, dev->of_node);
 	if (!crtc_mask) {
 		DRM_ERROR("failed to find crtc mask\n");
@@ -474,7 +476,7 @@ spacemit_dsi_connector_best_encoder(struct drm_connector *connector)
 {
 	struct spacemit_dsi *dsi = connector_to_dsi(connector);
 
-	DRM_INFO("%s()\n", __func__);
+	DRM_DEBUG("%s()\n", __func__);
 	return &dsi->encoder;
 }
 
-- 
2.47.0

