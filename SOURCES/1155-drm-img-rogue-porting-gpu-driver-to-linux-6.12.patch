From 9d194459eddb39876de6a9d01e8d99b2da12d863 Mon Sep 17 00:00:00 2001
From: liangbaihui <baihui.liang@spacemit.com>
Date: Mon, 2 Dec 2024 19:15:48 +0800
Subject: [PATCH 1155/1204] drm: img-rogue: porting gpu driver to linux-6.12

Change-Id: I8f0055aa1386bae3555b09e5c03382ef6ae81e43
---
 .../gpu/drm/img-rogue/apollo/drm_pdp_drv.c    |  5 +-
 .../drm/img-rogue/devicemem_history_server.c  |  7 +-
 drivers/gpu/drm/img-rogue/km_apphint.c        |  7 ++
 drivers/gpu/drm/img-rogue/mem_utils.c         |  9 +-
 drivers/gpu/drm/img-rogue/mmu_common.c        |  2 +-
 drivers/gpu/drm/img-rogue/osfunc_common.h     | 19 ++++
 drivers/gpu/drm/img-rogue/physmem.c           |  2 +-
 drivers/gpu/drm/img-rogue/physmem_hostmem.c   |  4 +-
 drivers/gpu/drm/img-rogue/pvr_debug.c         |  1 +
 drivers/gpu/drm/img-rogue/pvr_fence_trace.h   | 24 ++---
 drivers/gpu/drm/img-rogue/pvr_platform_drv.c  |  2 +-
 drivers/gpu/drm/img-rogue/pvrsrv.c            | 99 +++++++++++++++++++
 drivers/gpu/drm/img-rogue/rgx_bridge.h        | 34 +------
 .../gpu/drm/img-rogue/rogue_trace_events.h    | 22 ++---
 drivers/gpu/drm/img-rogue/vmm_type_stub.c     | 14 +--
 15 files changed, 171 insertions(+), 80 deletions(-)

diff --git a/drivers/gpu/drm/img-rogue/apollo/drm_pdp_drv.c b/drivers/gpu/drm/img-rogue/apollo/drm_pdp_drv.c
index d36a0b986f9d..4621570b5710 100644
--- a/drivers/gpu/drm/img-rogue/apollo/drm_pdp_drv.c
+++ b/drivers/gpu/drm/img-rogue/apollo/drm_pdp_drv.c
@@ -674,10 +674,9 @@ static int pdp_probe(struct platform_device *pdev)
 	return component_master_add_with_match(dev, &pdp_component_ops, match);
 }
 
-static int pdp_remove(struct platform_device *pdev)
+static void pdp_remove(struct platform_device *pdev)
 {
 	component_master_del(&pdev->dev, &pdp_component_ops);
-	return 0;
 }
 
 #else // !SUPPORT_PLATO_DISPLAY
@@ -729,7 +728,7 @@ static int pdp_probe(struct platform_device *pdev)
 	return	ret;
 }
 
-static int pdp_remove(struct platform_device *pdev)
+static void pdp_remove(struct platform_device *pdev)
 {
 	struct drm_device *ddev = platform_get_drvdata(pdev);
 
diff --git a/drivers/gpu/drm/img-rogue/devicemem_history_server.c b/drivers/gpu/drm/img-rogue/devicemem_history_server.c
index f28e96fa55e1..91a6a586fad0 100644
--- a/drivers/gpu/drm/img-rogue/devicemem_history_server.c
+++ b/drivers/gpu/drm/img-rogue/devicemem_history_server.c
@@ -795,8 +795,9 @@ static PVRSRV_ERROR CreateAllocation(PVRSRV_DEVICE_NODE *psDeviceNode,
 							IMG_UINT32 *puiAllocationIndex)
 {
 	IMG_UINT32 ui32Alloc;
+#if defined(PDUMP)
 	RECORD_ALLOCATION *psAlloc;
-
+#endif
 	DEVICEMEM_HISTORY_DATA *psDevHData;
 
 	psDevHData = DevmemFindDataFromDev(psDeviceNode);
@@ -807,9 +808,9 @@ static PVRSRV_ERROR CreateAllocation(PVRSRV_DEVICE_NODE *psDeviceNode,
 	}
 
 	ui32Alloc = GetFreeAllocation(psDevHData);
-
+#if defined(PDUMP)
 	psAlloc = ALLOC_INDEX_TO_PTR(psDevHData, ui32Alloc);
-
+#endif
 	InitialiseAllocation(ALLOC_INDEX_TO_PTR(psDevHData, ui32Alloc),
 						pszName,
 						ui64Serial,
diff --git a/drivers/gpu/drm/img-rogue/km_apphint.c b/drivers/gpu/drm/img-rogue/km_apphint.c
index 6e9bfd6f07d4..03687c4a8f3a 100644
--- a/drivers/gpu/drm/img-rogue/km_apphint.c
+++ b/drivers/gpu/drm/img-rogue/km_apphint.c
@@ -1594,8 +1594,15 @@ int pvr_apphint_set_string(PVRSRV_DEVICE_NODE *device, APPHINT_ID ue, IMG_CHAR *
 			error = apphint.val[ue + device_offset].set.STRING(apphint.val[ue + device_offset].device,
 															 apphint.val[ue + device_offset].private_data,
 															 pBuffer);
+<<<<<<< HEAD
 		} else if (OSStringSafeCopy(apphint.val[ue + device_offset].stored.STRING, pBuffer, size) >= 0) {
 			error = 0;
+=======
+		} else {
+			if (strscpy(apphint.val[ue + device_offset].stored.STRING, pBuffer, size) < size) {
+				error = 0;
+			}
+>>>>>>> parent of c55e220db94e (Revert "drm: img-rogue: porting gpu driver to linux-6.12")
 		}
 		apphint.val[ue].device = device;
 	}
diff --git a/drivers/gpu/drm/img-rogue/mem_utils.c b/drivers/gpu/drm/img-rogue/mem_utils.c
index 59f808cfcb20..c3cb6de61a52 100644
--- a/drivers/gpu/drm/img-rogue/mem_utils.c
+++ b/drivers/gpu/drm/img-rogue/mem_utils.c
@@ -381,7 +381,14 @@ void DeviceMemSetBytes(void *pvDst, unsigned char ui8Value, size_t uSize)
 	}
 }
 
-#if defined(__linux__) && defined(__KERNEL__)
+#if !defined(__QNXNTO__) /* Ignore Neutrino as it uses strlcpy */
+
+#if defined(__KERNEL__) && defined(__linux__)
+/*
+ * In case of Linux kernel-mode in a debug build, choose the variant
+ * of StringLCopy that uses strscpy and logs truncation via a stack dump.
+ * For Linux kernel-mode in a release build, strscpy alone is used.
+ */
 #if defined(DEBUG)
 /*
  * In case of Linux kernel-mode in a debug build, choose the variant of
diff --git a/drivers/gpu/drm/img-rogue/mmu_common.c b/drivers/gpu/drm/img-rogue/mmu_common.c
index 3c402ec25c8e..a5c2cfbb7f8e 100644
--- a/drivers/gpu/drm/img-rogue/mmu_common.c
+++ b/drivers/gpu/drm/img-rogue/mmu_common.c
@@ -4489,7 +4489,7 @@ MMU_UnmapPMRFastUnlocked(MMU_CONTEXT *psMMUContext,
 		{
 			for (i=uiPTEIndex; i<uiLastPTEIndex; i++)
 			{
-				IMG_DEV_VIRTADDR sDevVAddrToLog;
+				__maybe_unused IMG_DEV_VIRTADDR sDevVAddrToLog;
 				sDevVAddrToLog.uiAddr = sDevVAddr.uiAddr + (i - uiPTEIndex) * uiPageSize;
 
 				/* Log modifications */
diff --git a/drivers/gpu/drm/img-rogue/osfunc_common.h b/drivers/gpu/drm/img-rogue/osfunc_common.h
index d93cb6d61aba..a9b32c14712a 100644
--- a/drivers/gpu/drm/img-rogue/osfunc_common.h
+++ b/drivers/gpu/drm/img-rogue/osfunc_common.h
@@ -263,6 +263,25 @@ ssize_t OSStringSafeCopy(IMG_CHAR *pszDest, const IMG_CHAR *pszSrc, size_t uData
 	} while (false)
 #endif /* defined(__KERNEL__) */
 
+/**************************************************************************/ /*!
+@Function       OSStringLCopy
+@Description    Copy at most uDataSize-1 bytes from pszSrc to pszDest.
+                If no null byte ('\0') is contained within the first uDataSize-1
+                characters of the source string, the destination string will be
+                truncated. If the length of the source string is less than uDataSize
+                an additional NUL byte will be copied to the destination string
+                to ensure that the string is NUL-terminated.
+@Input          a     char pointer to the destination string
+@Input          b     const char pointer to the source string
+@Input          c     the maximum number of bytes to be copied
+@Return         Size of the source string
+ */ /**************************************************************************/
+#if defined(__QNXNTO__) || (defined(__linux__) && defined(__KERNEL__) && !defined(DEBUG))
+#define OSStringLCopy(a,b,c) strscpy((a), (b), (c))
+#else /* defined(__QNXNTO__) ... */
+#define OSStringLCopy(a,b,c) StringLCopy((a), (b), (c))
+#endif /* defined(__QNXNTO__) ... */
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/drivers/gpu/drm/img-rogue/physmem.c b/drivers/gpu/drm/img-rogue/physmem.c
index b04ced3638ad..771b8aa4740b 100644
--- a/drivers/gpu/drm/img-rogue/physmem.c
+++ b/drivers/gpu/drm/img-rogue/physmem.c
@@ -572,7 +572,7 @@ PhysmemNewRamBackedPMR_direct(CONNECTION_DATA *psConnection,
 	/* This is where we would expect to validate the uiAnnotationLength parameter
 	   (to confirm it is sufficient to store the string in pszAnnotation plus a
 	   terminating NULL). However, we do not make reference to this value when
-	   we copy the string in PMRCreatePMR() - instead there we use strlcpy()
+	   we copy the string in PMRCreatePMR() - instead there we use strscpy()
 	   to copy at most chars and ensure whatever is copied is null-terminated.
 	   The parameter is only used by the generated bridge code.
 	 */
diff --git a/drivers/gpu/drm/img-rogue/physmem_hostmem.c b/drivers/gpu/drm/img-rogue/physmem_hostmem.c
index 9b1bbe850b9f..34f9ed5d967c 100644
--- a/drivers/gpu/drm/img-rogue/physmem_hostmem.c
+++ b/drivers/gpu/drm/img-rogue/physmem_hostmem.c
@@ -67,9 +67,9 @@ static void HostMemDevPAddrToCpuPAddr(IMG_HANDLE hPrivData,
 static PHYS_HEAP_FUNCTIONS gsHostMemDevPhysHeapFuncs =
 {
 	/* pfnCpuPAddrToDevPAddr */
-	HostMemCpuPAddrToDevPAddr,
+	.pfnCpuPAddrToDevPAddr = HostMemCpuPAddrToDevPAddr,
 	/* pfnDevPAddrToCpuPAddr */
-	HostMemDevPAddrToCpuPAddr,
+	.pfnDevPAddrToCpuPAddr = HostMemDevPAddrToCpuPAddr,
 };
 
 static PVRSRV_DEVICE_CONFIG gsHostMemDevConfig[];
diff --git a/drivers/gpu/drm/img-rogue/pvr_debug.c b/drivers/gpu/drm/img-rogue/pvr_debug.c
index cf59a2d5aa3e..a4841505de17 100644
--- a/drivers/gpu/drm/img-rogue/pvr_debug.c
+++ b/drivers/gpu/drm/img-rogue/pvr_debug.c
@@ -41,6 +41,7 @@ IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**************************************************************************/
 
+#include <linux/pid.h>
 #include <linux/sched.h>
 #include <linux/pid.h>
 #include <linux/moduleparam.h>
diff --git a/drivers/gpu/drm/img-rogue/pvr_fence_trace.h b/drivers/gpu/drm/img-rogue/pvr_fence_trace.h
index 95b2a0dc6c7c..94f8d8041ef4 100644
--- a/drivers/gpu/drm/img-rogue/pvr_fence_trace.h
+++ b/drivers/gpu/drm/img-rogue/pvr_fence_trace.h
@@ -61,7 +61,7 @@ DECLARE_EVENT_CLASS(pvr_fence_context,
 	),
 
 	TP_fast_assign(
-		__assign_str(name, fctx->name)
+		__assign_str(name);
 		pvr_context_value_str(fctx, __entry->val,
 			sizeof(__entry->val));
 	),
@@ -106,10 +106,8 @@ DECLARE_EVENT_CLASS(pvr_fence,
 	),
 
 	TP_fast_assign(
-		__assign_str(driver,
-			fence->base.ops->get_driver_name(&fence->base))
-		__assign_str(timeline,
-			fence->base.ops->get_timeline_name(&fence->base))
+		__assign_str(driver);
+		__assign_str(timeline);
 		fence->base.ops->fence_value_str(&fence->base,
 			__entry->val, sizeof(__entry->val));
 		__entry->context = fence->base.context;
@@ -165,21 +163,13 @@ DECLARE_EVENT_CLASS(pvr_fence_foreign,
 	),
 
 	TP_fast_assign(
-		__assign_str(driver,
-			fence->base.ops->get_driver_name(&fence->base))
-		__assign_str(timeline,
-			fence->base.ops->get_timeline_name(&fence->base))
+		__assign_str(driver);
+		__assign_str(timeline);
 		fence->base.ops->fence_value_str(&fence->base, __entry->val,
 			sizeof(__entry->val));
 		__entry->context = fence->base.context;
-		__assign_str(foreign_driver,
-			fence->fence->ops->get_driver_name ?
-			fence->fence->ops->get_driver_name(fence->fence) :
-			"unknown")
-		__assign_str(foreign_timeline,
-			fence->fence->ops->get_timeline_name ?
-			fence->fence->ops->get_timeline_name(fence->fence) :
-			"unknown")
+		__assign_str(foreign_driver);
+		__assign_str(foreign_timeline);
 		fence->fence->ops->fence_value_str ?
 			fence->fence->ops->fence_value_str(
 				fence->fence, __entry->foreign_val,
diff --git a/drivers/gpu/drm/img-rogue/pvr_platform_drv.c b/drivers/gpu/drm/img-rogue/pvr_platform_drv.c
index 4e3e09786b89..b59efea125ac 100644
--- a/drivers/gpu/drm/img-rogue/pvr_platform_drv.c
+++ b/drivers/gpu/drm/img-rogue/pvr_platform_drv.c
@@ -203,7 +203,7 @@ static int pvr_probe(struct platform_device *pdev)
 	return	ret;
 }
 
-static int pvr_remove(struct platform_device *pdev)
+static void pvr_remove(struct platform_device *pdev)
 {
 	struct drm_device *ddev = platform_get_drvdata(pdev);
 
diff --git a/drivers/gpu/drm/img-rogue/pvrsrv.c b/drivers/gpu/drm/img-rogue/pvrsrv.c
index 51f7de420dc5..3a8c451f7f92 100644
--- a/drivers/gpu/drm/img-rogue/pvrsrv.c
+++ b/drivers/gpu/drm/img-rogue/pvrsrv.c
@@ -187,6 +187,105 @@ static IMG_UINT32 g_ui32InitFlags;
 
 #define CLEANUP_STRING_SUMMARY_MAX_LEN (CLEANUP_QUEUE_TOTAL_DPF_MAX_SIZE+(PVRSRV_CLEANUP_TYPE_LAST * CLEANUP_TYPE_ITEM_DPF_MAX_SIZE))
 
+
+/* bit mask representing the enabled RGX bridges */
+const IMG_UINT32 gui32RGXBridges =
+	  (1U << (PVRSRV_BRIDGE_RGXTQ - PVRSRV_BRIDGE_RGX_FIRST))
+#if defined(RGX_FEATURE_COMPUTE) || defined(__KERNEL__)
+	| (1U << (PVRSRV_BRIDGE_RGXCMP - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_RGXTA3D - PVRSRV_BRIDGE_RGX_FIRST))
+#if defined(SUPPORT_BREAKPOINT)
+	| (1U << (PVRSRV_BRIDGE_BREAKPOINT - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_RGXFWDBG - PVRSRV_BRIDGE_RGX_FIRST))
+#if defined(PDUMP)
+	| (1U << (PVRSRV_BRIDGE_RGXPDUMP - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+#if defined(SUPPORT_RGXKICKSYNC_BRIDGE)
+	| (1U << (PVRSRV_BRIDGE_RGXKICKSYNC - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_RGXHWPERF - PVRSRV_BRIDGE_RGX_FIRST))
+#if defined(SUPPORT_REGCONFIG)
+	| (1U << (PVRSRV_BRIDGE_RGXREGCONFIG - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_RGXKICKSYNC - PVRSRV_BRIDGE_RGX_FIRST))
+#if defined(SUPPORT_FASTRENDER_DM) || defined(__KERNEL__)
+	| (1U << (PVRSRV_BRIDGE_RGXTQ2 - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+#if defined(SUPPORT_TIMERQUERY)
+	| (1U << (PVRSRV_BRIDGE_RGXTIMERQUERY - PVRSRV_BRIDGE_RGX_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_RGXRAY - PVRSRV_BRIDGE_RGX_FIRST))
+	;
+/* bit field representing which RGX bridge groups may optionally not
+ * be present in the server
+ */
+
+/* bit mask representing the enabled PVR bridges */
+const IMG_UINT32 gui32PVRBridges =
+	  (1U << (PVRSRV_BRIDGE_DEFAULT - PVRSRV_BRIDGE_FIRST))
+	| (1U << (PVRSRV_BRIDGE_SRVCORE - PVRSRV_BRIDGE_FIRST))
+	| (1U << (PVRSRV_BRIDGE_SYNC - PVRSRV_BRIDGE_FIRST))
+
+#if defined(PDUMP)
+	| (1U << (PVRSRV_BRIDGE_PDUMPCTRL - PVRSRV_BRIDGE_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_MM - PVRSRV_BRIDGE_FIRST))
+#if defined(SUPPORT_MMPLAT_BRIDGE)
+	| (1U << (PVRSRV_BRIDGE_MMPLAT - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_CMM)
+	| (1U << (PVRSRV_BRIDGE_CMM - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(PDUMP)
+	| (1U << (PVRSRV_BRIDGE_PDUMPMM - PVRSRV_BRIDGE_FIRST))
+	| (1U << (PVRSRV_BRIDGE_PDUMP - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(__linux__)
+	| (1U << (PVRSRV_BRIDGE_DMABUF - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_DISPLAY_CLASS)
+	| (1U << (PVRSRV_BRIDGE_DC - PVRSRV_BRIDGE_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_CACHE - PVRSRV_BRIDGE_FIRST))
+#if defined(SUPPORT_SECURE_EXPORT)
+	| (1U << (PVRSRV_BRIDGE_SMM - PVRSRV_BRIDGE_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_PVRTL - PVRSRV_BRIDGE_FIRST))
+#if defined(PVRSRV_ENABLE_GPU_MEMORY_INFO)
+	| (1U << (PVRSRV_BRIDGE_RI - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_VALIDATION)
+	| (1U << (PVRSRV_BRIDGE_VALIDATION - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(PVR_TESTING_UTILS)
+	| (1U << (PVRSRV_BRIDGE_TUTILS - PVRSRV_BRIDGE_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_DEVICEMEMHISTORY - PVRSRV_BRIDGE_FIRST))
+#if defined(PVRSRV_ENABLE_HTB)
+	| (1U << (PVRSRV_BRIDGE_HTBUFFER - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_DISPLAY_CLASS) && defined(SUPPORT_DCPLAT_BRIDGE)
+	| (1U << (PVRSRV_BRIDGE_DCPLAT - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_WRAP_EXTMEM)
+	| (1U << (PVRSRV_BRIDGE_MMEXTMEM - PVRSRV_BRIDGE_FIRST))
+#endif
+	| (1U << (PVRSRV_BRIDGE_SYNCTRACKING - PVRSRV_BRIDGE_FIRST))
+#if defined(SUPPORT_FALLBACK_FENCE_SYNC)
+	| (1U << (PVRSRV_BRIDGE_SYNCFALLBACK - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_DI_BRG_IMPL)
+	| (1U << (PVRSRV_BRIDGE_DI - PVRSRV_BRIDGE_FIRST))
+#endif
+#if defined(SUPPORT_DMA_TRANSFER)
+	| (1U << (PVRSRV_BRIDGE_DMA - PVRSRV_BRIDGE_FIRST))
+#endif
+	;
+
+
+
 static IMG_CHAR *_ConcatCleanupString(IMG_CHAR *cleanupString)
 {
 	IMG_UINT32 uiLoop;
diff --git a/drivers/gpu/drm/img-rogue/rgx_bridge.h b/drivers/gpu/drm/img-rogue/rgx_bridge.h
index 5168f6f23ea5..f541cba0c80b 100644
--- a/drivers/gpu/drm/img-rogue/rgx_bridge.h
+++ b/drivers/gpu/drm/img-rogue/rgx_bridge.h
@@ -204,39 +204,7 @@ extern "C" {
 #define PVRSRV_BRIDGE_RGX_DISPATCH_LAST          (PVRSRV_BRIDGE_RGXRAY_DISPATCH_LAST)
 
 /* bit mask representing the enabled RGX bridges */
-
-static const IMG_UINT32 gui32RGXBridges =
-	  (1U << (PVRSRV_BRIDGE_RGXTQ - PVRSRV_BRIDGE_RGX_FIRST))
-#if defined(RGX_FEATURE_COMPUTE) || defined(__KERNEL__)
-	| (1U << (PVRSRV_BRIDGE_RGXCMP - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-	| (1U << (PVRSRV_BRIDGE_RGXTA3D - PVRSRV_BRIDGE_RGX_FIRST))
-#if defined(SUPPORT_BREAKPOINT)
-	| (1U << (PVRSRV_BRIDGE_BREAKPOINT - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-	| (1U << (PVRSRV_BRIDGE_RGXFWDBG - PVRSRV_BRIDGE_RGX_FIRST))
-#if defined(PDUMP)
-	| (1U << (PVRSRV_BRIDGE_RGXPDUMP - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-#if defined(SUPPORT_RGXKICKSYNC_BRIDGE)
-	| (1U << (PVRSRV_BRIDGE_RGXKICKSYNC - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-	| (1U << (PVRSRV_BRIDGE_RGXHWPERF - PVRSRV_BRIDGE_RGX_FIRST))
-#if defined(SUPPORT_REGCONFIG)
-	| (1U << (PVRSRV_BRIDGE_RGXREGCONFIG - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-	| (1U << (PVRSRV_BRIDGE_RGXKICKSYNC - PVRSRV_BRIDGE_RGX_FIRST))
-#if defined(SUPPORT_FASTRENDER_DM) || defined(__KERNEL__)
-	| (1U << (PVRSRV_BRIDGE_RGXTQ2 - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-#if defined(SUPPORT_TIMERQUERY)
-	| (1U << (PVRSRV_BRIDGE_RGXTIMERQUERY - PVRSRV_BRIDGE_RGX_FIRST))
-#endif
-	| (1U << (PVRSRV_BRIDGE_RGXRAY - PVRSRV_BRIDGE_RGX_FIRST))
-	;
-/* bit field representing which RGX bridge groups may optionally not
- * be present in the server
- */
+extern const IMG_UINT32 gui32RGXBridges;
 
 #define RGX_BRIDGES_OPTIONAL \
 	( \
diff --git a/drivers/gpu/drm/img-rogue/rogue_trace_events.h b/drivers/gpu/drm/img-rogue/rogue_trace_events.h
index 8952bec0f102..33bf2f6ecf72 100644
--- a/drivers/gpu/drm/img-rogue/rogue_trace_events.h
+++ b/drivers/gpu/drm/img-rogue/rogue_trace_events.h
@@ -89,9 +89,9 @@ TRACE_EVENT_FN(rogue_fence_update,
 	),
 
 	TP_fast_assign(
-		__assign_str(comm, comm);
-		__assign_str(cmd, cmd);
-		__assign_str(dm, dm);
+		__assign_str(comm);
+		__assign_str(cmd);
+		__assign_str(dm);
 		__entry->gpu_id = gpu_id;
 		__entry->ctx_id = ctx_id;
 		__entry->offset = offset;
@@ -140,9 +140,9 @@ TRACE_EVENT_FN(rogue_fence_check,
 	),
 
 	TP_fast_assign(
-		__assign_str(comm, comm);
-		__assign_str(cmd, cmd);
-		__assign_str(dm, dm);
+		__assign_str(comm);
+		__assign_str(cmd);
+		__assign_str(dm);
 		__entry->gpu_id = gpu_id;
 		__entry->ctx_id = ctx_id;
 		__entry->offset = offset;
@@ -185,7 +185,7 @@ TRACE_EVENT(rogue_job_enqueue,
 		__entry->ctx_id = ctx_id;
 		__entry->int_id = int_id;
 		__entry->ext_id = ext_id;
-		__assign_str(kick_type, kick_type);
+		__assign_str(kick_type);
 	),
 
 	TP_printk("gpu=%lu, ctx_id=%lu int_id=%lu ext_id=%lu kick_type=%s",
@@ -217,7 +217,7 @@ TRACE_EVENT(rogue_sched_switch,
 	),
 
 	TP_fast_assign(
-		__assign_str(work_type, work_type);
+		__assign_str(work_type);
 		__entry->switch_type = switch_type;
 		__entry->timestamp = timestamp;
 		__entry->gpu_id = gpu_id;
@@ -258,8 +258,8 @@ TRACE_EVENT(rogue_create_fw_context,
 	),
 
 	TP_fast_assign(
-		__assign_str(comm, comm);
-		__assign_str(dm, dm);
+		__assign_str(comm);
+		__assign_str(dm);
 		__entry->gpu_id = gpu_id;
 		__entry->ctx_id = ctx_id;
 	),
@@ -558,7 +558,7 @@ TRACE_EVENT_FN(rogue_firmware_activity,
 	TP_fast_assign(
 		__entry->timestamp = timestamp;
 		__entry->gpu_id = gpu_id;
-		__assign_str(task, task);
+		__assign_str(task);
 		__entry->fw_event = fw_event;
 	),
 
diff --git a/drivers/gpu/drm/img-rogue/vmm_type_stub.c b/drivers/gpu/drm/img-rogue/vmm_type_stub.c
index 8d03474e4839..7733ec65ca89 100644
--- a/drivers/gpu/drm/img-rogue/vmm_type_stub.c
+++ b/drivers/gpu/drm/img-rogue/vmm_type_stub.c
@@ -68,29 +68,29 @@ static VMM_PVZ_CONNECTION gsStubVmmPvz =
 {
 	.sClientFuncTab = {
 		/* pfnMapDevPhysHeap */
-		&StubVMMMapDevPhysHeap,
+		.pfnMapDevPhysHeap = &StubVMMMapDevPhysHeap,
 
 		/* pfnUnmapDevPhysHeap */
-		&StubVMMUnmapDevPhysHeap
+		.pfnUnmapDevPhysHeap = &StubVMMUnmapDevPhysHeap
 	},
 
 	.sServerFuncTab = {
 		/* pfnMapDevPhysHeap */
-		&PvzServerMapDevPhysHeap,
+		.pfnMapDevPhysHeap = &PvzServerMapDevPhysHeap,
 
 		/* pfnUnmapDevPhysHeap */
-		&PvzServerUnmapDevPhysHeap
+		.pfnUnmapDevPhysHeap = &PvzServerUnmapDevPhysHeap
 	},
 
 	.sVmmFuncTab = {
 		/* pfnOnVmOnline */
-		&PvzServerOnVmOnline,
+		.pfnOnVmOnline = &PvzServerOnVmOnline,
 
 		/* pfnOnVmOffline */
-		&PvzServerOnVmOffline,
+		.pfnOnVmOffline = &PvzServerOnVmOffline,
 
 		/* pfnVMMConfigure */
-		&PvzServerVMMConfigure
+		.pfnVMMConfigure = &PvzServerVMMConfigure
 	}
 };
 
-- 
2.47.0

