From 97d01b731bebf7aa9d7f714f9c3cec74baae6765 Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Tue, 9 Jan 2024 11:38:49 +0800
Subject: [PATCH 0323/1200] k1x:pmic:rtc: support spm8821 rtc driver

Change-Id: I137d8856ab1970be531d9207c2f90ff105583caa
---
 drivers/mfd/spacemit-mfd.c                 |   1 +
 drivers/rtc/Kconfig                        |   7 +
 drivers/rtc/Makefile                       |   1 +
 drivers/rtc/rtc-spt-pmic.c                 | 446 +++++++++++++++++++++
 include/linux/mfd/spacemit/spacemit_pmic.h |  89 ++++
 include/linux/mfd/spacemit/spm8821.h       |  80 +++-
 6 files changed, 623 insertions(+), 1 deletion(-)
 create mode 100644 drivers/rtc/rtc-spt-pmic.c

diff --git a/drivers/mfd/spacemit-mfd.c b/drivers/mfd/spacemit-mfd.c
index 4a82233b262b..3599d7602cfb 100644
--- a/drivers/mfd/spacemit-mfd.c
+++ b/drivers/mfd/spacemit-mfd.c
@@ -15,6 +15,7 @@ SPM8821_CHIP_ID_REG;
 SPM8821_IRQS_DESC;
 SPM8821_IRQ_CHIP_DESC;
 SPM8821_POWER_KEY_RESOURCES_DESC;
+SPM8821_RTC_RESOURCES_DESC;
 SPM8821_MFD_CELL;
 
 PM853_MFD_CELL;
diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index f32fba669c07..3cf0ef8e693e 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -774,6 +774,13 @@ config RTC_DRV_SD3078
 	  This driver can also be built as a module. If so, the module
 	  will be called rtc-sd3078
 
+config RTC_DRV_SPT_PMIC
+	tristate "Spacemit spm8xxx RTC"
+	depends on MFD_SPACEMIT_PMIC
+	help
+	  If you say yes here you will get support for the
+	  RTC of Spacemit spm8xxx PMIC.
+
 endif # I2C
 
 comment "SPI RTC drivers"
diff --git a/drivers/rtc/Makefile b/drivers/rtc/Makefile
index 489b4ab07068..2491c9f9564d 100644
--- a/drivers/rtc/Makefile
+++ b/drivers/rtc/Makefile
@@ -194,3 +194,4 @@ obj-$(CONFIG_RTC_DRV_WM8350)	+= rtc-wm8350.o
 obj-$(CONFIG_RTC_DRV_X1205)	+= rtc-x1205.o
 obj-$(CONFIG_RTC_DRV_XGENE)	+= rtc-xgene.o
 obj-$(CONFIG_RTC_DRV_ZYNQMP)	+= rtc-zynqmp.o
+obj-$(CONFIG_RTC_DRV_SPT_PMIC) += rtc-spt-pmic.o
diff --git a/drivers/rtc/rtc-spt-pmic.c b/drivers/rtc/rtc-spt-pmic.c
new file mode 100644
index 000000000000..3ab5a80adab6
--- /dev/null
+++ b/drivers/rtc/rtc-spt-pmic.c
@@ -0,0 +1,446 @@
+// SPDX-License-Identifier: GPL-2.0-only
+
+#include <linux/of.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/rtc.h>
+#include <linux/platform_device.h>
+#include <linux/pm.h>
+#include <linux/pm_wakeirq.h>
+#include <linux/of_device.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+#include <linux/mfd/spacemit/spacemit_pmic.h>
+
+SPM8821_RTC_REG_DESC;
+
+struct spacemit_rtc {
+	int irq;
+	struct device *dev;
+	struct regmap *regmap;
+	struct rtc_device *rtc_dev;
+	struct rtc_regdesc *desc;
+};
+
+static const struct of_device_id spacemit_id_table[] = {
+	{ .compatible = "pmic,rtc,spm8821", .data = &spm8821_regdesc, },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, spacemit_id_table);
+
+static irqreturn_t spt_rtc_irq(int irq, void *_pwr)
+{
+	struct spacemit_rtc *rtc = (struct spacemit_rtc *)_pwr;
+
+	rtc_update_irq(rtc->rtc_dev, 1, RTC_IRQF | RTC_AF);
+
+	return IRQ_HANDLED;
+}
+
+static int spt_rtc_read_time(struct device *dev, struct rtc_time *tm)
+{
+	int ret;
+	unsigned int v[6];
+	struct spacemit_rtc *rtc = dev_get_drvdata(dev);
+
+	ret = regmap_read(rtc->regmap, rtc->desc->cnt_s.reg, &v[0]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read second: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->cnt_mi.reg, &v[1]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read minute: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->cnt_h.reg, &v[2]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read hour: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->cnt_d.reg, &v[3]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read day: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->cnt_mo.reg, &v[4]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read month: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->cnt_y.reg, &v[5]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read year: %d\n", ret);
+		return -EINVAL;
+	}
+
+	/* 2000:1:1:0:0:0 */
+	tm->tm_sec = v[0] & rtc->desc->cnt_s.msk;
+	tm->tm_min = v[1] & rtc->desc->cnt_mi.msk;
+	tm->tm_hour = v[2] & rtc->desc->cnt_h.msk;
+	tm->tm_mday = (v[3] & rtc->desc->cnt_d.msk) + 1;
+	tm->tm_mon = (v[4] & rtc->desc->cnt_mo.msk);
+	tm->tm_year = (v[5] & rtc->desc->cnt_y.msk) + 100;
+
+	pr_debug("%s:%d, s:%d, min:%d, hour:%d, mday:%d, month:%d, year:%d\n",
+			__func__, __LINE__,
+			tm->tm_sec,
+			tm->tm_min,
+			tm->tm_hour,
+			tm->tm_mday,
+			tm->tm_mon,
+			tm->tm_year);
+
+	return 0;
+}
+
+static int spt_rtc_set_time(struct device *dev, struct rtc_time *tm)
+{
+	int ret;
+	struct spacemit_rtc *rtc = dev_get_drvdata(dev);
+
+	pr_debug("%s:%d, s:%d, min:%d, hour:%d, mday:%d, month:%d, year:%d\n",
+			__func__, __LINE__,
+			tm->tm_sec,
+			tm->tm_min,
+			tm->tm_hour,
+			tm->tm_mday,
+			tm->tm_mon,
+			tm->tm_year);
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->cnt_s.reg,
+			rtc->desc->cnt_s.msk, tm->tm_sec);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update second: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->cnt_mi.reg,
+			rtc->desc->cnt_mi.msk, tm->tm_min);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update minutes: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->cnt_h.reg,
+			rtc->desc->cnt_h.msk, tm->tm_hour);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update hour: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->cnt_d.reg,
+			rtc->desc->cnt_d.msk, tm->tm_mday - 1);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update day: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->cnt_mo.reg,
+			rtc->desc->cnt_mo.msk, tm->tm_mon);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update month: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->cnt_y.reg,
+			rtc->desc->cnt_y.msk, tm->tm_year - 100);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update month: %d\n", ret);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int spt_rtc_read_alarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+	int ret;
+	unsigned int v[6];
+	union rtc_ctl_desc rtc_ctl;
+	struct spacemit_rtc *rtc = dev_get_drvdata(dev);
+
+	ret = regmap_read(rtc->regmap, rtc->desc->alarm_s.reg, &v[0]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm second: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->alarm_mi.reg, &v[1]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm minute: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->alarm_h.reg, &v[2]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm hour: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->alarm_d.reg, &v[3]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm day: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->alarm_mo.reg, &v[4]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm month: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_read(rtc->regmap, rtc->desc->alarm_y.reg, &v[5]);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm year: %d\n", ret);
+		return -EINVAL;
+	}
+
+	/* 2000:1:1:0:0:0 */
+	alrm->time.tm_sec = v[0] & rtc->desc->alarm_s.msk;
+	alrm->time.tm_min = v[1] & rtc->desc->alarm_mi.msk;
+	alrm->time.tm_hour = v[2] & rtc->desc->alarm_h.msk;
+	alrm->time.tm_mday = (v[3] & rtc->desc->alarm_d.msk) + 1;
+	alrm->time.tm_mon = (v[4] & rtc->desc->alarm_mo.msk);
+	alrm->time.tm_year = (v[5] & rtc->desc->alarm_y.msk) + 100;
+
+	pr_debug("%s:%d, s:%d, min:%d, hour:%d, mday:%d, month:%d, year:%d\n",
+			__func__, __LINE__,
+			alrm->time.tm_sec,
+			alrm->time.tm_min,
+			alrm->time.tm_hour,
+			alrm->time.tm_mday,
+			alrm->time.tm_mon,
+			alrm->time.tm_year);
+
+	ret = regmap_read(rtc->regmap, rtc->desc->rtc_ctl.reg, (unsigned int *)&rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read alarm second: %d\n", ret);
+		return -EINVAL;
+	}
+
+	alrm->enabled = rtc_ctl.bits.alarm_en;
+
+	return 0;
+}
+
+static int spt_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+	int ret;
+	union rtc_ctl_desc rtc_ctl;
+	struct spacemit_rtc *rtc = dev_get_drvdata(dev);
+
+	pr_debug("%s:%d, s:%d, min:%d, hour:%d, mday:%d, month:%d, year:%d\n",
+			__func__, __LINE__,
+			alrm->time.tm_sec,
+			alrm->time.tm_min,
+			alrm->time.tm_hour,
+			alrm->time.tm_mday,
+			alrm->time.tm_mon,
+			alrm->time.tm_year);
+
+	/* disable the alrm function first */
+	ret = regmap_read(rtc->regmap, rtc->desc->rtc_ctl.reg, (unsigned int *)&rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read rtc ctrl register: %d\n", ret);
+		return -EINVAL;
+	}
+
+	rtc_ctl.bits.alarm_en = 0;
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->rtc_ctl.reg,
+			0xff, rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to set rtc ctrl register: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->alarm_s.reg,
+			rtc->desc->alarm_s.msk, alrm->time.tm_sec);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update alrm second: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->alarm_mi.reg,
+			rtc->desc->alarm_mi.msk, alrm->time.tm_min);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update alarm minutes: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->alarm_h.reg,
+			rtc->desc->alarm_h.msk, alrm->time.tm_hour);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update alarm hour: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->alarm_d.reg,
+			rtc->desc->alarm_d.msk, alrm->time.tm_mday - 1);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update alarm day: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->alarm_mo.reg,
+			rtc->desc->alarm_mo.msk, alrm->time.tm_mon);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update alarm month: %d\n", ret);
+		return -EINVAL;
+	}
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->alarm_y.reg,
+			rtc->desc->alarm_y.msk, alrm->time.tm_year - 100);
+	if (ret) {
+		dev_err(rtc->dev, "failed to update month: %d\n", ret);
+		return -EINVAL;
+	}
+
+	if (alrm->enabled) {
+		rtc_ctl.bits.alarm_en = 1;
+
+		ret = regmap_update_bits(rtc->regmap, rtc->desc->rtc_ctl.reg,
+				0xff, rtc_ctl.val);
+		if (ret) {
+			dev_err(rtc->dev, "failed to set rtc ctrl register: %d\n", ret);
+			return -EINVAL;
+		}
+	}
+
+	return 0;
+}
+
+static int spt_rtc_alarm_irq_enable(struct device *dev, unsigned int enabled)
+{
+	int ret;
+	union rtc_ctl_desc rtc_ctl;
+	struct spacemit_rtc *rtc = dev_get_drvdata(dev);
+
+	ret = regmap_read(rtc->regmap, rtc->desc->rtc_ctl.reg, (unsigned int *)&rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read rtc ctrl register: %d\n", ret);
+		return -EINVAL;
+	}
+
+	if (enabled)
+		rtc_ctl.bits.alarm_en = 1;
+	else
+		rtc_ctl.bits.alarm_en = 0;
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->rtc_ctl.reg,
+			0xff, rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to set rtc ctrl register: %d\n", ret);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct rtc_class_ops spt_rtc_ops = {
+	.read_time = spt_rtc_read_time,
+	.set_time = spt_rtc_set_time,
+	.read_alarm = spt_rtc_read_alarm,
+	.set_alarm = spt_rtc_set_alarm,
+	.alarm_irq_enable = spt_rtc_alarm_irq_enable,
+};
+
+static int spacemit_rtc_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct spacemit_rtc *rtc;
+	union rtc_ctl_desc rtc_ctl;
+	const struct of_device_id *of_id;
+	struct spacemit_pmic *pmic = dev_get_drvdata(pdev->dev.parent);
+
+	rtc = devm_kzalloc(&pdev->dev, sizeof(struct spacemit_rtc), GFP_KERNEL);
+	if (!rtc)
+		return -ENOMEM;
+
+	of_id = of_match_device(spacemit_id_table, &pdev->dev);
+	if (!of_id) {
+		pr_err("Unable to match OF ID\n");
+		return -ENODEV;
+	}
+
+	rtc->regmap = pmic->regmap;
+	rtc->dev = &pdev->dev;
+	rtc->desc = (struct rtc_regdesc *)of_id->data;
+	rtc->irq = platform_get_irq(pdev, 0);
+	if (rtc->irq < 0) {
+		dev_err(&pdev->dev, "get rtc irq error: %d\n", rtc->irq);
+		return -EINVAL;
+	}
+
+	dev_set_drvdata(&pdev->dev, rtc);
+
+	ret = devm_request_any_context_irq(&pdev->dev, rtc->irq,
+					   spt_rtc_irq,
+					   IRQF_TRIGGER_NONE | IRQF_ONESHOT,
+					   "rtc@pmic", rtc);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Can't register rtc irq: %d\n", ret);
+		return -EINVAL;
+	}
+
+	device_init_wakeup(&pdev->dev, 1);
+
+	rtc->rtc_dev = devm_rtc_allocate_device(&pdev->dev);
+	if (IS_ERR(rtc->rtc_dev))
+		return PTR_ERR(rtc->rtc_dev);
+
+	rtc->rtc_dev->ops = &spt_rtc_ops;
+	rtc->rtc_dev->range_min = RTC_TIMESTAMP_BEGIN_2000;
+	rtc->rtc_dev->range_max = RTC_TIMESTAMP_END_2063;
+
+	ret = devm_rtc_register_device(rtc->rtc_dev);
+	if (ret) {
+		dev_err(&pdev->dev, "register rtc device error: %d\n", ret);
+		return -EINVAL;
+	}
+
+	/* enable the rtc function */
+	ret = regmap_read(rtc->regmap, rtc->desc->rtc_ctl.reg, (unsigned int *)&rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to read rtc ctrl register: %d\n", ret);
+		return -EINVAL;
+	}
+
+	/* internal 32k clk */
+	rtc_ctl.bits.rtc_clk_sel = 0;
+	/* enable rtc */
+	rtc_ctl.bits.rtc_en = 1;
+	/* rtc clk out enable */
+	rtc_ctl.bits.out_32k_en = 1;
+	/* enable external crystal */
+	rtc_ctl.bits.crystal_en = 1;
+
+	ret = regmap_update_bits(rtc->regmap, rtc->desc->rtc_ctl.reg,
+			0xff, rtc_ctl.val);
+	if (ret) {
+		dev_err(rtc->dev, "failed to set rtc ctrl register: %d\n", ret);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static struct platform_driver spacemit_pmic_rtc_driver = {
+	.probe		= spacemit_rtc_probe,
+	.driver	= {
+		.name		= "spacemit-pmic-rtc",
+		.of_match_table	= spacemit_id_table,
+	},
+};
+
+module_platform_driver(spacemit_pmic_rtc_driver);
+
+MODULE_ALIAS("platform:rtc-spt-pmic");
+MODULE_DESCRIPTION("PMIC RTC driver");
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/mfd/spacemit/spacemit_pmic.h b/include/linux/mfd/spacemit/spacemit_pmic.h
index 9bf12dd93d58..6b98a1c37d97 100644
--- a/include/linux/mfd/spacemit/spacemit_pmic.h
+++ b/include/linux/mfd/spacemit/spacemit_pmic.h
@@ -27,6 +27,7 @@ struct spacemit_pmic {
 	struct spacemit_sub_pmic *sub;
 };
 
+/* pinctrl */
 struct pin_func_desc {
 	const char *name;
 	unsigned char pin_id;
@@ -81,6 +82,94 @@ struct pin_config_desc {
 	} itype;
 };
 
+/* rtc */
+union rtc_ctl_desc {
+	unsigned char val;
+	struct {
+		unsigned char crystal_en:1;
+		unsigned char out_32k_en:1;
+		unsigned char rtc_en:1;
+		unsigned char rtc_clk_sel:1;
+		unsigned char tick_type:1;
+		unsigned char alarm_en:1;
+		unsigned char tick_en:1;
+		unsigned char reserved:1;
+	} bits;
+};
+
+struct rtc_regdesc {
+	/* seconds */
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} cnt_s;
+
+	/* mini */
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} cnt_mi;
+
+	/* hour */
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} cnt_h;
+
+	/* day */
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} cnt_d;
+
+	/* mounth */
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} cnt_mo;
+
+	/* year */
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} cnt_y;
+
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} alarm_s;
+
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} alarm_mi;
+
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} alarm_h;
+
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} alarm_d;
+
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} alarm_mo;
+
+	struct {
+		unsigned char reg;
+		unsigned char msk;
+	} alarm_y;
+
+	struct  {
+		unsigned char reg;
+	} rtc_ctl;
+};
+
+/* chip id */
 struct chip_id_reg {
 	unsigned char device_id_reg;
 	unsigned char version_id_reg;
diff --git a/include/linux/mfd/spacemit/spm8821.h b/include/linux/mfd/spacemit/spm8821.h
index 675edf6a4c4b..ef4b326edfaa 100644
--- a/include/linux/mfd/spacemit/spm8821.h
+++ b/include/linux/mfd/spacemit/spm8821.h
@@ -647,7 +647,6 @@ static const struct regmap_irq_chip spm8821_irq_chip = {	\
 	.mask_invert = true,					\
 };
 
-
 /* power-key */
 #define SPM8821_POWER_KEY_RESOURCES_DESC			\
 static const struct resource spm8821_pwrkey_resources[] = {	\
@@ -657,6 +656,79 @@ static const struct resource spm8821_pwrkey_resources[] = {	\
 	DEFINE_RES_IRQ(SPM8821_E_PWRON_LINTR),			\
 };
 
+/* rtc desc */
+#define SPM8821_RTC_RESOURCES_DESC				\
+static const struct resource spm8821_rtc_resources[] = {	\
+	DEFINE_RES_IRQ(SPM8821_E_ALARM),			\
+};
+
+#define SPM8821_RTC_REG_DESC					\
+static const struct rtc_regdesc spm8821_regdesc = {		\
+	.cnt_s = {						\
+		.reg = 0xd,					\
+		.msk = 0x3f,					\
+	},							\
+								\
+	.cnt_mi = {						\
+		.reg = 0xe,					\
+		.msk = 0x3f,					\
+	},							\
+								\
+	.cnt_h = {						\
+		.reg = 0xf,					\
+		.msk = 0x1f,					\
+	},							\
+								\
+	.cnt_d = {						\
+		.reg = 0x10,					\
+		.msk = 0x1f,					\
+	},							\
+								\
+	.cnt_mo = {						\
+		.reg = 0x11,					\
+		.msk = 0xf,					\
+	},							\
+								\
+	.cnt_y = {						\
+		.reg = 0x12,					\
+		.msk = 0x3f,					\
+	},							\
+								\
+	.alarm_s = {						\
+		.reg = 0x13,					\
+		.msk = 0x3f,					\
+	},							\
+								\
+	.alarm_mi = {						\
+		.reg = 0x14,					\
+		.msk = 0x3f,					\
+	},							\
+								\
+	.alarm_h = {						\
+		.reg = 0x15,					\
+		.msk = 0x1f,					\
+	},							\
+								\
+	.alarm_d = {						\
+		.reg = 0x16,					\
+		.msk = 0x1f,					\
+	},							\
+								\
+	.alarm_mo = {						\
+		.reg = 0x17,					\
+		.msk = 0xf,					\
+	},							\
+								\
+	.alarm_y = {						\
+		.reg = 0x18,					\
+		.msk = 0x3f,					\
+	},							\
+								\
+	.rtc_ctl = {						\
+		.reg = 0x1d,					\
+	},							\
+}; 
+
 /* mfd configuration */
 #define SPM8821_MFD_CELL	\
 	static const struct mfd_cell spm8821[] = {				\
@@ -674,6 +746,12 @@ static const struct resource spm8821_pwrkey_resources[] = {	\
 			.num_resources = ARRAY_SIZE(spm8821_pwrkey_resources),	\
 			.resources = &spm8821_pwrkey_resources[0],		\
 		},								\
+		{								\
+			.name = "spacemit-rtc@spm8821",				\
+			.of_compatible = "pmic,rtc,spm8821",			\
+			.num_resources = ARRAY_SIZE(spm8821_rtc_resources),	\
+			.resources = &spm8821_rtc_resources[0],			\
+		},								\
 	};
 
 #endif /* __SPM8821_H__ */
-- 
2.47.0

