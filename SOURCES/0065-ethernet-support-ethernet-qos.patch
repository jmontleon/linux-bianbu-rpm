From 327814ad7f65f6653899404096302f18231d9e5e Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Wed, 12 Jul 2023 14:20:57 +0800
Subject: [PATCH 0065/1448] ethernet: support ethernet qos

	1. change the format of dwmac-spacemit.c to unix

Change-Id: I2c7a91c1acfcdd0716231e1bb7a2091f7fe2b9a0
---
 arch/riscv/boot/dts/spacemit/k1-pro.dtsi      |  13 +-
 arch/riscv/configs/k1-pro_fpga_defconfig      |   1 +
 drivers/net/ethernet/stmicro/stmmac/Kconfig   |  10 +
 drivers/net/ethernet/stmicro/stmmac/Makefile  |   1 +
 .../stmicro/stmmac/dwmac-spacemit-ethqos.c    | 325 ++++++++++++++++++
 .../ethernet/stmicro/stmmac/dwmac-spacemit.c  |  24 +-
 6 files changed, 350 insertions(+), 24 deletions(-)
 create mode 100755 drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit-ethqos.c

diff --git a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
index 81a52e2cea12..b8f25e551f16 100644
--- a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
@@ -519,17 +519,18 @@ qspi0: spi@2ce00000 {
 			status = "disabled";
 		};
 
-		gmac0: ethernet@2cc00000 {
-			compatible = "spacemit,k1-pro-mac";
+                eth0: ethernet@2cc00000 {
+			compatible = "spacemit,k1-pro-ethqos";
 			reg = <0x00 0x2cc00000 0x0 0x10000
 				   0x00 0x2f028004 0x0 0x4>;
-			reg-names = "gmac", "sys_gmac_cfg";
+			reg-names = "stmmaceth", "sys_gmac_cfg";
 			interrupt-parent = <&intc>;
 			interrupts = <132>;
 			interrupt-names = "macirq";
-			resets = <&reset RESET_USB_GMAC_GSR>, <&reset RESET_GMAC_CSR>,
-					 <&reset RESET_GMAC_DMA>, <&reset RESET_USB_GMAC2VBUS>;
-			reset-names = "usb_gmac_gsr", "gmac_csr", "gmac_dma", "usb_gmac2vbus";
+			clocks = <&ccu CLK_GMAC_CSR>, <&ccu CLK_GMAC_PHYCLK_OUT>;
+			clock-names = "apb_pclk", "phy_ref_clk";
+			resets = <&reset RESET_GMAC_CSR>, <&reset RESET_GMAC_DMA>;
+			reset-names = "gmac_csr", "gmac_dma";
 			snps,pbl = <32>;
 			snps,fixed-burst;
 			snps,axi-config = <&stmmac_axi_setup>;
diff --git a/arch/riscv/configs/k1-pro_fpga_defconfig b/arch/riscv/configs/k1-pro_fpga_defconfig
index 3d53b7453451..4d85e501d9fb 100644
--- a/arch/riscv/configs/k1-pro_fpga_defconfig
+++ b/arch/riscv/configs/k1-pro_fpga_defconfig
@@ -102,6 +102,7 @@ CONFIG_NETDEVICES=y
 # CONFIG_NET_VENDOR_SOCIONEXT is not set
 CONFIG_STMMAC_ETH=y
 CONFIG_DWMAC_SPACEMIT=y
+CONFIG_DWMAC_SPACEMIT_ETHQOS=y
 # CONFIG_NET_VENDOR_SYNOPSYS is not set
 # CONFIG_NET_VENDOR_VERTEXCOM is not set
 # CONFIG_NET_VENDOR_VIA is not set
diff --git a/drivers/net/ethernet/stmicro/stmmac/Kconfig b/drivers/net/ethernet/stmicro/stmmac/Kconfig
index 38582d3ea06b..0d63f4e2d9ce 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Kconfig
+++ b/drivers/net/ethernet/stmicro/stmmac/Kconfig
@@ -264,6 +264,16 @@ config DWMAC_SPACEMIT
 	  device driver. This driver is used for the Spacemit series
 	  SOCs GMAC ethernet controller.
 
+config DWMAC_SPACEMIT_ETHQOS
+	tristate "Spacemit ETHQOS support"
+	default CONFIG_SOC_SPACEMIT
+	depends on OF && (CONFIG_SOC_SPACEMIT || COMPILE_TEST)
+	help
+	  Support for the Spacemit ETHQOS core.
+
+	  This selects the Spacemit ETHQOS glue layer support for the
+	  stmmac device driver.
+
 endif
 
 config DWMAC_INTEL
diff --git a/drivers/net/ethernet/stmicro/stmmac/Makefile b/drivers/net/ethernet/stmicro/stmmac/Makefile
index 7d37f2619b4b..084c587500fd 100644
--- a/drivers/net/ethernet/stmicro/stmmac/Makefile
+++ b/drivers/net/ethernet/stmicro/stmmac/Makefile
@@ -28,6 +28,7 @@ obj-$(CONFIG_DWMAC_STM32)	+= dwmac-stm32.o
 obj-$(CONFIG_DWMAC_SUNXI)	+= dwmac-sunxi.o
 obj-$(CONFIG_DWMAC_SUN8I)	+= dwmac-sun8i.o
 obj-$(CONFIG_DWMAC_SPACEMIT)	+= dwmac-spacemit.o
+obj-$(CONFIG_DWMAC_SPACEMIT_ETHQOS)	+= dwmac-spacemit-ethqos.o
 obj-$(CONFIG_DWMAC_DWC_QOS_ETH)	+= dwmac-dwc-qos-eth.o
 obj-$(CONFIG_DWMAC_INTEL_PLAT)	+= dwmac-intel-plat.o
 obj-$(CONFIG_DWMAC_GENERIC)	+= dwmac-generic.o
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit-ethqos.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit-ethqos.c
new file mode 100755
index 000000000000..79405467c127
--- /dev/null
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit-ethqos.c
@@ -0,0 +1,325 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2023, spacemit Corporation.
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/phy.h>
+#include "stmmac.h"
+#include "stmmac_platform.h"
+
+struct spacemit_ethqos {
+	struct device *dev;
+	void __iomem *sys_gmac_cfg;
+
+    unsigned int speed;
+	struct reset_control *gmac_csr_rstc;
+	struct reset_control *gmac_dma_rstc;
+	struct clk *clk_master;
+	struct clk *clk_slave;
+	struct clk *clk_tx;
+	struct clk *clk_rx;
+
+	struct gpio_desc *reset;
+};
+
+static int dwc_eth_dwmac_config_dt(struct platform_device *pdev,
+				   struct plat_stmmacenet_data *plat_dat)
+{
+	struct device *dev = &pdev->dev;
+	u32 burst_map = 0;
+	u32 bit_index = 0;
+	u32 a_index = 0;
+
+	if (!plat_dat->axi) {
+		plat_dat->axi = kzalloc(sizeof(struct stmmac_axi), GFP_KERNEL);
+
+		if (!plat_dat->axi)
+			return -ENOMEM;
+	}
+
+	plat_dat->axi->axi_lpi_en = device_property_read_bool(dev,
+							      "snps,en-lpi");
+	if (device_property_read_u32(dev, "snps,write-requests",
+				     &plat_dat->axi->axi_wr_osr_lmt)) {
+		/**
+		 * Since the register has a reset value of 1, if property
+		 * is missing, default to 1.
+		 */
+		plat_dat->axi->axi_wr_osr_lmt = 1;
+	} else {
+		/**
+		 * If property exists, to keep the behavior from dwc_eth_qos,
+		 * subtract one after parsing.
+		 */
+		plat_dat->axi->axi_wr_osr_lmt--;
+	}
+
+	if (device_property_read_u32(dev, "snps,read-requests",
+				     &plat_dat->axi->axi_rd_osr_lmt)) {
+		/**
+		 * Since the register has a reset value of 1, if property
+		 * is missing, default to 1.
+		 */
+		plat_dat->axi->axi_rd_osr_lmt = 1;
+	} else {
+		/**
+		 * If property exists, to keep the behavior from dwc_eth_qos,
+		 * subtract one after parsing.
+		 */
+		plat_dat->axi->axi_rd_osr_lmt--;
+	}
+	device_property_read_u32(dev, "snps,burst-map", &burst_map);
+
+	/* converts burst-map bitmask to burst array */
+	for (bit_index = 0; bit_index < 7; bit_index++) {
+		if (burst_map & (1 << bit_index)) {
+			switch (bit_index) {
+			case 0:
+			plat_dat->axi->axi_blen[a_index] = 4; break;
+			case 1:
+			plat_dat->axi->axi_blen[a_index] = 8; break;
+			case 2:
+			plat_dat->axi->axi_blen[a_index] = 16; break;
+			case 3:
+			plat_dat->axi->axi_blen[a_index] = 32; break;
+			case 4:
+			plat_dat->axi->axi_blen[a_index] = 64; break;
+			case 5:
+			plat_dat->axi->axi_blen[a_index] = 128; break;
+			case 6:
+			plat_dat->axi->axi_blen[a_index] = 256; break;
+			default:
+			break;
+			}
+			a_index++;
+		}
+	}
+
+	/* dwc-qos needs GMAC4, AAL, TSO and PMT */
+	plat_dat->has_gmac4 = 1;
+	plat_dat->dma_cfg->aal = 1;
+	plat_dat->tso_en = 1;
+	plat_dat->pmt = 1;
+
+	return 0;
+}
+
+struct dwc_eth_dwmac_data {
+	int (*probe)(struct platform_device *pdev,
+		     struct plat_stmmacenet_data *data,
+		     struct stmmac_resources *res);
+	int (*remove)(struct platform_device *pdev);
+};
+
+static int dwc_qos_probe(struct platform_device *pdev,
+			 struct plat_stmmacenet_data *plat_dat,
+			 struct stmmac_resources *stmmac_res)
+{
+    int err;
+
+	plat_dat->stmmac_clk = devm_clk_get(&pdev->dev, "apb_pclk");
+	if (IS_ERR(plat_dat->stmmac_clk)) {
+		dev_err(&pdev->dev, "apb_pclk clock not found.\n");
+		return PTR_ERR(plat_dat->stmmac_clk);
+	}
+
+	err = clk_prepare_enable(plat_dat->stmmac_clk);
+	if (err < 0) {
+		dev_err(&pdev->dev, "failed to enable apb_pclk clock: %d\n",
+			err);
+		return err;
+	}
+
+	plat_dat->pclk = devm_clk_get(&pdev->dev, "phy_ref_clk");
+	if (IS_ERR(plat_dat->pclk)) {
+		dev_err(&pdev->dev, "phy_ref_clk clock not found.\n");
+		err = PTR_ERR(plat_dat->pclk);
+		goto disable;
+	}
+
+	err = clk_prepare_enable(plat_dat->pclk);
+	if (err < 0) {
+		dev_err(&pdev->dev, "failed to enable phy_ref clock: %d\n",
+			err);
+		goto disable;
+	}
+
+	return 0;
+
+disable:
+	clk_disable_unprepare(plat_dat->stmmac_clk);
+	return err;
+}
+
+static int dwc_qos_remove(struct platform_device *pdev)
+{
+	struct net_device *ndev = platform_get_drvdata(pdev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+
+	clk_disable_unprepare(priv->plat->pclk);
+	clk_disable_unprepare(priv->plat->stmmac_clk);
+
+	return 0;
+}
+
+static const struct dwc_eth_dwmac_data dwc_qos_data = {
+	.probe = dwc_qos_probe,
+	.remove = dwc_qos_remove,
+};
+
+static void ethqos_fix_mac_speed(void *priv, unsigned int speed)
+{
+	struct spacemit_ethqos *ethqos = priv;
+    volatile unsigned int reg;
+
+	ethqos->speed = speed;
+
+    switch(speed) {
+	case SPEED_1000:
+        reg = readl(ethqos->sys_gmac_cfg);
+		reg &= ~BIT(0);
+		writel(reg, ethqos->sys_gmac_cfg);
+        break;
+
+    case SPEED_100:
+		reg = readl(ethqos->sys_gmac_cfg);
+		reg |= BIT(0);
+		writel(reg, ethqos->sys_gmac_cfg);
+		break;
+
+    default:
+    }
+}
+
+static void ethqos_dump(void *priv)
+{
+	struct spacemit_ethqos *ethqos = priv;
+
+	dev_dbg(ethqos->dev, "sys_gmac_cfg register dump\n");
+	dev_dbg(ethqos->dev, "sys_gmac_cfg: %x\n",
+		readl(ethqos->sys_gmac_cfg));
+}
+
+static int spacemit_ethqos_probe(struct platform_device *pdev)
+{
+	struct plat_stmmacenet_data *plat_dat;
+	struct stmmac_resources stmmac_res;
+	const struct dwc_eth_dwmac_data *data;
+	struct spacemit_ethqos *ethqos;
+	int ret;
+
+    data = device_get_match_data(&pdev->dev);
+
+    memset(&stmmac_res, 0, sizeof(struct stmmac_resources));
+	ret = stmmac_get_platform_resources(pdev, &stmmac_res);
+	if (ret)
+		return ret;
+
+	plat_dat = stmmac_probe_config_dt(pdev, stmmac_res.mac);
+	if (IS_ERR(plat_dat)) {
+		dev_err(&pdev->dev, "dt configuration failed\n");
+		return PTR_ERR(plat_dat);
+	}
+
+	ethqos = devm_kzalloc(&pdev->dev, sizeof(*ethqos), GFP_KERNEL);
+	if (!ethqos) {
+		ret = -ENOMEM;
+		goto err_mem;
+	}
+    ethqos->dev = &pdev->dev;
+
+    ethqos->sys_gmac_cfg = devm_platform_ioremap_resource_byname(pdev, "sys_gmac_cfg");
+    if (IS_ERR(ethqos->sys_gmac_cfg)) {
+		ret = PTR_ERR(ethqos->sys_gmac_cfg);
+		goto err_mem;
+	}
+
+    plat_dat->bsp_priv = ethqos;
+	plat_dat->fix_mac_speed = ethqos_fix_mac_speed;
+    plat_dat->dump_debug_regs = ethqos_dump;
+    ret = data->probe(pdev, plat_dat, &stmmac_res);
+	if (ret < 0) {
+		dev_err_probe(&pdev->dev, ret, "failed to probe subdriver\n");
+		goto err_mem;
+	}
+
+    ret = dwc_eth_dwmac_config_dt(pdev, plat_dat);
+	if (ret)
+		goto err_mem;
+
+    ethqos->gmac_csr_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_csr");
+    ethqos->gmac_dma_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_dma");
+    if (IS_ERR(ethqos->gmac_csr_rstc) \
+		|| IS_ERR(ethqos->gmac_dma_rstc)) {
+		dev_err(&pdev->dev, "failed to get reset.\n");
+		goto err_mem;
+	}
+    reset_control_deassert(ethqos->gmac_csr_rstc);
+	reset_control_deassert(ethqos->gmac_dma_rstc);
+
+	ret = stmmac_dvr_probe(&pdev->dev, plat_dat, &stmmac_res);
+	if (ret)
+		goto err_clk;
+
+	return ret;
+
+err_clk:
+    reset_control_assert(ethqos->gmac_dma_rstc);
+	reset_control_assert(ethqos->gmac_csr_rstc);
+	data->remove(pdev);
+
+err_mem:
+	stmmac_remove_config_dt(pdev, plat_dat);
+
+	return ret;
+}
+
+static int spacemit_ethqos_remove(struct platform_device *pdev)
+{
+	struct spacemit_ethqos *ethqos = get_stmmac_bsp_priv(&pdev->dev);
+    struct net_device *ndev = platform_get_drvdata(pdev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	const struct dwc_eth_dwmac_data *data;
+	int err;
+
+	data = device_get_match_data(&pdev->dev);
+
+	err = stmmac_dvr_remove(&pdev->dev);
+	if (err < 0)
+		dev_err(&pdev->dev, "failed to remove platform: %d\n", err);
+
+	if (ethqos) {
+        reset_control_assert(ethqos->gmac_dma_rstc);
+		reset_control_assert(ethqos->gmac_csr_rstc);
+	}
+
+	err = data->remove(pdev);
+	if (err < 0)
+		dev_err(&pdev->dev, "failed to remove subdriver: %d\n", err);
+
+	stmmac_remove_config_dt(pdev, priv->plat);
+
+	return err;
+}
+
+static const struct of_device_id spacemit_ethqos_match[] = {
+	{ .compatible = "spacemit,k1-pro-ethqos", .data = &dwc_qos_data},
+    {}
+};
+MODULE_DEVICE_TABLE(of, spacemit_ethqos_match);
+
+static struct platform_driver spacemit_ethqos_driver = {
+	.probe  = spacemit_ethqos_probe,
+	.remove = spacemit_ethqos_remove,
+	.driver = {
+		.name           = "spacemit-ethqos",
+		.pm		= &stmmac_pltfr_pm_ops,
+		.of_match_table = of_match_ptr(spacemit_ethqos_match),
+	},
+};
+module_platform_driver(spacemit_ethqos_driver);
+
+MODULE_DESCRIPTION("Spacemit Quality-of-Service driver");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c
index 28cbbfb019a2..cc17e7169bb5 100755
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-spacemit.c
@@ -23,8 +23,6 @@ struct spacemit_dwmac_priv_data {
 	phy_interface_t interface;
 	struct clk *gmac_pll_clk;
 	unsigned long gmac_pll_clk_freq;
-	struct reset_control *usb_gmac_gsr_rstc;
-    struct reset_control *usb_gmac2vbus_rstc;
 	struct reset_control *gmac_csr_rstc;
 	struct reset_control *gmac_dma_rstc;
 
@@ -120,25 +118,17 @@ static int spacemit_dwmac_init(struct platform_device *pdev, void *bsp_priv)
 				clk_get_rate(spacemit_plat_dat->gmac_pll_clk);
 	}
 
-    spacemit_plat_dat->usb_gmac_gsr_rstc = devm_reset_control_get_optional_shared(&pdev->dev, "usb_gmac_gsr");
-	spacemit_plat_dat->usb_gmac2vbus_rstc = devm_reset_control_get_optional_shared(&pdev->dev, "usb_gmac2vbus");
-    spacemit_plat_dat->gmac_csr_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_csr");
-    spacemit_plat_dat->gmac_dma_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_dma");
-	if (IS_ERR(spacemit_plat_dat->usb_gmac_gsr_rstc) \
-	    || IS_ERR(spacemit_plat_dat->usb_gmac2vbus_rstc) \
-		|| IS_ERR(spacemit_plat_dat->gmac_csr_rstc) \
-		|| IS_ERR(spacemit_plat_dat->gmac_dma_rstc)) {
-		ret = PTR_ERR(spacemit_plat_dat->usb_gmac_gsr_rstc);
+	spacemit_plat_dat->gmac_csr_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_csr");
+	spacemit_plat_dat->gmac_dma_rstc = devm_reset_control_get_exclusive(&pdev->dev, "gmac_dma");
+	if (IS_ERR(spacemit_plat_dat->gmac_csr_rstc) || IS_ERR(spacemit_plat_dat->gmac_dma_rstc)) {
 		dev_err(&pdev->dev, "failed to get reset.\n");
 		return -1;
 	}
-	reset_control_deassert(spacemit_plat_dat->usb_gmac_gsr_rstc);
-	reset_control_deassert(spacemit_plat_dat->usb_gmac2vbus_rstc);
 	reset_control_deassert(spacemit_plat_dat->gmac_csr_rstc);
 	reset_control_deassert(spacemit_plat_dat->gmac_dma_rstc);
 
-    /* default speed is 1Gbps */
-    spacemit_dwmac_set_speed(spacemit_plat_dat->sys_gmac_cfg,
+	/* default speed is 1Gbps */
+	spacemit_dwmac_set_speed(spacemit_plat_dat->sys_gmac_cfg,
 				spacemit_plat_dat->interface, SPEED_1000);
 
 	return 0;
@@ -307,12 +297,10 @@ static int spacemit_dwmac_remove(struct platform_device *pdev)
 	struct net_device *ndev = platform_get_drvdata(pdev);
 	struct stmmac_priv *priv = netdev_priv(ndev);
 	struct spacemit_dwmac_priv_data *spacemit_plat_dat = priv->plat->bsp_priv;
-    
+
 	stmmac_pltfr_remove(pdev);
 	reset_control_assert(spacemit_plat_dat->gmac_dma_rstc);
 	reset_control_assert(spacemit_plat_dat->gmac_csr_rstc);
-	reset_control_assert(spacemit_plat_dat->usb_gmac2vbus_rstc);
-	reset_control_assert(spacemit_plat_dat->usb_gmac_gsr_rstc);
 
 	return 0;
 }
-- 
2.47.0

