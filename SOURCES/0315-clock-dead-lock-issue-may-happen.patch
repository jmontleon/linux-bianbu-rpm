From 58933ba5ad4cb7000b1a9a9d4c29f54e352f603a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Cweijinmei=E2=80=9D?= <jinmei.wei@spacemit.com>
Date: Fri, 5 Jan 2024 18:35:06 +0800
Subject: [PATCH 0315/1448] clock: dead-lock issue may happen

Change-Id: Ibef30eb906baa2c1c77fe8c948421756c1f306d0
---
 drivers/clk/spacemit/ccu_mix.c | 39 ++++++++++++++++------------------
 1 file changed, 18 insertions(+), 21 deletions(-)

diff --git a/drivers/clk/spacemit/ccu_mix.c b/drivers/clk/spacemit/ccu_mix.c
index 041d771cb1aa..efb97306aa07 100755
--- a/drivers/clk/spacemit/ccu_mix.c
+++ b/drivers/clk/spacemit/ccu_mix.c
@@ -58,6 +58,9 @@ static void ccu_mix_disable(struct clk_hw *hw)
 	else
 		writel(tmp, common->base + common->reg_ctrl);
 
+	if (common->lock)
+		spin_unlock_irqrestore(common->lock, flags);
+
 	if (gate->flags & SPACEMIT_CLK_GATE_NEED_DELAY) {
 		rate = clk_hw_get_rate(&common->hw);
 
@@ -68,9 +71,6 @@ static void ccu_mix_disable(struct clk_hw *hw)
 			udelay(DIV_ROUND_UP(2000000, rate));
 	}
 
-	if (common->lock)
-		spin_unlock_irqrestore(common->lock, flags);
-
 	return;
 }
 
@@ -124,6 +124,9 @@ static int ccu_mix_enable(struct clk_hw *hw)
 	else
 		val = readl(common->base + common->reg_ctrl);
 
+	if (common->lock)
+		spin_unlock_irqrestore(common->lock, flags);
+
 	while ((val & gate->gate_mask) != gate->val_enable && (timeout_power < TIMEOUT_LIMIT)) {
 		udelay(timeout_power);
 		if (common->reg_type == CLK_DIV_TYPE_2REG_NOFC_V3
@@ -142,9 +145,6 @@ static int ccu_mix_enable(struct clk_hw *hw)
 			pr_err("write clk_gate  %s timeout after %d us!\n", clk_hw_get_name(&common->hw), timeout_power);
 	}
 
-	if (common->lock)
-		spin_unlock_irqrestore(common->lock, flags);
-
 	if (gate->flags & SPACEMIT_CLK_GATE_NEED_DELAY) {
 		rate = clk_hw_get_rate(&common->hw);
 
@@ -223,13 +223,10 @@ static int ccu_mix_trigger_fc(struct clk_hw *hw)
 {
 	struct ccu_mix *mix = hw_to_ccu_mix(hw);
 	struct ccu_common * common = &mix->common;
-	unsigned long flags;
 	unsigned long val = 0;
 
 	int ret = 0, timeout = 50;
 
-	spin_lock_irqsave(common->lock, flags);
-
 	if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
 		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4
 		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_DIV_V5
@@ -264,7 +261,6 @@ static int ccu_mix_trigger_fc(struct clk_hw *hw)
 		}
 	}
 
-	spin_unlock_irqrestore(common->lock, flags);
 	return ret;
 
 }
@@ -318,8 +314,8 @@ static int ccu_mix_set_rate(struct clk_hw *hw, unsigned long rate,
 	unsigned long best_rate = 0;
 	unsigned long flags;
 	u32 cur_mux, cur_div, mux_val = 0, div_val = 0;
-	u32 reg;
-	int ret;
+	u32 reg = 0;
+	int ret = 0;
 
 	if(!div && !mux){
 		return 0;
@@ -373,16 +369,16 @@ static int ccu_mix_set_rate(struct clk_hw *hw, unsigned long rate,
 		writel(reg | (div_val << div->shift),
 	       common->base + common->reg_ctrl);
 
-	spin_unlock_irqrestore(common->lock, flags);
-
 	if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
 		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4
 		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_DIV_V5) {
 
 		ret = ccu_mix_trigger_fc(hw);
-		if(ret)
-			pr_err("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
 	}
+	spin_unlock_irqrestore(common->lock, flags);
+
+	if(ret)
+		pr_err("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
 	return 0;
 }
 
@@ -429,8 +425,8 @@ static int ccu_mix_set_parent(struct clk_hw *hw, u8 index)
 	struct ccu_common * common = &mix->common;
 	struct ccu_mux_config *mux = mix->mux;
 	unsigned long flags;
-	u32 reg;
-	int ret;
+	u32 reg = 0;
+	int ret = 0;
 
 	if(!mux)
 		return 0;
@@ -466,15 +462,16 @@ static int ccu_mix_set_parent(struct clk_hw *hw, u8 index)
 	else
 		writel(reg | (index << mux->shift), common->base + common->reg_ctrl);
 
-	spin_unlock_irqrestore(common->lock, flags);
 	if (common->reg_type == CLK_DIV_TYPE_1REG_FC_V2
 		|| common->reg_type == CLK_DIV_TYPE_2REG_FC_V4
 		|| common->reg_type == CLK_DIV_TYPE_1REG_FC_MUX_V6) {
 
 		ret = ccu_mix_trigger_fc(hw);
-		if(ret)
-			pr_err("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
 	}
+	spin_unlock_irqrestore(common->lock, flags);
+
+	if(ret)
+		pr_err("%s of %s timeout\n", __func__, clk_hw_get_name(&common->hw));
 
 	return 0;
 }
-- 
2.47.0

