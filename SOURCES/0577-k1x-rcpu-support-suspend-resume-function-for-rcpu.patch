From b1f9040344aaa3c99028cc9577269eb2f15a8bf5 Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Fri, 29 Mar 2024 16:15:21 +0800
Subject: [PATCH 0577/1451] k1x:rcpu: support suspend & resume function for
 rcpu

Change-Id: I1e9943b0891c23d1fa86e460c4dc69cc4ca3a21d
Signed-off-by: Nell <xianbin.zhu@spacemit.com>
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi        |   6 +
 arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts |   2 +-
 arch/riscv/boot/dts/spacemit/k1-x_deb1.dts    |   2 +-
 arch/riscv/boot/dts/spacemit/k1-x_deb2.dts    |   2 +-
 arch/riscv/boot/dts/spacemit/k1-x_evb.dts     |   2 +-
 arch/riscv/boot/dts/spacemit/k1-x_hs450.dts   |   2 +-
 arch/riscv/boot/dts/spacemit/k1-x_kx312.dts   |   2 +-
 arch/riscv/boot/dts/spacemit/k1-x_mingo.dts   |   2 +-
 drivers/mailbox/spacemit/k1x-mailbox.c        |  30 ++++
 drivers/remoteproc/k1x-rproc.c                | 137 ++++++++++++++----
 .../soc/spacemit/pm_domain/k1x-pm_domain.c    |  52 ++++++-
 11 files changed, 200 insertions(+), 39 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index e35cedfc4f05..625eda4b1205 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -520,6 +520,12 @@ rsc_table: rsc_table@302fc000 {
 			reg = <0x0 0x302fc000 0x0 0x4000>;
 			no-map;
 		};
+
+		/* memory snapshots of rcpu when rcpu poweroff */
+		rcpu_mem_snapshots: rcpu_mem_snapshots@30300000 {
+			reg = <0x0 0x30300000 0x0 0x40000>;
+			no-map;
+		};
 	};
 
 	soc: soc {
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts b/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts
index 9d73c247abeb..a893af99a8dd 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MINI-PC.dts
@@ -718,7 +718,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts b/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
index 05a475d59b86..55e3fd4c85c6 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_deb1.dts
@@ -949,7 +949,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts b/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts
index eace7ed52b34..b0dc558df5ad 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_deb2.dts
@@ -913,7 +913,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_evb.dts b/arch/riscv/boot/dts/spacemit/k1-x_evb.dts
index 4a9919dd2d22..8125c2036de5 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_evb.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_evb.dts
@@ -850,7 +850,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_hs450.dts b/arch/riscv/boot/dts/spacemit/k1-x_hs450.dts
index 92f8dd268bb0..25982115b268 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_hs450.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_hs450.dts
@@ -752,7 +752,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_kx312.dts b/arch/riscv/boot/dts/spacemit/k1-x_kx312.dts
index 5062ea7bafb3..a53bda8a42ba 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_kx312.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_kx312.dts
@@ -721,7 +721,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_mingo.dts b/arch/riscv/boot/dts/spacemit/k1-x_mingo.dts
index 19a10eea0232..b2e5fc221f3d 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_mingo.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_mingo.dts
@@ -598,7 +598,7 @@ &rcpu {
 	mbox-names = "vq0", "vq1";
 	interconnects = <&dram_range0>;
 	interconnect-names = "dma-mem";
-	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>;
+	memory-region = <&rcpu_mem_0>, <&vdev0vring0>, <&vdev0vring1>, <&vdev0buffer>, <&rsc_table>, <&rcpu_mem_snapshots>;
 	status = "okay";
 };
 
diff --git a/drivers/mailbox/spacemit/k1x-mailbox.c b/drivers/mailbox/spacemit/k1x-mailbox.c
index cfeaf16177d4..220f15d4b1a5 100644
--- a/drivers/mailbox/spacemit/k1x-mailbox.c
+++ b/drivers/mailbox/spacemit/k1x-mailbox.c
@@ -223,9 +223,39 @@ static const struct of_device_id spacemit_mailbox_of_match[] = {
 };
 MODULE_DEVICE_TABLE(of, spacemit_mailbox_of_match);
 
+#ifdef CONFIG_PM_SLEEP
+static int k1x_mailbox_suspend_noirq(struct device *dev)
+{
+	int ret;
+	struct spacemit_mailbox *mbox = dev_get_drvdata(dev);
+
+//	ret = reset_control_assert(mbox->reset);
+
+	return 0;
+}
+
+static int k1x_mailbox_resume_noirq(struct device *dev)
+{
+	int ret;
+	struct spacemit_mailbox *mbox = dev_get_drvdata(dev);
+
+//	ret = reset_control_deassert(mbox->reset);
+
+	return 0;
+}
+
+static const struct dev_pm_ops k1x_mailbox_pm_qos = {
+	.suspend_noirq = k1x_mailbox_suspend_noirq,
+	.resume_noirq = k1x_mailbox_resume_noirq,
+};
+#endif
+
 static struct platform_driver spacemit_mailbox_driver = {
 	.driver = {
 		.name = "spacemit-mailbox",
+#ifdef CONFIG_PM_SLEEP
+		.pm	= &k1x_mailbox_pm_qos,
+#endif
 		.of_match_table = spacemit_mailbox_of_match,
 	},
 	.probe  = spacemit_mailbox_probe,
diff --git a/drivers/remoteproc/k1x-rproc.c b/drivers/remoteproc/k1x-rproc.c
index 168aa7ce1f29..23b2d8d07bf7 100644
--- a/drivers/remoteproc/k1x-rproc.c
+++ b/drivers/remoteproc/k1x-rproc.c
@@ -3,6 +3,8 @@
 #include <linux/limits.h>
 #include <linux/module.h>
 #include <linux/io.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
 #include <linux/of_device.h>
 #include <linux/of_reserved_mem.h>
 #include <linux/pm_runtime.h>
@@ -20,6 +22,7 @@
 #include <linux/sched/prio.h>
 #include <linux/rpmsg.h>
 #include <linux/pm_qos.h>
+#include <linux/syscore_ops.h>
 #include "remoteproc_internal.h"
 
 #define MAX_MEM_BASE	2
@@ -37,7 +40,16 @@
 
 #define ESOS_DDR_REGMAP_BASE_REG_OFFSET	0xc0
 
+#define APMU_AUDIO_CLK_RES_CTRL	0x14c
+#define APMU_AUDIO_POWER_STATUS_OFFSET	23
+
+#define DEV_PM_QOS_CLK_GATE            1
+#define DEV_PM_QOS_REGULATOR_GATE      2
+#define DEV_PM_QOS_PM_DOMAIN_GATE      4
+#define DEV_PM_QOS_DEFAULT             7
+
 struct dev_pm_qos_request greq;
+struct reset_control *gcore_reset;
 
 struct spacemit_mbox {
 	const char name[10];
@@ -58,7 +70,6 @@ struct spacemit_rproc {
 	struct spacemit_mbox *mb;
 #ifdef CONFIG_PM_SLEEP
 	struct rpmsg_device *rpdev;
-	struct completion rlowpwr_comp;
 #endif
 };
 
@@ -68,13 +79,15 @@ static int spacemit_rproc_mem_alloc(struct rproc *rproc,
 	void __iomem *va = NULL;
 
 	dev_dbg(&rproc->dev, "map memory: %pa+%zx\n", &mem->dma, mem->len);
-	va = ioremap_wc(mem->dma, mem->len);
+	va = ioremap(mem->dma, mem->len);
 	if (!va) {
 		dev_err(&rproc->dev, "Unable to map memory region: %pa+%zx\n",
 			&mem->dma, mem->len);
 		return -ENOMEM;
 	}
 
+	memset(va, 0, mem->len);
+
 	/* Update memory entry va */
 	mem->va = va;
 
@@ -105,11 +118,6 @@ static int spacemit_rproc_prepare(struct rproc *rproc)
 	/* de-assert the audio module */
 	reset_control_deassert(priv->core_rst);
 
-#define DEV_PM_QOS_CLK_GATE		1
-#define DEV_PM_QOS_REGULATOR_GATE	2
-#define DEV_PM_QOS_PM_DOMAIN_GATE	4
-#define DEV_PM_QOS_DEFAULT		7
-
 	/* open the clk & pm-switch using pm-domain framework */
 	dev_pm_qos_add_request(priv->dev, &greq, DEV_PM_QOS_MAX_FREQUENCY,
 			DEV_PM_QOS_CLK_GATE | DEV_PM_QOS_PM_DOMAIN_GATE);
@@ -118,10 +126,10 @@ static int spacemit_rproc_prepare(struct rproc *rproc)
 	pm_runtime_get_sync(priv->dev);
 
 	/**
-	 * only disable the clk when system syspend
-	 * the rcpu handle the power-switch
-	 * */
-	dev_pm_qos_update_request(&greq, DEV_PM_QOS_CLK_GATE);
+	* do not disable the clk & power-switch of the rcpu, it will be done
+	* by rcpu itself
+	* */
+	dev_pm_qos_update_request(&greq, 0);
 
 	/* Register associated reserved memory regions */
 	of_phandle_iterator_init(&it, np, "memory-region", NULL, 0);
@@ -334,8 +342,7 @@ static int rpmsg_rcpu_pwr_cb(struct rpmsg_device *rpdev, void *data,
 
 	srproc = dev_get_drvdata(&rpdev->dev);
 
-	/* wakeup the wait */
-	complete(&srproc->rlowpwr_comp);
+	/* do something */
 
 	return 0;
 }
@@ -376,6 +383,29 @@ static struct rpmsg_driver rpmsg_rcpu_pm_client = {
 	.callback	= rpmsg_rcpu_pwr_cb,
 	.remove		= rpmsg_rcpu_pwr_manage_romove,
 };
+
+module_rpmsg_driver(rpmsg_rcpu_pm_client);
+
+static int rproc_syscore_suspend(void)
+{
+	return 0;
+}
+
+static void rproc_syscore_resume(void)
+{
+	/* reset the rcpu */
+	reset_control_assert(gcore_reset);
+	reset_control_deassert(gcore_reset);
+	/**
+	 * only open the power-swith
+	* */
+	dev_pm_qos_update_request(&greq, DEV_PM_QOS_PM_DOMAIN_GATE);
+}
+
+static struct syscore_ops rproc_syscore_ops = {
+	.suspend = rproc_syscore_suspend,
+	.resume = rproc_syscore_resume,
+};
 #endif
 
 static int spacemit_rproc_probe(struct platform_device *pdev)
@@ -422,6 +452,8 @@ static int spacemit_rproc_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	gcore_reset = priv->core_rst;
+
 	priv->core_clk = devm_clk_get(dev, "core");
 	if (IS_ERR(priv->core_clk)) {
 		ret = PTR_ERR(priv->core_clk);
@@ -459,20 +491,18 @@ static int spacemit_rproc_probe(struct platform_device *pdev)
 		}
 	}
 
+#ifdef CONFIG_PM_SLEEP
+	rpmsg_rcpu_pwr_management_id_table[0].driver_data = (unsigned long long)pdev;
+
+	register_syscore_ops(&rproc_syscore_ops);
+#endif
+
 	rproc->auto_boot = true;
 	ret = devm_rproc_add(dev, rproc);
 	if (ret) {
 		dev_err(dev, "rproc_add failed\n");
 	}
 
-#ifdef CONFIG_PM_SLEEP
-	rpmsg_rcpu_pwr_management_id_table[0].driver_data = (unsigned long long)pdev;
-
-	init_completion(&priv->rlowpwr_comp);
-
-	register_rpmsg_driver(&rpmsg_rcpu_pm_client);
-#endif
-
 	return ret;
 }
 
@@ -517,14 +547,15 @@ MODULE_DEVICE_TABLE(of, spacemit_rproc_of_match);
 
 #ifdef CONFIG_PM_SLEEP
 
-#define RCPU_ENTER_LOW_PWR_MODE		"enter-low-pwr-mode"
-#define RCPU_EXIT_LOW_PWR_MODE		"exit-low-pwr-mode"
+#define RCPU_ENTER_LOW_PWR_MODE		"$"
 
 static int spacemit_rproc_suspend(struct device *dev)
 {
 	int ret;
+	unsigned int val;
 	struct rproc *rproc;
 	struct spacemit_rproc *srproc;
+	struct rproc_mem_entry *rcpu_snapshots_mem;
 
 	rproc = dev_get_drvdata(dev);
 	srproc = rproc->priv;
@@ -533,8 +564,18 @@ static int spacemit_rproc_suspend(struct device *dev)
 	ret = rpmsg_send(srproc->rpdev->ept, RCPU_ENTER_LOW_PWR_MODE,
 			strlen(RCPU_ENTER_LOW_PWR_MODE));
 
-	/* wait enter ok */
-	wait_for_completion(&srproc->rlowpwr_comp);
+	rcpu_snapshots_mem = rproc_find_carveout_by_name(rproc, "rcpu_mem_snapshots");
+	if (!rcpu_snapshots_mem) {
+		pr_err("Failed to find the rcpu_mem_snapshots\n");
+		return -1;
+	}
+
+	while (1) {
+		/* will be wrotten by rpcu */
+		val = readl(rcpu_snapshots_mem->va);
+		if (val == 1)
+			break;
+	}
 
 	return 0;
 }
@@ -542,18 +583,54 @@ static int spacemit_rproc_suspend(struct device *dev)
 static int spacemit_rproc_resume(struct device *dev)
 {
 	int ret;
+	unsigned int val;
 	struct rproc *rproc;
 	struct spacemit_rproc *srproc;
+	struct rproc_mem_entry *rcpu_sram_mem, *rcpu_snapshots_mem;
 
 	rproc = dev_get_drvdata(dev);
 	srproc = rproc->priv;
 
-	/* send msg to wakeup the rcpu */
-	ret = rpmsg_send(srproc->rpdev->ept, RCPU_EXIT_LOW_PWR_MODE,
-			strlen(RCPU_EXIT_LOW_PWR_MODE));
+	/*
+	 * when suspend, do not close the clk & power-switch, it will be
+	 * done by rcpu itself.
+	 * */
+	dev_pm_qos_update_request(&greq, 0);
+
+	/* enable ipc2ap clk & reset--> rcpu side */
+	writel(0xff, srproc->base[BOOTC_MEM_BASE_OFFSET] + ESOS_AON_PER_CLK_RST_CTL_REG);
+
+	/* set ddr map */
+	writel(srproc->ddr_remap_base, srproc->base[SYSCTRL_MEM_BASE_OFFSET] + ESOS_DDR_REGMAP_BASE_REG_OFFSET);
+
+	rcpu_sram_mem = rproc_find_carveout_by_name(rproc, "mem");
+	if (!rcpu_sram_mem) {
+		pr_err("Failed to find the rcpu_mem_0\n");
+		return -1;
+	}
+
+	rcpu_snapshots_mem = rproc_find_carveout_by_name(rproc, "rcpu_mem_snapshots");
+	if (!rcpu_snapshots_mem) {
+		pr_err("Failed to find the rcpu_mem_snapshots\n");
+		return -1;
+	}
+
+	/* copy the code */
+	memcpy((void *)rcpu_sram_mem->va,
+			(void *)((u32 *)rcpu_snapshots_mem->va + 1),
+			rcpu_sram_mem->len - sizeof(u32));
+
+	/* luaching up rpcu */	
+	writel(1, srproc->base[BOOTC_MEM_BASE_OFFSET] + ESOS_BOOTUP_REG_OFFSET);
+	
+	while (1) {
+		/* will be wrotten by rpcu */
+		val = readl(rcpu_snapshots_mem->va);
+		if (val == 2)
+			break;
+	}
 
-	/* wait exit ok */
-	wait_for_completion(&srproc->rlowpwr_comp);
+	memset((void *)rcpu_snapshots_mem->va, 0, rcpu_snapshots_mem->len);
 
 	return 0;
 }
diff --git a/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c b/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
index 05162fddbfe9..3891cb499564 100644
--- a/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
+++ b/drivers/soc/spacemit/pm_domain/k1x-pm_domain.c
@@ -255,9 +255,57 @@ static int spacemit_pd_power_on(struct generic_pm_domain *domain)
 		}
 	}
 
+	if (spd->pm_index == K1X_PMU_AUD_PWR_DOMAIN) {
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_AUDIO_CLK_RES_CTRL, &val);
+		val |= (1 << AP_POWER_CTRL_AUDIO_AUTH_OFFSET);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], APMU_AUDIO_CLK_RES_CTRL, val);
+	}
+
 	regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
-	if (val & (1 << spd->param.bit_pwr_stat))
-		return 0;
+	if (val & (1 << spd->param.bit_pwr_stat)) {
+		if (!spd->param.use_hw) {
+			/* this is the sw type */
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+			val &= ~(1 << spd->param.bit_isolation);
+			regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+
+			usleep_range(10, 15);
+
+			/* mcu power off */
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+			val &= ~((1 << spd->param.bit_sleep1) | (1 << spd->param.bit_sleep2));
+			regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+
+			usleep_range(10, 15);
+
+			for (loop = 10000; loop >= 0; --loop) {
+				regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
+				if ((val & (1 << spd->param.bit_pwr_stat)) == 0)
+					break;
+				usleep_range(4, 6);
+			}
+		} else {
+			/* LCD */
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+			val &= ~(1 << spd->param.bit_auto_pwr_on);
+			val &= ~(1 << spd->param.bit_hw_mode);
+			regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+
+			usleep_range(10, 30);
+
+			for (loop = 10000; loop >= 0; --loop) {
+				regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
+				if ((val & (1 << spd->param.bit_hw_pwr_stat)) == 0)
+					break;
+				usleep_range(4, 6);
+			}
+		}
+
+		if (loop < 0) {
+			pr_err("power-off domain: %d, error\n", spd->pm_index);
+			return -EBUSY;
+		}
+	}
 
 	if (!spd->param.use_hw) {
 		/* mcu power on */
-- 
2.47.0

