From c16933c7000176a34c832cd9615b4d27782c774e Mon Sep 17 00:00:00 2001
From: yanhaodong <haodong.yan@spacemit.com>
Date: Mon, 5 Feb 2024 15:11:40 +0800
Subject: [PATCH 0412/1203] k1-x:aes prevent writing-buffer requests in the
 meantime

Change-Id: If3ca86baca94fd520d8310c063cf0fc6debb5c64
---
 drivers/crypto/spacemit/spacemit-ce-glue.c   | 101 +++++++++++++------
 drivers/crypto/spacemit/spacemit_ce_engine.c |  30 +++---
 2 files changed, 87 insertions(+), 44 deletions(-)

diff --git a/drivers/crypto/spacemit/spacemit-ce-glue.c b/drivers/crypto/spacemit/spacemit-ce-glue.c
index 70c69d93c8c7..83bb7d26300d 100755
--- a/drivers/crypto/spacemit/spacemit-ce-glue.c
+++ b/drivers/crypto/spacemit/spacemit-ce-glue.c
@@ -14,6 +14,7 @@
 #include <linux/device.h>
 #include <linux/scatterlist.h>
 #include <linux/highmem-internal.h>
+#include <asm/cacheflush.h>
 #include "crypto/skcipher.h"
 #include "spacemit_engine.h"
 
@@ -21,6 +22,7 @@ int aes_expandkey_nouse(struct crypto_aes_ctx *key, u8 const in[], int size){ret
 #define aes_expandkey		aes_expandkey_nouse
 #define PRIO			500
 #define MODE			"spacemit-ce1"
+char __aligned(8) align[16] = {0};
 
 extern int spacemit_aes_ecb_encrypt(int index, const unsigned char *pt,unsigned char *ct, u8 *key, unsigned int len, unsigned int blocks);
 extern int spacemit_aes_ecb_decrypt(int index, const unsigned char *ct,unsigned char *pt, u8 *key, unsigned int len, unsigned int blocks);
@@ -28,6 +30,7 @@ extern int spacemit_aes_cbc_encrypt(int index, const unsigned char *pt,unsigned
 extern int spacemit_aes_cbc_decrypt(int index, const unsigned char *ct,unsigned char *pt, u8 *key, unsigned int len, u8 *IV,unsigned int blocks);
 extern int spacemit_crypto_aes_set_key(int index, struct crypto_tfm *tfm, const u8 *key,unsigned int keylen);
 extern void spacemit_aes_getaddr(unsigned char **in, unsigned char **out);
+extern void spacemit_aes_reladdr(void);
 
 int aes_setkey(struct crypto_skcipher *tfm, const u8 *key,unsigned int keylen)
 {
@@ -40,21 +43,26 @@ static int ecb_encrypt(struct skcipher_request *req)
 	struct crypto_aes_ctx *ctx = crypto_skcipher_ctx(tfm);
 	int i;
 	unsigned char* map_addr;
-	struct scatterlist* sg;
+	struct scatterlist* sg, *start_srcsg, *start_dstsg;
 	int len = 0,sgl_len;
 	unsigned char* sg_va,*in_buffer,*out_buffer;
 	int total_len = req->cryptlen;
-	int singal_len = 0;
+	int page_len = 0, singal_len = 0;
 
 	spacemit_aes_getaddr(&in_buffer,&out_buffer);
+	start_srcsg = req->src;
+	start_dstsg = req->dst;
 	for(i = 0; total_len > 0; i++){
 		if(total_len > SPACEMIT_AES_BUFFER_LEN)
-			singal_len = SPACEMIT_AES_BUFFER_LEN;
+			page_len = singal_len = SPACEMIT_AES_BUFFER_LEN;
 		else
-			singal_len = total_len;
+			page_len = singal_len = total_len;
+
+		if(singal_len % AES_BLOCK_SIZE)
+			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = req->src,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len<singal_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -63,13 +71,15 @@ static int ecb_encrypt(struct skcipher_request *req)
 			sgl_len++;
 			map_addr += sg->length;
 		}
-		req->src = sg_next(sg);
+		if(page_len != singal_len)
+			memcpy(map_addr, align, singal_len-page_len);
+		start_srcsg = sg_next(sg);
 
 		spacemit_aes_ecb_encrypt(0,in_buffer, out_buffer,(u8 *)(ctx->key_enc),
 				(unsigned int)(ctx->key_length), singal_len / AES_BLOCK_SIZE);
 
 		map_addr = out_buffer;
-		for(sg = req->dst,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_dstsg,len = 0;len<singal_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -77,12 +87,14 @@ static int ecb_encrypt(struct skcipher_request *req)
 			memcpy(sg_va,map_addr,sg->length);
 			sgl_len++;
 			map_addr += sg->length;
+			flush_dcache_page(sg_page(sg));
 		}
-		req->dst = sg_next(sg);
+		start_dstsg = sg_next(sg);
 
 		total_len = total_len - singal_len;
 
 	}
+	spacemit_aes_reladdr();
 
 	return 0;
 }
@@ -93,21 +105,25 @@ static int ecb_decrypt(struct skcipher_request *req)
 	struct crypto_aes_ctx *ctx = crypto_skcipher_ctx(tfm);
 	int i;
 	unsigned char* map_addr;
-	struct scatterlist* sg;
+	struct scatterlist* sg, *start_srcsg, *start_dstsg;
 	int len = 0,sgl_len;
 	unsigned char* sg_va,*in_buffer,*out_buffer;
 	int total_len = req->cryptlen;
-	int singal_len = 0;
+	int page_len = 0, singal_len = 0;
 
 	spacemit_aes_getaddr(&in_buffer,&out_buffer);
+	start_srcsg = req->src;
+	start_dstsg = req->dst;
 	for(i = 0; total_len > 0; i++){
 		if(total_len > SPACEMIT_AES_BUFFER_LEN)
-			singal_len = SPACEMIT_AES_BUFFER_LEN;
+			page_len = singal_len = SPACEMIT_AES_BUFFER_LEN;
 		else
-			singal_len = total_len;
+			page_len = singal_len = total_len;
+		if(singal_len % AES_BLOCK_SIZE)
+			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = req->src,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len<page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -116,13 +132,15 @@ static int ecb_decrypt(struct skcipher_request *req)
 			sgl_len++;
 			map_addr += sg->length;
 		}
-		req->src = sg_next(sg);
+		start_srcsg = sg_next(sg);
+		if(page_len != singal_len)
+			memcpy(map_addr, align, singal_len-page_len);
 
 		spacemit_aes_ecb_decrypt(0,in_buffer, out_buffer,(u8 *)(ctx->key_dec),
 				(unsigned int)(ctx->key_length), singal_len / AES_BLOCK_SIZE);
 
 		map_addr = out_buffer;
-		for(sg = req->dst,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_dstsg,len = 0;len<singal_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -130,11 +148,13 @@ static int ecb_decrypt(struct skcipher_request *req)
 			memcpy(sg_va,map_addr,sg->length);
 			sgl_len++;
 			map_addr += sg->length;
+			flush_dcache_page(sg_page(sg));
 		}
-		req->dst = sg_next(sg);
+		start_dstsg = sg_next(sg);
 
 		total_len = total_len - singal_len;
 	}
+	spacemit_aes_reladdr();
 
 	return 0;
 }
@@ -145,21 +165,26 @@ static int cbc_encrypt(struct skcipher_request *req)
 	struct crypto_aes_ctx *ctx = crypto_skcipher_ctx(tfm);
 	int i;
 	unsigned char* map_addr;
-	struct scatterlist* sg;
+	struct scatterlist* sg, *start_srcsg, *start_dstsg;
 	int len = 0,sgl_len;
 	unsigned char* sg_va,*in_buffer,*out_buffer;
 	int total_len = req->cryptlen;
-	int singal_len = 0;
+	int page_len = 0, singal_len = 0;
 
 	spacemit_aes_getaddr(&in_buffer,&out_buffer);
+	start_srcsg = req->src;
+	start_dstsg = req->dst;
 	for(i = 0; total_len > 0; i++){
 		if(total_len > SPACEMIT_AES_BUFFER_LEN)
-			singal_len = SPACEMIT_AES_BUFFER_LEN;
+			page_len = singal_len = SPACEMIT_AES_BUFFER_LEN;
 		else
-			singal_len = total_len;
+			page_len = singal_len = total_len;
+
+		if(singal_len % AES_BLOCK_SIZE)
+			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = req->src,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len<singal_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -168,13 +193,15 @@ static int cbc_encrypt(struct skcipher_request *req)
 			sgl_len++;
 			map_addr += sg->length;
 		}
-		req->src = sg_next(sg);
+		if(page_len != singal_len)
+			memcpy(map_addr, align, singal_len-page_len);
+		start_srcsg = sg_next(sg);
 
 		spacemit_aes_cbc_encrypt(0,in_buffer, out_buffer,(u8 *)(ctx->key_enc),
 				(unsigned int)(ctx->key_length), (u8 *)req->iv,singal_len / AES_BLOCK_SIZE);
 
 		map_addr = out_buffer;
-		for(sg = req->dst,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_dstsg,len = 0;len<singal_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -182,12 +209,14 @@ static int cbc_encrypt(struct skcipher_request *req)
 			memcpy(sg_va,map_addr,sg->length);
 			sgl_len++;
 			map_addr += sg->length;
+			flush_dcache_page(sg_page(sg));
 		}
-		req->dst = sg_next(sg);
+		start_dstsg = sg_next(sg);
 
 		total_len = total_len - singal_len;
 
 	}
+	spacemit_aes_reladdr();
 
 	return 0;
 }
@@ -198,21 +227,25 @@ static int cbc_decrypt(struct skcipher_request *req)
 	struct crypto_aes_ctx *ctx = crypto_skcipher_ctx(tfm);
 	int i;
 	unsigned char* map_addr;
-	struct scatterlist* sg;
+	struct scatterlist* sg, *start_srcsg, *start_dstsg;
 	int len = 0,sgl_len;
 	unsigned char* sg_va,*in_buffer,*out_buffer;
 	int total_len = req->cryptlen;
-	int singal_len = 0;
+	int page_len = 0, singal_len = 0;
 
 	spacemit_aes_getaddr(&in_buffer,&out_buffer);
+	start_srcsg = req->src;
+	start_dstsg = req->dst;
 	for(i = 0; total_len > 0; i++){
 		if(total_len > SPACEMIT_AES_BUFFER_LEN)
-			singal_len = SPACEMIT_AES_BUFFER_LEN;
+			page_len = singal_len = SPACEMIT_AES_BUFFER_LEN;
 		else
-			singal_len = total_len;
+			page_len = singal_len = total_len;
+		if(singal_len % AES_BLOCK_SIZE)
+			singal_len = (total_len / AES_BLOCK_SIZE + 1) * AES_BLOCK_SIZE;
 
 		map_addr = in_buffer;
-		for(sg = req->src,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_srcsg,len = 0;len<page_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -221,13 +254,15 @@ static int cbc_decrypt(struct skcipher_request *req)
 			sgl_len++;
 			map_addr += sg->length;
 		}
-		req->src = sg_next(sg);
+		start_srcsg = sg_next(sg);
+		if(page_len != singal_len)
+			memcpy(map_addr, align, singal_len-page_len);
 
 		spacemit_aes_cbc_decrypt(0,in_buffer, out_buffer,(u8 *)(ctx->key_dec),
 				(unsigned int)(ctx->key_length), (u8 *)req->iv,singal_len / AES_BLOCK_SIZE);
 
 		map_addr = out_buffer;
-		for(sg = req->dst,len = 0;len<singal_len;len += sg->length)
+		for(sg = start_dstsg,len = 0;len<singal_len;len += sg->length)
 		{
 			if(len != 0)
 				sg = sg_next(sg);
@@ -235,11 +270,13 @@ static int cbc_decrypt(struct skcipher_request *req)
 			memcpy(sg_va,map_addr,sg->length);
 			sgl_len++;
 			map_addr += sg->length;
+			flush_dcache_page(sg_page(sg));
 		}
-		req->dst = sg_next(sg);
+		start_dstsg = sg_next(sg);
 
 		total_len = total_len - singal_len;
 	}
+	spacemit_aes_reladdr();
 
 	return 0;
 }
diff --git a/drivers/crypto/spacemit/spacemit_ce_engine.c b/drivers/crypto/spacemit/spacemit_ce_engine.c
index c792f9d28958..d72ac799c69f 100755
--- a/drivers/crypto/spacemit/spacemit_ce_engine.c
+++ b/drivers/crypto/spacemit/spacemit_ce_engine.c
@@ -565,20 +565,20 @@ static int ce_aes_process_nblocks(int index, const unsigned char *buf_in, unsign
 	uint32_t val;
 
 	dma_sync_single_for_device(dev,dma_addr_in,blocks*16,DMA_TO_DEVICE);
-		if (dma_mapping_error(dev, dma_addr_in)) {
-			dev_err(dev, "failed to map buffer\n");
-			return -EFAULT;
-		}
-		if (dma_mapping_error(dev, dma_addr_out)) {
-			dev_err(dev, "failed to map buffer\n");
-			return -EFAULT;
-		}
+	if (dma_mapping_error(dev, dma_addr_in)) {
+		dev_err(dev, "failed to map buffer\n");
+		return -EFAULT;
+	}
+	if (dma_mapping_error(dev, dma_addr_out)) {
+		dev_err(dev, "failed to map buffer\n");
+		return -EFAULT;
+	}
+
 	dma_addr_in_high = upper_32_bits(dma_addr_in);
 	dma_addr_in_low = lower_32_bits(dma_addr_in);
 	dma_addr_out_high = upper_32_bits(dma_addr_out);
 	dma_addr_out_low = lower_32_bits(dma_addr_out);
 
-	mutex_lock(&engine[index].eng_mutex);
 	/*reset the HW before using it*/
 	adec_engine_hw_reset(index, E_ACC_ENG_DMA);
 	adec_engine_hw_reset(index, E_ACC_ENG_CRYPTO);
@@ -717,10 +717,8 @@ static int ce_aes_process_nblocks(int index, const unsigned char *buf_in, unsign
 		default:
 			break;
 	}
-	mutex_unlock(&engine[index].eng_mutex);
 	return 0;
 error:
-	mutex_unlock(&engine[index].eng_mutex);
 	dev_err_once(dev, "====================failed==============\n");
 	dev_err_once(dev, "%s : %d : failed! mode=%s,op=%s,keylen=%d\n",__func__,__LINE__,
 		(mode==E_AES_CBC?"cbc":(mode==E_AES_CTR?"ctr":(mode==E_AES_ECB?"ecb":"err"))),
@@ -847,11 +845,18 @@ EXPORT_SYMBOL(spacemit_aes_cbc_decrypt);
 
 void spacemit_aes_getaddr(unsigned char **in,unsigned char **out)
 {
+	mutex_lock(&engine[0].eng_mutex);
 	*in = in_buffer;
 	*out = out_buffer;
 }
 EXPORT_SYMBOL(spacemit_aes_getaddr);
 
+void spacemit_aes_reladdr(void)
+{
+	mutex_unlock(&engine[0].eng_mutex);
+}
+EXPORT_SYMBOL(spacemit_aes_reladdr);
+
 __maybe_unused static void engine_reg_dump(int index)
 {
         uint32_t val;
@@ -1260,6 +1265,7 @@ static int crypto_engine_probe(struct platform_device *pdev)
 
 	in_buffer = dma_alloc_noncoherent(dev, SPACEMIT_AES_BUFFER_LEN, &dma_addr_in, DMA_TO_DEVICE, GFP_KERNEL);
 	out_buffer = dma_alloc_noncoherent(dev, SPACEMIT_AES_BUFFER_LEN, &dma_addr_out, DMA_FROM_DEVICE, GFP_KERNEL);
+
 	for(i=0; i < num_engines; i++)
 	{
 		sprintf(obj_name,"spacemit-crypto-engine-%d",i);
@@ -1359,7 +1365,7 @@ static int crypto_engine_probe(struct platform_device *pdev)
 
 static int crypto_engine_remove(struct platform_device *pdev)
 {
-	dma_free_noncoherent(dev, SPACEMIT_AES_BUFFER_LEN, in_buffer, dma_addr_in, DMA_FROM_DEVICE);
+	dma_free_noncoherent(dev, SPACEMIT_AES_BUFFER_LEN, in_buffer, dma_addr_in, DMA_TO_DEVICE);
 	dma_free_noncoherent(dev, SPACEMIT_AES_BUFFER_LEN, out_buffer, dma_addr_out, DMA_FROM_DEVICE);
 	return 0;
 }
-- 
2.47.0

