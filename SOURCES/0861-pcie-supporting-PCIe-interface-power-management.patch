From d4c0f35d88ca97bfd044e2802fb0cdd4f49cefb7 Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Tue, 28 May 2024 13:48:40 +0800
Subject: [PATCH 0861/1205] pcie: supporting PCIe interface power management

  Turns off the power supply to the EP when system suspend

Change-Id: I6c22d6684c791801793a12c1548124a124c75da6
---
 drivers/pci/controller/dwc/pcie-k1x.c | 28 +++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/drivers/pci/controller/dwc/pcie-k1x.c b/drivers/pci/controller/dwc/pcie-k1x.c
index 2fccc9298367..f25e7525a74a 100644
--- a/drivers/pci/controller/dwc/pcie-k1x.c
+++ b/drivers/pci/controller/dwc/pcie-k1x.c
@@ -160,6 +160,7 @@ struct k1x_pcie {
 	struct reset_control *reset;
 
 	struct	gpio_desc *perst_gpio; /* for PERST# in RC mode*/
+	int pwr_on_gpio;
 };
 
 struct k1x_pcie_of_data {
@@ -1529,6 +1530,19 @@ static const struct of_device_id of_k1x_pcie_match[] = {
 	{},
 };
 
+static int k1x_power_on(struct k1x_pcie *k1x, int on)
+{
+	bool status = on ? 1 : 0;
+
+	if (k1x->pwr_on_gpio <= 0) {
+		return 0;
+	}
+
+	dev_info(k1x->pci->dev, "set power on gpio %d to %d\n", k1x->pwr_on_gpio, status);
+	gpio_direction_output(k1x->pwr_on_gpio, status);
+	return 0;
+}
+
 static int __init k1x_pcie_probe(struct platform_device *pdev)
 {
 	u32 reg;
@@ -1607,6 +1621,11 @@ static int __init k1x_pcie_probe(struct platform_device *pdev)
 		k1x->num_lanes = 1;
 	}
 
+	k1x->pwr_on_gpio = of_get_named_gpio(np, "k1x,pwr_on", 0);
+	if (k1x->pwr_on_gpio <= 0) {
+		dev_info(dev, "has no power on gpio.\n");
+	}
+
 	/* pcie0 and usb use combo phy and reset */
 	if (k1x->port_id == 0) {
 		k1x->reset = devm_reset_control_array_get_shared(dev);
@@ -1654,6 +1673,9 @@ static int __init k1x_pcie_probe(struct platform_device *pdev)
 		reg |= PCIE_IGNORE_PERSTN;
 		k1x_pcie_writel(k1x, PCIE_CTRL_LOGIC, reg);
 
+		/* power on the interface */
+		k1x_power_on(k1x, 1);
+
 		ret = k1x_add_pcie_port(k1x, pdev);
 		if (ret < 0)
 			goto err_clk;
@@ -1768,6 +1790,9 @@ static int k1x_pcie_suspend_noirq(struct device *dev)
 	k1x_pcie_stop_link(pci);
 	k1x_pcie_disable_phy(k1x);
 
+	/* power off the interface */
+	k1x_power_on(k1x, 0);
+
 	/* soft reset */
 	reg = k1x_pcie_readl(k1x, PCIE_CTRL_LOGIC);
 	reg |= (1 << 0);
@@ -1788,6 +1813,9 @@ static int k1x_pcie_resume_noirq(struct device *dev)
 	reg &= ~(1 << 0);
 	k1x_pcie_writel(k1x, PCIE_CTRL_LOGIC, reg);
 
+	/* power on the interface */
+	k1x_power_on(k1x, 1);
+
 	k1x_pcie_enable_phy(k1x);
 	k1x_pcie_host_init(pp);
 	dw_pcie_setup_rc(pp);
-- 
2.47.0

