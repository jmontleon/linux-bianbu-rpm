From 8fd02612df7ada407d019105b6764f225ca86e69 Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Mon, 27 Nov 2023 20:33:37 +0800
Subject: [PATCH 0176/1448] pmic:pm853: support regulator driver and compatible
 with spm8821

Change-Id: I0285e418f96395ceaa1efdce7b386923d79218dc
---
 drivers/mfd/spacemit-mfd.c                 |  67 ++++-
 drivers/regulator/spacemit-regulator.c     |  27 +-
 include/linux/mfd/spacemit/pm853.h         | 314 +++++++++++++++++++++
 include/linux/mfd/spacemit/spacemit_pmic.h |  39 ++-
 include/linux/mfd/spacemit/spm8821.h       |  98 ++++---
 5 files changed, 474 insertions(+), 71 deletions(-)
 create mode 100644 include/linux/mfd/spacemit/pm853.h

diff --git a/drivers/mfd/spacemit-mfd.c b/drivers/mfd/spacemit-mfd.c
index ea8ab1c92adf..e85b75533a61 100644
--- a/drivers/mfd/spacemit-mfd.c
+++ b/drivers/mfd/spacemit-mfd.c
@@ -12,8 +12,12 @@
 SPM8821_MFD_CELL;
 SPM8821_REGMAP_CONFIG;
 
+PM853_MFD_CELL;
+PM853_REGMAP_CONFIG;
+
 static const struct of_device_id spacemit_pmic_of_match[] = {
-	{ .compatible = "spacemit,spm8821" },
+	{ .compatible = "spacemit,spm8821" , .data = (void *)SPACEMIT_SPM8821_ID_REG },
+	{ .compatible = "spacemit,pm853" , .data = (void *)SPACEMIT_PM853_ID_REG },
 	{ },
 };
 MODULE_DEVICE_TABLE(of, spacemit_pmic_of_match);
@@ -45,15 +49,38 @@ static int __spacemit_pmic_read_u8(struct i2c_client *c, u8 reg, u8 *val)
 	return 0;
 }
 
+static int spacemit_prepare_sub_pmic(struct spacemit_pmic *pmic)
+{
+	struct i2c_client *client = pmic->i2c;
+	struct spacemit_sub_pmic *sub = pmic->sub;
+
+	sub->power_page_addr = pmic->i2c->addr + 1;
+
+	sub->power_page = i2c_new_dummy_device(client->adapter,
+			sub->power_page_addr);
+	if (sub->power_page == NULL)
+		return -ENODEV;
+
+	sub->power_regmap = devm_regmap_init_i2c(sub->power_page,
+			pmic->regmap_cfg);
+	if (IS_ERR(sub->power_regmap))
+		return PTR_ERR(sub->power_regmap);
+
+	i2c_set_clientdata(sub->power_page, pmic);
+
+	return 0;
+}
+
 static int spacemit_pmic_probe(struct i2c_client *client,
 		       const struct i2c_device_id *id)
 {
 	int ret;
-	unsigned char pmic_id_reg, pmic_id;
+	int nr_cells;
+	unsigned char pmic_id;
+	unsigned long pmic_id_reg;
 	struct spacemit_pmic *pmic;
 	const struct mfd_cell *cells;
-	int nr_cells;
-	struct device_node *np = client->dev.of_node;
+	const struct of_device_id *of_id;
 
 	pmic = devm_kzalloc(&client->dev, sizeof(*pmic), GFP_KERNEL);
 	if (!pmic) {
@@ -61,15 +88,15 @@ static int spacemit_pmic_probe(struct i2c_client *client,
 		return -ENOMEM;
 	}
 
-	/* read the chip id */
-	if (of_device_is_compatible(np, "spacemit,spm8821"))
-		pmic_id_reg = SPACEMIT_SPM8821_ID_REG;
-	else {
-		pr_err("%s:%d, not supported\n", __func__, __LINE__);
-		return -EINVAL;
+	of_id = of_match_device(client->dev.driver->of_match_table, &client->dev);
+	if (!of_id) {
+		pr_err("Unable to match OF ID\n");
+		return -ENODEV;
 	}
 
-	ret = __spacemit_pmic_read_u8(client, pmic_id_reg, &pmic_id);
+	pmic_id_reg = (unsigned long)of_id->data;
+
+	ret = __spacemit_pmic_read_u8(client, (unsigned char)pmic_id_reg, &pmic_id);
 	if (ret) {
 		pr_err("%s:%d, read pmic id failed\n", __func__, __LINE__);
 		return -EINVAL;
@@ -84,6 +111,14 @@ static int spacemit_pmic_probe(struct i2c_client *client,
 		cells = spm8821;
 		nr_cells = ARRAY_SIZE(spm8821);
 		break;
+	case PM853_ID:
+		pmic->regmap_cfg = &pm853_regmap_config;
+		cells = pm853;
+		nr_cells = ARRAY_SIZE(pm853);
+		pmic->sub = devm_kzalloc(&client->dev, sizeof(struct spacemit_sub_pmic), GFP_KERNEL);
+		if (!pmic->sub)
+			return -ENOMEM;
+		break;
 	default:
 		pr_err("%s:%d, Unsupported SPACEMIT ID :%d\n",
 				__func__, __LINE__, pmic->variant);
@@ -91,6 +126,7 @@ static int spacemit_pmic_probe(struct i2c_client *client,
 	}
 
 	pmic->i2c = client;
+
 	i2c_set_clientdata(client, pmic);
 
 	pmic->regmap = devm_regmap_init_i2c(client, pmic->regmap_cfg);
@@ -100,6 +136,15 @@ static int spacemit_pmic_probe(struct i2c_client *client,
 		return PTR_ERR(pmic->regmap);
 	}
 
+	/* prepare sub pmic */
+	if (pmic->sub) {
+		ret = spacemit_prepare_sub_pmic(pmic);
+		if (ret < 0) {
+			pr_err("failed to prepare sub pmic %d\n", ret);
+			return ret;
+		}
+	}
+
 	if (!client->irq) {
 		pr_warn("%s:%d, No interrupt supported\n",
 				__func__, __LINE__);
diff --git a/drivers/regulator/spacemit-regulator.c b/drivers/regulator/spacemit-regulator.c
index 93a27b20387c..ae9d34edfd7a 100644
--- a/drivers/regulator/spacemit-regulator.c
+++ b/drivers/regulator/spacemit-regulator.c
@@ -17,7 +17,7 @@
 #include <linux/gpio/consumer.h>
 #include <linux/mfd/spacemit/spacemit_pmic.h>
 
-static const struct regulator_ops spm8821_dcdc_ops = {
+static const struct regulator_ops pmic_dcdc_ldo_ops = {
 	.list_voltage		= regulator_list_voltage_linear,
 	.map_voltage		= regulator_map_voltage_linear,
 	.get_voltage_sel	= regulator_get_voltage_sel_regmap,
@@ -28,36 +28,49 @@ static const struct regulator_ops spm8821_dcdc_ops = {
 	.is_enabled		= regulator_is_enabled_regmap,
 };
 
-static const struct regulator_ops spm8821_switch_ops = {
+static const struct regulator_ops pmic_switch_ops = {
 	.enable			= regulator_enable_regmap,
 	.disable		= regulator_disable_regmap,
 	.is_enabled		= regulator_is_enabled_regmap,
 };
 
-SPM8821_REGULATOR_DESC;
+SPM8821_BUCK_LINER_RANGE;SPM8821_LDO_LINER_RANGE;SPM8821_REGULATOR_DESC;
+
+PM853_BUCK_LINER_RANGE1;PM853_BUCK_LINER_RANGE2;PM853_LDO_LINER_RANGE1;
+PM853_LDO_LINER_RANGE2;PM853_LDO_LINER_RANGE3;PM853_LDO_LINER_RANGE4;
+PM853_REGULATOR_DESC;
 
 static int spacemit_regulator_probe(struct platform_device *pdev)
 {
 	struct regulator_config config = {};
 	struct spacemit_pmic *pmic = dev_get_drvdata(pdev->dev.parent);
-	struct i2c_client *client = pmic->i2c;
+	struct i2c_client *client;
 	const struct regulator_desc *regulators;
 	struct regulator_dev *regulator_dev;
 	int i, nregulators;
 
 	switch (pmic->variant) {
 	case SPM8821_ID:
+		client = pmic->i2c;
 		regulators = spm8821_reg;
 		nregulators = ARRAY_SIZE(spm8821_reg);
+
+		config.dev = &client->dev;
+		config.regmap = pmic->regmap;
 	       break;
+	case PM853_ID:
+		client = pmic->sub->power_page;
+		regulators = pm853_reg;
+		nregulators = ARRAY_SIZE(pm853_reg);
+
+		config.dev = &client->dev;
+		config.regmap = pmic->sub->power_regmap;
+		break;
 	default:
 	       pr_err("unsupported Spacemit pmic ID: %d\n", pmic->variant);
 	       return -EINVAL;
 	}
 
-	config.dev = &client->dev;
-	config.regmap = pmic->regmap;
-
 	for (i = 0; i < nregulators; ++i) {
 		regulator_dev = devm_regulator_register(&pdev->dev,
 				regulators + i, &config);
diff --git a/include/linux/mfd/spacemit/pm853.h b/include/linux/mfd/spacemit/pm853.h
new file mode 100644
index 000000000000..0d04ad1341eb
--- /dev/null
+++ b/include/linux/mfd/spacemit/pm853.h
@@ -0,0 +1,314 @@
+#ifndef __PM853_H__
+#define __PM853_H__
+
+enum PM853_reg {
+	PM853_ID_DCDC1,
+	PM853_ID_DCDC2,
+	PM853_ID_DCDC3,
+	PM853_ID_DCDC4,
+	PM853_ID_DCDC5,
+	PM853_ID_LDO1,
+	PM853_ID_LDO2,
+	PM853_ID_LDO3,
+	PM853_ID_LDO4,
+	PM853_ID_LDO5,
+	PM853_ID_LDO6,
+	PM853_ID_LDO7,
+	PM853_ID_LDO8,
+	PM853_ID_LDO9,
+	PM853_ID_LDO10,
+	PM853_ID_LDO11,
+	PM853_ID_LDO12,
+	PM853_ID_LDO13,
+	PM853_ID_LDO14,
+	PM853_ID_LDO15,
+	PM853_ID_LDO16,
+	PM853_ID_LDO17,
+	PM853_ID_LDO18,
+	PM853_ID_LDO19,
+	PM853_ID_LDO20,
+	PM853_ID_LDO21,
+	PM853_ID_LDO22,
+	PM853_ID_LDO5_SW,
+};
+
+#define SPACEMIT_PM853_ID_REG		0x0
+
+#define PM853_LDO_BUCK_EN_REG0		0x11
+#define PM853_LDO_BUCK_EN_REG1		0x12
+#define PM853_LDO_BUCK_EN_REG2		0x13
+#define PM853_LDO_BUCK_EN_REG3		0x14
+
+#define PM853_BUCK1_EN_MSK		0x1
+#define PM853_BUCK2_EN_MSK		0x2
+#define PM853_BUCK3_EN_MSK		0x4
+#define PM853_BUCK4_EN_MSK		0x8
+#define PM853_BUCK5_EN_MSK		0x10
+
+#define PM853_LDO1_EN_MSK		0x20
+#define PM853_LDO2_EN_MSK		0x40
+#define PM853_LDO3_EN_MSK		0x80
+#define PM853_LDO4_EN_MSK		0x1
+#define PM853_LDO5_EN_MSK		0x2
+#define PM853_LDO6_EN_MSK		0x4
+#define PM853_LDO7_EN_MSK		0x8
+#define PM853_LDO8_EN_MSK		0x10
+#define PM853_LDO9_EN_MSK		0x20
+#define PM853_LDO10_EN_MSK		0x40
+#define PM853_LDO11_EN_MSK		0x80
+#define PM853_LDO12_EN_MSK		0x1
+#define PM853_LDO13_EN_MSK		0x2
+#define PM853_LDO14_EN_MSK		0x4
+#define PM853_LDO15_EN_MSK		0x8
+#define PM853_LDO16_EN_MSK		0x10
+#define PM853_LDO17_EN_MSK		0x20
+#define PM853_LDO18_EN_MSK		0x40
+#define PM853_LDO19_EN_MSK		0x80
+#define PM853_LDO20_EN_MSK		0x1
+#define PM853_LDO21_EN_MSK		0x2
+#define PM853_LDO22_EN_MSK		0x4
+#define PM853_SW_EN_MSK			0x8
+
+
+#define PM853_BUCK1_VSEL_REG		0x30
+#define PM853_BUCK2_VSEL_REG		0x50
+#define PM853_BUCK3_VSEL_REG		0x60
+#define PM853_BUCK4_VSEL_REG		0x80
+#define PM853_BUCK5_VSEL_REG		0x90
+
+#define PM853_BUCK1_VSEL_MSK		0x7f
+#define PM853_BUCK2_VSEL_MSK		0x7f
+#define PM853_BUCK3_VSEL_MSK		0x7f
+#define PM853_BUCK4_VSEL_MSK		0x7f
+#define PM853_BUCK5_VSEL_MSK		0x7f
+
+#define PM853_LDO_VSEL_MSK		0xf
+#define PM853_LDO1_VSEL_REG		0xb1
+#define PM853_LDO2_VSEL_REG		0xb4
+#define PM853_LDO3_VSEL_REG		0xb7
+#define PM853_LDO4_VSEL_REG		0xba
+#define PM853_LDO5_VSEL_REG		0xbd
+#define PM853_LDO6_VSEL_REG		0xc0
+#define PM853_LDO7_VSEL_REG		0xc3
+#define PM853_LDO8_VSEL_REG		0xc6
+#define PM853_LDO9_VSEL_REG		0xc9
+#define PM853_LDO10_VSEL_REG		0xcc
+#define PM853_LDO11_VSEL_REG		0xcf
+#define PM853_LDO12_VSEL_REG		0xd2
+#define PM853_LDO13_VSEL_REG		0xd5
+#define PM853_LDO14_VSEL_REG		0xd8
+#define PM853_LDO15_VSEL_REG		0xdb
+#define PM853_LDO16_VSEL_REG		0xde
+#define PM853_LDO17_VSEL_REG		0xe1
+#define PM853_LDO18_VSEL_REG		0xe4
+#define PM853_LDO19_VSEL_REG		0xe7
+#define PM853_LDO20_VSEL_REG		0xea
+#define PM853_LDO21_VSEL_REG		0xed
+#define PM853_LDO22_VSEL_REG		0xf0
+
+#define SPACEMIT_PM853_MAX_REG		0xf1
+
+#define PM853_MFD_CELL	\
+	static const struct mfd_cell pm853[] = {				\
+		{								\
+			.name = "spacemit-regulator",				\
+		},								\
+	};
+
+#define PM853_REGMAP_CONFIG	\
+	static const struct regmap_config pm853_regmap_config = {	\
+		.reg_bits = 8,	\
+		.val_bits = 8,	\
+		.max_register = SPACEMIT_PM853_MAX_REG,			\
+		.cache_type = REGCACHE_RBTREE,	\
+	};
+
+/* regulator configuration */
+#define PM853_DESC(_id, _match, _supply, _nv, _vr, _vm, _er, _em, _lr)	\
+	SPM8XX_DESC_COMMON(_id, _match, _supply, _nv, _vr, _vm, _er, _em, _lr,	\
+			&pmic_dcdc_ldo_ops)
+
+#define PM853_DESC_SWITCH(_id, _match, _supply, _ereg, _emask)                \
+        SPM8XX_DESC_SWITCH_COM(_id, _match, _supply, _ereg, _emask,     \
+        0, 0, &pmic_switch_ops)
+
+#define PM853_BUCK_LINER_RANGE1						\
+static const struct linear_range pm853_buck_ranges1[] = {		\
+        REGULATOR_LINEAR_RANGE(480000, 0x0, 0x50, 10000),		\
+        REGULATOR_LINEAR_RANGE(1320000, 0x51, 0x7F, 40000),		\
+};
+
+#define PM853_BUCK_LINER_RANGE2						\
+static const struct linear_range pm853_buck_ranges2[] = {		\
+        REGULATOR_LINEAR_RANGE(600000, 0x0, 0x50, 12500),		\
+        REGULATOR_LINEAR_RANGE(1650000, 0x51, 0x7F, 50000),		\
+};
+
+#define PM853_LDO_LINER_RANGE1						\
+static const struct linear_range pm853_ldo_ranges1[] = {		\
+        REGULATOR_LINEAR_RANGE(1200000, 0x0, 0x6, 100000),		\
+        REGULATOR_LINEAR_RANGE(1850000, 0x7, 0x8, 50000),		\
+        REGULATOR_LINEAR_RANGE(2750000, 0x9, 0xc, 50000),		\
+        REGULATOR_LINEAR_RANGE(3000000, 13, 14, 100000),		\
+        REGULATOR_LINEAR_RANGE(3300000, 15, 15, 0),		\
+};
+
+#define PM853_LDO_LINER_RANGE2						\
+static const struct linear_range pm853_ldo_ranges2[] = {		\
+        REGULATOR_LINEAR_RANGE(1600000, 0x0, 0x3, 100000),		\
+};
+
+#define PM853_LDO_LINER_RANGE3						\
+static const struct linear_range pm853_ldo_ranges3[] = {		\
+        REGULATOR_LINEAR_RANGE(1200000, 0x0, 0xf, 50000),		\
+};
+
+#define PM853_LDO_LINER_RANGE4						\
+static const struct linear_range pm853_ldo_ranges4[] = {		\
+        REGULATOR_LINEAR_RANGE(1000000, 0x0, 0x7, 50000),		\
+};
+
+#define PM853_REGULATOR_DESC		\
+static const struct regulator_desc pm853_reg[] = {	\
+	/* BUCK */		\
+	PM853_DESC(PM853_ID_DCDC1, "DCDC_REG1", "vcc_sys",		\
+			128, PM853_BUCK1_VSEL_REG, PM853_BUCK1_VSEL_MSK,	\
+			PM853_LDO_BUCK_EN_REG0, PM853_BUCK1_EN_MSK,		\
+			pm853_buck_ranges1),	\
+	\
+	PM853_DESC(PM853_ID_DCDC2, "DCDC_REG2", "vcc_sys",		\
+			128, PM853_BUCK2_VSEL_REG, PM853_BUCK2_VSEL_MSK,	\
+			PM853_LDO_BUCK_EN_REG0, PM853_BUCK2_EN_MSK,		\
+			pm853_buck_ranges2),	\
+	\
+	PM853_DESC(PM853_ID_DCDC3, "DCDC_REG3", "vcc_sys",		\
+			128, PM853_BUCK3_VSEL_REG, PM853_BUCK3_VSEL_MSK,	\
+			PM853_LDO_BUCK_EN_REG0, PM853_BUCK3_EN_MSK,		\
+			pm853_buck_ranges2),	\
+	\
+	PM853_DESC(PM853_ID_DCDC4, "DCDC_REG4", "vcc_sys",		\
+			128, PM853_BUCK4_VSEL_REG, PM853_BUCK4_VSEL_MSK,	\
+			PM853_LDO_BUCK_EN_REG0, PM853_BUCK4_EN_MSK,		\
+			pm853_buck_ranges1),	\
+	\
+	PM853_DESC(PM853_ID_DCDC5, "DCDC_REG5", "vcc_sys",		\
+			128, PM853_BUCK5_VSEL_REG, PM853_BUCK5_VSEL_MSK,	\
+			PM853_LDO_BUCK_EN_REG0, PM853_BUCK5_EN_MSK,		\
+			pm853_buck_ranges2),	\
+	\
+	/* ALDO */	\
+	PM853_DESC(PM853_ID_LDO1, "LDO_REG1", "vcc_sys",			\
+			16, PM853_LDO1_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG0, PM853_LDO1_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO2, "LDO_REG2", "vcc_sys",			\
+			16, PM853_LDO2_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG0, PM853_LDO2_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO3, "LDO_REG3", "vcc_sys",			\
+			16, PM853_LDO3_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG0, PM853_LDO3_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO4, "LDO_REG4", "vcc_sys",			\
+			16, PM853_LDO4_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO4_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO5, "LDO_REG5", "vcc_sys",			\
+			4, PM853_LDO5_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO5_EN_MSK,		\
+			pm853_ldo_ranges2),					\
+	\
+	PM853_DESC(PM853_ID_LDO6, "LDO_REG6", "vcc_sys",			\
+			16, PM853_LDO6_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO6_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO7, "LDO_REG7", "dcdc2",			\
+			16, PM853_LDO7_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO7_EN_MSK,		\
+			pm853_ldo_ranges3),					\
+	\
+	PM853_DESC(PM853_ID_LDO8, "LDO_REG8", "vcc_sys",			\
+			16, PM853_LDO8_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO8_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO9, "LDO_REG9", "vcc_sys",			\
+			16, PM853_LDO9_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO9_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO10, "LDO_REG10", "vcc_sys",			\
+			16, PM853_LDO10_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO10_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO11, "LDO_REG11", "dcdc2",			\
+			16, PM853_LDO11_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG1, PM853_LDO11_EN_MSK,		\
+			pm853_ldo_ranges3),					\
+	\
+	PM853_DESC(PM853_ID_LDO12, "LDO_REG12", "vcc_sys",			\
+			16, PM853_LDO12_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO12_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO13, "LDO_REG13", "vcc_sys",			\
+			16, PM853_LDO13_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO13_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO14, "LDO_REG14", "vcc_sys",			\
+			16, PM853_LDO14_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO14_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO15, "LDO_REG15", "dcdc2",			\
+			16, PM853_LDO15_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO15_EN_MSK,		\
+			pm853_ldo_ranges3),					\
+	\
+	PM853_DESC(PM853_ID_LDO16, "LDO_REG16", "vcc_sys",			\
+			16, PM853_LDO16_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO16_EN_MSK,		\
+			pm853_ldo_ranges1),					\
+	\
+	PM853_DESC(PM853_ID_LDO17, "LDO_REG17", "dcdc5",			\
+			8, PM853_LDO17_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO17_EN_MSK,		\
+			pm853_ldo_ranges4),					\
+	\
+	PM853_DESC(PM853_ID_LDO18, "LDO_REG18", "dcdc2",			\
+			16, PM853_LDO18_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO18_EN_MSK,		\
+			pm853_ldo_ranges3),					\
+	\
+	PM853_DESC(PM853_ID_LDO19, "LDO_REG19", "dcdc5",			\
+			8, PM853_LDO19_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG2, PM853_LDO19_EN_MSK,		\
+			pm853_ldo_ranges4),					\
+	\
+	PM853_DESC(PM853_ID_LDO20, "LDO_REG20", "dcdc5",			\
+			8, PM853_LDO20_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG3, PM853_LDO20_EN_MSK,		\
+			pm853_ldo_ranges4),					\
+	\
+	PM853_DESC(PM853_ID_LDO21, "LDO_REG21", "dcdc2",			\
+			16, PM853_LDO21_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG3, PM853_LDO21_EN_MSK,		\
+			pm853_ldo_ranges3),					\
+	\
+	PM853_DESC(PM853_ID_LDO22, "LDO_REG22", "dcdc5",			\
+			8, PM853_LDO22_VSEL_REG, PM853_LDO_VSEL_MSK,		\
+			PM853_LDO_BUCK_EN_REG3, PM853_LDO22_EN_MSK,		\
+			pm853_ldo_ranges4),					\
+	\
+	/* PWR SWITCH */	\
+	PM853_DESC_SWITCH(PM853_ID_LDO5_SW, "SWITCH_REG1", "vcc_sys", PM853_LDO_BUCK_EN_REG3, PM853_SW_EN_MSK),		\
+};
+
+#endif
diff --git a/include/linux/mfd/spacemit/spacemit_pmic.h b/include/linux/mfd/spacemit/spacemit_pmic.h
index 79c1267bf82f..3bfd02b06300 100644
--- a/include/linux/mfd/spacemit/spacemit_pmic.h
+++ b/include/linux/mfd/spacemit/spacemit_pmic.h
@@ -4,6 +4,15 @@
 #include <linux/regulator/machine.h>
 #include <linux/regmap.h>
 
+/**
+ * this is only used for pm853
+ */
+struct spacemit_sub_pmic {
+	struct i2c_client *power_page;
+	struct regmap *power_regmap;
+	unsigned short power_page_addr;
+};
+
 struct spacemit_pmic {
 	struct i2c_client		*i2c;
 	struct regmap_irq_chip_data	*irq_data;
@@ -11,6 +20,11 @@ struct spacemit_pmic {
 	unsigned char			variant;
 	const struct regmap_config	*regmap_cfg;
 	const struct regmap_irq_chip	*regmap_irq_chip;
+
+	/**
+	 * this is only used for pm853
+	 */
+	struct spacemit_sub_pmic *sub;
 };
 
 struct pin_func_desc {
@@ -69,29 +83,27 @@ struct pin_config_desc {
 
 /* pmic ID configuration */
 #define SPM8821_ID			0x1
+#define PM853_ID			0x2
 
 /* common regulator defination */
-#define SPM8XX_DESC_COM(_id, _match, _supply, _min, _max, _step, _vreg,	\
-	_vmask, _ereg, _emask, _enval, _disval, _etime, _ops)		\
+#define SPM8XX_DESC_COMMON(_id, _match, _supply, _nv, _vr, _vm, _er, _em, _lr, _ops)       \
 	{								\
 		.name		= (_match),				\
 		.supply_name	= (_supply),				\
 		.of_match	= of_match_ptr(_match),			\
 		.regulators_node = of_match_ptr("regulators"),		\
+		.ops		= _ops,			\
 		.type		= REGULATOR_VOLTAGE,			\
 		.id		= (_id),				\
-		.n_voltages	= (((_max) - (_min)) / (_step) + 1),	\
+		.n_voltages     = (_nv),				\
 		.owner		= THIS_MODULE,				\
-		.min_uV		= (_min) * 1000,			\
-		.uV_step	= (_step) * 1000,			\
-		.vsel_reg	= (_vreg),				\
-		.vsel_mask	= (_vmask),				\
-		.enable_reg	= (_ereg),				\
-		.enable_mask	= (_emask),				\
-		.enable_val     = (_enval),				\
-		.disable_val     = (_disval),				\
-		.enable_time	= (_etime),				\
-		.ops		= _ops,			\
+		.vsel_reg       = (_vr),				\
+		.vsel_mask      = (_vm),				\
+		.enable_reg	= (_er),				\
+		.enable_mask	= (_em),				\
+		.volt_table	= NULL,					\
+		.linear_ranges	= (_lr),				\
+		.n_linear_ranges	= ARRAY_SIZE(_lr),		\
 	}
 
 #define SPM8XX_DESC_SWITCH_COM(_id, _match, _supply, _ereg, _emask,	\
@@ -160,5 +172,6 @@ struct pin_config_desc {
 	}
 
 #include "spm8821.h"
+#include "pm853.h"
 
 #endif /* __SPACEMIT_PMIC_H__ */
diff --git a/include/linux/mfd/spacemit/spm8821.h b/include/linux/mfd/spacemit/spm8821.h
index 353a4d17e3b3..1473ac595925 100644
--- a/include/linux/mfd/spacemit/spm8821.h
+++ b/include/linux/mfd/spacemit/spm8821.h
@@ -98,86 +98,104 @@ enum SPM8821_reg {
 	};
 
 /* regulator configuration */
-#define SPM8821_DESC(_id, _match, _supply, _min, _max, _step, _vreg,	\
-	_vmask, _ereg, _emask, _etime)					\
-	SPM8XX_DESC_COM(_id, _match, _supply, _min, _max, _step, _vreg,	\
-	_vmask, _ereg, _emask, 0, 0, _etime, &spm8821_dcdc_ops)
+#define SPM8821_DESC(_id, _match, _supply, _nv, _vr, _vm, _er, _em, _lr)	\
+	SPM8XX_DESC_COMMON(_id, _match, _supply, _nv, _vr, _vm, _er, _em, _lr,	\
+			&pmic_dcdc_ldo_ops)
 
-#define SPM8821_DESC_SWITCH(_id, _match, _supply, _ereg, _emask)		\
+#define SPM8821_DESC_SWITCH(_id, _match, _supply, _ereg, _emask)	\
 	SPM8XX_DESC_SWITCH_COM(_id, _match, _supply, _ereg, _emask,	\
-	0, 0, &spm8821_switch_ops)
+	0, 0, &pmic_switch_ops)
+
+
+#define SPM8821_BUCK_LINER_RANGE					\
+static const struct linear_range spm8821_buck_ranges[] = {		\
+        REGULATOR_LINEAR_RANGE(500000, 0x0, 0xaa, 5000),		\
+        REGULATOR_LINEAR_RANGE(1375000, 0xab, 0xfe, 25000),		\
+};
+
+
+#define SPM8821_LDO_LINER_RANGE						\
+static const struct linear_range spm8821_ldo_ranges[] = {		\
+        REGULATOR_LINEAR_RANGE(500000, 0xb, 0x7f, 25000),		\
+};
 
 #define SPM8821_REGULATOR_DESC		\
 static const struct regulator_desc spm8821_reg[] = {	\
 	/* BUCK */		\
 	SPM8821_DESC(SPM8821_ID_DCDC1, "DCDC_REG1", "vcc_sys",		\
-			500, 1770, 5, SPM8821_BUCK1_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
-			SPM8821_BUCK1_CTRL_REG, SMP8821_BUCK_EN_MASK, 0),	\
+			255, SPM8821_BUCK1_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
+			SPM8821_BUCK1_CTRL_REG, SMP8821_BUCK_EN_MASK,		\
+			spm8821_buck_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DCDC2, "DCDC_REG2", "vcc_sys",		\
-			500, 1770, 5, SPM8821_BUCK2_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
-			SPM8821_BUCK2_CTRL_REG, SMP8821_BUCK_EN_MASK, 0),	\
+			255, SPM8821_BUCK2_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
+			SPM8821_BUCK2_CTRL_REG, SMP8821_BUCK_EN_MASK,	\
+			spm8821_buck_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DCDC3, "DCDC_REG3", "vcc_sys",		\
-			500, 1770, 5, SPM8821_BUCK3_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
-			SPM8821_BUCK3_CTRL_REG, SMP8821_BUCK_EN_MASK, 0),	\
+			255, SPM8821_BUCK3_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
+			SPM8821_BUCK3_CTRL_REG, SMP8821_BUCK_EN_MASK,	\
+			spm8821_buck_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DCDC4, "DCDC_REG4", "vcc_sys",	\
-			500, 1770, 5, SPM8821_BUCK4_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
-			SPM8821_BUCK4_CTRL_REG, SMP8821_BUCK_EN_MASK, 0),	\
+			255, SPM8821_BUCK4_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
+			SPM8821_BUCK4_CTRL_REG, SMP8821_BUCK_EN_MASK,	\
+			spm8821_buck_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DCDC5, "DCDC_REG5", "vcc_sys",		\
-			500, 1770, 5, SPM8821_BUCK5_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
-			SPM8821_BUCK5_CTRL_REG, SMP8821_BUCK_EN_MASK, 0),	\
+			255, SPM8821_BUCK5_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
+			SPM8821_BUCK5_CTRL_REG, SMP8821_BUCK_EN_MASK,	\
+			spm8821_buck_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DCDC6, "DCDC_REG6", "vcc_sys",	\
-			500, 1770, 5, SPM8821_BUCK6_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
-			SPM8821_BUCK6_CTRL_REG, SMP8821_BUCK_EN_MASK, 0),	\
+			255, SPM8821_BUCK6_VSEL_REG, SPM8821_BUCK_VSEL_MASK,	\
+			SPM8821_BUCK6_CTRL_REG, SMP8821_BUCK_EN_MASK,	\
+			spm8821_buck_ranges),	\
 	/* ALDO */	\
 	SPM8821_DESC(SPM8821_ID_ALDO1, "ALDO_REG1", "vcc_sys",	\
-			500, 3400, 25, SPM8821_ALDO1_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
-			SPM8821_ALDO1_CTRL_REG, SPM8821_ALDO_EN_MASK, 0),	\
+			128, SPM8821_ALDO1_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
+			SPM8821_ALDO1_CTRL_REG, SPM8821_ALDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_ALDO2, "ALDO_REG2", "vcc_sys",	\
-			500, 3400, 25, SPM8821_ALDO2_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
-			SPM8821_ALDO2_CTRL_REG, SPM8821_ALDO_EN_MASK, 0),	\
+			128, SPM8821_ALDO2_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
+			SPM8821_ALDO2_CTRL_REG, SPM8821_ALDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_ALDO3, "ALDO_REG3", "vcc_sys",	\
-			500, 3400, 25, SPM8821_ALDO3_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
-			SPM8821_ALDO3_CTRL_REG, SPM8821_ALDO_EN_MASK, 0),	\
+			128, SPM8821_ALDO3_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
+			SPM8821_ALDO3_CTRL_REG, SPM8821_ALDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_ALDO4, "ALDO_REG4", "vcc_sys",	\
-			500, 3400, 25, SPM8821_ALDO4_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
-			SPM8821_ALDO4_CTRL_REG, SPM8821_ALDO_EN_MASK, 0),	\
+			128, SPM8821_ALDO4_VOLT_REG, SPM8821_ALDO_VSEL_MASK,	\
+			SPM8821_ALDO4_CTRL_REG, SPM8821_ALDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	/* DLDO */	\
 	SPM8821_DESC(SPM8821_ID_DLDO1, "DLDO_REG1", "dcdc5",		\
-			500, 3400, 25, SPM8821_DLDO1_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO1_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO1_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO1_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DLDO2, "DLDO_REG2", "dcdc5",	\
-			500, 3400, 25, SPM8821_DLDO2_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO2_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO2_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO2_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DLDO3, "DLDO_REG3", "dcdc5",		\
-			500, 3400, 25, SPM8821_DLDO3_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO3_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO3_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO3_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DLDO4, "DLDO_REG4", "dcdc5",		\
-			500, 3400, 25, SPM8821_DLDO4_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO4_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO4_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO4_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DLDO5, "DLDO_REG5", "dcdc5",		\
-			500, 3400, 25, SPM8821_DLDO5_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO5_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO5_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO5_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DLDO6, "DLDO_REG6", "dcdc5",		\
-			500, 3400, 25, SPM8821_DLDO6_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO6_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO6_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO6_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	SPM8821_DESC(SPM8821_ID_DLDO7, "DLDO_REG7", "dcdc5",		\
-			500, 3400, 25, SPM8821_DLDO7_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
-			SPM8821_DLDO7_CTRL_REG, SPM8821_DLDO_EN_MASK, 0),	\
+			128, SPM8821_DLDO7_VOLT_REG, SPM8821_DLDO_VSEL_MASK,	\
+			SPM8821_DLDO7_CTRL_REG, SPM8821_DLDO_EN_MASK, spm8821_ldo_ranges),	\
 	\
 	/* PWR SWITCH */	\
 	SPM8821_DESC_SWITCH(SPM8821_ID_SWITCH1, "SWITCH_REG1", "dcdc4", SPM8821_SWITCH_CTRL_REG, SPM8821_SWTICH_EN_MASK),		\
-- 
2.47.0

