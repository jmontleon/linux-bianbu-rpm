From 530c5c5b7c02c60483794aa915a77b9a5e4760ce Mon Sep 17 00:00:00 2001
From: fuqiang <qiang.fu@spacemit.com>
Date: Tue, 11 Jun 2024 17:14:47 +0800
Subject: [PATCH 0697/1203] k1: vpu: fix clk warning when kernel boot

    [    4.476230] ccu_mix_set_parent of vpu_clk timeout
    [    4.481629] ccu_mix_set_rate of vpu_clk timeout

Change-Id: I3bbf614829cebb1204e15130e0f7f2010ba87092
Signed-off-by: fuqiang <qiang.fu@spacemit.com>
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi        |  4 +-
 .../platform/spacemit/vpu_k1x/dev/mvx_dev.c   | 87 ++++++++++---------
 2 files changed, 45 insertions(+), 46 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index 9240bec8cc63..50fc9bc18e81 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -2276,13 +2276,11 @@ linlon-v5@c0500000 {
 			interrupts = <74>;
 			clocks = <&ccu CLK_VPU>;
 			clock-names = "vpu_clk";
-			assigned-clocks = <&ccu CLK_VPU>;
-			assigned-clock-parents = <&ccu CLK_PLL1_819>;
-			assigned-clock-rates = <819200000>;
 			power-domains = <&power K1X_PMU_VPU_PWR_DOMAIN>;
 			resets = <&reset RESET_VPU>;
 			interconnects = <&dram_range1>;
 			interconnect-names = "dma-mem";
+			clk,pm-runtime,no-sleep;
 			status = "okay";
 		};
 
diff --git a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
index ec949dfd3803..689607f97c51 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
@@ -301,6 +301,35 @@ static irqreturn_t irq_top(int irq,
 	return ret;
 }
 
+static void mvx_pm_disable_clk(struct device *dev)
+{
+	struct clk* clock;
+	struct mvx_dev_ctx *ctx;
+
+	ctx = dev_get_drvdata(dev);
+	clock = ctx->clock;
+
+	if (!IS_ERR_OR_NULL(clock))
+	{
+		clk_disable_unprepare(clock);
+	}
+}
+
+static void mvx_pm_enable_clk(struct device *dev)
+{
+	struct clk* clock;
+	struct mvx_dev_ctx *ctx;
+
+	ctx = dev_get_drvdata(dev);
+	clock = ctx->clock;
+
+	if (!IS_ERR_OR_NULL(clock))
+	{
+		clk_prepare_enable(clock);
+	}
+}
+
+
 static int mvx_dev_probe(struct device *dev,
 			 struct resource *iores,
 			 struct resource *irqres)
@@ -330,6 +359,7 @@ static int mvx_dev_probe(struct device *dev,
 		goto exit_reset;
 
 	reset_control_deassert(ctx->rst);
+	clk_set_rate(ctx->clock, 819200000);
 
 	/* Setup client ops callbacks. */
 	ctx->client_ops.get_hw_ver = get_hw_ver;
@@ -456,6 +486,7 @@ static int mvx_dev_remove(struct mvx_dev_ctx *ctx)
 	if (IS_ENABLED(CONFIG_DEBUG_FS))
 		debugfs_remove_recursive(ctx->dentry);
 
+	mvx_pm_disable_clk(ctx->dev);
 	reset_control_assert(ctx->rst);
 
 	devm_kfree(ctx->dev, ctx);
@@ -544,57 +575,27 @@ static void reset_hw(struct device *dev)
 
 static int b_backto_active;
 
-#if 0
-static void mvx_pm_disable_clk(struct device *dev)
-{
-    struct clk* clock;
-    struct mvx_dev_ctx *ctx;
-
-    ctx = dev_get_drvdata(dev);
-    clock = ctx->clock;
-
-    if (!IS_ERR_OR_NULL(clock))
-    {
-        clk_disable_unprepare(clock);
-    }
-}
-
-static void mvx_pm_enable_clk(struct device *dev)
-{
-    struct clk* clock;
-    struct mvx_dev_ctx *ctx;
-
-    ctx = dev_get_drvdata(dev);
-    clock = ctx->clock;
-
-    if (!IS_ERR_OR_NULL(clock))
-    {
-        clk_prepare_enable(clock);
-    }
-}
-#endif
-
 static int mvx_pm_poweron(struct device *dev)
 {
-    struct mvx_dev_ctx *ctx = dev_get_drvdata(dev);
+	struct mvx_dev_ctx *ctx = dev_get_drvdata(dev);
 
 	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_poweron");
-    //mvx_pm_enable_clk(dev);
-    reset_hw(dev);
-    mvx_sched_resume(&ctx->scheduler);
+	mvx_pm_enable_clk(dev);
+	reset_hw(dev);
+	mvx_sched_resume(&ctx->scheduler);
 
-    return 0;
+	return 0;
 }
 
 static int mvx_pm_poweroff(struct device *dev)
 {
-    struct mvx_dev_ctx *ctx = dev_get_drvdata(dev);
+	struct mvx_dev_ctx *ctx = dev_get_drvdata(dev);
 
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_poweroff");
-    mvx_sched_suspend(&ctx->scheduler);
-    //mvx_pm_disable_clk(dev);
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_poweroff");
+	mvx_sched_suspend(&ctx->scheduler);
+	mvx_pm_disable_clk(dev);
 
-    return 0;
+	return 0;
 }
 
 static int mvx_pm_suspend(struct device *dev)
@@ -627,15 +628,15 @@ static int mvx_pm_resume(struct device *dev)
 static int mvx_pm_runtime_suspend(struct device *dev)
 {
 	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_runtime_suspend");
-	//mvx_pm_disable_clk(dev);
+	mvx_pm_disable_clk(dev);
 	return 0;
 }
 
 static int mvx_pm_runtime_resume(struct device *dev)
 {
 	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_runtime_resume");
-	//mvx_pm_enable_clk(dev);
-	//reset_hw(dev);
+	mvx_pm_enable_clk(dev);
+	reset_hw(dev);
 
     return 0;
 }
-- 
2.47.0

