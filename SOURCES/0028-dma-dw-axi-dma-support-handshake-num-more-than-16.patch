From 43107223e3765dda03cd122c385ca21a2c39a5a1 Mon Sep 17 00:00:00 2001
From: yanhaodong <haodong.yan@spacemit.com>
Date: Wed, 24 May 2023 13:47:02 +0800
Subject: [PATCH 0028/1204] dma:dw-axi-dma support handshake num more than 16

each dma-use driver define its own burst_len(default:4)

Change-Id: I5d0b5143e87308e41048708eb1467ee959aed9c5
---
 arch/riscv/boot/dts/spacemit/k1-pro.dtsi      | 20 +++++++++++
 .../dma/dw-axi-dmac/dw-axi-dmac-platform.c    | 35 +++++++++++++++----
 drivers/dma/dw-axi-dmac/dw-axi-dmac.h         |  4 +++
 3 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
index 028601ce2f6f..593820fb82c1 100644
--- a/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-pro.dtsi
@@ -237,6 +237,26 @@ uart0: serial@2cea0000 {
 			status = "disabled";
 		};
 
+		dma: dma-controller@2ce40000 {
+                        compatible = "spacemit,k1pro-axi-dma";
+                        reg = <0x0 0x2ce40000 0x0 0x10000>;
+                        interrupt-parent = <&intc>;
+                        interrupts = <40>;
+                        clocks = <&ccu CLK_DMAC>,
+                                 <&ccu CLK_DUMMY>;
+                        clock-names = "core-clk", "cfgr-clk";
+                        resets = <&reset RESET_DMAC>;
+                        #dma-cells = <2>;
+                        dma-channels = <8>;
+                        snps,dma-masters = <1>;
+                        snps,data-width = <2>;
+                        snps,num-hs-if = <63>;
+                        snps,block-size = <65536 65536 65536 65536 65536 65536 65536 65536>;
+                        snps,priority = <0 1 2 3 4 5 6 7>;
+                        snps,axi-max-burst-len = <16>;
+                        status = "okay";
+		};
+
 		pwm: pwm@2cfc0000 {
 			compatible = "snp,pwm-dwc";
 			reg = <0x0 0x2cfc0000 0x0 0x10000>;
diff --git a/drivers/dma/dw-axi-dmac/dw-axi-dmac-platform.c b/drivers/dma/dw-axi-dmac/dw-axi-dmac-platform.c
index b23536645ff7..6d6b3febc01a 100644
--- a/drivers/dma/dw-axi-dmac/dw-axi-dmac-platform.c
+++ b/drivers/dma/dw-axi-dmac/dw-axi-dmac-platform.c
@@ -48,7 +48,7 @@
 	DMA_SLAVE_BUSWIDTH_64_BYTES)
 
 #define AXI_DMA_FLAG_HAS_APB_REGS	BIT(0)
-#define AXI_DMA_FLAG_HAS_RESETS		BIT(1)
+#define AXI_DMA_FLAG_HAS_RESETS 	BIT(1)
 #define AXI_DMA_FLAG_USE_CFG2		BIT(2)
 
 static inline void
@@ -102,8 +102,7 @@ static inline void axi_chan_config_write(struct axi_dma_chan *chan,
 
 	cfg_lo = (config->dst_multblk_type << CH_CFG_L_DST_MULTBLK_TYPE_POS |
 		  config->src_multblk_type << CH_CFG_L_SRC_MULTBLK_TYPE_POS);
-	if (chan->chip->dw->hdata->reg_map_8_channels &&
-	    !chan->chip->dw->hdata->use_cfg2) {
+	if (!chan->chip->dw->hdata->use_cfg2) {
 		cfg_hi = config->tt_fc << CH_CFG_H_TT_FC_POS |
 			 config->hs_sel_src << CH_CFG_H_HS_SEL_SRC_POS |
 			 config->hs_sel_dst << CH_CFG_H_HS_SEL_DST_POS |
@@ -721,8 +720,14 @@ static int dw_axi_dma_set_hw_desc(struct axi_dma_chan *chan,
 
 	hw_desc->lli->block_ts_lo = cpu_to_le32(block_ts - 1);
 
-	ctllo |= DWAXIDMAC_BURST_TRANS_LEN_4 << CH_CTL_L_DST_MSIZE_POS |
-		 DWAXIDMAC_BURST_TRANS_LEN_4 << CH_CTL_L_SRC_MSIZE_POS;
+	if (chan->fixed_burst_trans_len == true)
+                burst_trans_len = chan->burst_trans_len;
+        else
+                burst_trans_len = DWAXIDMAC_BURST_TRANS_LEN_4;
+
+        ctllo |= burst_trans_len << CH_CTL_L_DST_MSIZE_POS |
+                 burst_trans_len << CH_CTL_L_SRC_MSIZE_POS;
+
 	hw_desc->lli->ctl_lo = cpu_to_le32(ctllo);
 
 	set_desc_src_master(hw_desc);
@@ -1370,6 +1375,13 @@ static struct dma_chan *dw_axi_dma_of_xlate(struct of_phandle_args *dma_spec,
 
 	chan = dchan_to_axi_dma_chan(dchan);
 	chan->hw_handshake_num = dma_spec->args[0];
+
+	/*some per may need fixed-burst_trans_len*/
+	if (dma_spec->args_count == 2  && dma_spec->args[1] > 0) {
+		chan->fixed_burst_trans_len = true;
+		chan->burst_trans_len = dma_spec->args[1];
+	}
+
 	return dchan;
 }
 
@@ -1440,6 +1452,14 @@ static int parse_device_properties(struct axi_dma_chip *chip)
 		chip->dw->hdata->axi_rw_burst_len = tmp;
 	}
 
+	/* get number of handshak interface and configure multi reg */
+	ret = device_property_read_u32(dev, "snps,num-hs-if", &tmp);
+        if (!ret)
+                chip->dw->hdata->nr_hs_if = tmp;
+        if (chip->dw->hdata->nr_channels > DMA_REG_MAP_CH_REF ||
+			chip->dw->hdata->nr_hs_if > DMA_REG_MAP_HS_IF_REF)
+                chip->dw->hdata->use_cfg2 = true;
+
 	return 0;
 }
 
@@ -1508,8 +1528,6 @@ static int dw_probe(struct platform_device *pdev)
 			return ret;
 	}
 
-	chip->dw->hdata->use_cfg2 = !!(flags & AXI_DMA_FLAG_USE_CFG2);
-
 	chip->core_clk = devm_clk_get(chip->dev, "core-clk");
 	if (IS_ERR(chip->core_clk))
 		return PTR_ERR(chip->core_clk);
@@ -1669,6 +1687,9 @@ static const struct of_device_id dw_dma_of_id_table[] = {
 	}, {
 		.compatible = "starfive,jh8100-axi-dma",
 		.data = (void *)AXI_DMA_FLAG_HAS_RESETS,
+	}, {
+		.compatible = "spacemit,k1pro-axi-dma",
+		.data = (void *)AXI_DMA_FLAG_HAS_RE
 	},
 	{}
 };
diff --git a/drivers/dma/dw-axi-dmac/dw-axi-dmac.h b/drivers/dma/dw-axi-dmac/dw-axi-dmac.h
index b842e6a8d90d..0546483a56cf 100644
--- a/drivers/dma/dw-axi-dmac/dw-axi-dmac.h
+++ b/drivers/dma/dw-axi-dmac/dw-axi-dmac.h
@@ -25,6 +25,7 @@
 struct dw_axi_dma_hcfg {
 	u32	nr_channels;
 	u32	nr_masters;
+	u32	nr_hs_if;
 	u32	m_data_width;
 	u32	block_size[DMAC_MAX_CHANNELS];
 	u32	priority[DMAC_MAX_CHANNELS];
@@ -41,6 +42,7 @@ struct axi_dma_chan {
 	void __iomem			*chan_regs;
 	u8				id;
 	u8				hw_handshake_num;
+	s8				burst_trans_len;
 	atomic_t			descs_allocated;
 
 	struct dma_pool			*desc_pool;
@@ -49,6 +51,7 @@ struct axi_dma_chan {
 	struct axi_dma_desc		*desc;
 	struct dma_slave_config		config;
 	enum dma_transfer_direction	direction;
+	bool 				fixed_burst_trans_len;
 	bool				cyclic;
 	/* these other elements are all protected by vc.lock */
 	bool				is_paused;
@@ -205,6 +208,7 @@ static inline struct axi_dma_chan *dchan_to_axi_dma_chan(struct dma_chan *dchan)
 #define DMA_APB_HS_SEL_MASK	0xFF /* HW handshake select masks */
 #define MAX_BLOCK_SIZE		0x1000 /* 1024 blocks * 4 bytes data width */
 #define DMA_REG_MAP_CH_REF	0x08 /* Channel count to choose register map */
+#define DMA_REG_MAP_HS_IF_REF	0x10 /* handshake num to choose register map */
 
 /* DMAC_CFG */
 #define DMAC_EN_POS			0
-- 
2.47.0

