From 2ebf5ceaca8daf9405ae7e3eeda2e033617c00b8 Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Wed, 14 Aug 2024 21:40:07 +0800
Subject: [PATCH 1070/1448] k1:muse_book:support hall to wakeup system

Change-Id: I6bfd078334ade395366f115d57bdf4769e560ecf
---
 .../boot/dts/spacemit/k1-x_MUSE-Book.dts      | 15 ++-
 drivers/soc/spacemit/spacemit_lid.c           | 91 ++++++++-----------
 2 files changed, 48 insertions(+), 58 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
index 570987cc8527..7c16c526e860 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
@@ -140,8 +140,11 @@ vcc4v0_baseboard: vcc4v0-baseboard {
 
 	spacemit_lid:spacemit_lid {
 		compatible = "spacemit,k1x-lid";
-		scan-interval-ms = <1000>;
-		lid-gpios     = <&gpio 74 0>;
+		lid-gpios = <&gpio 74 0>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_hall_wakeup>;
+		interrupt-parent = <&pinctrl>;
+		interrupts = <300>;
 	};
 
 	rf_pwrseq: rf-pwrseq {
@@ -555,7 +558,6 @@ &range GPIO_66  2 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
 		&range PRI_TDI  2 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
 		&range PRI_TCK  1 (MUX_MODE1 | EDGE_NONE | PULL_DOWN | PAD_1V8_DS2)
 		&range PRI_TDO  1 (MUX_MODE1 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
-		&range GPIO_74  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_1V8_DS2)
 		&range GPIO_76  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
 		&range GPIO_78  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
 		&range GPIO_80  1 (MUX_MODE0 | EDGE_NONE | PULL_UP   | PAD_3V_DS4)
@@ -577,6 +579,12 @@ K1X_PADCONF(GPIO_47,   MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0
 			K1X_PADCONF(GPIO_48,   MUX_MODE1, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_uart0_rx */
 		>;
 	};
+
+	pinctrl_hall_wakeup: hall_wakeup_grp {
+		pinctrl-single,pins =<
+			K1X_PADCONF(GPIO_74, MUX_MODE0, (EDGE_FALL | EDGE_RISE | PULL_DOWN | PAD_3V_DS2))   /* hall edge detect */
+		>;
+	};
 };
 
 &gpio{
@@ -585,7 +593,6 @@ &pinctrl 49  GPIO_49  2
 		&pinctrl 58  GPIO_58  1
 		&pinctrl 63  GPIO_63  5
 		&pinctrl 70  PRI_TDI  4
-		&pinctrl 74  GPIO_74  1
 		&pinctrl 76  GPIO_76  1
 		&pinctrl 78  GPIO_78  1
 		&pinctrl 80  GPIO_80  4
diff --git a/drivers/soc/spacemit/spacemit_lid.c b/drivers/soc/spacemit/spacemit_lid.c
index 37031d806aeb..1046afe8af1f 100644
--- a/drivers/soc/spacemit/spacemit_lid.c
+++ b/drivers/soc/spacemit/spacemit_lid.c
@@ -9,95 +9,78 @@
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/pm_wakeirq.h>
 #include <linux/gpio/consumer.h>
 #include <linux/property.h>
 #include <linux/of.h>
 
-/**
- * struct gpio_lid
- *
- * This struct must be added to the platform_device in the board code.
- * It is used by the gpio_lid driver to setup GPIO lines and to
- * calculate mouse movement.
- */
-struct gpio_lid {
-	u32 scan_ms;
-	struct gpio_desc *blid;
-	int old_state;
+struct _hall {
+	int irq;
+	struct input_dev *input;
+	struct gpio_desc *gpio;
 };
 
-/*
- * Timer function which is run every scan_ms ms when the device is opened.
- * The dev input variable is set to the input_dev pointer.
- */
-static void spacemit_lid_scan(struct input_dev *input)
+static irqreturn_t hall_wakeup_detect(int irq, void *arg)
 {
-	struct gpio_lid *gpio = input_get_drvdata(input);
-	int state = 0;
+	unsigned char state = 0;
+	struct _hall *hall = (struct _hall *)arg;
 
-	if (gpio->blid)
-		state = gpiod_get_value(gpio->blid);
+	state = gpiod_get_value(hall->gpio);
+	input_report_switch(hall->input, SW_LID, !state);
+ 	input_sync(hall->input);
 
-	if (gpio->old_state != state) {
-		dev_warn(&input->dev, "spacemit_lid: state = %d\n", state);
-		gpio->old_state = state;
- 		input_report_switch(input, SW_LID, !state);
- 		input_sync(input);
-	}
+	return IRQ_HANDLED;
 }
 
 static int spacemit_lid_probe(struct platform_device *pdev)
 {
-	struct device *dev = &pdev->dev;
-	struct gpio_lid *glid;
+	struct _hall *hall;
 	struct input_dev *input;
 	int error;
 
-	glid = devm_kzalloc(dev, sizeof(*glid), GFP_KERNEL);
-	if (!glid)
+	hall = devm_kzalloc(&pdev->dev, sizeof(*hall), GFP_KERNEL);
+	if (!hall)
 		return -ENOMEM;
 
-	/* Assign some default scanning time */
-	error = device_property_read_u32(dev, "scan-interval-ms", &glid->scan_ms);
-	if (error || glid->scan_ms == 0) {
-		dev_warn(dev, "invalid scan time, set to 1000 ms\n");
-		glid->scan_ms = 1000;
+	hall->gpio = devm_gpiod_get(&pdev->dev, "lid", GPIOD_IN);
+	if (IS_ERR_OR_NULL(hall->gpio)) {
+		pr_err("get gpio error\n");
+		return PTR_ERR(hall->gpio);
 	}
 
-	glid->blid = devm_gpiod_get(dev, "lid", GPIOD_IN);
-	if (IS_ERR(glid->blid))
-		return PTR_ERR(glid->blid);
+	hall->irq = platform_get_irq(pdev, 0);
+	if (hall->irq < 0)
+		return -EINVAL;
+
+	error = devm_request_any_context_irq(&pdev->dev, hall->irq,
+			hall_wakeup_detect,
+			IRQF_ONESHOT | IRQF_TRIGGER_NONE,
+			"hall-detect", (void *)hall);
+	if (error) {
+		pr_err("request hall pinctrl dectect failed\n");
+		return -EINVAL;
+	}
 
-	glid->old_state = 0;
 
-	input = devm_input_allocate_device(dev);
+	input = devm_input_allocate_device(&pdev->dev);
 	if (!input)
 		return -ENOMEM;
 
 	input->name = pdev->name;
 	input->id.bustype = BUS_HOST;
+	input_set_capability(input, EV_SW, SW_LID);
 
-	input_set_drvdata(input, glid);
-
-	if (glid->blid)
-		input_set_capability(input, EV_SW, SW_LID);
+	input_set_drvdata(input, hall);
 
-	error = input_setup_polling(input, spacemit_lid_scan);
-	if (error)
-		return error;
-
-	input_set_poll_interval(input, glid->scan_ms);
+	hall->input = input;
 
 	error = input_register_device(input);
 	if (error) {
-		dev_err(dev, "could not register input device\n");
+		dev_err(&pdev->dev, "could not register input device\n");
 		return error;
 	}
 
-	dev_dbg(dev, "%d ms scan time, buttons: %s\n",
-		glid->scan_ms,
-		glid->blid ? "" : "lid");
-
 	return 0;
 }
 
-- 
2.47.0

