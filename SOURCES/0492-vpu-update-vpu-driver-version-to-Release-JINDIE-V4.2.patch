From 662a28eace37bfb66633d347eec0b9912bfc602d Mon Sep 17 00:00:00 2001
From: fuqiang <qiang.fu@spacemit.com>
Date: Thu, 14 Mar 2024 15:13:56 +0800
Subject: [PATCH 0492/1448] vpu:update vpu driver version to
 Release-JINDIE-V4.2 on 2024-03-13 15:36

Change-Id: I4eac4b8afd92283bcf4115e87a392ed60f9a0e04
---
 .../platform/spacemit/vpu_k1x/dev/mvx_dev.c   |  2 ++
 .../platform/spacemit/vpu_k1x/dev/mvx_lsid.c  |  5 +++--
 .../spacemit/vpu_k1x/if/mvx_firmware_v2.c     |  8 ++++----
 .../spacemit/vpu_k1x/if/mvx_session.c         |  4 +++-
 .../vpu_k1x/if/v4l2/mvx_v4l2_buffer.c         |  3 +++
 .../vpu_k1x/if/v4l2/mvx_v4l2_vidioc.c         | 20 +++++++++++++++++++
 6 files changed, 35 insertions(+), 7 deletions(-)

diff --git a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
index 30270aa54476..e7ba28352b0f 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
@@ -499,6 +499,8 @@ static int mvx_pdev_probe(struct platform_device *pdev)
 
 	pm_runtime_enable(&pdev->dev);
 
+	dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(34));
+
 	ret = mvx_dev_probe(&pdev->dev, &iores, &irqres);
 	if (ret != 0)
 		pm_runtime_disable(&pdev->dev);
diff --git a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_lsid.c b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_lsid.c
index 4750eb65f3de..0a28863a38b7 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_lsid.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_lsid.c
@@ -292,6 +292,7 @@ void mvx_lsid_jobqueue_remove(struct mvx_lsid *lsid)
 	uint32_t jobqueue;
 	int i;
 	int j;
+	uint32_t ncores = mvx_hwreg_read(hwreg, MVX_HWREG_NCORES);
 
 	/* Disable scheduling. */
 	mvx_hwreg_write(hwreg, MVX_HWREG_ENABLE, 0);
@@ -306,8 +307,8 @@ void mvx_lsid_jobqueue_remove(struct mvx_lsid *lsid)
 
 	/* Blank out remaining job entries. */
 	for (; j < MVE_JOBQUEUE_NJOBS; j++)
-		jobqueue = set_lsid_ncores(jobqueue, i,
-					   MVE_JOBQUEUE_JOB_INVALID, 0);
+		jobqueue = set_lsid_ncores(jobqueue, j,
+					   MVE_JOBQUEUE_JOB_INVALID, ncores);
 
 	mvx_hwreg_write(hwreg, MVX_HWREG_JOBQUEUE, jobqueue);
 
diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_firmware_v2.c b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_firmware_v2.c
index 83161779fc7b..2de4852395c4 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_firmware_v2.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_firmware_v2.c
@@ -1204,7 +1204,7 @@ static int put_buffer_frame(struct mvx_fw *fw,
 	f.frame_flags |= (buf->flags & MVX_BUFFER_FRAME_FLAG_ROTATION_MASK) >> 8;
 	f.frame_flags |= (buf->flags & MVX_BUFFER_FRAME_FLAG_MIRROR_MASK) >> 8;
 	f.frame_flags |= (buf->flags & MVX_BUFFER_FRAME_FLAG_SCALING_MASK) >> 8;
-	if (rotation == 1 || rotation == 3) {
+	if (buf->dir == MVX_DIR_OUTPUT && (rotation == 1 || rotation == 3)) {
 		uint8_t nplanes = 0;
 		unsigned int stride90[MVX_BUFFER_NPLANES][2];
 		int i;
@@ -1318,12 +1318,12 @@ static int put_buffer_frame(struct mvx_fw *fw,
 				planar->stride[i] = stride;
 				planar->plane_bot[i] = planar->plane_top[i] +
 									(round_up(stride, 2) >> stride_shift);
-                if (rotation == 1 || rotation == 3) {
+                if (buf->dir == MVX_DIR_OUTPUT && (rotation == 1 || rotation == 3)) {
                     planar->stride[i] = strideRot[i];
                 }
 			} else {
 				// frame mode
-                if (rotation == 1 || rotation == 3){
+                if (buf->dir == MVX_DIR_OUTPUT && (rotation == 1 || rotation == 3)) {
                     planar->stride[i] = strideRot[i];
                 } else {
                     planar->stride[i] = plane->stride;
@@ -1334,7 +1334,7 @@ static int put_buffer_frame(struct mvx_fw *fw,
 		}
 
 #endif
-		if (rotation == 1 || rotation == 3){
+		if (buf->dir == MVX_DIR_OUTPUT && (rotation == 1 || rotation == 3)) {
             planar->max_frame_width = buf->height;
             planar->max_frame_height = buf->width;
         } else {
diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c
index 76739a3b1edc..da54ecfc16ea 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c
@@ -2258,8 +2258,10 @@ int mvx_session_streamoff(struct mvx_session *session,
         }
     }
 dequeue_buffers:
-	if (ret != 0)
+	if (ret != 0) {
+		MVX_SESSION_WARN(session, "stream off error. ret=%d. mvx_session=%p", ret, session);
 		session_unregister(session);
+	}
 
 	/* Return buffers in pending queue. */
 	list_for_each_entry_safe(buf, tmp, &port->buffer_queue, head) {
diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_buffer.c b/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_buffer.c
index c2f24c768d72..5cbf8595ac5f 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_buffer.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_buffer.c
@@ -181,7 +181,9 @@ static int update_mvx_flags(struct mvx_buffer *buf,
 {
 	struct vb2_v4l2_buffer *vb2_v4l2 = to_vb2_v4l2_buffer(b);
 	__u32 flags = vb2_v4l2->flags;
+	__u32 rtt_flags = (buf->flags & MVX_BUFFER_FRAME_FLAG_ROTATION_MASK);
 	buf->flags = 0;
+
     if (V4L2_TYPE_IS_OUTPUT(b->type) != false && get_bytesused(b) == 0)
         flags |= V4L2_BUF_FLAG_LAST;
 
@@ -243,6 +245,7 @@ static int update_mvx_flags(struct mvx_buffer *buf,
                     buf->flags |= MVX_BUFFER_FRAME_FLAG_MIRROR_VERT;
                 }
             }
+            buf->flags |= rtt_flags;
             if ((flags & V4L2_BUF_FLAG_MVX_BUFFER_EPR) == V4L2_BUF_FLAG_MVX_BUFFER_EPR) {
                 buf->flags |= MVX_BUFFER_FRAME_FLAG_GENERAL;
             }
diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_vidioc.c b/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_vidioc.c
index 71665d391827..625d3e738b0c 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_vidioc.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/v4l2/mvx_v4l2_vidioc.c
@@ -508,6 +508,7 @@ static int buf_init(struct vb2_buffer *b)
 	struct mvx_v4l2_port *vport = vb2_get_drv_priv(q);
 	struct mvx_v4l2_session *vsession = vport->vsession;
 	struct mvx_session *session = &vsession->session;
+	unsigned int flags = vbuf->buf.flags;
 
 	MVX_SESSION_VERBOSE(session,
 			    "v4l2: Initialize buffer. vb=%p, type=%u, index=%u, num_planes=%u.",
@@ -533,6 +534,8 @@ static int buf_init(struct vb2_buffer *b)
 	ret = mvx_v4l2_buffer_construct(vbuf, vsession, vport->dir,
 					b->num_planes, sgt);
 
+	vbuf->buf.flags = flags;
+
 	return ret;
 }
 
@@ -1472,6 +1475,23 @@ int mvx_v4l2_vidioc_qbuf(struct file *file,
                 v4l2_general->config.blk_cfg_type,v4l2_general->config.blk_cfgs.rows_uncomp.n_cols_minus1,
                 v4l2_general->config.blk_cfgs.rows_uncomp.n_rows_minus1);
     }
+
+    if (dir == MVX_DIR_INPUT && V4L2_TYPE_IS_MULTIPLANAR(b->type)) {
+        vb = vport->vb2_queue.bufs[b->index];
+        vbuf = vb2_to_mvx_v4l2_buffer(vb);
+        buf = &vbuf->buf;
+
+        buf->flags = 0;
+        if ((b->reserved2 & V4L2_BUF_FRAME_FLAG_ROTATION_90) == V4L2_BUF_FRAME_FLAG_ROTATION_90) {
+            buf->flags |= MVX_BUFFER_FRAME_FLAG_ROTATION_90;
+        }
+        if ((b->reserved2 & V4L2_BUF_FRAME_FLAG_ROTATION_180) == V4L2_BUF_FRAME_FLAG_ROTATION_180) {
+           buf->flags |= MVX_BUFFER_FRAME_FLAG_ROTATION_180;
+        }
+        if ((b->reserved2 & V4L2_BUF_FRAME_FLAG_ROTATION_270) == V4L2_BUF_FRAME_FLAG_ROTATION_270) {
+            buf->flags |= MVX_BUFFER_FRAME_FLAG_ROTATION_270;
+        }
+    }
 	ret = vb2_qbuf(&vport->vb2_queue, NULL, b);
 	mutex_unlock(&vsession->mutex);
 
-- 
2.47.0

