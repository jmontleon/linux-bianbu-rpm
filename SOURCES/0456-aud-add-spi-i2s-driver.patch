From 9b175c2c485725729764dd9c85d6adcea01cd4d3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Cweijinmei=E2=80=9D?= <jinmei.wei@spacemit.com>
Date: Thu, 7 Mar 2024 11:01:49 +0800
Subject: [PATCH 0456/1205] aud: add spi-i2s driver

Change-Id: Icba4775f27b54df5ad884cc4051709189c3ab80d
---
 sound/soc/spacemit/Makefile           |   1 +
 sound/soc/spacemit/spacemit-snd-spi.c | 465 ++++++++++++++++++++++++++
 sound/soc/spacemit/spacemit-snd-spi.h | 135 ++++++++
 3 files changed, 601 insertions(+)
 create mode 100755 sound/soc/spacemit/spacemit-snd-spi.c
 create mode 100755 sound/soc/spacemit/spacemit-snd-spi.h

diff --git a/sound/soc/spacemit/Makefile b/sound/soc/spacemit/Makefile
index 7dd04de40ea9..448cb5ff2394 100644
--- a/sound/soc/spacemit/Makefile
+++ b/sound/soc/spacemit/Makefile
@@ -1,3 +1,4 @@
 snd-soc-spacemit-objs := spacemit-snd-sspa.o \
+			spacemit-snd-spi.o \
 			spacemit-snd-card.o spacemit-snd-pcm-dma.o
 obj-$(CONFIG_SND_SOC_SPACEMIT) += snd-soc-spacemit.o
diff --git a/sound/soc/spacemit/spacemit-snd-spi.c b/sound/soc/spacemit/spacemit-snd-spi.c
new file mode 100755
index 000000000000..4b90cd091041
--- /dev/null
+++ b/sound/soc/spacemit/spacemit-snd-spi.c
@@ -0,0 +1,465 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2024 SPACEMIT
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/clk.h>
+#include <linux/slab.h>
+#include <linux/io.h>
+#include <linux/dmaengine.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/initval.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
+#include "spacemit-snd-spi.h"
+
+static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt);
+
+//APB Clock/Reset Control Register
+#define APB_CLK_BASE        0xD4015000
+#define APB_SSP0_CLK_RST    0x80
+#define APB_SSP1_CLK_RST    0x84
+#define APB_AIB_CLK_RST     0x3C
+
+#define FNCLKSEL_6p5M       (0x0 << 4)
+#define FNCLKSEL_13M        (0x1 << 4)
+#define FNCLKSEL_26M        (0x2 << 4)
+#define FNCLKSEL_52M        (0x3 << 4)
+#define FNCLKSEL_3p25M      (0x4 << 4)
+#define FNCLKSEL_1p625M     (0x5 << 4)
+#define FNCLKSEL_812p5M     (0x6 << 4)
+#define FNCLKSEL_AUDIO      (0x7 << 4)
+#define CLK_ON_NORST        (0x3 << 0)
+#define CLK_ON_RST          (0x7 << 0)
+#define CLK_ON_26M          (CLK_ON_NORST | FNCLKSEL_26M)
+#define CLK_ON_6p5M         (CLK_ON_NORST | FNCLKSEL_6p5M)
+#define CLK_ON_I2S          ((0x1<<3) | CLK_ON_NORST | FNCLKSEL_AUDIO)
+
+//I2S CLK
+#define  PMUMAIN_BASE       0xD4050000
+#define  ISCCR1             0x44
+#define  SYSCLK_EN          (0x1 << 31)
+#define  BITCLK_EN          (0x1 << 29)
+#define  SYSCLK_BASE_156M   (0x1 << 30)
+#define  SYSCLK_BASE_26M    (0x0 << 30)
+#define  BITCLK_DIV_468     (0x0 << 27)
+#define  FRAME_48K_I2S      (0x4 << 15)
+
+/*
+ * ssp:sspa audio private data
+ */
+ struct ssp_device {
+	struct platform_device *pdev;
+	struct list_head	node;
+
+	struct clk	*clk;
+	void __iomem	*mmio_base[2];
+	void __iomem	*mmio_ctrl_base;
+	void __iomem	*apb_clk_base;
+	void __iomem	*pmumain;
+	unsigned long	phys_base;
+
+	const char	*label;
+	int		port_id;
+	int		type;
+	int		use_count;
+	int		irq;
+
+	struct device_node	*of_node;
+};
+
+struct sspa_priv {
+	struct ssp_device *sspa;
+	struct snd_dmaengine_dai_dma_data *dma_params;
+	struct clk *audio_clk;
+	struct clk *sysclk;
+	int dai_fmt;
+	int dai_id_pre;
+	int running_cnt;
+};
+
+static void mmp_sspa_write_reg(struct ssp_device *sspa, u32 reg, u32 val, int id_dai)
+{
+	__raw_writel(val, sspa->mmio_base[id_dai] + reg);
+}
+
+static u32 mmp_sspa_read_reg(struct ssp_device *sspa, u32 reg, int id_dai)
+{
+	return __raw_readl(sspa->mmio_base[id_dai] + reg);
+}
+
+static int mmp_sspa_startup(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	struct sspa_priv *priv = snd_soc_dai_get_drvdata(dai);
+	struct ssp_device *sspa = priv->sspa;
+	unsigned int isccr1 = 0;
+
+	pr_info("%s\n", __FUNCTION__);
+
+	/*clk*/
+	pr_debug("isccr1:%x", __raw_readl(sspa->pmumain + ISCCR1));
+	__raw_writel((SYSCLK_BASE_156M | BITCLK_DIV_468| FRAME_48K_I2S | 200), sspa->pmumain + ISCCR1);
+
+	isccr1 = __raw_readl(sspa->pmumain + ISCCR1);
+	__raw_writel((SYSCLK_EN | BITCLK_EN | isccr1), sspa->pmumain + ISCCR1);
+	if (dai->id == 0) //i2s0
+	{
+		//__raw_writel(CLK_ON_RST, sspa->apb_clk_base + APB_SSP0_CLK_RST);
+		__raw_writel(CLK_ON_I2S, sspa->apb_clk_base + APB_SSP0_CLK_RST);
+	} else {          //i2s1
+		//__raw_writel(CLK_ON_RST, sspa->apb_clk_base + APB_SSP1_CLK_RST);
+		__raw_writel(CLK_ON_I2S, sspa->apb_clk_base + APB_SSP1_CLK_RST);
+	}
+
+	pr_debug("isccr1 :%x", __raw_readl(sspa->pmumain + ISCCR1));
+
+	mmp_sspa_set_dai_fmt(dai, SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_I2S);
+
+	return 0;
+}
+
+static void mmp_sspa_shutdown(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+
+}
+
+static int mmp_sspa_set_dai_sysclk(struct snd_soc_dai *cpu_dai,
+				    int clk_id, unsigned int freq, int dir)
+{
+	return 0;
+}
+
+static int mmp_sspa_set_dai_pll(struct snd_soc_dai *cpu_dai, int pll_id,
+				 int source, unsigned int freq_in,
+				 unsigned int freq_out)
+{
+	return 0;
+}
+
+/*
+ * Set up the sspa dai format. The sspa port must be inactive
+ * before calling this function as the physical
+ * interface format is changed.
+ */
+static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai,
+				 unsigned int fmt)
+{
+	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(cpu_dai);
+	struct ssp_device *sspa = sspa_priv->sspa;
+	unsigned int ssp_top_cfg=0, ssp_fifo_cfg=0, ssp_int_en_cfg=0,ssp_to_cfg=0, ssp_psp_cfg=0, ssp_net_work_ctrl=0;
+	int dai_id = cpu_dai->id;
+
+	pr_info("%s, fmt=0x%x, dai_id=0x%x\n", __FUNCTION__, fmt, dai_id);
+
+	if ((sspa_priv->dai_fmt == fmt) & (sspa_priv->dai_id_pre == dai_id) & (mmp_sspa_read_reg(sspa, PSP_CTRL, dai_id)))
+		return 0;
+
+	ssp_top_cfg  = TOP_TRAIL_DMA | DW_32BYTE | TOP_SFRMDIR_M | TOP_SCLKDIR_M | TOP_FRF_PSP;
+	ssp_fifo_cfg = FIFO_RSRE | FIFO_TSRE | FIFO_RX_THRES_15 | FIFO_TX_THRES_15;
+
+	if ((mmp_sspa_read_reg(sspa, TOP_CTRL, dai_id) & TOP_SSE)) {
+		pr_err("can't change hardware dai format: stream is in use\n");
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		ssp_top_cfg |= TOP_SFRMDIR_M;
+		ssp_top_cfg |= TOP_SCLKDIR_M;
+		break;
+	case SND_SOC_DAIFMT_CBM_CFM:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+		ssp_top_cfg |= TOP_FRF_PSP;
+		ssp_psp_cfg = (0x10<<12) | (0x1<<3);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	mmp_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg, dai_id);
+	mmp_sspa_write_reg(sspa, PSP_CTRL, ssp_psp_cfg, dai_id);
+	mmp_sspa_write_reg(sspa, INT_EN, ssp_int_en_cfg, dai_id);
+	mmp_sspa_write_reg(sspa, TO, ssp_to_cfg, dai_id);
+	mmp_sspa_write_reg(sspa, FIFO_CTRL, ssp_fifo_cfg, dai_id);
+	mmp_sspa_write_reg(sspa, NET_WORK_CTRL, ssp_net_work_ctrl, dai_id);
+
+	pr_info("TOP_CTRL=0x%x,\n PSP_CTRL=0x%x,\n INT_EN=0x%x,\n TO=0x%x,\n FIFO_CTRL=0x%x,\n,NET_WORK_CTRL=0x%x",
+				mmp_sspa_read_reg(sspa, TOP_CTRL, dai_id),
+				mmp_sspa_read_reg(sspa, PSP_CTRL, dai_id),
+				mmp_sspa_read_reg(sspa, INT_EN, dai_id),
+				mmp_sspa_read_reg(sspa, TO, dai_id),
+				mmp_sspa_read_reg(sspa, FIFO_CTRL, dai_id),
+				mmp_sspa_read_reg(sspa, NET_WORK_CTRL, dai_id));
+
+	sspa_priv->dai_fmt = fmt;
+	sspa_priv->dai_id_pre = dai_id;
+
+	return 0;
+}
+
+/*
+ * Set the SSPA audio DMA parameters and sample size.
+ * Can be called multiple times.
+ */
+static int mmp_sspa_hw_params(struct snd_pcm_substream *substream,
+			       struct snd_pcm_hw_params *params,
+			       struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, dai->id);
+	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(dai);
+	struct ssp_device *sspa = sspa_priv->sspa;
+	struct snd_dmaengine_dai_dma_data *dma_params;
+
+	printk("%s, format=0x%x\n", __FUNCTION__, params_format(params));
+	dma_params = &sspa_priv->dma_params[substream->stream];
+	dma_params->addr = (sspa->phys_base + DATAR);
+	dma_params->maxburst = 32;
+	dma_params->addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
+	snd_soc_dai_set_dma_data(cpu_dai, substream, dma_params);
+	return 0;
+}
+
+static int mmp_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
+			     struct snd_soc_dai *dai)
+{
+	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(dai);
+	struct ssp_device *sspa = sspa_priv->sspa;
+	int ret = 0;
+
+	pr_debug("%s cmd=%d, cnt=%d\n", __FUNCTION__, cmd, sspa_priv->running_cnt);
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		unsigned int ssp_top_cfg = mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id);
+		pr_debug("TOP_CTRL:0x%x", ssp_top_cfg);
+		ssp_top_cfg |= TOP_SSE;
+ 		mmp_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg, dai->id);   //SSP_enable
+		sspa_priv->running_cnt++;
+		pr_debug("triger::TOP_CTRL=0x%x,\n PSP_CTRL=0x%x,\n INT_EN=0x%x,\n TO=0x%x,\n FIFO_CTRL=0x%x,\n",
+				mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id), mmp_sspa_read_reg(sspa, PSP_CTRL, dai->id),
+				mmp_sspa_read_reg(sspa, INT_EN, dai->id),
+				mmp_sspa_read_reg(sspa, TO, dai->id),
+				mmp_sspa_read_reg(sspa, FIFO_CTRL, dai->id));
+		break;
+
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+	if (sspa_priv->running_cnt > 0)
+		sspa_priv->running_cnt--;
+	if (sspa_priv->running_cnt == 0 ) {
+		ssp_top_cfg = mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id);
+		ssp_top_cfg &= (~TOP_SSE);
+		mmp_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg, dai->id);
+		pr_debug("TOP_CTRL=0x%x, dai->id=%d \n", mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id), dai->id);
+	}
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			pr_debug("%s ignore playback tx\n", __FUNCTION__);
+		}
+
+		/* have no capture stream, disable rx port */
+		if (!sspa_priv->running_cnt) {
+			pr_debug("%s sspa_priv->running_cnt=%d\n", __FUNCTION__, sspa_priv->running_cnt);
+		}
+		break;
+
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static int mmp_sspa_probe(struct snd_soc_dai *dai)
+{
+	struct sspa_priv *priv = dev_get_drvdata(dai->dev);
+	pr_debug("%s\n", __FUNCTION__);
+	snd_soc_dai_set_drvdata(dai, priv);
+	return 0;
+
+}
+
+#define MMP_SSPA_RATES SNDRV_PCM_RATE_8000_192000
+#define MMP_SSPA_FORMATS (SNDRV_PCM_FMTBIT_S8 | \
+		SNDRV_PCM_FMTBIT_S16_LE | \
+		SNDRV_PCM_FMTBIT_S24_LE | \
+		SNDRV_PCM_FMTBIT_S32_LE)
+
+static const struct snd_soc_dai_ops mmp_sspa_dai_ops = {
+	.startup	= mmp_sspa_startup,
+	.shutdown	= mmp_sspa_shutdown,
+	.trigger	= mmp_sspa_trigger,
+	.hw_params	= mmp_sspa_hw_params,
+	.set_sysclk	= mmp_sspa_set_dai_sysclk,
+	.set_pll	= mmp_sspa_set_dai_pll,
+	.set_fmt	= mmp_sspa_set_dai_fmt,
+};
+
+static struct snd_soc_dai_driver mmp_sspa_dai[] = {
+	{
+		.name = "i2s-dai0",
+		.probe = mmp_sspa_probe,
+		.id = 0,
+		.playback = {
+			.channels_min = 1,
+			.channels_max = 128,
+			.rates = MMP_SSPA_RATES,
+			.formats = MMP_SSPA_FORMATS,
+		},
+		.capture = {
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = MMP_SSPA_RATES,
+			.formats = MMP_SSPA_FORMATS,
+		},
+		.ops = &mmp_sspa_dai_ops,
+	},
+	{
+		.name = "i2s-dai1",
+		.probe = mmp_sspa_probe,
+		.id = 1,
+		.playback = {
+			.channels_min = 1,
+			.channels_max = 128,
+			.rates = MMP_SSPA_RATES,
+			.formats = MMP_SSPA_FORMATS,
+		},
+		.capture = {
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = MMP_SSPA_RATES,
+			.formats = MMP_SSPA_FORMATS,
+		},
+		.ops = &mmp_sspa_dai_ops,
+	}
+};
+
+static const struct snd_soc_component_driver mmp_sspa_component = {
+	.name		       = "spacemit-dmasspa-dai",
+	//.legacy_dai_naming = true,
+};
+
+static int asoc_mmp_sspa_probe(struct platform_device *pdev)
+{
+	struct sspa_priv *priv;
+	struct resource *res;
+
+	printk("enter %s\n", __FUNCTION__);
+	priv = devm_kzalloc(&pdev->dev,
+				sizeof(struct sspa_priv), GFP_KERNEL);
+	if (!priv) {
+		pr_err("%s priv alloc failed\n", __FUNCTION__);
+		return -ENOMEM;
+	}
+	priv->sspa = devm_kzalloc(&pdev->dev,
+				sizeof(struct ssp_device), GFP_KERNEL);
+	if (priv->sspa == NULL) {
+		pr_err("%s sspa alloc failed\n", __FUNCTION__);
+		return -ENOMEM;
+	}
+
+	priv->dma_params = devm_kcalloc(&pdev->dev,
+			2, sizeof(struct snd_dmaengine_dai_dma_data),
+			GFP_KERNEL);
+	if (priv->dma_params == NULL) {
+		pr_err("%s dma_params alloc failed\n", __FUNCTION__);
+		return -ENOMEM;
+	}
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	pr_debug("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)res->start, (unsigned long)res->end);
+	priv->sspa->mmio_base[0] = devm_ioremap_resource(&pdev->dev, res);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	pr_debug("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)res->start, (unsigned long)res->end);
+	priv->sspa->mmio_base[1] = devm_ioremap_resource(&pdev->dev, res);
+
+	if (IS_ERR(priv->sspa->mmio_base[0])) {
+		pr_err("%s mmio_base[0] alloc failed\n", __FUNCTION__);
+		return PTR_ERR(priv->sspa->mmio_base[0]);
+	}
+	if (IS_ERR(priv->sspa->mmio_base[1])) {
+		pr_err("%s mmio_base[1] alloc failed\n", __FUNCTION__);
+		return PTR_ERR(priv->sspa->mmio_base[1]);
+	}
+	if ((priv->sspa->apb_clk_base = ioremap(APB_CLK_BASE, 0x100)) == NULL) {
+		pr_err("sspa ioremap err\n");
+		return -1;
+	}
+	if ((priv->sspa->pmumain = ioremap(PMUMAIN_BASE, 0x100)) == NULL) {
+		pr_err("sspa pmumain ioremap err\n");
+		return -1;
+	}
+
+	priv->dai_fmt = (unsigned int) -1;
+	platform_set_drvdata(pdev, priv);
+	pr_info("exit %s\n", __FUNCTION__);
+	return devm_snd_soc_register_component(&pdev->dev, &mmp_sspa_component,
+					       mmp_sspa_dai, ARRAY_SIZE(mmp_sspa_dai));
+}
+
+static int asoc_mmp_sspa_remove(struct platform_device *pdev)
+{
+	struct sspa_priv *priv = platform_get_drvdata(pdev);
+
+	clk_disable(priv->audio_clk);
+	clk_put(priv->audio_clk);
+	clk_put(priv->sysclk);
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id spacemit_dmasspa_ids[] = {
+	{ .compatible = "spacemit,spacemit-i2s-dai", },
+	{ /* sentinel */ }
+};
+#endif
+
+static struct platform_driver asoc_mmp_sspa_driver = {
+	.driver = {
+		.name = "dma-sspa-dai",
+		.of_match_table = of_match_ptr(spacemit_dmasspa_ids),
+	},
+	.probe = asoc_mmp_sspa_probe,
+	.remove = asoc_mmp_sspa_remove,
+};
+
+#if IS_MODULE(CONFIG_SND_SOC_SPACEMIT)
+int spacemit_snd_register_i2s_pdrv(void)
+{
+	printk("%s\n", __FUNCTION__);
+	return platform_driver_register(&asoc_mmp_sspa_driver);
+}
+
+EXPORT_SYMBOL(spacemit_snd_register_i2s_pdrv);
+
+void spacemit_snd_unregister_i2s_pdrv(void)
+{
+	platform_driver_unregister(&asoc_mmp_sspa_driver);
+}
+EXPORT_SYMBOL(spacemit_snd_unregister_i2s_pdrv);
+
+#else
+
+module_platform_driver(asoc_mmp_sspa_driver);
+
+#endif
+
+MODULE_DESCRIPTION("I2S SSPA SoC driver");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/spacemit/spacemit-snd-spi.h b/sound/soc/spacemit/spacemit-snd-spi.h
new file mode 100755
index 000000000000..1977563c3da5
--- /dev/null
+++ b/sound/soc/spacemit/spacemit-snd-spi.h
@@ -0,0 +1,135 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2023 SPACEMIT
+ *
+ */
+
+#ifndef _SPI_SPACEMIT_H
+#define _SPI_SPACEMIT_H
+
+/* SPACEMIT AQUILA SPI Registers */
+#define TOP_CTRL		0x00	/* SSP Top Control Register */
+#define FIFO_CTRL		0x04	/* SSP FIFO Control Register */
+#define INT_EN			0x08    /* SSP Interrupt Enable Register */
+#define TO			0x0C    /* SSP Time Out Register */
+#define DATAR			0x10    /* SSP Data Register */
+#define STATUS			0x14    /* SSP Stauts Register */
+#define PSP_CTRL		0x18    /* SSP Programmable Serial Protocal Control Register */
+#define NET_WORK_CTRL		0x1C    /* SSP NET Work Control Register */
+#define NET_WORK_STATUS		0x20    /* SSP Net Work Status Register */
+#define RWOT_CTRL		0x24    /* SSP RWOT Control Register */
+#define RWOT_CCM		0x28    /* SSP RWOT Counter Cycles Match Register */
+#define RWOT_CVWRn		0x2C    /* SSP RWOT Counter Value Write for Read Request Register */
+
+/* 0x00 TOP_CTRL */
+#define TOP_TTELP		(1 << 18)
+#define TOP_TTE			(1 << 17)
+#define TOP_SCFR		(1 << 16)
+#define TOP_IFS			(1 << 15)
+#define TOP_HOLD_FRAME_LOW	(1 << 14)
+#define TOP_TRAIL_PXA	(0 << 13)
+#define TOP_TRAIL_DMA   (1 << 13)
+#define TOP_LBM			(1 << 12)
+#define TOP_SPH1		(1 << 11)
+#define TOP_SPH0		(1 << 11)
+#define TOP_SPO1		(1 << 10)
+#define TOP_SPO0		(0 << 10)
+#define DW_8BYTE        (0x7<<5)   //SSP_TOP_CTRL[9:5]
+#define DW_16BYTE       (0xf<<5)   //SSP_TOP_CTRL[9:5] 
+#define DW_18BYTE       (0x11<<5)  //SSP_TOP_CTRL[9:5]
+#define DW_32BYTE       (0x1f<<5)  //SSP_TOP_CTRL[9:5]
+//#define TOP_DSS(x)		((x - 1) << 5)
+//#define TOP_DSS_MASK		(0x1F << 5)
+#define TOP_SFRMDIR_S		(1 << 4)
+#define TOP_SFRMDIR_M		(0 << 4)
+#define TOP_SCLKDIR_S		(1 << 3)
+#define TOP_SCLKDIR_M		(0 << 3)
+#define TOP_FRF_MASK		(0x3 << 1)
+#define TOP_FRF_Motorola	(0x0 << 1)	/* Motorola's Serial Peripheral Interface (SPI) */
+#define TOP_FRF_TI		(0x1 << 1)	/* Texas Instruments' Synchronous Serial Protocol (SSP) */
+#define TOP_FRF_National	(0x2 << 1)	/* National Microwire */
+#define TOP_FRF_PSP		(0x3 << 1)	/* Programmable Serial Protocol(PSP) */
+#define TOP_SSE			(1 << 0)
+
+/* 0x04 FIFO_CTRL */
+#define FIFO_STRF			(1 << 19)
+#define FIFO_EFWR			(1 << 18)
+#define FIFO_RXFIFO_AUTO_FULL_CTRL	(1 << 17)
+#define FIFO_FPCKE			(1 << 16)
+#define FIFO_UNPACKING      (0 << 16)
+#define FIFO_TXFIFO_WR_ENDIAN_MASK	(0x3 << 14)
+#define FIFO_RXFIFO_RD_ENDIAN_MASK	(0x3 << 12)
+#define FIFO_WR_ENDIAN_16BITS		(1 << 14)	/* Swap first 16 bits and last 16 bits */
+#define FIFO_WR_ENDIAN_8BITS		(2 << 14)	/* Swap all 4 bytes */
+#define FIFO_RD_ENDIAN_16BITS		(1 << 12)	/* Swap first 16 bits and last 16 bits */
+#define FIFO_RD_ENDIAN_8BITS		(2 << 12)	/* Swap all 4 bytes */
+#define FIFO_RSRE			(1 << 11)
+#define FIFO_TSRE			(1 << 10)
+#define FIFO_RX_THRES_15                (0xf<<5)   //SSP_FIFO_CTRL[9:5]
+#define FIFO_RX_THRES_7                 (0x7<<5)   //SSP_FIFO_CTRL[9:5]
+#define FIFO_TX_THRES_15                (0xf<<0)   //SSP_FIFO_CTRL[4:0]
+#define FIFO_TX_THRES_7                 (0x7<<0)   //SSP_FIFO_CTRL[4:0]
+
+/* 0x08 INT_EN */
+#define INT_EN_EBCEI		(1 << 6)
+#define INT_EN_TIM		(1 << 5)
+#define INT_EN_RIM		(1 << 4)
+#define INT_EN_TIE		(1 << 3)
+#define INT_EN_RIE		(1 << 2)
+#define INT_EN_TINTE		(1 << 1)
+#define INT_EN_PINTE		(1 << 0)
+
+/* 0x0C TO */
+#define TIMEOUT(x)	((x) << 0)
+
+/* 0x10 DATAR */
+#define DATA(x)		((x) << 0)
+
+/* 0x14 STATUS */
+#define STATUS_OSS		(1 << 23)
+#define STATUS_TX_OSS		(1 << 22)
+#define STATUS_BCE		(1 << 21)
+#define STATUS_ROR		(1 << 20)
+#define STATUS_RNE		(1 << 14)
+#define STATUS_RFS		(1 << 13)
+#define STATUS_TUR		(1 << 12)
+#define STATUS_TNF		(1 << 6)
+#define STATUS_TFS		(1 << 5)
+#define STATUS_EOC		(1 << 4)
+#define STATUS_TINT		(1 << 3)
+#define STATUS_PINT		(1 << 2)
+#define STATUS_CSS		(1 << 1)
+#define STATUS_BSY		(1 << 0)
+
+/* 0x18 PSP_CTRL */
+#define PSP_EDMYSTOP(x)		((x) << 27)
+#define PSP_EMYSTOP(x)		((x) << 25)
+#define PSP_EDMYSTRT(x)		((x) << 23)
+#define PSP_DMYSTRT(x)		((x) << 21)
+#define PSP_STRTDLY(x)		((x) << 18)
+#define PSP_SFRMWDTH(x)		((x) << 12)
+#define PSP_SFRMDLY(x)		((x) << 5)
+#define PSP_SFRMP		(1 << 4)
+#define PSP_FSRT		(1 << 3)
+#define PSP_ETDS		(1 << 2)
+#define PSP_SCMODE(x)		((x) << 0)
+
+/* 0x1C NET_WORK_CTRL */
+#define RTSA(x)			((x) << 12)
+#define RTSA_MASK		(0xFF << 12)
+#define TTSA(x)			((x) << 4)
+#define TTSA_MASK		(0xFF << 4)
+#define NET_FRDC(x)		((x) << 1)
+#define NET_WORK_MODE		(1 << 0)
+
+/* 0x20 NET_WORK_STATUS */
+#define NET_SATUS_NMBSY		(1 << 3)
+#define NET_STATUS_TSS(x)	((x) << 0)
+
+/* 0x24 RWOT_CTRL */
+#define RWOT_MASK_RWOT_LAST_SAMPLE	(1 << 4)
+#define RWOT_CLR_RWOT_CYCLE		(1 << 3)
+#define RWOT_SET_RWOT_CYCLE		(1 << 2)
+#define RWOT_CYCLE_RWOT_EN		(1 << 1)
+#define RWOT_RWOT			(1 << 0)
+#endif /* _SPI_SPACEMIT_H */
-- 
2.47.0

