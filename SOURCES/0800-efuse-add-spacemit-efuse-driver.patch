From 585998661058a9482e52b2313b52f92efbaf5f06 Mon Sep 17 00:00:00 2001
From: zhangmeng <zhangmeng.kevin@spacemit.com>
Date: Thu, 4 Jul 2024 12:41:43 +0800
Subject: [PATCH 0800/1204] efuse: add spacemit efuse driver

Change-Id: Id880a5bf36fb4093eb55e2edc17eba6fbf4205ee
---
 arch/riscv/boot/dts/spacemit/k1-x-efuse.dtsi |  52 ++++++
 drivers/nvmem/Kconfig                        |  10 ++
 drivers/nvmem/Makefile                       |   2 +
 drivers/nvmem/spacemit-efuse.c               | 172 +++++++++++++++++++
 4 files changed, 236 insertions(+)
 create mode 100644 arch/riscv/boot/dts/spacemit/k1-x-efuse.dtsi
 create mode 100644 drivers/nvmem/spacemit-efuse.c

diff --git a/arch/riscv/boot/dts/spacemit/k1-x-efuse.dtsi b/arch/riscv/boot/dts/spacemit/k1-x-efuse.dtsi
new file mode 100644
index 000000000000..5aee36ef11f6
--- /dev/null
+++ b/arch/riscv/boot/dts/spacemit/k1-x-efuse.dtsi
@@ -0,0 +1,52 @@
+// SPDX-License-Identifier: (GPL-2.0 OR MIT)
+/* Copyright (c) 2024 Spacemit, Inc */
+
+&efuse {
+	status = "okay";
+
+	efuse_bank7: efuse_bank@7 {
+		compatible = "spacemit,k1-efuse";
+		#address-cells = <1>;
+		#size-cells = <1>;
+		reg = <0x190 0x20>;
+		resets = <&reset RESET_AES>;
+		reset-names = "aes_reset";
+		clocks = <&ccu CLK_AES>;
+		clock-names = "aes_core";
+		status = "okay";
+
+		soc_die_id: bank7@11,3 {
+			reg = <0x11 3>;
+			bits = <3 16>;
+		};
+
+		soc_ver_id: bank7@1f,6 {
+			reg = <0x1F 1>;
+			bits = <6 2>;
+		};
+
+		soc_pack_id: bank7@16,6 {
+			reg = <0x16 2>;
+			bits = <6 9>;
+		};
+
+		soc_svt_dro: bank7@15,5 {
+			reg = <0x15 2>;
+			bits = <5 9>;
+		};
+
+		soc_chip_id: bank7@17,7 {
+			reg = <0x17 8>;
+			bits = <7 55>;
+		};
+	};
+};
+
+&socinfo {
+	nvmem-cells = <&soc_die_id>, <&soc_ver_id>, <&soc_pack_id>,
+			<&soc_svt_dro>, <&soc_chip_id>;
+	nvmem-cell-names = "soc_die_id", "soc_ver_id", "soc_pack_id",
+			"soc_svt_dro", "soc_chip_id";
+	status = "okay";
+};
+
diff --git a/drivers/nvmem/Kconfig b/drivers/nvmem/Kconfig
index 8671b7c974b9..b6ba16d05cf1 100644
--- a/drivers/nvmem/Kconfig
+++ b/drivers/nvmem/Kconfig
@@ -310,6 +310,16 @@ config NVMEM_SNVS_LPGPR
 	  This driver can also be built as a module. If so, the module
 	  will be called nvmem-snvs-lpgpr.
 
+config NVMEM_SPACEMIT_EFUSE
+	tristate "Spacemit SoCs efuse support"
+	depends on SOC_SPACEMIT || COMPILE_TEST
+	help
+	  This is a simple efuse provider driver for Spacemit SoC
+	  provide data from eFuse, such as chip-version.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called nvmem_spacemit_efuse.
+
 config NVMEM_SPMI_SDAM
 	tristate "SPMI SDAM Support"
 	depends on SPMI
diff --git a/drivers/nvmem/Makefile b/drivers/nvmem/Makefile
index 5b77bbb6488b..ec3463f19f58 100644
--- a/drivers/nvmem/Makefile
+++ b/drivers/nvmem/Makefile
@@ -64,6 +64,8 @@ obj-$(CONFIG_NVMEM_SC27XX_EFUSE)	+= nvmem-sc27xx-efuse.o
 nvmem-sc27xx-efuse-y			:= sc27xx-efuse.o
 obj-$(CONFIG_NVMEM_SNVS_LPGPR)		+= nvmem_snvs_lpgpr.o
 nvmem_snvs_lpgpr-y			:= snvs_lpgpr.o
+obj-$(CONFIG_NVMEM_SPACEMIT_EFUSE)	+= nvmem_spacemit_efuse.o
+nvmem_spacemit_efuse-y			:= spacemit-efuse.o
 obj-$(CONFIG_NVMEM_SPMI_SDAM)		+= nvmem_qcom-spmi-sdam.o
 nvmem_qcom-spmi-sdam-y			+= qcom-spmi-sdam.o
 obj-$(CONFIG_NVMEM_SPRD_EFUSE)		+= nvmem_sprd_efuse.o
diff --git a/drivers/nvmem/spacemit-efuse.c b/drivers/nvmem/spacemit-efuse.c
new file mode 100644
index 000000000000..782dbf02a8ff
--- /dev/null
+++ b/drivers/nvmem/spacemit-efuse.c
@@ -0,0 +1,172 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Spacemit eFuse Driver
+ *
+ * Copyright (c) 2024 Spacemit Co. Ltd.
+ */
+
+#include <linux/clk.h>
+#include <linux/reset.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/nvmem-provider.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+
+
+struct spacemit_efuse_bank {
+	struct device *dev;
+	void __iomem *base;
+	struct clk *clk;
+	struct reset_control *reset;
+	struct nvmem_device *nvmem;
+	struct nvmem_config *econfig;
+	u8 *efuse_data;
+	u32 size;
+};
+
+
+/*
+ * read efuse data to buffer for k1 soc.
+ */
+static int spacemit_k1_efuse_read(struct spacemit_efuse_bank *efuse)
+{
+	int i, ret;
+	u32 *buffer;
+
+	ret = clk_prepare_enable(efuse->clk);
+	if (ret < 0) {
+		dev_err(efuse->dev, "failed to prepare/enable efuse clk\n");
+		return ret;
+	}
+	ret = reset_control_deassert(efuse->reset);
+	if (ret < 0) {
+		dev_err(efuse->dev, "failed to deassert efuse\n");
+		clk_disable_unprepare(efuse->clk);
+		return ret;
+	}
+
+	/*
+	 * efuse data has been load into register by uboot already,
+	 * just get efuse data from register
+	 */
+	buffer = (u32 *)efuse->efuse_data;
+	for (i = 0; i < efuse->size/sizeof(u32); i++) {
+		buffer[i] = readl(efuse->base + i*4);
+	}
+
+	reset_control_assert(efuse->reset);
+	clk_disable_unprepare(efuse->clk);
+
+	return ret;
+}
+
+
+/*
+ * call-back function, just read data from buffer
+ */
+static int spacemit_efuse_read(void *context, unsigned int offset,
+				      void *val, size_t bytes)
+{
+	int i;
+	u8 *buf = (u8 *)val;
+	struct spacemit_efuse_bank *efuse = context;
+
+	/* check if data request is out of bound */
+	for(i=0; i<bytes; i++) {
+		buf[i] = efuse->efuse_data[offset + i];
+	}
+
+	return 0;
+}
+
+static int spacemit_efuse_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct resource *res;
+	struct nvmem_device *nvmem;
+	struct nvmem_config *econfig;
+	struct spacemit_efuse_bank *efuse;
+	struct device *dev = &pdev->dev;
+	int (*efuse_read)(struct spacemit_efuse_bank *efuse);
+
+	efuse_read = of_device_get_match_data(dev);
+	if (!efuse_read) {
+		return -EINVAL;
+	}
+
+	efuse = devm_kzalloc(dev, sizeof(struct spacemit_efuse_bank),
+			     GFP_KERNEL);
+	if (!efuse)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	efuse->base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(efuse->base))
+		return PTR_ERR(efuse->base);
+
+	efuse->clk = devm_clk_get(dev, NULL);
+	if (IS_ERR(efuse->clk))
+		return PTR_ERR(efuse->clk);
+
+	efuse->reset = devm_reset_control_get_optional_shared(dev, NULL);
+	if (IS_ERR(efuse->reset))
+		return PTR_ERR(efuse->reset);
+
+	/* try read efuse data to buffer */
+	efuse->size = roundup(resource_size(res), sizeof(u32));
+	efuse->efuse_data = devm_kzalloc(dev, efuse->size, GFP_KERNEL);
+	if (!efuse->efuse_data)
+		return -ENOMEM;
+
+	ret = efuse_read(efuse);
+	if (ret < 0)
+		return -EBUSY;
+	efuse->dev = dev;
+
+	econfig = devm_kzalloc(dev, sizeof(*econfig), GFP_KERNEL);
+        if (!econfig)
+		return -ENOMEM;
+
+	efuse->econfig = econfig;
+	econfig->dev = dev;
+	econfig->name = dev_name(dev),
+	econfig->stride = 1;
+	econfig->word_size = 1;
+	econfig->read_only = true;
+	econfig->reg_read = spacemit_efuse_read;
+	econfig->size = resource_size(res);
+	econfig->priv = efuse;
+
+	nvmem = devm_nvmem_register(dev, econfig);
+	efuse->nvmem = nvmem;
+
+	platform_set_drvdata(pdev, efuse);
+
+	return PTR_ERR_OR_ZERO(nvmem);
+}
+
+static const struct of_device_id spacemit_efuse_match[] = {
+	{
+		.compatible = "spacemit,k1-efuse",
+		.data = (void *)&spacemit_k1_efuse_read,
+	},
+	{ /* sentinel */},
+};
+
+static struct platform_driver spacemit_efuse_driver = {
+	.probe = spacemit_efuse_probe,
+	.driver = {
+		.name = "spacemit-efuse",
+		.of_match_table = spacemit_efuse_match,
+	},
+};
+module_platform_driver(spacemit_efuse_driver);
+
+MODULE_DESCRIPTION("Spacemit eFuse driver");
+MODULE_LICENSE("GPL v2");
+
-- 
2.47.0

