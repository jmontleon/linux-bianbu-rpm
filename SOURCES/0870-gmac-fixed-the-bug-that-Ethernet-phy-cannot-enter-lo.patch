From 9afa6c24bbd3169b8fb83f33b1869a0ef88969ce Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Tue, 23 Jul 2024 09:42:28 +0800
Subject: [PATCH 0870/1204] gmac: fixed the bug that Ethernet phy cannot enter
 low power state

  1. remove the mac_managed_pm flag, the phy suspend and resume functions will be called.
  2. modify the gmac clk operation order to solve the phy suspend access stuck

Change-Id: I31ae1dbe91e12bead77cf64857f55533e6002f8c
---
 drivers/net/ethernet/spacemit/k1x-emac.c | 64 ++++++++++++------------
 1 file changed, 32 insertions(+), 32 deletions(-)

diff --git a/drivers/net/ethernet/spacemit/k1x-emac.c b/drivers/net/ethernet/spacemit/k1x-emac.c
index 4077948874e6..a59f49214dfa 100644
--- a/drivers/net/ethernet/spacemit/k1x-emac.c
+++ b/drivers/net/ethernet/spacemit/k1x-emac.c
@@ -911,24 +911,11 @@ int emac_up(struct emac_priv *priv)
 #ifdef CONFIG_PM_SLEEP
 	pm_runtime_get_sync(&pdev->dev);
 #endif
-	if (priv->ref_clk_frm_soc) {
-		ret = clk_prepare_enable(priv->phy_clk);
-		if (ret < 0) {
-			pr_err("failed to enable phy clock: %d\n", ret);
-			goto err;
-		}
-	}
-
-	ret = clk_prepare_enable(priv->mac_clk);
-	if (ret < 0) {
-		pr_err("failed to enable mac clock: %d\n", ret);
-		goto disable_phy_clk;
-	}
 
 	ret = emac_phy_connect(ndev);
 	if (ret) {
 		pr_err("%s  phy_connet failed\n", __func__);
-		goto disable_mac_clk;
+		goto err;
 	}
 	/* init hardware */
 	emac_init_hw(priv);
@@ -980,11 +967,6 @@ int emac_up(struct emac_priv *priv)
 		phy_stop(ndev->phydev);
 		phy_disconnect(ndev->phydev);
 	}
-disable_mac_clk:
-		clk_disable_unprepare(priv->mac_clk);
-disable_phy_clk:
-	if (priv->ref_clk_frm_soc)
-		clk_disable_unprepare(priv->phy_clk);
 err:
 #ifdef CONFIG_PM_SLEEP
 	pm_runtime_put_sync(&pdev->dev);
@@ -1030,10 +1012,6 @@ int emac_down(struct emac_priv *priv)
 	emac_reset_hw(priv);
 	netif_carrier_off(ndev);
 
-	clk_disable_unprepare(priv->mac_clk);
-	if (priv->ref_clk_frm_soc)
-		clk_disable_unprepare(priv->phy_clk);
-
 #ifdef CONFIG_PM_SLEEP
 	pm_runtime_put_sync(&pdev->dev);
 #endif
@@ -2322,8 +2300,6 @@ static int emac_mdio_init(struct emac_priv *priv)
 		return -ENODEV;
 	}
 
-	/* Indicate that the MAC is responsible for PHY PM */
-	priv->phy->mac_managed_pm = true;
 err_put_node:
 	of_node_put(mii_np);
 	return ret;
@@ -2775,10 +2751,6 @@ static int emac_probe(struct platform_device *pdev)
 
 	netif_napi_add(ndev, &priv->napi, emac_rx_poll);
 
-	if (priv->ref_clk_frm_soc)
-		clk_disable_unprepare(priv->phy_clk);
-	clk_disable_unprepare(priv->mac_clk);
-
 	return 0;
 err_mdio_deinit:
 	emac_mdio_deinit(priv);
@@ -2826,13 +2798,35 @@ static int emac_resume(struct device *dev)
 {
 	struct emac_priv *priv = dev_get_drvdata(dev);
 	struct net_device *ndev = priv->ndev;
+	int ret;
 
-	if (!netif_running(ndev))
+	if (priv->ref_clk_frm_soc) {
+		ret = clk_prepare_enable(priv->phy_clk);
+		if (ret < 0) {
+			pr_err("failed to enable phy clock: %d\n", ret);
+			goto err;
+		}
+	}
+
+	ret = clk_prepare_enable(priv->mac_clk);
+	if (ret < 0) {
+		pr_err("failed to enable mac clock: %d\n", ret);
+		goto disable_phy_clk;
+	}
+
+	if (!netif_running(ndev)) {
 		return 0;
+	}
 
 	emac_open(ndev);
 	netif_device_attach(ndev);
 	return 0;
+
+disable_phy_clk:
+	if (priv->ref_clk_frm_soc)
+		clk_disable_unprepare(priv->phy_clk);
+err:
+	return ret;
 }
 
 static int emac_suspend(struct device *dev)
@@ -2840,11 +2834,17 @@ static int emac_suspend(struct device *dev)
 	struct emac_priv *priv = dev_get_drvdata(dev);
 	struct net_device *ndev = priv->ndev;
 
-
-	if (!ndev || !netif_running(ndev))
+	if (!ndev || !netif_running(ndev)) {
+		clk_disable_unprepare(priv->mac_clk);
+		if (priv->ref_clk_frm_soc)
+			clk_disable_unprepare(priv->phy_clk);
 		return 0;
+	}
 
 	emac_close(ndev);
+	clk_disable_unprepare(priv->mac_clk);
+	if (priv->ref_clk_frm_soc)
+		clk_disable_unprepare(priv->phy_clk);
 	netif_device_detach(ndev);
 	return 0;
 }
-- 
2.47.0

