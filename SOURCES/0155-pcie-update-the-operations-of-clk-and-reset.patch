From 328f2b83e5d16e0ca1e9911cedfdc92e1131ea5d Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Mon, 20 Nov 2023 17:06:56 +0800
Subject: [PATCH 0155/1206] pcie: update the operations of clk and reset

Change-Id: I19cbf991887d8f7a49ef7e598c62f35be8c6503a
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi | 12 +++++++---
 drivers/pci/controller/dwc/pcie-k1x.c  | 32 ++++++++------------------
 2 files changed, 19 insertions(+), 25 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index 4f94b38b2c04..d5c0db088825 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -780,8 +780,10 @@ pcie0_rc: pcie@ca000000 {
 			      <0x0 0xc0b20000 0x0 0x00001000>; /* phy ahb */
 			reg-names = "dbi", "atu", "config", "k1x_conf", "phy_ahb";
 
-			//clocks = <&clock CLK_PCIE0>;
+			clocks = <&ccu CLK_PCIE0>;
 			clock-names = "pcie-clk";
+			resets = <&reset RESET_PCIE0>;
+			reset-names = "pcie-reset";
 
 			bus-range = <0x00 0xff>;
 			max-link-speed = <2>;
@@ -820,8 +822,10 @@ pcie1_rc: pcie@ca400000 {
 			      <0x0 0xc0c20000 0x0 0x00001000>; /* phy ahb */
 			reg-names = "dbi", "atu", "config", "k1x_conf", "phy_ahb";
 
-			//clocks = <&clock CLK_PCIE1>;
+			clocks = <&ccu CLK_PCIE1>;
 			clock-names = "pcie-clk";
+			resets = <&reset RESET_PCIE1>;
+			reset-names = "pcie-reset";
 
 			bus-range = <0x00 0xff>;
 			max-link-speed = <2>;
@@ -860,8 +864,10 @@ pcie2_rc: pcie@ca800000 {
 			      <0x0 0xc0d20000 0x0 0x00001000>; /* phy ahb */
 			reg-names = "dbi", "atu", "config", "k1x_conf", "phy_ahb";
 
-			//clocks = <&clock CLK_PCIE2>;
+			clocks = <&ccu CLK_PCIE2>;
 			clock-names = "pcie-clk";
+			resets = <&reset RESET_PCIE2>;
+			reset-names = "pcie-reset";
 
 			bus-range = <0x00 0xff>;
 			max-link-speed = <2>;
diff --git a/drivers/pci/controller/dwc/pcie-k1x.c b/drivers/pci/controller/dwc/pcie-k1x.c
index a804c7e06fa9..b8301c35ed15 100755
--- a/drivers/pci/controller/dwc/pcie-k1x.c
+++ b/drivers/pci/controller/dwc/pcie-k1x.c
@@ -25,6 +25,7 @@
 #include <linux/types.h>
 #include <linux/mfd/syscon.h>
 #include <linux/regmap.h>
+#include <linux/reset.h>
 
 #include "../../pci.h"
 #include "pcie-designware.h"
@@ -142,6 +143,7 @@ struct k1x_pcie {
 	struct	clk *clk_master;
 	struct	clk *clk_slave;
 	struct	clk *clk_slave_lite;
+	struct reset_control *reset;
 
 	struct	gpio_desc *perst_gpio; /* for PERST# in RC mode*/
 };
@@ -1026,23 +1028,6 @@ static const struct of_device_id of_k1x_pcie_match[] = {
 	{},
 };
 
-static void k1x_pcie_clk_enable(struct k1x_pcie *pcie, int enable)
-{
-	u32 mask = 0x13f;
-	u32 val = 0, enable_val = 0x3f, disable_val = 0x100;
-
-	val = readl(pcie->base);
-	if (enable) {
-		val |= (mask & enable_val);
-		val &= ~(mask & disable_val);
-	} else {
-		val |= (mask & disable_val);
-		val &= ~(mask & enable_val);
-	}
-
-	writel(val, pcie->base);
-}
-
 static int __init k1x_pcie_probe(struct platform_device *pdev)
 {
 	u32 reg;
@@ -1092,23 +1077,26 @@ static int __init k1x_pcie_probe(struct platform_device *pdev)
 	if (!k1x->phy_ahb)
 		return -ENOMEM;
 
-#if 0
 	/* parse clk source*/
 	k1x->clk_pcie = devm_clk_get(dev, "pcie-clk");
 	if (IS_ERR(k1x->clk_pcie))
 		return PTR_ERR(k1x->clk_pcie);
-#endif
+
+	k1x->reset = devm_reset_control_get_optional(dev, NULL);
+	if (IS_ERR(k1x->reset)) {
+		dev_err(dev, "Failed to get pcie's resets\n");
+		return PTR_ERR(k1x->reset);
+	}
 
 	k1x->base = base;
 	k1x->pci = pci;
 	platform_set_drvdata(pdev, k1x);
 
-#if 0
 	ret = clk_prepare_enable(k1x->clk_pcie);
 	if(ret < 0)
 		return ret;
-#endif
-	k1x_pcie_clk_enable(k1x, 1);
+
+	reset_control_deassert(k1x->reset);
 
 	k1x->pcie_init_before_kernel = is_pcie_init;
 	if (is_pcie_init == 0) {
-- 
2.47.0

