From 3913d47a49face552d9ce9a313765bfe3e89a3f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Clilijun=E2=80=9D?= <“lijun.li@spacemit.com”>
Date: Wed, 3 Jul 2024 21:56:02 +0800
Subject: [PATCH 0798/1206] keep bootloader logo on and release backlight first

Change-Id: I7f2eaf170487c8736265d131072d8ed23ab43185
---
 drivers/gpu/drm/spacemit/Makefile             |  1 -
 drivers/gpu/drm/spacemit/dpu/dpu_saturn.c     | 16 ++++++----
 drivers/gpu/drm/spacemit/lt8911exb.c          | 11 +++----
 drivers/gpu/drm/spacemit/spacemit_dpu.c       | 32 ++++++-------------
 drivers/gpu/drm/spacemit/spacemit_dpu.h       |  2 +-
 .../gpu/drm/spacemit/spacemit_mipi_panel.c    | 12 +------
 6 files changed, 25 insertions(+), 49 deletions(-)

diff --git a/drivers/gpu/drm/spacemit/Makefile b/drivers/gpu/drm/spacemit/Makefile
index 00582f9e6385..a350a62a3fb2 100644
--- a/drivers/gpu/drm/spacemit/Makefile
+++ b/drivers/gpu/drm/spacemit/Makefile
@@ -10,7 +10,6 @@ spacemit-drm-y := 	spacemit_drm.o \
 				spacemit_lib.o \
 				spacemit_gem.o \
 				spacemit_dmmu.o \
-				spacemit_bootloader.o \
 				sysfs/sysfs_class.o \
 				sysfs/sysfs_dpu.o \
 				sysfs/sysfs_dsi.o \
diff --git a/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c b/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
index 6657e2a5104a..9cd2d1a917b9 100644
--- a/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
+++ b/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
@@ -562,7 +562,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 
 	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
 
-	if (!dpu->is_probed) {
+	if (dpu->logo_booton) {
 		if (dpu->type == HDMI) {
 			clk_prepare_enable(clk_ctx->hmclk);
 		} else if (dpu->type == DSI) {
@@ -572,8 +572,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 			clk_prepare_enable(clk_ctx->escclk);
 			clk_prepare_enable(clk_ctx->bitclk);
 		}
-		udelay(10);
-		dpu_finish_uboot(dpu);
+		udelay(100);
 		return 0;
 	}
 
@@ -596,7 +595,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 		clk_val = clk_get_rate(clk_ctx->hmclk);
 		DRM_DEBUG("get hdmi mclk=%lld\n", clk_val);
 
-		udelay(10);
+		udelay(100);
 	} else {
 		clk_prepare_enable(clk_ctx->pxclk);
 		clk_prepare_enable(clk_ctx->mclk);
@@ -612,7 +611,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 			clk_val = clk_get_rate(clk_ctx->pxclk);
 			if(clk_val != set_clk_val){
 				clk_set_rate(clk_ctx->pxclk, set_clk_val);
-				DRM_DEBUG("set pxclk=%lld\n", clk_val);
+				DRM_DEBUG("set pxclk=%lld\n", set_clk_val);
 			}
 		}
 
@@ -653,7 +652,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 		clk_val = clk_get_rate(clk_ctx->bitclk);
 		DRM_DEBUG("get bitclk=%lld\n", clk_val);
 
-		udelay(10);
+		udelay(100);
 	}
 
 	trace_dpu_enable_clocks(dpu->dev_id);
@@ -671,7 +670,10 @@ static int dpu_disable_clocks(struct spacemit_dpu *dpu)
 
 	trace_dpu_disable_clocks(dpu->dev_id);
 
-	if (!dpu->is_probed) {
+	if (dpu->logo_booton) {
+
+		dpu_finish_uboot(dpu);
+
 		if (dpu->type == HDMI) {
 			clk_disable_unprepare(clk_ctx->hmclk);
 		} else if (dpu->type == DSI) {
diff --git a/drivers/gpu/drm/spacemit/lt8911exb.c b/drivers/gpu/drm/spacemit/lt8911exb.c
index 055257078026..06c042fd3ffe 100644
--- a/drivers/gpu/drm/spacemit/lt8911exb.c
+++ b/drivers/gpu/drm/spacemit/lt8911exb.c
@@ -1153,10 +1153,6 @@ static int lt8911exb_panel_enable(struct drm_panel *panel)
 
 	DRM_INFO("%s()\n", __func__);
 
-	gpiod_direction_output(lt8911exb->enable_gpio, 1);
-	gpiod_direction_output(lt8911exb->standby_gpio, 1);
-	usleep_range(50*1000, 100*1000); //100ms
-
 	schedule_delayed_work(&lt8911exb->init_work,
 				msecs_to_jiffies(500));
 	lt8911exb->init_work_pending = true;
@@ -1244,6 +1240,9 @@ static void init_work_func(struct work_struct *work)
 
 	DRM_DEBUG(" %s() \n", __func__);
 
+	gpiod_direction_output(lt8911exb->standby_gpio, 1);
+	usleep_range(50*1000, 100*1000); //100ms
+
 	lt8911exb_reset(lt8911exb);
 	lt8911exb_chip_id(lt8911exb);
 
@@ -1263,6 +1262,7 @@ static void init_work_func(struct work_struct *work)
 
 	PCR_Status(lt8911exb);
 
+	gpiod_direction_output(lt8911exb->enable_gpio, 1);
 	gpiod_direction_output(lt8911exb->bl_gpio, 1);
 }
 static int lt8911exb_probe(struct i2c_client *client)
@@ -1328,12 +1328,11 @@ static int lt8911exb_probe(struct i2c_client *client)
 		return PTR_ERR(lt8911exb->bl_gpio);
 	}
 	gpiod_direction_output(lt8911exb->bl_gpio, 0);
+	gpiod_direction_output(lt8911exb->enable_gpio, 0);
 
 	//disable firstly
 	gpiod_direction_output(lt8911exb->standby_gpio, 0);
-	gpiod_direction_output(lt8911exb->enable_gpio, 0);
 	usleep_range(50*1000, 100*1000); //100ms
-	gpiod_direction_output(lt8911exb->enable_gpio, 1);
 	gpiod_direction_output(lt8911exb->standby_gpio, 1);
 	usleep_range(50*1000, 100*1000); //100ms
 
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.c b/drivers/gpu/drm/spacemit/spacemit_dpu.c
index 292f17aa3757..001165efe62b 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.c
@@ -26,7 +26,6 @@
 #include "spacemit_dpu.h"
 #include "spacemit_gem.h"
 #include "spacemit_lib.h"
-#include "spacemit_bootloader.h"
 #include "dpu/dpu_saturn.h"
 #include "dpu/dpu_debug.h"
 #include "sysfs/sysfs_display.h"
@@ -299,13 +298,6 @@ static void spacemit_crtc_atomic_enable(struct drm_crtc *crtc,
 	DRM_INFO("%s(power on)\n", __func__);
 	trace_spacemit_crtc_atomic_enable(dpu->dev_id);
 
-	/* If bootloader logo is boot on, release its resources first */
-	if (unlikely(spacemit_dpu_logo_booton)) {
-		dpu_pm_suspend(dpu->dev);
-		pm_runtime_put_sync(dpu->dev);
-		spacemit_dpu_free_bootloader_mem();
-	}
-
 	pm_runtime_get_sync(dpu->dev);
 	dpu_pm_resume(dpu->dev);
 
@@ -637,9 +629,6 @@ int spacemit_dpu_run(struct drm_crtc *crtc,
 	DRM_DEBUG("%s() type %d \n", __func__, dpu->type);
 	trace_spacemit_dpu_run(dpu->dev_id);
 
-	if (unlikely(spacemit_dpu_logo_booton))
-		spacemit_dpu_logo_booton = false;
-
 	if (dpu->core && dpu->core->run)
 		dpu->core->run(crtc, old_state);
 
@@ -784,7 +773,13 @@ static int spacemit_dpu_bind(struct device *dev, struct device *master, void *da
 #ifdef CONFIG_SPACEMIT_DEBUG
 	struct dpu_clk_context *clk_ctx = NULL;
 #endif
-	DRM_DEBUG("%s()\n", __func__);
+	DRM_INFO("%s()\n", __func__);
+
+	if (dpu->logo_booton) {
+		dpu_pm_suspend(&pdev->dev);
+		pm_runtime_put_sync(&pdev->dev);
+		dpu->logo_booton = false;
+	}
 
 	ret = spacemit_dpu_irqs_init(dpu, np, pdev);
 	if (ret)
@@ -893,7 +888,7 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	if (!dpu)
 		return -ENOMEM;
 	dpu->dev = dev;
-	dpu->is_probed = false;
+	dpu->logo_booton = true;
 	dev_set_drvdata(dev, dpu);
 
 	if (of_property_read_u32(np, "pipeline-id", &dpu_id))
@@ -956,26 +951,17 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
-	// reset dpu
 	pm_runtime_enable(&pdev->dev);
-	pm_runtime_get_sync(&pdev->dev);
-	dpu_pm_resume(&pdev->dev);
-	dpu_pm_suspend(&pdev->dev);
-	pm_runtime_put_sync(&pdev->dev);
-	msleep(10);
-
 	/*
 	 * To keep bootloader logo on, below operations must be
 	 * done in probe func as power domain framework will turn
 	 * on/off lcd power domain before/after probe func.
 	 */
-	if (spacemit_dpu_logo_booton) {
+	if (dpu->logo_booton) {
 		pm_runtime_get_sync(&pdev->dev);
 		dpu_pm_resume(&pdev->dev);
 	}
 
-	dpu->is_probed = true;
-
 	return component_add(dev, &dpu_component_ops);
 }
 
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.h b/drivers/gpu/drm/spacemit/spacemit_dpu.h
index 05e49653d625..aea9efa76135 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.h
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.h
@@ -132,7 +132,7 @@ struct spacemit_dpu {
 	struct timespec64 last_tm;
 
 	bool is_1st_f;
-	bool is_probed;
+	bool logo_booton;
 	struct dpu_clk_context clk_ctx;
 	uint64_t new_mclk;		/* new frame mclk */
 	uint64_t cur_mclk;		/* current frame mclk */
diff --git a/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c b/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c
index 1a83ecb18275..be1c6da15a76 100644
--- a/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c
+++ b/drivers/gpu/drm/spacemit/spacemit_mipi_panel.c
@@ -14,7 +14,6 @@
 #include <video/of_display_timing.h>
 #include <video/videomode.h>
 
-#include "spacemit_bootloader.h"
 #include "spacemit_mipi_panel.h"
 #include "spacemit_dsi.h"
 #include "sysfs/sysfs_display.h"
@@ -140,9 +139,6 @@ static int spacemit_panel_unprepare(struct drm_panel *p)
 void spacemit_prepare_regulator (struct spacemit_panel *panel){
 	int ret = 0;
 
-	if (unlikely(spacemit_dpu_logo_booton))
-		return;
-
 	if (panel->vdd_2v8 != NULL) {
 		ret = regulator_enable(panel->vdd_2v8);
 		if (ret)
@@ -185,9 +181,6 @@ static int spacemit_panel_prepare(struct drm_panel *p)
 		gpio_direction_output(panel->gpio_bl, 1);
 	}
 
-	if (unlikely(spacemit_dpu_logo_booton))
-		goto out;
-
 	gpio_direction_output(panel->gpio_reset, 1);
 	for (; i < panel->reset_toggle_cnt; i++) {
 		msleep(10);
@@ -238,10 +231,6 @@ static int spacemit_panel_enable(struct drm_panel *p)
 
 	DRM_INFO("%s()\n", __func__);
 
-	if (unlikely(spacemit_dpu_logo_booton))
-		goto out;
-
-
 	spacemit_panel_send_cmds(panel->slave,
 			     panel->info.cmds[CMD_CODE_INIT],
 			     panel->info.cmds_len[CMD_CODE_INIT]);
@@ -652,6 +641,7 @@ static int spacemit_panel_probe(struct mipi_dsi_device *slave)
 	}
 
 	drm_panel_add(&panel->base);
+	backlight_disable(panel->base.backlight);
 
 	slave->lanes = panel->info.lanes;
 	slave->format = panel->info.format;
-- 
2.47.0

