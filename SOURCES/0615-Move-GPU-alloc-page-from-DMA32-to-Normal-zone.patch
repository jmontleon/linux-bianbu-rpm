From c956951b7e9ef80b271fb5b09d07099c157f90e0 Mon Sep 17 00:00:00 2001
From: dengbo <bo.deng@spacemit.com>
Date: Sun, 28 Apr 2024 09:36:21 +0800
Subject: [PATCH 0615/1206] Move GPU alloc page from DMA32 to Normal zone

Change-Id: I42c4987c5f1c39593321b7701153483df98d9ee6
---
 drivers/gpu/drm/img-rogue/config_kernel.h     |  1 +
 drivers/gpu/drm/img-rogue/osfunc_riscv.c      | 34 +++++++--
 drivers/gpu/drm/img-rogue/physmem_hostmem.c   | 11 ++-
 .../gpu/drm/img-rogue/physmem_osmem_linux.c   |  3 +-
 .../gpu/drm/img-rogue/spacemit/sysconfig.c    | 75 ++++++++++++++++++-
 .../gpu/drm/img-rogue/spacemit/sysconfig.h    |  3 +
 6 files changed, 112 insertions(+), 15 deletions(-)

diff --git a/drivers/gpu/drm/img-rogue/config_kernel.h b/drivers/gpu/drm/img-rogue/config_kernel.h
index a35c16b120bb..540767d31894 100644
--- a/drivers/gpu/drm/img-rogue/config_kernel.h
+++ b/drivers/gpu/drm/img-rogue/config_kernel.h
@@ -200,3 +200,4 @@
 #define SUPPORT_TQ
 #define TRACK_FW_BOOT
 #define LMA
+#define PVR_LINUX_PHYSMEM_USE_HIGHMEM_ONLY
diff --git a/drivers/gpu/drm/img-rogue/osfunc_riscv.c b/drivers/gpu/drm/img-rogue/osfunc_riscv.c
index 911736abf2d8..f5f1e0333d62 100644
--- a/drivers/gpu/drm/img-rogue/osfunc_riscv.c
+++ b/drivers/gpu/drm/img-rogue/osfunc_riscv.c
@@ -46,6 +46,7 @@ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include "pvr_debug.h"
 #include "cache_ops.h"
 #include <linux/dma-mapping.h>
+#include "sysconfig.h"
 
 void OSCPUCacheFlushRangeKM(PVRSRV_DEVICE_NODE *psDevNode,
 							void *pvVirtStart,
@@ -76,12 +77,21 @@ void OSCPUCacheFlushRangeKM(PVRSRV_DEVICE_NODE *psDevNode,
 		dev = psDevNode->psDevConfig->pvOSDevice;
 		if (dev)
 		{
-			dma_sync_single_for_device(dev, sCPUPhysStart.uiAddr,
-								   sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
-								   DMA_TO_DEVICE);
-			dma_sync_single_for_cpu(dev, sCPUPhysStart.uiAddr,
+			if (sCPUPhysStart.uiAddr == IMG_CAST_TO_CPUPHYADDR_UINT(0xCAFEF00DDEADBEEFULL)) {
+				dma_sync_single_for_device(dev, sCPUPhysStart.uiAddr,
+								sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
+								DMA_TO_DEVICE);
+				dma_sync_single_for_cpu(dev, sCPUPhysStart.uiAddr,
+								sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
+								DMA_FROM_DEVICE);
+			} else if (sCPUPhysStart.uiAddr != IMG_CAST_TO_CPUPHYADDR_UINT(0x0ULL)) {
+				dma_sync_single_for_device(dev, phys_cpu2gpu(sCPUPhysStart.uiAddr),
+								sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
+								DMA_TO_DEVICE);
+				dma_sync_single_for_cpu(dev, phys_cpu2gpu(sCPUPhysStart.uiAddr),
 								sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
 								DMA_FROM_DEVICE);
+			}
 		}
 		//PVR_DPF((PVR_DBG_WARNING,
 		//         "%s: System doesn't implement cache maintenance. Skipping!",
@@ -119,9 +129,15 @@ void OSCPUCacheCleanRangeKM(PVRSRV_DEVICE_NODE *psDevNode,
 		dev = psDevNode->psDevConfig->pvOSDevice;
 		if (dev)
 		{
-			dma_sync_single_for_device(dev, sCPUPhysStart.uiAddr,
+			if (sCPUPhysStart.uiAddr == IMG_CAST_TO_CPUPHYADDR_UINT(0xCAFEF00DDEADBEEFULL)) {
+				dma_sync_single_for_device(dev, sCPUPhysStart.uiAddr,
+								   sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
+								   DMA_TO_DEVICE);
+			} else if (sCPUPhysStart.uiAddr != IMG_CAST_TO_CPUPHYADDR_UINT(0x0ULL)) {
+				dma_sync_single_for_device(dev, phys_cpu2gpu(sCPUPhysStart.uiAddr),
 								   sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
 								   DMA_TO_DEVICE);
+			}
 		}
 		//PVR_DPF((PVR_DBG_WARNING,
 		//         "%s: System doesn't implement cache maintenance. Skipping!",
@@ -160,9 +176,15 @@ void OSCPUCacheInvalidateRangeKM(PVRSRV_DEVICE_NODE *psDevNode,
 
 		if (dev)
 		{
-			dma_sync_single_for_cpu(dev, sCPUPhysStart.uiAddr,
+			if (sCPUPhysStart.uiAddr == IMG_CAST_TO_CPUPHYADDR_UINT(0xCAFEF00DDEADBEEFULL)) {
+				dma_sync_single_for_cpu(dev, sCPUPhysStart.uiAddr,
+								sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
+								DMA_FROM_DEVICE);
+			} else if (sCPUPhysStart.uiAddr != IMG_CAST_TO_CPUPHYADDR_UINT(0x0ULL)) {
+				dma_sync_single_for_cpu(dev, phys_cpu2gpu(sCPUPhysStart.uiAddr),
 								sCPUPhysEnd.uiAddr - sCPUPhysStart.uiAddr,
 								DMA_FROM_DEVICE);
+			}
 		}
 		//PVR_DPF((PVR_DBG_WARNING,
 		//         "%s: System doesn't implement cache maintenance. Skipping!",
diff --git a/drivers/gpu/drm/img-rogue/physmem_hostmem.c b/drivers/gpu/drm/img-rogue/physmem_hostmem.c
index c8c0d5b12ed2..3b8cd6b5f4b8 100644
--- a/drivers/gpu/drm/img-rogue/physmem_hostmem.c
+++ b/drivers/gpu/drm/img-rogue/physmem_hostmem.c
@@ -51,6 +51,7 @@ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include "pvrsrv_device.h"
 #include "physheap.h"
 #include "physmem_osmem.h"
+#include "sysconfig.h"
 
 static void HostMemCpuPAddrToDevPAddr(IMG_HANDLE hPrivData,
                                       IMG_UINT32 ui32NumOfAddr,
@@ -106,14 +107,15 @@ static void HostMemCpuPAddrToDevPAddr(IMG_HANDLE hPrivData,
                                       IMG_CPU_PHYADDR *psCpuPAddr)
 {
 	PVR_UNREFERENCED_PARAMETER(hPrivData);
+
 	/* Optimise common case */
-	psDevPAddr[0].uiAddr = psCpuPAddr[0].uiAddr;
+	psDevPAddr[0].uiAddr = phys_cpu2gpu(psCpuPAddr[0].uiAddr);
 	if (ui32NumOfAddr > 1)
 	{
 		IMG_UINT32 ui32Idx;
 		for (ui32Idx = 1; ui32Idx < ui32NumOfAddr; ++ui32Idx)
 		{
-			psDevPAddr[ui32Idx].uiAddr = psCpuPAddr[ui32Idx].uiAddr;
+			psDevPAddr[ui32Idx].uiAddr = phys_cpu2gpu(psCpuPAddr[ui32Idx].uiAddr);
 		}
 	}
 }
@@ -124,14 +126,15 @@ static void HostMemDevPAddrToCpuPAddr(IMG_HANDLE hPrivData,
                                       IMG_DEV_PHYADDR *psDevPAddr)
 {
 	PVR_UNREFERENCED_PARAMETER(hPrivData);
+
 	/* Optimise common case */
-	psCpuPAddr[0].uiAddr = IMG_CAST_TO_CPUPHYADDR_UINT(psDevPAddr[0].uiAddr);
+	psCpuPAddr[0].uiAddr = phys_gpu2cpu(psDevPAddr[0].uiAddr);
 	if (ui32NumOfAddr > 1)
 	{
 		IMG_UINT32 ui32Idx;
 		for (ui32Idx = 1; ui32Idx < ui32NumOfAddr; ++ui32Idx)
 		{
-			psCpuPAddr[ui32Idx].uiAddr = IMG_CAST_TO_CPUPHYADDR_UINT(psDevPAddr[ui32Idx].uiAddr);
+			psCpuPAddr[ui32Idx].uiAddr = phys_gpu2cpu(psDevPAddr[ui32Idx].uiAddr);
 		}
 	}
 }
diff --git a/drivers/gpu/drm/img-rogue/physmem_osmem_linux.c b/drivers/gpu/drm/img-rogue/physmem_osmem_linux.c
index 9bcf64362889..da6194baa724 100644
--- a/drivers/gpu/drm/img-rogue/physmem_osmem_linux.c
+++ b/drivers/gpu/drm/img-rogue/physmem_osmem_linux.c
@@ -97,6 +97,7 @@ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #endif
 
 #include "kernel_compatibility.h"
+#include "sysconfig.h"
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0))
 static IMG_UINT32 g_uiMaxOrder = PVR_LINUX_PHYSMEM_MAX_ALLOC_ORDER_NUM;
@@ -3130,7 +3131,7 @@ static IMG_DEV_PHYADDR GetOffsetPA(const PMR_OSPAGEARRAY_DATA *psOSPageArrayData
 
 	PVR_ASSERT(ui32InPageOffset < (1U << ui32Log2AllocPageSize));
 
-	sPA.uiAddr = page_to_phys(psOSPageArrayData->pagearray[ui32PageIndex]);
+	sPA.uiAddr = phys_cpu2gpu(page_to_phys(psOSPageArrayData->pagearray[ui32PageIndex]));
 	sPA.uiAddr += ui32InPageOffset;
 
 	return sPA;
diff --git a/drivers/gpu/drm/img-rogue/spacemit/sysconfig.c b/drivers/gpu/drm/img-rogue/spacemit/sysconfig.c
index 50237a7e950a..6a3690fb8d87 100644
--- a/drivers/gpu/drm/img-rogue/spacemit/sysconfig.c
+++ b/drivers/gpu/drm/img-rogue/spacemit/sysconfig.c
@@ -72,13 +72,13 @@ void UMAPhysHeapCpuPAddrToDevPAddr(IMG_HANDLE hPrivData,
 	PVR_UNREFERENCED_PARAMETER(hPrivData);
 
 	/* Optimise common case */
-	psDevPAddr[0].uiAddr = psCpuPAddr[0].uiAddr;
+	psDevPAddr[0].uiAddr = phys_cpu2gpu(psCpuPAddr[0].uiAddr);
 	if (ui32NumOfAddr > 1)
 	{
 		IMG_UINT32 ui32Idx;
 		for (ui32Idx = 1; ui32Idx < ui32NumOfAddr; ++ui32Idx)
 		{
-			psDevPAddr[ui32Idx].uiAddr = psCpuPAddr[ui32Idx].uiAddr;
+			psDevPAddr[ui32Idx].uiAddr = phys_cpu2gpu(psCpuPAddr[ui32Idx].uiAddr);
 		}
 	}
 }
@@ -95,13 +95,13 @@ void UMAPhysHeapDevPAddrToCpuPAddr(IMG_HANDLE hPrivData,
 	PVR_UNREFERENCED_PARAMETER(hPrivData);
 
 	/* Optimise common case */
-	psCpuPAddr[0].uiAddr = psDevPAddr[0].uiAddr;
+	psCpuPAddr[0].uiAddr = phys_gpu2cpu(psDevPAddr[0].uiAddr);
 	if (ui32NumOfAddr > 1)
 	{
 		IMG_UINT32 ui32Idx;
 		for (ui32Idx = 1; ui32Idx < ui32NumOfAddr; ++ui32Idx)
 		{
-			psCpuPAddr[ui32Idx].uiAddr = psDevPAddr[ui32Idx].uiAddr;
+			psCpuPAddr[ui32Idx].uiAddr = phys_gpu2cpu(psDevPAddr[ui32Idx].uiAddr);
 		}
 	}
 }
@@ -270,6 +270,73 @@ PVRSRV_ERROR SysDebugInfo(PVRSRV_DEVICE_CONFIG *psDevConfig,
 	return PVRSRV_OK;
 }
 
+/*
+ * Convert gpu physical address to cpu physical address:
+ * spacemit_k1x: gpu(0-2g) --> cpu(0-2g);
+ *               gpu(2-xg) --> cpu(2g-(x+2)g); note: x>=2g
+ *                                                                  CPU
+ * 0x04 8000 0000                                         +-->  +----------+
+ *                                                        |     |          |
+ *                  DEVICE                 DRAM           |     |          |
+ * 0x04 0000 0000+---------+  <------+  +----------+  +---+     |          |
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |    DDR   |
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |          |
+ * 0x01 0000 0000|         |            |          |      +-->  +----------+
+ *               |         |            |          |      |     |          |
+ *               |         |            |          |      |     |    IO    |
+ * 0x00 8000 0000+---------+  <------+  +----------+  +---+-->  +----------+
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |    DDR   |
+ * 0x00 0000 0000+---------+  <------+  +----------+  +------>  +----------+
+ *
+ */
+unsigned long phys_gpu2cpu(unsigned long phys_addr)
+{
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	if (phys_addr >= 0x80000000UL) {
+		phys_addr += 0x80000000UL;
+	}
+#endif
+
+	return phys_addr;
+}
+
+/*
+ * Convert cpu physical address to gpu physical address:
+ * spacemit_k1x: cpu(0-2g) --> gpu(0-2g);
+ *               cpu(4-xg) --> gpu(2-(x-2)g); note: x>=4g
+ *                                                                  CPU
+ * 0x04 8000 0000                                         +-->  +----------+
+ *                                                        |     |          |
+ *                  DEVICE                 DRAM           |     |          |
+ * 0x04 0000 0000+---------+  <------+  +----------+  +---+     |          |
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |    DDR   |
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |          |
+ * 0x01 0000 0000|         |            |          |      +-->  +----------+
+ *               |         |            |          |      |     |          |
+ *               |         |            |          |      |     |    IO    |
+ * 0x00 8000 0000+---------+  <------+  +----------+  +---+-->  +----------+
+ *               |         |            |          |            |          |
+ *               |         |            |          |            |    DDR   |
+ * 0x00 0000 0000+---------+  <------+  +----------+  +------>  +----------+
+ *
+ */
+unsigned long phys_cpu2gpu(unsigned long phys_addr)
+{
+#ifdef CONFIG_SOC_SPACEMIT_K1X
+	if (phys_addr >= 0x100000000UL) {
+		phys_addr -= 0x80000000UL;
+	}
+#endif
+
+	return phys_addr;
+}
 /******************************************************************************
  End of file (sysconfig.c)
 ******************************************************************************/
diff --git a/drivers/gpu/drm/img-rogue/spacemit/sysconfig.h b/drivers/gpu/drm/img-rogue/spacemit/sysconfig.h
index d34e2b49a703..051579154ad9 100644
--- a/drivers/gpu/drm/img-rogue/spacemit/sysconfig.h
+++ b/drivers/gpu/drm/img-rogue/spacemit/sysconfig.h
@@ -53,6 +53,9 @@ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #define ST_GPU_PBASE        0xcac00000
 #define ST_GPU_SIZE         0x10000
 #define ST_IRQ_GPU          59
+
+unsigned long phys_gpu2cpu(unsigned long phys_addr);
+unsigned long phys_cpu2gpu(unsigned long phys_addr);
 /*****************************************************************************
  * system specific data structures
  *****************************************************************************/
-- 
2.47.0

