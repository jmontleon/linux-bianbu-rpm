From 3bd5b5633e560337894285d92f71e6a11dde0ef8 Mon Sep 17 00:00:00 2001
From: Nell <xianbin.zhu@spacemit.com>
Date: Fri, 24 Nov 2023 16:20:40 +0800
Subject: [PATCH 0164/1204] pm-domain: correction of previous driver errors and
 add some new features

1. delete some invalidate function definations on mpmu registers
2. add the function of automatically obtaining regulators
3. add a flag to indicate whether using hw mode when power-on/off
    one power-domain
4. change the boot-level of this driver for probing as early as possible

Change-Id: I8c008d414a95b2a0e043e9c9a121537737a348ca
---
 .../boot/dts/spacemit/k1x_pm_domain.dtsi      |  52 +-----
 drivers/soc/spacemit/pm_domain/pm_domain.c    | 176 +++++++++++++-----
 include/dt-bindings/pmu/k1x_pmu.h             |  13 ++
 3 files changed, 151 insertions(+), 90 deletions(-)
 create mode 100644 include/dt-bindings/pmu/k1x_pmu.h

diff --git a/arch/riscv/boot/dts/spacemit/k1x_pm_domain.dtsi b/arch/riscv/boot/dts/spacemit/k1x_pm_domain.dtsi
index fbbc575a9eb6..319c1247ea3d 100644
--- a/arch/riscv/boot/dts/spacemit/k1x_pm_domain.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1x_pm_domain.dtsi
@@ -21,7 +21,7 @@ power: power-controller {
 			#address-cells = <1>;
 			#size-cells = <0>;
 
-			domains = <0x9>;
+			domains = <0x6>;
 
 			power-domain@SPT_PD_BUS {
 				reg = <0x0>;
@@ -33,26 +33,21 @@ power-domain@SPT_PD_VPU {
 				reg = <0x1>;
 				pm_qos = <12>;
 				reg_pwr_ctrl = <0xa8>;
-				bit_hw_mode = <4>;
 				bit_sleep2 = <3>;
 				bit_sleep1 = <2>;
 				bit_isolation = <1>;
-				bit_auto_pwr_on = <0>;
-				bit_hw_pwr_stat = <9>;
 				bit_pwr_stat = <1>;
+				bit_hw_pwr_stat = <9>;
 				#power-domain-cells = <0>;
 			};
 
 			power-domain@SPT_PD_GPU {
 				reg = <0x2>;
 				pm_qos = <12>;
-				reg_pwr_ctrl = <0xa8>;
-				bit_hw_mode = <4>;
+				reg_pwr_ctrl = <0xd0>;
 				bit_sleep2 = <3>;
 				bit_sleep1 = <2>;
 				bit_isolation = <1>;
-				bit_auto_pwr_on = <0>;
-				bit_hw_pwr_stat = <8>;
 				bit_pwr_stat = <0>;
 				#power-domain-cells = <0>;
 			};
@@ -60,72 +55,45 @@ power-domain@SPT_PD_GPU {
 			power-domain@SPT_PD_LCD	{
 				reg = <0x3>;
 				pm_qos = <12>;
-				reg_pwr_ctrl = <0xa8>;
+				reg_pwr_ctrl = <0x380>;
 				bit_hw_mode = <4>;
 				bit_sleep2 = <3>;
 				bit_sleep1 = <2>;
 				bit_isolation = <1>;
 				bit_auto_pwr_on = <0>;
-				bit_hw_pwr_stat = <12>;
 				bit_pwr_stat = <4>;
+				bit_hw_pwr_stat = <12>;
+				use_hw = <1>;
 				#power-domain-cells = <0>;
 			};
 
 			power-domain@SPT_PD_ISP	{
 				reg = <0x4>;
 				pm_qos = <12>;
-				reg_pwr_ctrl = <0xa8>;
+				reg_pwr_ctrl = <0x37c>;
 				bit_hw_mode = <4>;
 				bit_sleep2 = <3>;
 				bit_sleep1 = <2>;
 				bit_isolation = <1>;
 				bit_auto_pwr_on = <0>;
-				bit_hw_pwr_stat = <10>;
 				bit_pwr_stat = <2>;
+				bit_hw_pwr_stat = <10>;
 				#power-domain-cells = <0>;
 			};
 
 			power-domain@SPT_PD_AUDIO {
 				reg = <0x5>;
 				pm_qos = <15>;
-				reg_pwr_ctrl = <0xa8>;
+				reg_pwr_ctrl = <0x378>;
 				bit_hw_mode = <4>;
 				bit_sleep2 = <3>;
 				bit_sleep1 = <2>;
 				bit_isolation = <1>;
 				bit_auto_pwr_on = <0>;
-				bit_hw_pwr_stat = <11>;
 				bit_pwr_stat = <3>;
+				bit_hw_pwr_stat = <11>;
 				#power-domain-cells = <0>;
 			};
-
-			power-domain@SPT_PD_GNSS {
-				reg = <0x6>;
-				pm_qos = <15>;
-				reg_pwr_ctrl = <0xa8>;
-				bit_hw_mode = <4>;
-				bit_sleep2 = <3>;
-				bit_sleep1 = <2>;
-				bit_isolation = <1>;
-				bit_auto_pwr_on = <0>;
-				bit_hw_pwr_stat = <14>;
-				bit_pwr_stat = <6>;
-				#power-domain-cells = <0>;
-			};
-
-			power-domains@SPT_PD_DUMMY {
-				reg = <0x7>;
-				pm_qos = <15>;
-				#power-domain-cells = <1>;
-				#address-cells = <1>;
-				#size-cells = <0>;
-
-				power-domain@SPT_PD_DUMMY_CHILD {
-                                        reg = <0x8>;
-                                        pm_qos = <15>;
-                                        #power-domain-cells = <0>;
-                                };
-			};
 		};
 	};
 };
diff --git a/drivers/soc/spacemit/pm_domain/pm_domain.c b/drivers/soc/spacemit/pm_domain/pm_domain.c
index b70d97678ede..4d2690553b9a 100644
--- a/drivers/soc/spacemit/pm_domain/pm_domain.c
+++ b/drivers/soc/spacemit/pm_domain/pm_domain.c
@@ -19,8 +19,10 @@
 #include <linux/pm_qos.h>
 #include <linux/mfd/syscon.h>
 #include <linux/spinlock_types.h>
+#include <linux/regulator/consumer.h>
 
 #define MAX_REGMAP		5
+#define MAX_REGULATOR_PER_DOMAIN	5
 
 #define MPMU_REGMAP_INDEX	0
 #define APMU_REGMAP_INDEX	1
@@ -43,8 +45,6 @@
 #define PM_QOS_VCTCXOSD_OFFSET	19
 #define PM_QOS_STBYEN_OFFSET	13
 #define PM_QOS_PE_VOTE_AP_SLPEN_OFFSET	3
-#define PM_QOS_BBSD_OFFSET	25
-#define PM_QOS_MSASLPEN_OFFSET	14
 
 struct spacemit_pm_domain_param {
 	int reg_pwr_ctrl;
@@ -56,6 +56,7 @@ struct spacemit_pm_domain_param {
 	int bit_auto_pwr_on;
 	int bit_hw_pwr_stat;
 	int bit_pwr_stat;
+	int use_hw;
 };
 
 struct spacemit_pm_domain {
@@ -65,6 +66,8 @@ struct spacemit_pm_domain {
 	struct notifier_block notifier;
 	struct freq_qos_request qos;
 	struct spacemit_pm_domain_param param;
+	struct regulator *rgr[MAX_REGULATOR_PER_DOMAIN];
+	int rgr_count;
 };
 
 struct spacemit_pmu {
@@ -94,27 +97,43 @@ static int spacemit_pd_power_off(struct generic_pm_domain *domain)
 	if (spd->param.reg_pwr_ctrl == 0)
 		return 0;
 
-	/* this is the sw type */
-	regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
-	val &= ~(1 << spd->param.bit_isolation);
-	regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+	if (!spd->param.use_hw) {
+		/* this is the sw type */
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val &= ~(1 << spd->param.bit_isolation);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
 
-	usleep_range(10, 15);
+		usleep_range(10, 15);
 
-	/* mcu power off */
-	regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
-	val &= ~((1 << spd->param.bit_sleep1) | (1 << spd->param.bit_sleep2));
-	regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+		/* mcu power off */
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val &= ~((1 << spd->param.bit_sleep1) | (1 << spd->param.bit_sleep2));
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
 
-	usleep_range(10, 15);
+		usleep_range(10, 15);
 
-	for (loop = 10000; loop >= 0; --loop) {
-		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
-		if ((val & (1 << spd->param.bit_pwr_stat)) == 0)
-			break;
-		usleep_range(4, 6);
+		for (loop = 10000; loop >= 0; --loop) {
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
+			if ((val & (1 << spd->param.bit_pwr_stat)) == 0)
+				break;
+			usleep_range(4, 6);
+		}
+	} else {
+		/* LCD */
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val &= ~(1 << spd->param.bit_auto_pwr_on);
+		val &= ~(1 << spd->param.bit_hw_mode);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+
+		usleep_range(10, 30);
+
+		for (loop = 10000; loop >= 0; --loop) {
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
+			if ((val & (1 << spd->param.bit_hw_pwr_stat)) == 0)
+				break;
+			usleep_range(4, 6);
+		}
 	}
-
 	if (loop < 0) {
 		pr_err("power-off domain: %d, error\n", spd->pm_index);
 		return -EBUSY;
@@ -137,31 +156,48 @@ static int spacemit_pd_power_on(struct generic_pm_domain *domain)
 	if (val & (1 << spd->param.bit_pwr_stat))
 		return 0;
 
-	/* mcu power on */
-	regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
-	val |= (1 << spd->param.bit_sleep1);
-	regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+	if (!spd->param.use_hw) {
+		/* mcu power on */
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val |= (1 << spd->param.bit_sleep1);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
 
-	usleep_range(20, 25);
+		usleep_range(20, 25);
 
-	regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
-	val |= (1 << spd->param.bit_sleep2) | (1 << spd->param.bit_sleep1);
-	regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val |= (1 << spd->param.bit_sleep2) | (1 << spd->param.bit_sleep1);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
 
-	usleep_range(20, 25);
+		usleep_range(20, 25);
 
-	/* disable isolation */
-	regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
-	val |= (1 << spd->param.bit_isolation);
-	regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+		/* disable isolation */
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val |= (1 << spd->param.bit_isolation);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
 
-	usleep_range(10, 15);
+		usleep_range(10, 15);
 
-	for (loop = 10000; loop >= 0; --loop) {
-		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
-		if (val & (1 << spd->param.bit_pwr_stat))
-			break;
-		usleep_range(4, 6);
+		for (loop = 10000; loop >= 0; --loop) {
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
+			if (val & (1 << spd->param.bit_pwr_stat))
+				break;
+			usleep_range(4, 6);
+		}
+	} else {
+		/* LCD */
+		regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, &val);
+		val |= (1 << spd->param.bit_auto_pwr_on);
+		val |= (1 << spd->param.bit_hw_mode);
+		regmap_write(gpmu->regmap[APMU_REGMAP_INDEX], spd->param.reg_pwr_ctrl, val);
+	
+		usleep_range(290, 310);
+		
+		for (loop = 10000; loop >= 0; --loop) {
+			regmap_read(gpmu->regmap[APMU_REGMAP_INDEX], APMU_POWER_STATUS_REG, &val);
+			if (val & (1 << spd->param.bit_hw_pwr_stat))
+				break;
+			usleep_range(4, 6);
+		}
 	}
 
 	if (loop < 0) {
@@ -174,8 +210,9 @@ static int spacemit_pd_power_on(struct generic_pm_domain *domain)
 
 static int spacemit_pd_attach_dev(struct generic_pm_domain *genpd, struct device *dev)
 {
-	int err, i = 0;
+	int err, i = 0, count;
 	struct clk *clk;
+	const char *strings[MAX_REGULATOR_PER_DOMAIN];
 	struct spacemit_pm_domain *spd = container_of(genpd, struct spacemit_pm_domain, genpd);
 
 	err = pm_clk_create(dev);
@@ -194,6 +231,29 @@ static int spacemit_pd_attach_dev(struct generic_pm_domain *genpd, struct device
 		 }
 	}
 
+	/* parse the regulator */
+	count = of_property_count_strings(dev->of_node, "vin-supply-names");
+	if (count < 0)
+		pr_info("no vin-suppuly-names found\n");
+	else {
+		err = of_property_read_string_array(dev->of_node, "vin-supply-names",
+			strings, count);
+		if (err < 0) {
+			pr_info("read string array vin-supplu-names error\n");
+			return err;
+		}
+
+		for (i = 0; i < count; ++i) {
+			spd->rgr[i] = devm_regulator_get(dev, strings[i]);
+			if (IS_ERR(spd->rgr[i])) {
+				pr_err("regulator supply %s, get failed\n", strings[i]);
+				return PTR_ERR(spd->rgr[i]);
+			}
+		}
+
+		spd->rgr_count = count;
+	}
+
 	/* add one notifier is ok */
 	if (!spd->gdev->power.qos) {
 		err = dev_pm_qos_add_notifier(spd->gdev, &spd->notifier, DEV_PM_QOS_MAX_FREQUENCY);
@@ -204,24 +264,27 @@ static int spacemit_pd_attach_dev(struct generic_pm_domain *genpd, struct device
 	freq_qos_add_request(&spd->gdev->power.qos->freq, &spd->qos, FREQ_QOS_MAX,
 			PM_QOS_BLOCK_DEFAULT_VALUE);
 
-
 	return 0;
 }
 
 static void spacemit_pd_detach_dev(struct generic_pm_domain *genpd, struct device *dev)
 {
+	int i = 0;
 	struct spacemit_pm_domain *spd = container_of(genpd, struct spacemit_pm_domain, genpd);
 
 	pm_clk_destroy(dev);
 
 	dev_pm_qos_remove_notifier(spd->gdev, &spd->notifier, DEV_PM_QOS_MAX_FREQUENCY);
+
+	/* */
+	for (i = 0; i < spd->rgr_count; ++i)
+		devm_regulator_put(spd->rgr[i]);
 }
 
 static int spacemit_pm_notfier_call(struct notifier_block *nb, unsigned long action, void *data)
 {
 	unsigned int apcr_per;
-	unsigned int apcr_clear = 0, apcr_set = (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET) |
-	       (1 << PM_QOS_BBSD_OFFSET) | (1 << PM_QOS_MSASLPEN_OFFSET);
+	unsigned int apcr_clear = 0, apcr_set = (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET);
 
 	spin_lock(&spacemit_apcr_qos_lock);
 
@@ -235,7 +298,6 @@ static int spacemit_pm_notfier_call(struct notifier_block *nb, unsigned long act
 			apcr_clear |= (1 << PM_QOS_APBSD_OFFSET);
 			apcr_clear |= (1 << PM_QOS_VCTCXOSD_OFFSET);
 			apcr_clear |= (1 << PM_QOS_STBYEN_OFFSET);
-			apcr_clear |= (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET);
 			break;
 		case PM_QOS_BLOCK_DDR:
 			apcr_set |= (1 << PM_QOS_AXISDD_OFFSET);
@@ -243,7 +305,6 @@ static int spacemit_pm_notfier_call(struct notifier_block *nb, unsigned long act
 			apcr_clear |= (1 << PM_QOS_APBSD_OFFSET);
 			apcr_clear |= (1 << PM_QOS_VCTCXOSD_OFFSET);
 			apcr_clear |= (1 << PM_QOS_STBYEN_OFFSET);
-			apcr_clear |= (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET);
 			break;
 		case PM_QOS_BLOCK_UDR:
 			apcr_clear |= (1 << PM_QOS_STBYEN_OFFSET);
@@ -251,7 +312,6 @@ static int spacemit_pm_notfier_call(struct notifier_block *nb, unsigned long act
 			apcr_set |= (1 << PM_QOS_DDRCORSD_OFFSET);
 			apcr_set |= (1 << PM_QOS_APBSD_OFFSET);
 			apcr_set |= (1 << PM_QOS_VCTCXOSD_OFFSET);
-			apcr_set |= (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET);
 			break;
 		case PM_QOS_BLOCK_DEFAULT_VALUE:
 			apcr_set |= (1 << PM_QOS_AXISDD_OFFSET);
@@ -259,7 +319,6 @@ static int spacemit_pm_notfier_call(struct notifier_block *nb, unsigned long act
 			apcr_set |= (1 << PM_QOS_APBSD_OFFSET);
 			apcr_set |= (1 << PM_QOS_VCTCXOSD_OFFSET);
 			apcr_set |= (1 << PM_QOS_STBYEN_OFFSET);
-			apcr_set |= (1 << PM_QOS_PE_VOTE_AP_SLPEN_OFFSET);
 			break;
 		default:
 			pr_warn("Invalidate pm qos value\n");
@@ -280,6 +339,7 @@ static int spacemit_pm_notfier_call(struct notifier_block *nb, unsigned long act
 
 static int spacemit_genpd_stop(struct device *dev)
 {
+	int i = 0, ret;
 	/* do the clk & pm_qos related things */
 	struct generic_pm_domain *pd = pd_to_genpd(dev->pm_domain);
 	struct spacemit_pm_domain *spd = container_of(pd, struct spacemit_pm_domain, genpd);
@@ -287,24 +347,43 @@ static int spacemit_genpd_stop(struct device *dev)
 	/* dealing with the pm_qos */
 	freq_qos_update_request(&spd->qos, PM_QOS_BLOCK_DEFAULT_VALUE);
 
-	/* enable the clk */
+	/* disable the clk */
 	pm_clk_suspend(dev);
 
+	/* close the power */
+	for (i = 0; i < spd->rgr_count; ++i) {
+		ret = regulator_disable(spd->rgr[i]);
+		if (ret < 0) {
+			pr_err("%s: regulator disable failed\n", __func__);
+			return ret;
+		}
+	}
+
 	return 0;
 }
 
 static int spacemit_genpd_start(struct device *dev)
 {
+	int i, ret;
 	/* do the clk & pm_qos related things */
 	struct generic_pm_domain *pd = pd_to_genpd(dev->pm_domain);
 	struct spacemit_pm_domain *spd = container_of(pd, struct spacemit_pm_domain, genpd);
 
+	/* enable the power */
+	for (i = 0; i < spd->rgr_count; ++i) {
+		ret = regulator_enable(spd->rgr[i]);
+		if (ret < 0) {
+			pr_err("%s: regulator disable failed\n", __func__);
+			return ret;
+		}
+	}
+
 	/* enable the clk */
 	pm_clk_resume(dev);
 
 	/* dealing with the pm_qos */
 	freq_qos_update_request(&spd->qos, spd->param.pm_qos);
-
+	
 	return 0;
 }
 
@@ -327,6 +406,7 @@ static int spacemit_get_pm_domain_parameters(struct device_node *node, struct sp
 	err |= of_property_read_u32(node, "bit_auto_pwr_on", &pd->param.bit_auto_pwr_on);
 	err |= of_property_read_u32(node, "bit_hw_pwr_stat", &pd->param.bit_hw_pwr_stat);
 	err |= of_property_read_u32(node, "bit_pwr_stat", &pd->param.bit_pwr_stat);
+	err |= of_property_read_u32(node, "use_hw", &pd->param.use_hw);
 
 	if (err)
 		pr_warn("get pm domain parameter failed\n");
@@ -560,4 +640,4 @@ static int __init spacemit_pm_domain_drv_register(void)
 {
 	return platform_driver_register(&spacemit_pm_domain_driver);
 }
-postcore_initcall(spacemit_pm_domain_drv_register);
+core_initcall(spacemit_pm_domain_drv_register);
diff --git a/include/dt-bindings/pmu/k1x_pmu.h b/include/dt-bindings/pmu/k1x_pmu.h
new file mode 100644
index 000000000000..4ca807c65713
--- /dev/null
+++ b/include/dt-bindings/pmu/k1x_pmu.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef __DT_BINDINGS_PMU_K1X_H__
+#define __DT_BINDINGS_PMU_K1X_H__
+
+#define K1X_PMU_BUS_PWR_DOMAIN	0
+#define K1X_PMU_VPU_PWR_DOMAIN	1
+#define K1X_PMU_GPU_PWR_DOMAIN	2
+#define K1X_PMU_LCD_PWR_DOMAIN	3
+#define K1X_PMU_ISP_PWR_DOMAIN	4
+#define K1X_PMU_AUD_PWR_DOMAIN	5
+
+#endif
-- 
2.47.0

