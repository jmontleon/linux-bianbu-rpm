From 572bcad2df9ce6779548347112cd3508f83fd230 Mon Sep 17 00:00:00 2001
From: fuqiang <qiang.fu@spacemit.com>
Date: Wed, 20 Mar 2024 18:07:45 +0800
Subject: [PATCH 0502/1206] vpu: sync Release-JINDIE-V4.3.1 on 2024-03-19 06:08

Change-Id: I6a0f023df41d54340cad05524750939031497db8
---
 .../spacemit/vpu_k1x/if/mvx_session.c         | 47 +++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c
index da54ecfc16ea..752413fad81c 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/if/mvx_session.c
@@ -332,6 +332,49 @@ static int wait_flush_done(struct mvx_session *session, enum mvx_direction dir)
     return ret;
 }
 
+static int wait_switch_out(struct mvx_session *session)
+{
+    int ret = 0;
+
+    while (is_fw_loaded(session) != false &&
+            session->switched_in == true &&
+            session->error == 0) {
+        mutex_unlock(session->isession.mutex);
+
+        ret = wait_event_timeout(
+                session->waitq,
+                is_fw_loaded(session) == false ||
+                session->switched_in == false ||
+                session->error != 0,
+                msecs_to_jiffies(session_wait_pending_timeout));
+
+        if (ret < 0)
+            goto lock_mutex;
+
+        if (ret == 0) {
+            send_event_error(session, -ETIME);
+            ret = -ETIME;
+            goto lock_mutex;
+        }
+
+        mutex_lock(session->isession.mutex);
+    }
+
+    return session->error;
+
+lock_mutex:
+    mutex_lock(session->isession.mutex);
+
+    if (ret < 0) {
+        MVX_SESSION_WARN(session,
+                "wait_switch_out returned error. ret=%d, error=%d, msg_pending=%d, switch_in=%d",
+                ret, session->error, session->fw.msg_pending, session->switched_in);
+
+        print_debug(session);
+    }
+    return ret;
+}
+
 static int send_irq(struct mvx_session *session)
 {
 	if (IS_ERR_OR_NULL(session->csession))
@@ -2255,6 +2298,10 @@ int mvx_session_streamoff(struct mvx_session *session,
         }
         if (session->fw_state == MVX_FW_STATE_STOPPED) {
             fw_switch_out(session);
+            wait_switch_out(session);
+            if (session->switched_in) {
+                MVX_SESSION_WARN(session, "warn: switch_in is %d when stream off done.", session->switched_in);
+            }
         }
     }
 dequeue_buffers:
-- 
2.47.0

