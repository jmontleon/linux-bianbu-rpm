From 1284b920613796802f07a3fa5cffe17bdf73330a Mon Sep 17 00:00:00 2001
From: weijinmei <jinmei.wei@spacemit.com>
Date: Mon, 3 Jun 2024 16:41:45 +0800
Subject: [PATCH 0757/1200] audio: add mclk config flow

Change-Id: Ib430cae631b81442f301b6bcce20c25deaf86ccf
---
 sound/soc/spacemit/spacemit-snd-card.c | 55 ++++++++++++++++++++++++++
 sound/soc/spacemit/spacemit-snd-i2s.c  | 37 +++++++++++++++--
 2 files changed, 88 insertions(+), 4 deletions(-)

diff --git a/sound/soc/spacemit/spacemit-snd-card.c b/sound/soc/spacemit/spacemit-snd-card.c
index 7538d229c43f..77eb384f8d86 100644
--- a/sound/soc/spacemit/spacemit-snd-card.c
+++ b/sound/soc/spacemit/spacemit-snd-card.c
@@ -21,6 +21,54 @@
 #define CELL	"#sound-dai-cells"
 #define PREFIX	"simple-audio-card,"
 
+
+int spacemit_simple_hw_params(struct snd_pcm_substream *substream,
+		struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+	struct snd_soc_dai *sdai;
+	struct asoc_simple_priv *priv = snd_soc_card_get_drvdata(rtd->card);
+	struct simple_dai_props *props = simple_priv_to_props(priv, rtd->num);
+	unsigned int mclk, mclk_fs = 0;
+	int i, ret;
+
+	if (props->mclk_fs)
+		mclk_fs = props->mclk_fs;
+
+	if (mclk_fs) {
+		struct snd_soc_component *component;
+		mclk = params_rate(params) * mclk_fs;
+
+		/* Ensure sysclk is set on all components in case any
+			* (such as platform components) are missed by calls to
+			* snd_soc_dai_set_sysclk.
+			*/
+		for_each_rtd_components(rtd, i, component) {
+			ret = snd_soc_component_set_sysclk(component, 0, 0,
+				mclk, SND_SOC_CLOCK_IN);
+			if (ret && ret != -ENOTSUPP)
+				return ret;
+		}
+
+		for_each_rtd_codec_dais(rtd, i, sdai) {
+			ret = snd_soc_dai_set_sysclk(sdai, 0, mclk, SND_SOC_CLOCK_IN);
+			if (ret && ret != -ENOTSUPP)
+				return ret;
+		}
+
+		for_each_rtd_cpu_dais(rtd, i, sdai) {
+			ret = snd_soc_dai_set_sysclk(sdai, 0, mclk, SND_SOC_CLOCK_OUT);
+			if (ret && ret != -ENOTSUPP)
+				return ret;
+		}
+	}
+	return 0;
+}
+
+static const struct snd_soc_ops simple_ops = {
+	.hw_params      = spacemit_simple_hw_params,
+};
+
 static int asoc_simple_parse_dai(struct device_node *node,
 		struct snd_soc_dai_link_component *dlc,
 		int *is_single_link)
@@ -161,6 +209,7 @@ static int asoc_simple_card_dai_link_of(struct device_node *node,
 	char prop[128];
 	char *prefix = "";
 	int ret, single_cpu;
+	unsigned int val = 0;
 
 	if (is_top_level_node)
 		prefix = PREFIX;
@@ -220,6 +269,12 @@ static int asoc_simple_card_dai_link_of(struct device_node *node,
 		dai_link->init = asoc_simple_card_jack_init;
 	}
 
+	dai_link->ops = &simple_ops;
+	if (!of_property_read_u32(node, "spacemit,mclk-fs", &val)) {
+		priv->dai_props->mclk_fs = val;
+	} else {
+		priv->dai_props->mclk_fs = 256;
+	}
 	asoc_simple_canonicalize_cpu(dai_link->cpus, single_cpu);
 	asoc_simple_canonicalize_platform(dai_link->platforms, dai_link->cpus);
 
diff --git a/sound/soc/spacemit/spacemit-snd-i2s.c b/sound/soc/spacemit/spacemit-snd-i2s.c
index faca36129b35..36522fb909fe 100644
--- a/sound/soc/spacemit/spacemit-snd-i2s.c
+++ b/sound/soc/spacemit/spacemit-snd-i2s.c
@@ -85,6 +85,7 @@ struct sspa_priv {
 	int dai_id_pre;
 	int running_cnt;
 	struct platform_device *i2splatdev;
+	unsigned int sysclk;
 };
 
 static void i2s_sspa_write_reg(struct ssp_device *sspa, u32 reg, u32 val)
@@ -117,6 +118,15 @@ static void i2s_sspa_shutdown(struct snd_pcm_substream *substream,
 static int i2s_sspa_set_dai_sysclk(struct snd_soc_dai *cpu_dai,
 				    int clk_id, unsigned int freq, int dir)
 {
+	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(cpu_dai);
+
+	if (sspa_priv->running_cnt)
+		return 0;
+
+	if (sspa_priv->sysclk == freq)
+		return 0;
+
+	sspa_priv->sysclk = freq;
 	return 0;
 }
 
@@ -207,13 +217,35 @@ static int i2s_sspa_hw_params(struct snd_pcm_substream *substream,
 	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(dai);
 	struct ssp_device *sspa = sspa_priv->sspa;
 	struct snd_dmaengine_dai_dma_data *dma_params;
+	unsigned int mclk_fs, val, target;
 
-	pr_debug("%s, format=0x%x\n", __FUNCTION__, params_format(params));
 	dma_params = &sspa_priv->dma_params[substream->stream];
 	dma_params->addr = (sspa->phys_base + DATAR);
 	dma_params->maxburst = 32;
 	dma_params->addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
 	snd_soc_dai_set_dma_data(cpu_dai, substream, dma_params);
+
+	if (sspa_priv->running_cnt)
+		return 0;
+
+	mclk_fs = sspa_priv->sysclk / (params_rate(params));
+	switch (mclk_fs) {
+	case 64:
+		target = SYSCLK_BASE_156M | 0 << 27| 4 << 15 | 200; //64fs
+		break;
+	case 128:
+		target = SYSCLK_BASE_156M | 1 << 27| 8 << 15 | 200; //128fs
+		break;
+	case 256:
+		target = SYSCLK_BASE_156M | 3 << 27| 16 << 15 | 200; //256fs
+		break;
+	default:
+		target = SYSCLK_BASE_156M | 3 << 27| 16 << 15 | 200; //256fs
+		break;
+	}
+	val = __raw_readl(sspa->pmumain + ISCCR1);
+	val = val & ~0x5FFFFFFF;
+	__raw_writel(val | target, sspa->pmumain + ISCCR1);
 	return 0;
 }
 
@@ -274,9 +306,6 @@ static int i2s_sspa_probe(struct snd_soc_dai *dai)
 	struct sspa_priv *priv = dev_get_drvdata(dai->dev);
 	struct ssp_device *sspa = priv->sspa;
 	unsigned int sspa_clk = 0;
-	pr_debug("%s\n", __FUNCTION__);
-	//init clock
-	__raw_writel((SYSCLK_BASE_156M | BITCLK_DIV_468| FRAME_48K_I2S | 200), sspa->pmumain + ISCCR1);
 
 	if (dai->id == 0)
 	{
-- 
2.47.0

