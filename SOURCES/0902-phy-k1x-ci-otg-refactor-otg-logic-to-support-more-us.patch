From 4fd929c1b72d5eaa23d53bfc5ec38b69cce5b55e Mon Sep 17 00:00:00 2001
From: Pan Junzhong <junzhong.pan@spacemit.com>
Date: Tue, 6 Aug 2024 16:36:05 +0800
Subject: [PATCH 0902/1205] phy-k1x-ci-otg: refactor otg logic to support more
 usage

1. Support usb-role-switch usage.
2. Remove useless legacy codes, state machine and gating logic
   for better readability. Gating is supported if extcon or
   usb-role-switch could report idle state.
3. Fix udc doesn't work bug when only have idpin detection.
4. Remove global variable so that support two otg instances.
5. Add sysfs control for extcon usage.

Change-Id: If6f77dc17c413461113bbd399bfedf5ea414667d
---
 drivers/usb/phy/Makefile         |   4 +-
 drivers/usb/phy/phy-k1x-ci-otg.c | 924 ++++++++++++-------------------
 drivers/usb/phy/phy-k1x-ci-otg.h | 111 +---
 3 files changed, 380 insertions(+), 659 deletions(-)

diff --git a/drivers/usb/phy/Makefile b/drivers/usb/phy/Makefile
index f29444b265de..f16976e353f2 100644
--- a/drivers/usb/phy/Makefile
+++ b/drivers/usb/phy/Makefile
@@ -23,5 +23,5 @@ obj-$(CONFIG_USB_MXS_PHY)		+= phy-mxs-usb.o
 obj-$(CONFIG_USB_ULPI)			+= phy-ulpi.o
 obj-$(CONFIG_USB_ULPI_VIEWPORT)		+= phy-ulpi-viewport.o
 obj-$(CONFIG_KEYSTONE_USB_PHY)		+= phy-keystone.o
-obj-$(CONFIG_USB_K1XCI_OTG)		+= phy-k1x-ci-otg.o
-obj-$(CONFIG_K1XCI_USB2_PHY)	+= phy-k1x-ci-usb2.o
\ No newline at end of file
+obj-$(CONFIG_K1XCI_USB2_PHY)	+= phy-k1x-ci-usb2.o
+obj-$(CONFIG_USB_K1XCI_OTG)		+= phy-k1x-ci-otg.o
\ No newline at end of file
diff --git a/drivers/usb/phy/phy-k1x-ci-otg.c b/drivers/usb/phy/phy-k1x-ci-otg.c
index 8fd575df7aa1..d0afa9c619a2 100644
--- a/drivers/usb/phy/phy-k1x-ci-otg.c
+++ b/drivers/usb/phy/phy-k1x-ci-otg.c
@@ -16,6 +16,8 @@
 #include <linux/of.h>
 #include <linux/workqueue.h>
 #include <linux/platform_device.h>
+#include <linux/of_platform.h>
+#include <linux/property.h>
 #include <linux/usb.h>
 #include <linux/usb/ch9.h>
 #include <linux/usb/otg.h>
@@ -24,62 +26,56 @@
 #include <linux/platform_data/k1x_ci_usb.h>
 #include <linux/of_address.h>
 #include <dt-bindings/usb/k1x_ci_usb.h>
-#include <linux/pm_qos.h>
 #include <linux/regulator/consumer.h>
 #include <linux/gpio/consumer.h>
 #include <linux/extcon.h>
-#include <linux/extcon-provider.h>
 #include "phy-k1x-ci-otg.h"
 
+
 #define MAX_RETRY_TIMES 60
 #define RETRY_SLEEP_MS 1000
 
-#define APMU_SD_ROT_WAKE_CLR 0x7C
-#define USB_OTG_ID_WAKEUP_EN (1 << 8)
-#define USB_OTG_ID_WAKEUP_CLR (1 << 18)
-
 #define PMU_SD_ROT_WAKE_CLR_VBUS_DRV (0x1 << 21)
 
 static const char driver_name[] = "k1x-ci-otg";
 
-static int otg_force_host_mode;
-static int otg_state = 0;
-
-static char *state_string[] = {
-	"undefined",	"b_idle",     "b_srp_init", "b_peripheral",
-	"b_wait_acon",	"b_host",     "a_idle",	    "a_wait_vrise",
-	"a_wait_bcon",	"a_host",     "a_suspend",  "a_peripheral",
-	"a_wait_vfall", "a_vbus_err",
+static const char *const state_string[] = {
+	[MV_OTG_ROLE_UNDEFINED] = "undefined",
+	[MV_OTG_ROLE_DEVICE_IDLE] = "idle",
+	[MV_OTG_ROLE_DEVICE_ACTIVE] = "device",
+	[MV_OTG_ROLE_HOST_ACTIVE] = "host",
 };
 
 static int mv_otg_set_vbus(struct usb_otg *otg, bool on)
 {
 	struct mv_otg *mvotg = container_of(otg->usb_phy, struct mv_otg, phy);
 	uint32_t temp;
+	int ret = 0;
 
 	dev_dbg(&mvotg->pdev->dev, "%s  on= %d ... \n", __func__, on);
-	/* set constraint before turn on vbus */
-	if (on) {
-		pm_stay_awake(&mvotg->pdev->dev);
+
+	if (mvotg->vbus_otg) {
+		if (on)
+			ret = regulator_enable(mvotg->vbus_otg);
+		else
+			ret = regulator_disable(mvotg->vbus_otg);
+
+		if (ret)
+			dev_err(&mvotg->pdev->dev, "regulator set %d fail\n", on);
+		return ret;
 	}
 
 	if (on) {
-		temp = readl(mvotg->apmu_base + APMU_SD_ROT_WAKE_CLR);
-		writel(PMU_SD_ROT_WAKE_CLR_VBUS_DRV | temp,
-		       mvotg->apmu_base + APMU_SD_ROT_WAKE_CLR);
+		temp = readl(mvotg->wakeup_reg);
+		writel(PMU_SD_ROT_WAKE_CLR_VBUS_DRV | temp, mvotg->wakeup_reg);
 	} else {
-		temp = readl(mvotg->apmu_base + APMU_SD_ROT_WAKE_CLR);
+		temp = readl(mvotg->wakeup_reg);
 		temp &= ~PMU_SD_ROT_WAKE_CLR_VBUS_DRV;
-		writel(temp, mvotg->apmu_base + APMU_SD_ROT_WAKE_CLR);
+		writel(temp, mvotg->wakeup_reg);
 	}
 
 	gpiod_set_value(mvotg->vbus_gpio, on);
 
-	/* release constraint after turn off vbus */
-	if (!on) {
-		pm_relax(&mvotg->pdev->dev);
-	}
-
 	return 0;
 }
 
@@ -87,7 +83,6 @@ static int mv_otg_set_host(struct usb_otg *otg, struct usb_bus *host)
 {
 	pr_debug("%s ... \n", __func__);
 	otg->host = host;
-
 	return 0;
 }
 
@@ -95,7 +90,6 @@ static int mv_otg_set_peripheral(struct usb_otg *otg, struct usb_gadget *gadget)
 {
 	pr_debug("%s ... \n", __func__);
 	otg->gadget = gadget;
-
 	return 0;
 }
 
@@ -109,56 +103,6 @@ static void mv_otg_run_state_machine(struct mv_otg *mvotg, unsigned long delay)
 	queue_delayed_work(mvotg->qwork, &mvotg->work, delay);
 }
 
-static void mv_otg_timer_await_bcon(struct timer_list *t)
-{
-	struct mv_otg *mvotg =
-		from_timer(mvotg, t, otg_ctrl.timer[A_WAIT_BCON_TIMER]);
-
-	mvotg->otg_ctrl.a_wait_bcon_timeout = 1;
-
-	dev_info(&mvotg->pdev->dev, "B Device No Response!\n");
-
-	if (spin_trylock(&mvotg->wq_lock)) {
-		mv_otg_run_state_machine(mvotg, 0);
-		spin_unlock(&mvotg->wq_lock);
-	}
-}
-
-static int mv_otg_cancel_timer(struct mv_otg *mvotg, unsigned int id)
-{
-	struct timer_list *timer;
-
-	if (id >= OTG_TIMER_NUM)
-		return -EINVAL;
-
-	timer = &mvotg->otg_ctrl.timer[id];
-
-	if (timer_pending(timer))
-		del_timer(timer);
-
-	return 0;
-}
-
-static int mv_otg_set_timer(struct mv_otg *mvotg, unsigned int id,
-				unsigned long interval)
-{
-	struct timer_list *timer;
-
-	if (id >= OTG_TIMER_NUM)
-		return -EINVAL;
-
-	timer = &mvotg->otg_ctrl.timer[id];
-	if (timer_pending(timer)) {
-		dev_err(&mvotg->pdev->dev, "Timer%d is already running\n", id);
-		return -EBUSY;
-	}
-
-	timer->expires = jiffies + interval;
-	add_timer(timer);
-
-	return 0;
-}
-
 static int mv_otg_reset(struct mv_otg *mvotg)
 {
 	unsigned int loops;
@@ -191,31 +135,6 @@ static int mv_otg_reset(struct mv_otg *mvotg)
 	return 0;
 }
 
-static void mv_otg_init_irq(struct mv_otg *mvotg)
-{
-	u32 otgsc;
-
-	mvotg->irq_en = OTGSC_INTR_A_SESSION_VALID | OTGSC_INTR_A_VBUS_VALID;
-	mvotg->irq_status = OTGSC_INTSTS_A_SESSION_VALID |
-				OTGSC_INTSTS_A_VBUS_VALID;
-
-	if ((mvotg->pdata->extern_attr & MV_USB_HAS_VBUS_DETECTION) == 0) {
-		mvotg->irq_en |= OTGSC_INTR_B_SESSION_VALID |
-				 OTGSC_INTR_B_SESSION_END;
-		mvotg->irq_status |= OTGSC_INTSTS_B_SESSION_VALID |
-					 OTGSC_INTSTS_B_SESSION_END;
-	}
-
-	if ((mvotg->pdata->extern_attr & MV_USB_HAS_IDPIN_DETECTION) == 0) {
-		mvotg->irq_en |= OTGSC_INTR_USB_ID;
-		mvotg->irq_status |= OTGSC_INTSTS_USB_ID;
-	}
-
-	otgsc = readl(&mvotg->op_regs->otgsc);
-	otgsc |= mvotg->irq_en;
-	writel(otgsc, &mvotg->op_regs->otgsc);
-}
-
 static void mv_otg_start_host(struct mv_otg *mvotg, int on)
 {
 	struct usb_otg *otg = mvotg->phy.otg;
@@ -302,7 +221,7 @@ static int mv_otg_enable_internal(struct mv_otg *mvotg)
 	int retval = 0;
 
 	dev_dbg(&mvotg->pdev->dev,
-		 "mv_otg_enable_internal: mvotg->active= %d \n", mvotg->active);
+		"mv_otg_enable_internal: mvotg->active= %d \n", mvotg->active);
 	if (mvotg->active)
 		return 0;
 
@@ -321,142 +240,60 @@ static int mv_otg_enable_internal(struct mv_otg *mvotg)
 	}
 
 	mvotg->active = 1;
-	otg_state = 1;
-
-	return 0;
-}
-
-static int mv_otg_enable(struct mv_otg *mvotg)
-{
-	if (mvotg->clock_gating)
-		return mv_otg_enable_internal(mvotg);
-
 	return 0;
 }
 
 static void mv_otg_disable_internal(struct mv_otg *mvotg)
 {
 	dev_dbg(&mvotg->pdev->dev,
-		 "mv_otg_disable_internal: mvotg->active= %d ... \n",
-		 mvotg->active);
+		"mv_otg_disable_internal: mvotg->active= %d ... \n",
+		mvotg->active);
 	if (mvotg->active) {
 		dev_dbg(&mvotg->pdev->dev, "otg disabled\n");
 		usb_phy_shutdown(mvotg->outer_phy);
 		otg_reset_assert(mvotg);
 		otg_clock_disable(mvotg);
 		mvotg->active = 0;
-		otg_state = 0;
 	}
 }
 
-static void mv_otg_disable(struct mv_otg *mvotg)
-{
-	if (mvotg->clock_gating)
-		mv_otg_disable_internal(mvotg);
-}
-
 static void mv_otg_update_inputs(struct mv_otg *mvotg)
 {
-	struct mv_otg_ctrl *otg_ctrl = &mvotg->otg_ctrl;
-	u32 otgsc;
-
-	otgsc = readl(&mvotg->op_regs->otgsc);
-
-	if (mvotg->pdata->extern_attr & MV_USB_HAS_VBUS_DETECTION) {
-		unsigned int vbus;
-		vbus = extcon_get_state(mvotg->extcon, EXTCON_USB);
-		dev_dbg(&mvotg->pdev->dev, "-->%s: vbus = %d\n", __func__,
-			 vbus);
-
-		if (vbus == VBUS_HIGH)
-			otg_ctrl->b_sess_vld = 1;
-		else
-			otg_ctrl->b_sess_vld = 0;
-	} else {
-		dev_err(&mvotg->pdev->dev, "vbus detect was not supported ...");
-	}
-
-	if (mvotg->pdata->extern_attr & MV_USB_HAS_IDPIN_DETECTION) {
-		unsigned int id;
-		/* id = 0 means the otg cable is absent. */
-		id = extcon_get_state(mvotg->extcon, EXTCON_USB_HOST);
-		dev_dbg(&mvotg->pdev->dev, "-->%s: id = %d\n", __func__, id);
+	int id, vbus;
 
-		otg_ctrl->id = !id;
-		otg_ctrl->a_vbus_vld = !!id;
-	} else {
-		dev_err(&mvotg->pdev->dev,
-			"id pin detect was not supported ...");
-	}
-
-	if (otg_force_host_mode) {
-		otg_ctrl->id = 0;
-		otg_ctrl->a_vbus_vld = 1;
-	}
+	if (mvotg->role_sw)
+		return;
 
-	dev_dbg(&mvotg->pdev->dev, "id %d\n", otg_ctrl->id);
-	dev_dbg(&mvotg->pdev->dev, "b_sess_vld %d\n", otg_ctrl->b_sess_vld);
-	dev_dbg(&mvotg->pdev->dev, "a_vbus_vld %d\n", otg_ctrl->a_vbus_vld);
-}
+	vbus = extcon_get_state(mvotg->extcon, EXTCON_USB);
 
-static void mv_otg_update_state(struct mv_otg *mvotg)
-{
-	struct mv_otg_ctrl *otg_ctrl = &mvotg->otg_ctrl;
-	int old_state = mvotg->phy.otg->state;
-
-	switch (old_state) {
-	case OTG_STATE_UNDEFINED:
-		mvotg->phy.otg->state = OTG_STATE_B_IDLE;
-		fallthrough;
-	case OTG_STATE_B_IDLE:
-		if (otg_ctrl->id == 0)
-			mvotg->phy.otg->state = OTG_STATE_A_IDLE;
-		else if (otg_ctrl->b_sess_vld)
-			mvotg->phy.otg->state = OTG_STATE_B_PERIPHERAL;
-		break;
-	case OTG_STATE_B_PERIPHERAL:
-		if (!otg_ctrl->b_sess_vld || otg_ctrl->id == 0)
-			mvotg->phy.otg->state = OTG_STATE_B_IDLE;
-		break;
-	case OTG_STATE_A_IDLE:
-		if (otg_ctrl->id)
-			mvotg->phy.otg->state = OTG_STATE_B_IDLE;
-		else
-			mvotg->phy.otg->state = OTG_STATE_A_WAIT_VRISE;
-		break;
-	case OTG_STATE_A_WAIT_VRISE:
-		if (otg_ctrl->a_vbus_vld)
-			mvotg->phy.otg->state = OTG_STATE_A_WAIT_BCON;
-		break;
-	case OTG_STATE_A_WAIT_BCON:
-		if (otg_ctrl->id || otg_ctrl->a_wait_bcon_timeout) {
-			mv_otg_cancel_timer(mvotg, A_WAIT_BCON_TIMER);
-			mvotg->otg_ctrl.a_wait_bcon_timeout = 0;
-			mvotg->phy.otg->state = OTG_STATE_A_WAIT_VFALL;
-		} else if (otg_ctrl->b_conn) {
-			mv_otg_cancel_timer(mvotg, A_WAIT_BCON_TIMER);
-			mvotg->otg_ctrl.a_wait_bcon_timeout = 0;
-			mvotg->phy.otg->state = OTG_STATE_A_HOST;
-		}
+	switch (mvotg->dr_mode) {
+	case USB_DR_MODE_HOST:
+		id = 0;
 		break;
-	case OTG_STATE_A_HOST:
-		if (otg_ctrl->id || !otg_ctrl->b_conn)
-			mvotg->phy.otg->state = OTG_STATE_A_WAIT_BCON;
-		else if (!otg_ctrl->a_vbus_vld)
-			mvotg->phy.otg->state = OTG_STATE_A_VBUS_ERR;
+	case USB_DR_MODE_PERIPHERAL:
+		id = 1;
+		vbus = 1;
 		break;
-	case OTG_STATE_A_WAIT_VFALL:
-		if (otg_ctrl->id || (!otg_ctrl->b_conn))
-			mvotg->phy.otg->state = OTG_STATE_A_IDLE;
-		break;
-	case OTG_STATE_A_VBUS_ERR:
-		if (otg_ctrl->id) {
-			mvotg->phy.otg->state = OTG_STATE_A_WAIT_VFALL;
-		}
+	case USB_DR_MODE_OTG:
+		id = !extcon_get_state(mvotg->extcon,EXTCON_USB_HOST);
 		break;
 	default:
+		dev_warn(&mvotg->pdev->dev, "invalid dr_mode %d\n",
+			 mvotg->dr_mode);
+		id = 1;
 		break;
 	}
+
+	dev_dbg(&mvotg->pdev->dev, "id %d, vbus %d\n", id, vbus);
+
+	if (!id) {
+		mvotg->desired_otg_role = MV_OTG_ROLE_HOST_ACTIVE;
+	} else {
+		if (vbus)
+			mvotg->desired_otg_role = MV_OTG_ROLE_DEVICE_ACTIVE;
+		else
+			mvotg->desired_otg_role = MV_OTG_ROLE_DEVICE_IDLE;
+	}
 }
 
 static void mv_otg_work(struct work_struct *work)
@@ -464,120 +301,66 @@ static void mv_otg_work(struct work_struct *work)
 	struct mv_otg *mvotg;
 	struct usb_phy *phy;
 	struct usb_otg *otg;
-	int old_state;
+	unsigned long flags;
+	u32 current_otg_role, desired_otg_role;
 
 	mvotg = container_of(to_delayed_work(work), struct mv_otg, work);
 
-run:
 	/* work queue is single thread, or we need spin_lock to protect */
 	phy = &mvotg->phy;
 	otg = mvotg->phy.otg;
-	old_state = otg->state;
 
-	if (!mvotg->active)
-		return;
+	spin_lock_irqsave(&mvotg->lock, flags);
 
+	/* Update input from extcon/dr_mode if no role_sw registered,
+	 * role switch will update desired_otg_role directly.
+	 */
 	mv_otg_update_inputs(mvotg);
-	mv_otg_update_state(mvotg);
-	if (old_state != mvotg->phy.otg->state) {
-		dev_dbg(&mvotg->pdev->dev, "change from state %s to %s\n",
-			state_string[old_state],
-			state_string[mvotg->phy.otg->state]);
-
-		switch (mvotg->phy.otg->state) {
-		case OTG_STATE_B_IDLE:
-			otg->default_a = 0;
-			if (old_state == OTG_STATE_B_PERIPHERAL ||
-				old_state == OTG_STATE_UNDEFINED)
-				mv_otg_start_peripheral(mvotg, 0);
-			mv_otg_reset(mvotg);
-			mv_otg_disable(mvotg);
-			break;
-		case OTG_STATE_B_PERIPHERAL:
-			mv_otg_enable(mvotg);
-			mv_otg_start_peripheral(mvotg, 1);
-			break;
-		case OTG_STATE_A_IDLE:
-			otg->default_a = 1;
-			mv_otg_enable(mvotg);
-			if (old_state == OTG_STATE_A_WAIT_VFALL)
-				mv_otg_start_host(mvotg, 0);
-			mv_otg_reset(mvotg);
-			break;
-		case OTG_STATE_A_WAIT_VRISE:
-			mv_otg_set_vbus(otg, 1);
-			break;
-		case OTG_STATE_A_WAIT_BCON:
-			if (old_state != OTG_STATE_A_HOST)
-				mv_otg_start_host(mvotg, 1);
-			mv_otg_set_timer(mvotg, A_WAIT_BCON_TIMER,
-					 T_A_WAIT_BCON);
-			/*
-			 * Now, we directly enter A_HOST. So set b_conn = 1
-			 * here. In fact, it need host driver to notify us.
-			 */
-			mvotg->otg_ctrl.b_conn = 1;
-			break;
-		case OTG_STATE_A_HOST:
-			break;
-		case OTG_STATE_A_WAIT_VFALL:
-			/*
-			 * Now, we has exited A_HOST. So set b_conn = 0
-			 * here. In fact, it need host driver to notify us.
-			 */
-			mvotg->otg_ctrl.b_conn = 0;
-			mv_otg_set_vbus(otg, 0);
-			break;
-		case OTG_STATE_A_VBUS_ERR:
-			break;
-		default:
-			break;
-		}
-		goto run;
-	} else {
-		dev_dbg(&mvotg->pdev->dev,
-			"state no change: last_state: %s, current_state: %s\n",
-			state_string[old_state],
-			state_string[mvotg->phy.otg->state]);
-	}
-}
+	current_otg_role = mvotg->current_otg_role;
+	desired_otg_role = mvotg->desired_otg_role;
+	spin_unlock_irqrestore(&mvotg->lock, flags);
 
-static irqreturn_t mv_otg_irq(int irq, void *dev)
-{
-	struct mv_otg *mvotg = dev;
-	u32 otgsc;
-
-	/* if otg clock is not enabled, otgsc read out will be 0 */
-	if (!mvotg->active)
-		mv_otg_enable(mvotg);
+	dev_dbg(&mvotg->pdev->dev,
+		"otg role change: current role: %s, desired role: %s\n",
+		state_string[current_otg_role],
+		state_string[desired_otg_role]);
 
-	otgsc = readl(&mvotg->op_regs->otgsc);
-	writel(otgsc | mvotg->irq_en, &mvotg->op_regs->otgsc);
+	if (current_otg_role == desired_otg_role)
+		return;
 
-	if (!(mvotg->pdata->extern_attr & MV_USB_HAS_IDPIN_DETECTION)) {
-		if (mvotg->otg_ctrl.id != (!!(otgsc & OTGSC_STS_USB_ID))) {
-			dev_dbg(dev, "mv_otg_irq : ID detect  ... \n");
-			mv_otg_run_state_machine(mvotg, 0);
-			return IRQ_HANDLED;
-		}
+	if (current_otg_role == MV_OTG_ROLE_HOST_ACTIVE) {
+		/* exit host and turn off the controller */
+		mv_otg_set_vbus(otg, 0);
+		mv_otg_start_host(mvotg, 0);
+		mv_otg_reset(mvotg);
+		mv_otg_disable_internal(mvotg);
+	} else if (current_otg_role == MV_OTG_ROLE_DEVICE_ACTIVE) {
+		mv_otg_start_peripheral(mvotg, 0);
 	}
 
-	/*
-	 * if we have vbus, then the vbus detection for B-device
-	 * will be done by mv_otg_inputs_irq().
-	 * currently mv_otg_inputs_irq is removed
-	 */
-	if (mvotg->pdata->extern_attr & MV_USB_HAS_VBUS_DETECTION)
-		if ((otgsc & OTGSC_STS_USB_ID) &&
-			!(otgsc & OTGSC_INTSTS_USB_ID))
-			return IRQ_NONE;
-
-	if ((otgsc & mvotg->irq_status) == 0)
-		return IRQ_NONE;
-
-	mv_otg_run_state_machine(mvotg, 0);
+	/* start new role */
+	switch (desired_otg_role) {
+	case MV_OTG_ROLE_HOST_ACTIVE:
+		mv_otg_enable_internal(mvotg);
+		mv_otg_reset(mvotg);
+		mv_otg_start_host(mvotg, 1);
+		mv_otg_set_vbus(otg, 1);
+		break;
+	case MV_OTG_ROLE_DEVICE_ACTIVE:
+		/* tell udc vbus is on, let udc decide clock gating */
+		mv_otg_start_peripheral(mvotg, 1);
+		break;
+	case MV_OTG_ROLE_DEVICE_IDLE:
+		/* tell udc vbus connector is gone */
+		mv_otg_start_peripheral(mvotg, 0);
+		break;
+	default:
+		break;
+	}
 
-	return IRQ_HANDLED;
+	spin_lock_irqsave(&mvotg->lock, flags);
+	mvotg->current_otg_role = desired_otg_role;
+	spin_unlock_irqrestore(&mvotg->lock, flags);
 }
 
 static int mv_otg_vbus_notifier_callback(struct notifier_block *nb,
@@ -586,204 +369,107 @@ static int mv_otg_vbus_notifier_callback(struct notifier_block *nb,
 	struct usb_phy *mvotg_phy = container_of(nb, struct usb_phy, vbus_nb);
 	struct mv_otg *mvotg = container_of(mvotg_phy, struct mv_otg, phy);
 
-	/* The clock may disabled at this time */
-	if (!mvotg->active) {
-		mv_otg_enable(mvotg);
-		mv_otg_init_irq(mvotg);
-	}
-
 	mv_otg_run_state_machine(mvotg, 0);
 
 	return 0;
 }
 
 static int mv_otg_id_notifier_callback(struct notifier_block *nb,
-					   unsigned long val, void *v)
+				       unsigned long val, void *v)
 {
 	struct usb_phy *mvotg_phy = container_of(nb, struct usb_phy, id_nb);
 	struct mv_otg *mvotg = container_of(mvotg_phy, struct mv_otg, phy);
 
-	/* The clock may disabled at this time */
-	if (!mvotg->active) {
-		mv_otg_enable(mvotg);
-		mv_otg_init_irq(mvotg);
-	}
-
 	mv_otg_run_state_machine(mvotg, 0);
 
 	return 0;
 }
 
-static ssize_t get_a_bus_req(struct device *dev, struct device_attribute *attr,
-				 char *buf)
+static ssize_t get_dr_mode(struct device *dev, struct device_attribute *attr,
+			   char *buf)
 {
 	struct mv_otg *mvotg = dev_get_drvdata(dev);
-	return scnprintf(buf, PAGE_SIZE, "%d\n", mvotg->otg_ctrl.a_bus_req);
-}
-
-static ssize_t set_a_bus_req(struct device *dev, struct device_attribute *attr,
-				 const char *buf, size_t count)
-{
-	struct mv_otg *mvotg = dev_get_drvdata(dev);
-
-	if (count > 2)
-		return -1;
-
-	/* We will use this interface to change to A device */
-	if (mvotg->phy.otg->state != OTG_STATE_B_IDLE &&
-		mvotg->phy.otg->state != OTG_STATE_A_IDLE)
-		return -1;
-
-	/* The clock may disabled and we need to set irq for ID detected */
-	mv_otg_enable(mvotg);
-	mv_otg_init_irq(mvotg);
-
-	if (buf[0] == '1') {
-		mvotg->otg_ctrl.a_bus_req = 1;
-		mvotg->otg_ctrl.a_bus_drop = 0;
-		dev_dbg(&mvotg->pdev->dev, "User request: a_bus_req = 1\n");
-
-		if (spin_trylock(&mvotg->wq_lock)) {
-			mv_otg_run_state_machine(mvotg, 0);
-			spin_unlock(&mvotg->wq_lock);
-		}
-	}
-
-	return count;
-}
-
-static DEVICE_ATTR(a_bus_req, S_IRUGO | S_IWUSR, get_a_bus_req, set_a_bus_req);
-
-static ssize_t set_a_clr_err(struct device *dev, struct device_attribute *attr,
-				 const char *buf, size_t count)
-{
-	struct mv_otg *mvotg = dev_get_drvdata(dev);
-	if (!mvotg->phy.otg->default_a)
-		return -1;
-
-	if (count > 2)
-		return -1;
-
-	if (buf[0] == '1') {
-		mvotg->otg_ctrl.a_clr_err = 1;
-		dev_dbg(&mvotg->pdev->dev, "User request: a_clr_err = 1\n");
-	}
-
-	if (spin_trylock(&mvotg->wq_lock)) {
-		mv_otg_run_state_machine(mvotg, 0);
-		spin_unlock(&mvotg->wq_lock);
-	}
-
-	return count;
-}
-
-static DEVICE_ATTR(a_clr_err, S_IWUSR, NULL, set_a_clr_err);
-
-static ssize_t get_a_bus_drop(struct device *dev, struct device_attribute *attr,
-				  char *buf)
-{
-	struct mv_otg *mvotg = dev_get_drvdata(dev);
-	return scnprintf(buf, PAGE_SIZE, "%d\n", mvotg->otg_ctrl.a_bus_drop);
-}
-
-static ssize_t set_a_bus_drop(struct device *dev, struct device_attribute *attr,
-				  const char *buf, size_t count)
-{
-	struct mv_otg *mvotg = dev_get_drvdata(dev);
-	if (!mvotg->phy.otg->default_a)
-		return -1;
-
-	if (count > 2)
-		return -1;
-
-	if (buf[0] == '0') {
-		mvotg->otg_ctrl.a_bus_drop = 0;
-		dev_info(&mvotg->pdev->dev, "User request: a_bus_drop = 0\n");
-	} else if (buf[0] == '1') {
-		mvotg->otg_ctrl.a_bus_drop = 1;
-		mvotg->otg_ctrl.a_bus_req = 0;
-		dev_info(&mvotg->pdev->dev, "User request: a_bus_drop = 1\n");
-		dev_info(&mvotg->pdev->dev,
-			 "User request: and a_bus_req = 0\n");
-	}
-
-	if (spin_trylock(&mvotg->wq_lock)) {
-		mv_otg_run_state_machine(mvotg, 0);
-		spin_unlock(&mvotg->wq_lock);
-	}
-
-	return count;
-}
-
-static DEVICE_ATTR(a_bus_drop, S_IRUGO | S_IWUSR, get_a_bus_drop,
-		   set_a_bus_drop);
+	unsigned long flags;
+	enum usb_dr_mode dr_mode;
+	char *state;
+
+	spin_lock_irqsave(&mvotg->lock, flags);
+	dr_mode = mvotg->dr_mode;
+	spin_unlock_irqrestore(&mvotg->lock, flags);
+
+	if (mvotg->dr_mode == USB_DR_MODE_OTG)
+		state = "otg";
+	else if (mvotg->dr_mode == USB_DR_MODE_HOST)
+		state = "host";
+	else if (mvotg->dr_mode == USB_DR_MODE_PERIPHERAL)
+		state = "device";
+	else
+		state = "UNKNOWN";
 
-static ssize_t get_otg_mode(struct device *dev, struct device_attribute *attr,
-				char *buf)
-{
-	char *state = otg_force_host_mode ? "host" : "client";
-	return sprintf(buf, "OTG mode: %s\n", state);
+	return sprintf(buf, "%s\n", state);
 }
 
-static ssize_t set_otg_mode(struct device *dev, struct device_attribute *attr,
-				const char *buf, size_t count)
+static ssize_t set_dr_mode(struct device *dev, struct device_attribute *attr,
+			   const char *buf, size_t count)
 {
 	struct mv_otg *mvotg = dev_get_drvdata(dev);
-	char *usage = "Usage: $echo host/client to switch otg mode";
+	unsigned long flags;
+	char *usage = "Usage: $echo otg/host/device to force set mode, "
+		      "only available when no usb-role-switch exist";
 	char buff[16], *b;
+	enum usb_dr_mode mode;
+
+	if (!mvotg->role_sw)
+		goto err;
 
 	strncpy(buff, buf, sizeof(buff));
 	b = strim(buff);
 	dev_info(dev, "OTG state is %s\n", state_string[mvotg->phy.otg->state]);
-	if (!strcmp(b, "host")) {
-		if (mvotg->phy.otg->state == OTG_STATE_B_PERIPHERAL) {
-			pr_err("Failed to swich mode, pls don't connect to PC!\n");
-			return count;
-		}
-		otg_force_host_mode = 1;
-	} else if (!strcmp(b, "client")) {
-		otg_force_host_mode = 0;
+	if (!strcmp(b, "otg")) {
+		mode = USB_DR_MODE_OTG;
+	} else if (!strcmp(b, "host")) {
+		mode = USB_DR_MODE_HOST;
+	} else if (!strcmp(b, "device") || !strcmp(b, "peripheral")) {
+		mode = USB_DR_MODE_PERIPHERAL;
 	} else {
-		pr_err("%s\n", usage);
-		return count;
+		goto err;
 	}
+
+	spin_lock_irqsave(&mvotg->lock, flags);
+	mvotg->dr_mode = mode;
+	spin_unlock_irqrestore(&mvotg->lock, flags);
+
 	mv_otg_run_state_machine(mvotg, 0);
 
 	return count;
-}
-static DEVICE_ATTR(otg_mode, S_IRUGO | S_IWUSR, get_otg_mode, set_otg_mode);
-
-static struct attribute *inputs_attrs[] = {
-	&dev_attr_a_bus_req.attr,
-	&dev_attr_a_clr_err.attr,
-	&dev_attr_a_bus_drop.attr,
-	&dev_attr_otg_mode.attr,
-	NULL,
-};
 
-static struct attribute_group inputs_attr_group = {
-	.name = "inputs",
-	.attrs = inputs_attrs,
-};
+err:
+	dev_err(dev, "%s\n", usage);
+	return -EINVAL;
+}
+static DEVICE_ATTR(dr_mode, S_IRUGO | S_IWUSR, get_dr_mode, set_dr_mode);
 
 static int mv_otg_remove(struct platform_device *pdev)
 {
 	struct mv_otg *mvotg = platform_get_drvdata(pdev);
 
 	device_init_wakeup(&pdev->dev, 0);
-	sysfs_remove_group(&mvotg->pdev->dev.kobj, &inputs_attr_group);
-
+	sysfs_remove_file(&mvotg->pdev->dev.kobj, &dev_attr_dr_mode.attr);
 	if (mvotg->qwork) {
 		flush_workqueue(mvotg->qwork);
 		destroy_workqueue(mvotg->qwork);
 	}
 
-	mv_otg_disable(mvotg);
+	mv_otg_disable_internal(mvotg);
 
 	clk_unprepare(mvotg->clk);
 
 	usb_remove_phy(&mvotg->phy);
 
+	pm_runtime_disable(&pdev->dev);
+	pm_runtime_put_sync(&pdev->dev);
+	pm_runtime_put_noidle(&pdev->dev);
+
 	return 0;
 }
 
@@ -793,7 +479,7 @@ static int mv_otg_dt_parse(struct platform_device *pdev,
 	struct device_node *np = pdev->dev.of_node;
 
 	if (of_property_read_string(np, "spacemit,otg-name",
-					&((pdev->dev).init_name)))
+				    &((pdev->dev).init_name)))
 		return -EINVAL;
 
 	if (of_property_read_u32(np, "spacemit,udc-mode", &(pdata->mode)))
@@ -811,13 +497,111 @@ static int mv_otg_dt_parse(struct platform_device *pdev,
 	return 0;
 }
 
+static int mv_otg_usb_role_switch_set(struct usb_role_switch *sw,
+				      enum usb_role role)
+{
+	struct mv_otg *mvotg = usb_role_switch_get_drvdata(sw);
+	unsigned long flags;
+	u32 mode = 0;
+
+	switch (role) {
+	case USB_ROLE_HOST:
+		mode = MV_OTG_ROLE_HOST_ACTIVE;
+		break;
+	case USB_ROLE_DEVICE:
+		mode = MV_OTG_ROLE_DEVICE_ACTIVE;
+		break;
+	default:
+		if (mvotg->role_switch_default_mode == USB_DR_MODE_PERIPHERAL)
+			mode = MV_OTG_ROLE_DEVICE_ACTIVE;
+		else
+			mode = MV_OTG_ROLE_HOST_ACTIVE;
+		break;
+	}
+
+	spin_lock_irqsave(&mvotg->lock, flags);
+	mvotg->desired_otg_role = mode;
+	spin_unlock_irqrestore(&mvotg->lock, flags);
+
+	dev_info(&mvotg->pdev->dev, "role switch set to: %s\n",
+		 state_string[mode]);
+
+	mv_otg_run_state_machine(mvotg, 0);
+
+	return 0;
+}
+
+static enum usb_role mv_otg_usb_role_switch_get(struct usb_role_switch *sw)
+{
+	struct mv_otg *mvotg = usb_role_switch_get_drvdata(sw);
+	unsigned long flags;
+	static enum usb_role role;
+	u32 mode;
+
+	spin_lock_irqsave(&mvotg->lock, flags);
+	mode = mvotg->current_otg_role;
+	spin_unlock_irqrestore(&mvotg->lock, flags);
+
+	switch (mode) {
+	case MV_OTG_ROLE_HOST_ACTIVE:
+		role = USB_ROLE_HOST;
+		break;
+	case MV_OTG_ROLE_DEVICE_ACTIVE:
+		role = USB_ROLE_DEVICE;
+		break;
+	default:
+		role = USB_ROLE_NONE;
+		break;
+	}
+	return role;
+}
+
+static int mv_otg_setup_role_switch(struct mv_otg *mvotg)
+{
+	struct usb_role_switch_desc mv_otg_role_switch = { NULL };
+	struct device *dev = &mvotg->pdev->dev;
+	int ret;
+
+	mvotg->role_switch_default_mode = usb_get_role_switch_default_mode(dev);
+	if (mvotg->role_switch_default_mode == USB_DR_MODE_UNKNOWN) {
+		mvotg->role_switch_default_mode = USB_DR_MODE_PERIPHERAL;
+	}
+
+	mv_otg_role_switch.fwnode = dev_fwnode(dev);
+	mv_otg_role_switch.set = mv_otg_usb_role_switch_set;
+	mv_otg_role_switch.get = mv_otg_usb_role_switch_get;
+	mv_otg_role_switch.allow_userspace_control =
+		device_property_read_bool(dev, "role-switch-user-control");
+	mv_otg_role_switch.driver_data = mvotg;
+	mvotg->role_sw = usb_role_switch_register(dev, &mv_otg_role_switch);
+	if (IS_ERR(mvotg->role_sw))
+		return PTR_ERR(mvotg->role_sw);
+
+	if (dev->of_node) {
+		/* populate connector entry */
+		pr_info("mvotg populate connector\n");
+		ret = devm_of_platform_populate(dev);
+
+		if (ret) {
+			usb_role_switch_unregister(mvotg->role_sw);
+			mvotg->role_sw = NULL;
+			dev_err(dev,
+				"mvotg platform devices creation failed: %i\n",
+				ret);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
 static int mv_otg_probe(struct platform_device *pdev)
 {
 	struct mv_usb_platform_data *pdata;
 	struct mv_otg *mvotg;
 	struct usb_otg *otg;
 	struct resource *r;
-	int retval = 0, i;
+	int retval = 0;
 	struct device_node *np = pdev->dev.of_node;
 
 	dev_info(&pdev->dev, "k1x otg probe enter ...\n");
@@ -859,12 +643,17 @@ static int mv_otg_probe(struct platform_device *pdev)
 
 	INIT_DELAYED_WORK(&mvotg->work, mv_otg_work);
 
+	mvotg->dr_mode = usb_get_role_switch_default_mode(&pdev->dev);
+	if (mvotg->dr_mode == USB_DR_MODE_UNKNOWN)
+		mvotg->dr_mode = USB_DR_MODE_OTG;
+
 	/* OTG common part */
 	mvotg->pdev = pdev;
 	mvotg->phy.dev = &pdev->dev;
 	mvotg->phy.type = USB_PHY_TYPE_USB2;
 	mvotg->phy.otg = otg;
 	mvotg->phy.label = driver_name;
+	mvotg->dr_mode = USB_DR_MODE_OTG;
 
 	otg->usb_phy = &mvotg->phy;
 	otg->state = OTG_STATE_UNDEFINED;
@@ -872,10 +661,6 @@ static int mv_otg_probe(struct platform_device *pdev)
 	otg->set_peripheral = mv_otg_set_peripheral;
 	otg->set_vbus = mv_otg_set_vbus;
 
-	for (i = 0; i < OTG_TIMER_NUM; i++)
-		timer_setup(&mvotg->otg_ctrl.timer[i], mv_otg_timer_await_bcon,
-				0);
-
 	r = platform_get_resource(mvotg->pdev, IORESOURCE_MEM, 0);
 	if (r == NULL) {
 		dev_err(&pdev->dev, "no I/O memory resource defined\n");
@@ -890,6 +675,20 @@ static int mv_otg_probe(struct platform_device *pdev)
 		goto err_destroy_workqueue;
 	}
 
+	r = platform_get_resource(mvotg->pdev, IORESOURCE_MEM, 1);
+	if (r == NULL) {
+		dev_err(&pdev->dev, "no apmu base memory resource defined\n");
+		retval = -ENODEV;
+		goto err_destroy_workqueue;
+	}
+
+	mvotg->wakeup_reg = devm_ioremap(&pdev->dev, r->start, resource_size(r));
+	if (mvotg->wakeup_reg == NULL) {
+		dev_err(&pdev->dev, "failed to map apmu base memory\n");
+		retval = -EFAULT;
+		goto err_destroy_workqueue;
+	}
+
 	mvotg->outer_phy =
 		devm_usb_get_phy_by_phandle(&pdev->dev, "usb-phy", 0);
 	if (IS_ERR_OR_NULL(mvotg->outer_phy)) {
@@ -899,12 +698,38 @@ static int mv_otg_probe(struct platform_device *pdev)
 		goto err_destroy_workqueue;
 	}
 
-	mvotg->vbus_gpio = devm_gpiod_get(&pdev->dev, "vbus", GPIOD_OUT_LOW);
-	if (IS_ERR_OR_NULL(mvotg->vbus_gpio)) {
+	if (of_property_read_bool(np, "extcon")) {
+		dev_info(&pdev->dev, "support extcon detect ...\n");
+		mvotg->extcon = extcon_get_edev_by_phandle(&pdev->dev, 0);
+		if (IS_ERR(mvotg->extcon)) {
+			dev_err(&pdev->dev, "couldn't get extcon device\n");
+			retval = -EPROBE_DEFER;
+			goto err_destroy_workqueue;
+		}
+		dev_info(&pdev->dev, "extcon_dev name: %s \n",
+			 extcon_get_edev_name(mvotg->extcon));
+		/*extcon notifier register will be completed in usb_add_phy_dev*/
+		mvotg->phy.vbus_nb.notifier_call = mv_otg_vbus_notifier_callback;
+		mvotg->phy.id_nb.notifier_call = mv_otg_id_notifier_callback;
+	}
+
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_get_noresume(&pdev->dev);
+	pm_runtime_get_sync(&pdev->dev);
+
+	mvotg->vbus_gpio =
+		devm_gpiod_get_optional(&pdev->dev, "vbus", GPIOD_OUT_LOW);
+	if (IS_ERR(mvotg->vbus_gpio)) {
 		dev_err(&pdev->dev, "can not find vbus gpio default state\n");
 		goto err_destroy_workqueue;
-	}else{
-		dev_dbg(&pdev->dev, "Use GPIO to control vbus\n");
+	}
+
+	mvotg->vbus_otg = devm_regulator_get_optional(&pdev->dev, "vbus");
+	if (PTR_ERR(mvotg->vbus_otg) == -ENODEV) {
+		mvotg->vbus_otg = NULL;
+	} else if (IS_ERR(mvotg->vbus_otg)) {
+		dev_err(&pdev->dev, "can not get vbus regulator\n");
+		goto err_destroy_workqueue;
 	}
 
 	/* we will acces controller register, so enable the udc controller */
@@ -919,59 +744,7 @@ static int mv_otg_probe(struct platform_device *pdev)
 						   (readl(mvotg->cap_regs) &
 						CAPLENGTH_MASK));
 
-	if (pdata->extern_attr &
-		(MV_USB_HAS_VBUS_DETECTION | MV_USB_HAS_IDPIN_DETECTION)) {
-		dev_info(&mvotg->pdev->dev, "%s : support VBUS/ID detect ...\n",
-			 __func__);
-		/* TODO: use device tree to parse extcon device name */
-		if (of_property_read_bool(np, "extcon")) {
-			mvotg->extcon =
-				extcon_get_edev_by_phandle(&pdev->dev, 0);
-			if (IS_ERR(mvotg->extcon)) {
-				dev_err(&pdev->dev,
-					"couldn't get extcon device\n");
-				mv_otg_disable_internal(mvotg);
-				retval = -EPROBE_DEFER;
-				goto err_destroy_workqueue;
-			}
-			dev_info(&pdev->dev, "extcon_dev name: %s \n",
-				 extcon_get_edev_name(mvotg->extcon));
-		} else {
-			dev_err(&pdev->dev, "usb extcon cable is not exist\n");
-		}
-
-		if (pdata->extern_attr & MV_USB_HAS_VBUS_DETECTION)
-			mvotg->clock_gating = 1;
-
-		/*extcon notifier register will be completed in usb_add_phy_dev*/
-		mvotg->phy.vbus_nb.notifier_call =
-			mv_otg_vbus_notifier_callback;
-		mvotg->phy.id_nb.notifier_call = mv_otg_id_notifier_callback;
-	}
-
-	if (pdata->disable_otg_clock_gating)
-		mvotg->clock_gating = 0;
-
 	mv_otg_reset(mvotg);
-	mv_otg_init_irq(mvotg);
-
-	// r = platform_get_resource(mvotg->pdev, IORESOURCE_IRQ, 0);
-	mvotg->irq = platform_get_irq(pdev, 0);
-	if (!mvotg->irq) {
-		dev_err(&pdev->dev, "no IRQ resource defined\n");
-		retval = -ENODEV;
-		goto err_disable_clk;
-	}
-
-	// mvotg->irq = r->start;
-	if (devm_request_irq(&pdev->dev, mvotg->irq, mv_otg_irq, IRQF_SHARED,
-				 driver_name, mvotg)) {
-		dev_err(&pdev->dev, "Request irq %d for OTG failed\n",
-			mvotg->irq);
-		mvotg->irq = 0;
-		retval = -ENODEV;
-		goto err_disable_clk;
-	}
 
 	retval = usb_add_phy_dev(&mvotg->phy);
 	if (retval < 0) {
@@ -979,32 +752,38 @@ static int mv_otg_probe(struct platform_device *pdev)
 		goto err_disable_clk;
 	}
 
-	np = of_find_compatible_node(NULL, NULL, "spacemit,spacemit-apmu");
-	BUG_ON(!np);
-	mvotg->apmu_base = of_iomap(np, 0);
-	if (mvotg->apmu_base == NULL) {
-		dev_err(&pdev->dev, "failed to map apmu base memory\n");
-		return -EFAULT;
+	spin_lock_init(&mvotg->lock);
+
+	/* Init the first state, turn off everything! */
+	gpiod_set_value(mvotg->vbus_gpio, 0);
+	mv_otg_disable_internal(mvotg);
+	mvotg->current_otg_role = MV_OTG_ROLE_UNDEFINED;
+
+	if (!mvotg->extcon &&
+	    device_property_read_bool(&pdev->dev, "usb-role-switch")) {
+		mv_otg_setup_role_switch(mvotg);
+		mvotg->role_switch_default_mode =
+			usb_get_role_switch_default_mode(&pdev->dev);
+		if (mvotg->role_switch_default_mode == USB_DR_MODE_UNKNOWN)
+			mvotg->role_switch_default_mode =
+				USB_DR_MODE_PERIPHERAL;
 	}
 
-	retval = sysfs_create_group(&pdev->dev.kobj, &inputs_attr_group);
+	mvotg->host_remote_wakeup =
+		device_property_read_bool(&pdev->dev, "wakeup-source");
+
+	mv_otg_run_state_machine(mvotg, 2 * HZ);
+
+	dev_info(&pdev->dev, "successful probe OTG device.\n");
+
+	retval = sysfs_create_file(&mvotg->pdev->dev.kobj,
+				   &dev_attr_dr_mode.attr);
 	if (retval < 0) {
-		dev_dbg(&pdev->dev, "Can't register sysfs attr group: %d\n",
+		dev_dbg(&pdev->dev, "Can't register sysfs attr otg_mode: %d\n",
 			retval);
 		goto err_remove_otg_phy;
 	}
 
-	spin_lock_init(&mvotg->wq_lock);
-	if (spin_trylock(&mvotg->wq_lock)) {
-		mv_otg_run_state_machine(mvotg, 2 * HZ);
-		spin_unlock(&mvotg->wq_lock);
-	}
-
-	dev_info(&pdev->dev, "successful probe OTG device %s clock gating.\n",
-		 mvotg->clock_gating ? "with" : "without");
-
-	device_init_wakeup(&pdev->dev, 1);
-
 	return 0;
 
 err_remove_otg_phy:
@@ -1019,36 +798,52 @@ static int mv_otg_probe(struct platform_device *pdev)
 }
 
 #ifdef CONFIG_PM
-static int mv_otg_suspend(struct platform_device *pdev, pm_message_t state)
+static int mv_otg_suspend(struct device *dev)
 {
-	struct mv_otg *mvotg = platform_get_drvdata(pdev);
-
-	if (!mvotg->clock_gating)
-		mv_otg_disable_internal(mvotg);
+	struct mv_otg *mvotg = platform_get_drvdata(to_platform_device(dev));
 
-	mvotg->phy.otg->state = OTG_STATE_UNDEFINED;
+	/* clk is enabled when we are at host state */
+	if (mvotg->current_otg_role == MV_OTG_ROLE_HOST_ACTIVE) {
+		if (mvotg->host_remote_wakeup && mvotg->active) {
+			usb_phy_set_suspend(mvotg->outer_phy, true);
+			otg_clock_disable(mvotg);
+			mvotg->active = 0;
+		} else {
+			mv_otg_disable_internal(mvotg);
+		}
+	} else if (mvotg->current_otg_role == MV_OTG_ROLE_DEVICE_ACTIVE) {
+		mv_otg_start_peripheral(mvotg, false);
+	}
 
 	return 0;
 }
 
-static int mv_otg_resume(struct platform_device *pdev)
+static int mv_otg_resume(struct device *dev)
 {
-	struct mv_otg *mvotg = platform_get_drvdata(pdev);
-	u32 otgsc;
-
-	mv_otg_enable_internal(mvotg);
+	struct mv_otg *mvotg = platform_get_drvdata(to_platform_device(dev));
 
-	otgsc = readl(&mvotg->op_regs->otgsc);
-	otgsc |= mvotg->irq_en;
-	writel(otgsc, &mvotg->op_regs->otgsc);
-
-	if (spin_trylock(&mvotg->wq_lock)) {
-		mv_otg_run_state_machine(mvotg, 0);
-		spin_unlock(&mvotg->wq_lock);
+	if (mvotg->current_otg_role == MV_OTG_ROLE_HOST_ACTIVE) {
+		if (mvotg->host_remote_wakeup && !mvotg->active) {
+			otg_clock_enable(mvotg);
+			usb_phy_set_suspend(mvotg->outer_phy, false);
+			mvotg->active = 1;
+		} else {
+			mv_otg_enable_internal(mvotg);
+		}
+	} else if (mvotg->current_otg_role == MV_OTG_ROLE_DEVICE_ACTIVE) {
+		mv_otg_start_peripheral(mvotg, true);
 	}
 
+	mv_otg_run_state_machine(mvotg, 0);
+
 	return 0;
 }
+
+static const struct dev_pm_ops mv_otg_pm_ops = {
+	.suspend	= mv_otg_suspend,
+	.resume		= mv_otg_resume,
+};
+
 #endif
 
 static const struct of_device_id mv_otg_dt_match[] = {
@@ -1063,11 +858,10 @@ static struct platform_driver mv_otg_driver = {
 	.driver = {
 		   .of_match_table = of_match_ptr(mv_otg_dt_match),
 		   .name = driver_name,
-		   },
 #ifdef CONFIG_PM
-	.suspend = mv_otg_suspend,
-	.resume = mv_otg_resume,
+		   .pm = &mv_otg_pm_ops,
 #endif
+	},
 };
 module_platform_driver(mv_otg_driver);
 
diff --git a/drivers/usb/phy/phy-k1x-ci-otg.h b/drivers/usb/phy/phy-k1x-ci-otg.h
index da4b4b2494a5..66f084f6310c 100644
--- a/drivers/usb/phy/phy-k1x-ci-otg.h
+++ b/drivers/usb/phy/phy-k1x-ci-otg.h
@@ -12,99 +12,16 @@
 #include <linux/reset.h>
 #include <linux/types.h>
 #include <linux/extcon.h>
+#include <linux/usb/otg.h>
+#include <linux/usb/role.h>
 
 /* Command Register Bit Masks */
 #define USBCMD_RUN_STOP			(0x00000001)
 #define USBCMD_CTRL_RESET		(0x00000002)
 
-/* otgsc Register Bit Masks */
-#define OTGSC_CTRL_VUSB_DISCHARGE		0x00000001
-#define OTGSC_CTRL_VUSB_CHARGE			0x00000002
-#define OTGSC_CTRL_OTG_TERM			0x00000008
-#define OTGSC_CTRL_DATA_PULSING			0x00000010
-#define OTGSC_STS_USB_ID			0x00000100
-#define OTGSC_STS_A_VBUS_VALID			0x00000200
-#define OTGSC_STS_A_SESSION_VALID		0x00000400
-#define OTGSC_STS_B_SESSION_VALID		0x00000800
-#define OTGSC_STS_B_SESSION_END			0x00001000
-#define OTGSC_STS_1MS_TOGGLE			0x00002000
-#define OTGSC_STS_DATA_PULSING			0x00004000
-#define OTGSC_INTSTS_USB_ID			0x00010000
-#define PORTSCX_PORT_PHCD			0x00800000
-#define OTGSC_INTSTS_A_VBUS_VALID		0x00020000
-#define OTGSC_INTSTS_A_SESSION_VALID		0x00040000
-#define OTGSC_INTSTS_B_SESSION_VALID		0x00080000
-#define OTGSC_INTSTS_B_SESSION_END		0x00100000
-#define OTGSC_INTSTS_1MS			0x00200000
-#define OTGSC_INTSTS_DATA_PULSING		0x00400000
-#define OTGSC_INTR_USB_ID			0x01000000
-#define OTGSC_INTR_A_VBUS_VALID			0x02000000
-#define OTGSC_INTR_A_SESSION_VALID		0x04000000
-#define OTGSC_INTR_B_SESSION_VALID		0x08000000
-#define OTGSC_INTR_B_SESSION_END		0x10000000
-#define OTGSC_INTR_1MS_TIMER			0x20000000
-#define OTGSC_INTR_DATA_PULSING			0x40000000
 
 #define CAPLENGTH_MASK		(0xff)
 
-/* Timer's interval, unit 10ms */
-#define T_A_WAIT_VRISE		100
-#define T_A_WAIT_BCON		2000
-#define T_A_AIDL_BDIS		100
-#define T_A_BIDL_ADIS		20
-#define T_B_ASE0_BRST		400
-#define T_B_SE0_SRP		300
-#define T_B_SRP_FAIL		2000
-#define T_B_DATA_PLS		10
-#define T_B_SRP_INIT		100
-#define T_A_SRP_RSPNS		10
-#define T_A_DRV_RSM		5
-
-enum otg_function {
-	OTG_B_DEVICE = 0,
-	OTG_A_DEVICE
-};
-
-enum mv_otg_timer {
-	A_WAIT_BCON_TIMER = 0,
-	OTG_TIMER_NUM
-};
-
-/* PXA OTG state machine */
-struct mv_otg_ctrl {
-	/* internal variables */
-	u8 a_set_b_hnp_en;	/* A-Device set b_hnp_en */
-	u8 b_srp_done;
-	u8 b_hnp_en;
-
-	/* OTG inputs */
-	u8 a_bus_drop;
-	u8 a_bus_req;
-	u8 a_clr_err;
-	u8 a_bus_resume;
-	u8 a_bus_suspend;
-	u8 a_conn;
-	u8 a_sess_vld;
-	u8 a_srp_det;
-	u8 a_vbus_vld;
-	u8 b_bus_req;		/* B-Device Require Bus */
-	u8 b_bus_resume;
-	u8 b_bus_suspend;
-	u8 b_conn;
-	u8 b_se0_srp;
-	u8 b_sess_end;
-	u8 b_sess_vld;
-	u8 id;
-	u8 a_suspend_req;
-
-	/*Timer event */
-	u8 a_aidl_bdis_timeout;
-	u8 b_ase0_brst_timeout;
-	u8 a_bidl_adis_timeout;
-	u8 a_wait_bcon_timeout;
-
-	struct timer_list timer[OTG_TIMER_NUM];
-};
 
 #define VUSBHS_MAX_PORTS	8
 
@@ -137,11 +54,13 @@ struct mv_otg_regs {
 struct mv_otg {
 	struct usb_phy phy;
 	struct usb_phy *outer_phy;
-	struct mv_otg_ctrl otg_ctrl;
+
+	/* set role lock */
+	spinlock_t lock;
 
 	/* base address */
 	void __iomem *cap_regs;
-	void __iomem *apmu_base;
+	void __iomem *wakeup_reg;
 	struct mv_otg_regs __iomem *op_regs;
 
 	struct platform_device *pdev;
@@ -152,22 +71,20 @@ struct mv_otg {
 	struct delayed_work work;
 	struct workqueue_struct *qwork;
 
-	spinlock_t wq_lock;
-
 	struct mv_usb_platform_data *pdata;
 	struct notifier_block notifier;
 	struct notifier_block notifier_charger;
 
-	struct pm_qos_request   qos_idle;
-	s32                     lpm_qos;
-
 	unsigned int active;
+	unsigned int host_remote_wakeup;
 	unsigned int clock_gating;
 	struct clk *clk;
 	struct reset_control *reset;
 	struct gpio_desc *vbus_gpio;
 	unsigned int charger_type;
 
+	/* user control otg support */
+	enum usb_dr_mode dr_mode;
 
 	/* for vbus detection */
 	struct extcon_specific_cable_nb vbus_dev;
@@ -175,6 +92,16 @@ struct mv_otg {
 	struct extcon_specific_cable_nb id_dev;
 	struct extcon_dev *extcon;
 
+	struct usb_role_switch *role_sw;
+	enum usb_dr_mode role_switch_default_mode;
+
+#define MV_OTG_ROLE_UNDEFINED 0
+#define MV_OTG_ROLE_DEVICE_IDLE 1
+#define MV_OTG_ROLE_DEVICE_ACTIVE 2
+#define MV_OTG_ROLE_HOST_ACTIVE 3
+	u32 desired_otg_role;
+	u32 current_otg_role;
+
 	struct regulator *vbus_otg;
 };
 
-- 
2.47.0

