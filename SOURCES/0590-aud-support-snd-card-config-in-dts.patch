From 6de014e78c2cba04afc670f47a30025e6316fbfe Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Cweijinmei=E2=80=9D?= <jinmei.wei@spacemit.com>
Date: Fri, 12 Apr 2024 20:05:28 +0800
Subject: [PATCH 0590/1206] aud: support snd-card config in dts

Change-Id: If4e060cba2de63647748964eb371e1ae4c91f168
---
 arch/riscv/configs/k1_defconfig               |   1 +
 sound/soc/spacemit/Makefile                   |   4 +-
 sound/soc/spacemit/spacemit-dummy-codec.c     |  73 +++
 sound/soc/spacemit/spacemit-snd-card.c        | 424 +++++++++++++-----
 ...{spacemit-snd-spi.c => spacemit-snd-i2s.c} | 205 +++++----
 ...{spacemit-snd-spi.h => spacemit-snd-i2s.h} |   0
 6 files changed, 495 insertions(+), 212 deletions(-)
 create mode 100755 sound/soc/spacemit/spacemit-dummy-codec.c
 mode change 100644 => 100755 sound/soc/spacemit/spacemit-snd-card.c
 rename sound/soc/spacemit/{spacemit-snd-spi.c => spacemit-snd-i2s.c} (63%)
 rename sound/soc/spacemit/{spacemit-snd-spi.h => spacemit-snd-i2s.h} (100%)

diff --git a/arch/riscv/configs/k1_defconfig b/arch/riscv/configs/k1_defconfig
index d363217454cc..6f6642620c2c 100644
--- a/arch/riscv/configs/k1_defconfig
+++ b/arch/riscv/configs/k1_defconfig
@@ -562,6 +562,7 @@ CONFIG_SND=y
 CONFIG_SND_SOC=y
 CONFIG_SND_SOC_SPACEMIT=y
 CONFIG_SND_SOC_ES8326=y
+CONFIG_SND_SIMPLE_CARD=y
 CONFIG_UHID=y
 CONFIG_HID_MULTITOUCH=y
 CONFIG_USB_HIDDEV=y
diff --git a/sound/soc/spacemit/Makefile b/sound/soc/spacemit/Makefile
index 448cb5ff2394..a079b5973f32 100644
--- a/sound/soc/spacemit/Makefile
+++ b/sound/soc/spacemit/Makefile
@@ -1,4 +1,4 @@
-snd-soc-spacemit-objs := spacemit-snd-sspa.o \
-			spacemit-snd-spi.o \
+snd-soc-spacemit-objs := spacemit-snd-sspa.o spacemit-dummy-codec.o \
+			spacemit-snd-i2s.o \
 			spacemit-snd-card.o spacemit-snd-pcm-dma.o
 obj-$(CONFIG_SND_SOC_SPACEMIT) += snd-soc-spacemit.o
diff --git a/sound/soc/spacemit/spacemit-dummy-codec.c b/sound/soc/spacemit/spacemit-dummy-codec.c
new file mode 100755
index 000000000000..1eef016fe249
--- /dev/null
+++ b/sound/soc/spacemit/spacemit-dummy-codec.c
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2024 SPACEMIT
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <sound/soc.h>
+#include <sound/pcm.h>
+#include <sound/initval.h>
+
+struct snd_soc_dai_driver dummy_dai = {
+	.name = "dummy_codec",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 2,
+		.channels_max = 8,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = (SNDRV_PCM_FMTBIT_S16_LE |
+			    SNDRV_PCM_FMTBIT_S20_3LE |
+			    SNDRV_PCM_FMTBIT_S24_LE |
+			    SNDRV_PCM_FMTBIT_S32_LE),
+	},
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 2,
+		.channels_max = 8,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = (SNDRV_PCM_FMTBIT_S16_LE |
+			    SNDRV_PCM_FMTBIT_S20_3LE |
+			    SNDRV_PCM_FMTBIT_S24_LE |
+			    SNDRV_PCM_FMTBIT_S32_LE),
+	},
+};
+
+static const struct snd_soc_component_driver soc_dummy_codec = {
+};
+
+static int dummy_codec_probe(struct platform_device *pdev)
+{
+	return devm_snd_soc_register_component(&pdev->dev, &soc_dummy_codec,
+				      &dummy_dai, 1);
+}
+
+static int dummy_codec_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_component(&pdev->dev);
+
+	return 0;
+}
+
+static const struct of_device_id dummy_codec_of_match[] = {
+	{ .compatible = "spacemit,dummy-codec", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, dummy_codec_of_match);
+
+static struct platform_driver dummy_codec_driver = {
+	.driver = {
+		.name = "dummy_codec",
+		.of_match_table = dummy_codec_of_match,
+	},
+	.probe = dummy_codec_probe,
+	.remove = dummy_codec_remove,
+};
+
+module_platform_driver(dummy_codec_driver);
+
+MODULE_DESCRIPTION("SPACEMIT Dummy Codec Driver");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/spacemit/spacemit-snd-card.c b/sound/soc/spacemit/spacemit-snd-card.c
old mode 100644
new mode 100755
index 98b4ade6cc7c..046862749993
--- a/sound/soc/spacemit/spacemit-snd-card.c
+++ b/sound/soc/spacemit/spacemit-snd-card.c
@@ -3,158 +3,372 @@
  * Copyright (C) 2024 SPACEMIT
  */
 
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/gpio.h>
 #include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/timer.h>
-#include <linux/interrupt.h>
-#include <linux/platform_device.h>
-#include <linux/delay.h>
 #include <linux/of.h>
-#include <sound/core.h>
-#include <sound/pcm.h>
+#include <linux/of_gpio.h>
+#include <linux/platform_device.h>
+#include <linux/string.h>
 #include <sound/jack.h>
+#include <sound/simple_card.h>
+#include <sound/soc-dai.h>
 #include <sound/soc.h>
-#include <linux/io.h>
-#include <linux/uaccess.h>
 #include <linux/input.h>
 
-__maybe_unused SND_SOC_DAILINK_DEF(dummy,
-	DAILINK_COMP_ARRAY(COMP_DUMMY()));
-
-__maybe_unused SND_SOC_DAILINK_DEF(sspa2,
-	DAILINK_COMP_ARRAY(COMP_CPU("SSPA2")));
+#define DAI	"sound-dai"
+#define CELL	"#sound-dai-cells"
+#define PREFIX	"simple-audio-card,"
 
-__maybe_unused SND_SOC_DAILINK_DEF(i2s0,
-	DAILINK_COMP_ARRAY(COMP_CPU("i2s-dai0")));
-
-__maybe_unused SND_SOC_DAILINK_DEF(i2s1,
-	DAILINK_COMP_ARRAY(COMP_CPU("i2s-dai1")));
-
-__maybe_unused SND_SOC_DAILINK_DEF(pcm_dma0,
-	DAILINK_COMP_ARRAY(COMP_PLATFORM("spacemit-snd-dma0")));
+static int asoc_simple_parse_dai(struct device_node *node,
+		struct snd_soc_dai_link_component *dlc,
+		int *is_single_link)
+{
+	struct of_phandle_args args;
+	int ret;
+	if (!node)
+		return 0;
+	/*
+	 * Get node via "sound-dai = <&phandle port>"
+	 * it will be used as xxx_of_node on soc_bind_dai_link()
+	 */
+	ret = of_parse_phandle_with_args(node, DAI, CELL, 0, &args);
+	if (ret)
+		return ret;
+	/*
+	 * FIXME
+	 *
+	 * Here, dlc->dai_name is pointer to CPU/Codec DAI name.
+	 * If user unbinded CPU or Codec driver, but not for Sound Card,
+	 * dlc->dai_name is keeping unbinded CPU or Codec
+	 * driver's pointer.
+	 *
+	 * If user re-bind CPU or Codec driver again, ALSA SoC will try
+	 * to rebind Card via snd_soc_try_rebind_card(), but because of
+	 * above reason, it might can't bind Sound Card.
+	 * Because Sound Card is pointing to released dai_name pointer.
+	 *
+	 * To avoid this rebind Card issue,
+	 * 1) It needs to alloc memory to keep dai_name eventhough
+	 *    CPU or Codec driver was unbinded, or
+	 * 2) user need to rebind Sound Card everytime
+	 *    if he unbinded CPU or Codec.
+	 */
+	ret = snd_soc_of_get_dai_name(node, &dlc->dai_name);
+	if (ret < 0)
+		return ret;
+	dlc->of_node = args.np;
+	if (is_single_link)
+		*is_single_link = !args.args_count;
+	return 0;
+}
 
-__maybe_unused SND_SOC_DAILINK_DEF(pcm_dma1,
-	DAILINK_COMP_ARRAY(COMP_PLATFORM("spacemit-snd-dma1")));
+static int asoc_simple_parse_platform(struct device_node *node,
+				      struct snd_soc_dai_link_component *dlc)
+{
+	struct of_phandle_args args;
+	int ret;
 
-__maybe_unused SND_SOC_DAILINK_DEF(pcm_dma_hdmi,
-	DAILINK_COMP_ARRAY(COMP_PLATFORM("c08d0400.spacemit-snd-dma-hdmi")));
+	if (!node)
+		return 0;
+	/*
+	 * Get node via "sound-dai = <&phandle port>"
+	 * it will be used as xxx_of_node on soc_bind_dai_link()
+	 */
+	ret = of_parse_phandle_with_args(node, DAI, CELL, 0, &args);
+	if (ret)
+		return ret;
 
-__maybe_unused SND_SOC_DAILINK_DEF(es8326,
-	DAILINK_COMP_ARRAY(COMP_CODEC("es8326.2-0019", "ES8326 HiFi")));
+	/* dai_name is not required and may not exist for plat component */
+	dlc->of_node = args.np;
+	return 0;
+}
 
-struct snd_soc_jack jack;
-static int spacemit_jack_init(struct snd_soc_pcm_runtime *rtd)
+static int asoc_simple_card_jack_init(struct snd_soc_pcm_runtime *rtd)
 {
-	int ret;
 	struct snd_soc_component *component = asoc_rtd_to_codec(rtd, 0)->component;
+	struct snd_soc_card *card = rtd->card;
+	struct asoc_simple_priv *priv = snd_soc_card_get_drvdata(card);
+	int ret;
 
 	ret = snd_soc_card_jack_new_pins(rtd->card, "Headset Jack",
 			SND_JACK_HEADSET | SND_JACK_BTN_0 |
-			SND_JACK_BTN_1 | SND_JACK_BTN_2, &jack,
+			SND_JACK_BTN_1 | SND_JACK_BTN_2, &priv->hp_jack.jack,
 			NULL, 0);
 	if (ret) {
 		dev_err(rtd->dev, "Headset Jack creation failed %d\n", ret);
 		return ret;
 	}
 
-	snd_jack_set_key(jack.jack, SND_JACK_BTN_0, KEY_PLAYPAUSE);
-	snd_jack_set_key(jack.jack, SND_JACK_BTN_1, KEY_VOLUMEUP);
-	snd_jack_set_key(jack.jack, SND_JACK_BTN_2, KEY_VOLUMEDOWN);
+	snd_jack_set_key(priv->hp_jack.jack.jack, SND_JACK_BTN_0, KEY_PLAYPAUSE);
+	snd_jack_set_key(priv->hp_jack.jack.jack, SND_JACK_BTN_1, KEY_VOLUMEUP);
+	snd_jack_set_key(priv->hp_jack.jack.jack, SND_JACK_BTN_2, KEY_VOLUMEDOWN);
+
+	snd_soc_component_set_jack(component, &priv->hp_jack.jack, NULL);
+	return 0;
+}
+
+int asoc_simple_parse_daistream(struct device *dev,
+				struct device_node *node,
+				char *prefix,
+				struct snd_soc_dai_link *dai_link)
+{
+	char prop[128];
+	unsigned int dai_stream = 0;
+	unsigned int playback_only = BIT(0);
+	unsigned int capture_only = BIT(1);
+
+	if (!prefix)
+		prefix = "";
+
+	/* check "[prefix]playback_only" */
+	snprintf(prop, sizeof(prop), "%splayback_only", prefix);
+	if (of_property_read_bool(node, prop))
+		dai_stream |= playback_only;
+
+	/* check "[prefix]capture_only" */
+	snprintf(prop, sizeof(prop), "%scapture_only", prefix);
+	if (of_property_read_bool(node, prop))
+		dai_stream |= capture_only;
+
+	if (dai_stream == (playback_only | capture_only)) {
+		pr_err("unsupport stream\n");
+		dai_link->playback_only = 0;
+		dai_link->capture_only = 0;
+	} else if (dai_stream == playback_only) {
+		dai_link->playback_only = 1;
+	} else if (dai_stream == capture_only) {
+		dai_link->capture_only = 1;
+	} else {
+		dai_link->playback_only = 0;
+		dai_link->capture_only = 0;
+	}
+
+	return 0;
+}
+
+static int asoc_simple_card_dai_link_of(struct device_node *node,
+					struct asoc_simple_priv *priv,
+					int idx,
+					bool is_top_level_node)
+{
+	struct device *dev = simple_priv_to_dev(priv);
+	struct snd_soc_dai_link *dai_link = simple_priv_to_link(priv, idx);
+	struct device_node *cpu = NULL;
+	struct device_node *plat = NULL;
+	struct device_node *codec = NULL;
+	char prop[128];
+	char *prefix = "";
+	int ret, single_cpu;
 
-	snd_soc_component_set_jack(component, &jack, NULL);
+	if (is_top_level_node)
+		prefix = PREFIX;
+
+	snprintf(prop, sizeof(prop), "%scpu", prefix);
+	cpu = of_get_child_by_name(node, prop);
+
+	if (!cpu) {
+		ret = -EINVAL;
+		dev_err(dev, "%s: Can't find %s DT node\n", __func__, prop);
+		goto dai_link_of_err;
+	}
+	snprintf(prop, sizeof(prop), "%splat", prefix);
+	plat = of_get_child_by_name(node, prop);
+
+	snprintf(prop, sizeof(prop), "%scodec", prefix);
+	codec = of_get_child_by_name(node, prop);
+	if (!codec) {
+		ret = -EINVAL;
+		dev_err(dev, "%s: Can't find %s DT node\n", __func__, prop);
+		goto dai_link_of_err;
+	}
+
+	ret = asoc_simple_parse_daistream(dev, node, prefix, dai_link);
+	if (ret < 0)
+		goto dai_link_of_err;
+
+	ret = asoc_simple_parse_daifmt(dev, node, codec,
+				       prefix, &dai_link->dai_fmt);
+	if (ret < 0)
+		goto dai_link_of_err;
+
+	//cpu dai
+	ret = asoc_simple_parse_dai(cpu, dai_link->cpus, &single_cpu);
+	if (ret < 0)
+		goto dai_link_of_err;
+
+	//codec dai
+	ret = asoc_simple_parse_dai(codec, dai_link->codecs, NULL);
+	if (ret < 0) {
+		goto dai_link_of_err;
+	}
+
+	//platform
+	ret = asoc_simple_parse_platform(plat, dai_link->platforms);
+	if (ret < 0)
+		goto dai_link_of_err;
+
+	ret = asoc_simple_set_dailink_name(dev, dai_link,
+					   "%s-%s",
+					   dai_link->cpus->dai_name,
+					   dai_link->codecs->dai_name);
+	if (ret < 0)
+		goto dai_link_of_err;
+
+	if (of_property_read_bool(node, "spacemit,init-jack")) {
+		dai_link->init = asoc_simple_card_jack_init;
+	}
+
+	asoc_simple_canonicalize_cpu(dai_link->cpus, single_cpu);
+	asoc_simple_canonicalize_platform(dai_link->platforms, dai_link->cpus);
+
+dai_link_of_err:
+	of_node_put(cpu);
+	of_node_put(codec);
 
 	return ret;
 }
 
-static struct snd_soc_dai_link spacemit_snd_es8326_dai_links[] = {
-	{
-		.name = "AP SSPA0 PCM",
-		.stream_name = "AP SSPA0 Playback/Capture",
-		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF
-			| SND_SOC_DAIFMT_CBM_CFM,
-		.init = spacemit_jack_init,
-		SND_SOC_DAILINK_REG(i2s0, es8326, pcm_dma0)
-	},
-};
+static int asoc_simple_card_parse_of(struct device_node *node,
+				     struct asoc_simple_priv *priv)
+{
+	struct device *dev = simple_priv_to_dev(priv);
+	struct device_node *dai_link;
+	int ret;
 
-static struct snd_soc_card spacemit_snd_card_es8326 = {
-	.name = "snd-es8326",
-	.owner = THIS_MODULE,
-};
+	if (!node)
+		return -EINVAL;
 
-static struct snd_soc_dai_link spacemit_snd_hdmi_dai_links[] = {
-	{
-		.name = "ADSP SSPA2 PCM",
-		.stream_name = "ADSP SSPA2 Playback",
-		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF
-			| SND_SOC_DAIFMT_CBM_CFM,
-		SND_SOC_DAILINK_REG(sspa2, dummy, pcm_dma_hdmi)
-	},
-};
+	/* The off-codec widgets */
+	ret = asoc_simple_parse_widgets(&priv->snd_card, PREFIX);
+	if (ret < 0)
+		return ret;
 
-static struct snd_soc_card spacemit_snd_card_hdmi = {
-	.name = "snd-hdmi",
-	.owner = THIS_MODULE,
-};
+	/* DAPM routes */
+	ret = asoc_simple_parse_routing(&priv->snd_card, PREFIX);
+	if (ret < 0)
+		return ret;
 
-static int spacemit_snd_pdev_probe(struct platform_device *pdev)
+	ret = asoc_simple_parse_pin_switches(&priv->snd_card, PREFIX);
+	if (ret < 0)
+		return ret;
+
+	dai_link = of_get_child_by_name(node, PREFIX "dai-link");
+	/* Single/Muti DAI link(s) & New style of DT node */
+	if (dai_link) {
+		struct device_node *np = NULL;
+		int i = 0;
+		for_each_child_of_node(node, np) {
+			dev_dbg(dev, "\tlink %d:\n", i);
+			ret = asoc_simple_card_dai_link_of(np, priv,
+							   i, false);
+			if (ret < 0) {
+				of_node_put(np);
+				goto card_parse_end;
+			}
+			i++;
+		}
+	} else {
+		/* For single DAI link & old style of DT node */
+		ret = asoc_simple_card_dai_link_of(node, priv, 0, true);
+		if (ret < 0)
+			goto card_parse_end;
+	}
+
+	ret = asoc_simple_parse_card_name(&priv->snd_card, PREFIX);
+
+card_parse_end:
+	of_node_put(dai_link);
+
+	return ret;
+}
+
+static int asoc_simple_card_probe(struct platform_device *pdev)
 {
+	struct asoc_simple_priv *priv;
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct snd_soc_card *card;
+	struct link_info *li;
 	int ret;
-	struct snd_soc_card *spacemit_snd_card;
-	pr_debug("enter %s\n", __func__);
-
-	if (of_device_is_compatible(pdev->dev.of_node, "spacemit,spacemit-snd-hdmi")){
-		spacemit_snd_card = &spacemit_snd_card_hdmi;
-		spacemit_snd_card->dai_link = &spacemit_snd_hdmi_dai_links[0];
-		spacemit_snd_card->num_links = ARRAY_SIZE(spacemit_snd_hdmi_dai_links);
-	} else if (of_device_is_compatible(pdev->dev.of_node, "spacemit,spacemit-snd-es8326")){
-		spacemit_snd_card = &spacemit_snd_card_es8326;
-		spacemit_snd_card->dai_link = &spacemit_snd_es8326_dai_links[0];
-		spacemit_snd_card->num_links = ARRAY_SIZE(spacemit_snd_es8326_dai_links);
+
+	/* Allocate the private data and the DAI link array */
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	li = devm_kzalloc(dev, sizeof(*li), GFP_KERNEL);
+	if (!li)
+		return -ENOMEM;
+
+	card = simple_priv_to_card(priv);
+	card->owner		= THIS_MODULE;
+	card->dev		= dev;
+
+	memset(li, 0, sizeof(struct link_info));
+
+	/* Get the number of DAI links */
+	if (np && of_get_child_by_name(np, PREFIX "dai-link")) {
+		li->link = of_get_child_count(np);
 	} else {
-		return 0;
+		li->link = 1;
+		li->num[0].cpus		= 1;
+		li->num[0].codecs	= 1;
+		li->num[0].platforms	= 1;
+	}
+
+	ret = asoc_simple_init_priv(priv, li);
+	if (ret < 0)
+		return ret;
+
+	if (np && of_device_is_available(np)) {
+		ret = asoc_simple_card_parse_of(np, priv);
+		if (ret < 0) {
+			if (ret != -EPROBE_DEFER)
+				dev_err(dev, "parse error %d\n", ret);
+			goto err;
+		}
+
+	} else {
+		dev_err(dev, "simple card dts available\n");
 	}
-	spacemit_snd_card->dev = &pdev->dev;
-	platform_set_drvdata(pdev, spacemit_snd_card);
 
-	ret =  devm_snd_soc_register_card(&pdev->dev, spacemit_snd_card);
+	snd_soc_card_set_drvdata(&priv->snd_card, priv);
+	ret = devm_snd_soc_register_card(&pdev->dev, &priv->snd_card);
+	if (ret >= 0)
+		return ret;
+err:
+	asoc_simple_clean_reference(&priv->snd_card);
+
 	return ret;
 }
 
-static struct of_device_id spacemit_snd_dt_ids[] = {
-	{.compatible = "spacemit,spacemit-snd-hdmi",},
-	{.compatible = "spacemit,spacemit-snd-es8326",},
-	{}
+static int asoc_simple_card_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+	asoc_simple_clean_reference(card);
+	return 0;
+}
+
+static const struct of_device_id asoc_simple_of_match[] = {
+	{ .compatible = "spacemit,simple-audio-card", },
+	{},
 };
+MODULE_DEVICE_TABLE(of, asoc_simple_of_match);
 
-static struct platform_driver spacemit_snd_pdrv = {
-	.probe = spacemit_snd_pdev_probe,
+static struct platform_driver asoc_simple_card = {
 	.driver = {
-		.name = "spacemit-snd",
-		.of_match_table = spacemit_snd_dt_ids,
+		.name = "spacemit-audio-card",
 		.pm = &snd_soc_pm_ops,
+		.of_match_table = asoc_simple_of_match,
 	},
+	.probe = asoc_simple_card_probe,
+	.remove = asoc_simple_card_remove,
 };
 
-#if IS_MODULE(CONFIG_SND_SOC_SPACEMIT)
-static int __init spacemit_snd_init(void)
-{
-	int ret = 0;
-	ret = platform_driver_register(&spacemit_snd_pdrv);
-	return ret;
-}
-module_init(spacemit_snd_init);
-
-static void __exit spacemit_snd_exit(void)
-{
-	platform_driver_unregister(&spacemit_snd_pdrv);
-}
-module_exit(spacemit_snd_exit);
-#else
-module_platform_driver(spacemit_snd_pdrv);
-#endif
+module_platform_driver(asoc_simple_card);
 
-/* Module information */
 MODULE_DESCRIPTION("SPACEMIT ASoC Machine Driver");
 MODULE_LICENSE("GPL");
 
diff --git a/sound/soc/spacemit/spacemit-snd-spi.c b/sound/soc/spacemit/spacemit-snd-i2s.c
similarity index 63%
rename from sound/soc/spacemit/spacemit-snd-spi.c
rename to sound/soc/spacemit/spacemit-snd-i2s.c
index 4abcb3e57bb1..c4cc2cc62224 100755
--- a/sound/soc/spacemit/spacemit-snd-spi.c
+++ b/sound/soc/spacemit/spacemit-snd-i2s.c
@@ -20,9 +20,9 @@
 #include <sound/pcm_params.h>
 #include <sound/soc.h>
 #include <sound/dmaengine_pcm.h>
-#include "spacemit-snd-spi.h"
+#include "spacemit-snd-i2s.h"
 
-static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt);
+static int i2s_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt);
 
 //APB Clock/Reset Control Register
 #define APB_CLK_BASE        0xD4015000
@@ -62,7 +62,7 @@ static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt);
 	struct list_head	node;
 
 	struct clk	*clk;
-	void __iomem	*mmio_base[2];
+	void __iomem	*mmio_base;
 	void __iomem	*mmio_ctrl_base;
 	void __iomem	*apb_clk_base;
 	void __iomem	*pmumain;
@@ -80,47 +80,47 @@ static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt);
 struct sspa_priv {
 	struct ssp_device *sspa;
 	struct snd_dmaengine_dai_dma_data *dma_params;
-	struct reset_control *sspa0_rst;
-	struct reset_control *sspa1_rst;
+	struct reset_control *sspa_rst;
 	int dai_fmt;
 	int dai_id_pre;
 	int running_cnt;
+	struct platform_device *i2splatdev;
 };
 
-struct platform_device *i2splatdev;
-
-static void mmp_sspa_write_reg(struct ssp_device *sspa, u32 reg, u32 val, int id_dai)
+static void i2s_sspa_write_reg(struct ssp_device *sspa, u32 reg, u32 val)
 {
-	__raw_writel(val, sspa->mmio_base[id_dai] + reg);
+	__raw_writel(val, sspa->mmio_base + reg);
 }
 
-static u32 mmp_sspa_read_reg(struct ssp_device *sspa, u32 reg, int id_dai)
+static u32 i2s_sspa_read_reg(struct ssp_device *sspa, u32 reg)
 {
-	return __raw_readl(sspa->mmio_base[id_dai] + reg);
+	return __raw_readl(sspa->mmio_base + reg);
 }
 
-static int mmp_sspa_startup(struct snd_pcm_substream *substream,
+static int i2s_sspa_startup(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
 {
-	pm_runtime_get_sync(&i2splatdev->dev);
-	mmp_sspa_set_dai_fmt(dai, SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_I2S);
+	struct sspa_priv *priv = snd_soc_dai_get_drvdata(dai);
+	pm_runtime_get_sync(&priv->i2splatdev->dev);
+	i2s_sspa_set_dai_fmt(dai, SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_I2S);
 
 	return 0;
 }
 
-static void mmp_sspa_shutdown(struct snd_pcm_substream *substream,
+static void i2s_sspa_shutdown(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
 {
-	pm_runtime_put_sync(&i2splatdev->dev);
+	struct sspa_priv *priv = snd_soc_dai_get_drvdata(dai);
+	pm_runtime_put_sync(&priv->i2splatdev->dev);
 }
 
-static int mmp_sspa_set_dai_sysclk(struct snd_soc_dai *cpu_dai,
+static int i2s_sspa_set_dai_sysclk(struct snd_soc_dai *cpu_dai,
 				    int clk_id, unsigned int freq, int dir)
 {
 	return 0;
 }
 
-static int mmp_sspa_set_dai_pll(struct snd_soc_dai *cpu_dai, int pll_id,
+static int i2s_sspa_set_dai_pll(struct snd_soc_dai *cpu_dai, int pll_id,
 				 int source, unsigned int freq_in,
 				 unsigned int freq_out)
 {
@@ -132,7 +132,7 @@ static int mmp_sspa_set_dai_pll(struct snd_soc_dai *cpu_dai, int pll_id,
  * before calling this function as the physical
  * interface format is changed.
  */
-static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai,
+static int i2s_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai,
 				 unsigned int fmt)
 {
 	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(cpu_dai);
@@ -142,13 +142,13 @@ static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai,
 
 	pr_debug("%s, fmt=0x%x, dai_id=0x%x\n", __FUNCTION__, fmt, dai_id);
 
-	if ((sspa_priv->dai_fmt == fmt) & (sspa_priv->dai_id_pre == dai_id) & (mmp_sspa_read_reg(sspa, PSP_CTRL, dai_id)))
+	if ((sspa_priv->dai_fmt == fmt) & (sspa_priv->dai_id_pre == dai_id) & (i2s_sspa_read_reg(sspa, PSP_CTRL)))
 		return 0;
 
 	ssp_top_cfg  = TOP_TRAIL_DMA | DW_32BYTE | TOP_SFRMDIR_M | TOP_SCLKDIR_M | TOP_FRF_PSP;
 	ssp_fifo_cfg = FIFO_RSRE | FIFO_TSRE | FIFO_RX_THRES_15 | FIFO_TX_THRES_15;
 
-	if ((mmp_sspa_read_reg(sspa, TOP_CTRL, dai_id) & TOP_SSE)) {
+	if ((i2s_sspa_read_reg(sspa, TOP_CTRL) & TOP_SSE)) {
 		pr_err("can't change hardware dai format: stream is in use\n");
 		return -EINVAL;
 	}
@@ -173,20 +173,20 @@ static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai,
 		return -EINVAL;
 	}
 
-	mmp_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg, dai_id);
-	mmp_sspa_write_reg(sspa, PSP_CTRL, ssp_psp_cfg, dai_id);
-	mmp_sspa_write_reg(sspa, INT_EN, ssp_int_en_cfg, dai_id);
-	mmp_sspa_write_reg(sspa, TO, ssp_to_cfg, dai_id);
-	mmp_sspa_write_reg(sspa, FIFO_CTRL, ssp_fifo_cfg, dai_id);
-	mmp_sspa_write_reg(sspa, NET_WORK_CTRL, ssp_net_work_ctrl, dai_id);
+	i2s_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg);
+	i2s_sspa_write_reg(sspa, PSP_CTRL, ssp_psp_cfg);
+	i2s_sspa_write_reg(sspa, INT_EN, ssp_int_en_cfg);
+	i2s_sspa_write_reg(sspa, TO, ssp_to_cfg);
+	i2s_sspa_write_reg(sspa, FIFO_CTRL, ssp_fifo_cfg);
+	i2s_sspa_write_reg(sspa, NET_WORK_CTRL, ssp_net_work_ctrl);
 
 	pr_debug("TOP_CTRL=0x%x,\n PSP_CTRL=0x%x,\n INT_EN=0x%x,\n TO=0x%x,\n FIFO_CTRL=0x%x,\n,NET_WORK_CTRL=0x%x",
-				mmp_sspa_read_reg(sspa, TOP_CTRL, dai_id),
-				mmp_sspa_read_reg(sspa, PSP_CTRL, dai_id),
-				mmp_sspa_read_reg(sspa, INT_EN, dai_id),
-				mmp_sspa_read_reg(sspa, TO, dai_id),
-				mmp_sspa_read_reg(sspa, FIFO_CTRL, dai_id),
-				mmp_sspa_read_reg(sspa, NET_WORK_CTRL, dai_id));
+				i2s_sspa_read_reg(sspa, TOP_CTRL),
+				i2s_sspa_read_reg(sspa, PSP_CTRL),
+				i2s_sspa_read_reg(sspa, INT_EN),
+				i2s_sspa_read_reg(sspa, TO),
+				i2s_sspa_read_reg(sspa, FIFO_CTRL),
+				i2s_sspa_read_reg(sspa, NET_WORK_CTRL));
 
 	sspa_priv->dai_fmt = fmt;
 	sspa_priv->dai_id_pre = dai_id;
@@ -198,7 +198,7 @@ static int mmp_sspa_set_dai_fmt(struct snd_soc_dai *cpu_dai,
  * Set the SSPA audio DMA parameters and sample size.
  * Can be called multiple times.
  */
-static int mmp_sspa_hw_params(struct snd_pcm_substream *substream,
+static int i2s_sspa_hw_params(struct snd_pcm_substream *substream,
 			       struct snd_pcm_hw_params *params,
 			       struct snd_soc_dai *dai)
 {
@@ -217,7 +217,7 @@ static int mmp_sspa_hw_params(struct snd_pcm_substream *substream,
 	return 0;
 }
 
-static int mmp_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
+static int i2s_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
 			     struct snd_soc_dai *dai)
 {
 	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(dai);
@@ -229,16 +229,16 @@ static int mmp_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_RESUME:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-		unsigned int ssp_top_cfg = mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id);
+		unsigned int ssp_top_cfg = i2s_sspa_read_reg(sspa, TOP_CTRL);
 		pr_debug("TOP_CTRL:0x%x", ssp_top_cfg);
 		ssp_top_cfg |= TOP_SSE;
- 		mmp_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg, dai->id);   //SSP_enable
+		i2s_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg);   //SSP_enable
 		sspa_priv->running_cnt++;
 		pr_debug("triger::TOP_CTRL=0x%x,\n PSP_CTRL=0x%x,\n INT_EN=0x%x,\n TO=0x%x,\n FIFO_CTRL=0x%x,\n",
-				mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id), mmp_sspa_read_reg(sspa, PSP_CTRL, dai->id),
-				mmp_sspa_read_reg(sspa, INT_EN, dai->id),
-				mmp_sspa_read_reg(sspa, TO, dai->id),
-				mmp_sspa_read_reg(sspa, FIFO_CTRL, dai->id));
+				i2s_sspa_read_reg(sspa, TOP_CTRL), i2s_sspa_read_reg(sspa, PSP_CTRL),
+				i2s_sspa_read_reg(sspa, INT_EN),
+				i2s_sspa_read_reg(sspa, TO),
+				i2s_sspa_read_reg(sspa, FIFO_CTRL));
 		break;
 
 	case SNDRV_PCM_TRIGGER_STOP:
@@ -247,10 +247,10 @@ static int mmp_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
 	if (sspa_priv->running_cnt > 0)
 		sspa_priv->running_cnt--;
 	if (sspa_priv->running_cnt == 0 ) {
-		ssp_top_cfg = mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id);
+		ssp_top_cfg = i2s_sspa_read_reg(sspa, TOP_CTRL);
 		ssp_top_cfg &= (~TOP_SSE);
-		mmp_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg, dai->id);
-		pr_debug("TOP_CTRL=0x%x, dai->id=%d \n", mmp_sspa_read_reg(sspa, TOP_CTRL, dai->id), dai->id);
+		i2s_sspa_write_reg(sspa, TOP_CTRL, ssp_top_cfg);
+		pr_debug("TOP_CTRL=0x%x, dai->id=%d \n", i2s_sspa_read_reg(sspa, TOP_CTRL), dai->id);
 	}
 		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 			pr_debug("%s ignore playback tx\n", __FUNCTION__);
@@ -269,7 +269,7 @@ static int mmp_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
 	return ret;
 }
 
-static int mmp_sspa_probe(struct snd_soc_dai *dai)
+static int i2s_sspa_probe(struct snd_soc_dai *dai)
 {
 	struct sspa_priv *priv = dev_get_drvdata(dai->dev);
 	struct ssp_device *sspa = priv->sspa;
@@ -283,70 +283,69 @@ static int mmp_sspa_probe(struct snd_soc_dai *dai)
 		//i2s0
 		sspa_clk = __raw_readl(sspa->apb_clk_base + APB_SSP0_CLK_RST);
 		__raw_writel((1 << 3)|sspa_clk, sspa->apb_clk_base + APB_SSP0_CLK_RST);
-		reset_control_deassert(priv->sspa0_rst);
 	} else {
 		//i2s1
 		sspa_clk = __raw_readl(sspa->apb_clk_base + APB_SSP1_CLK_RST);
 		__raw_writel((1 << 3)|sspa_clk, sspa->apb_clk_base + APB_SSP1_CLK_RST);
-		reset_control_deassert(priv->sspa1_rst);
     }
+	reset_control_deassert(priv->sspa_rst);
 	snd_soc_dai_set_drvdata(dai, priv);
 	return 0;
 
 }
 
-#define MMP_SSPA_RATES SNDRV_PCM_RATE_8000_192000
-#define MMP_SSPA_FORMATS (SNDRV_PCM_FMTBIT_S8 | \
+#define I2S_SSPA_RATES SNDRV_PCM_RATE_8000_192000
+#define I2S_SSPA_FORMATS (SNDRV_PCM_FMTBIT_S8 | \
 		SNDRV_PCM_FMTBIT_S16_LE | \
 		SNDRV_PCM_FMTBIT_S24_LE | \
 		SNDRV_PCM_FMTBIT_S32_LE)
 
-static const struct snd_soc_dai_ops mmp_sspa_dai_ops = {
-	.startup	= mmp_sspa_startup,
-	.shutdown	= mmp_sspa_shutdown,
-	.trigger	= mmp_sspa_trigger,
-	.hw_params	= mmp_sspa_hw_params,
-	.set_sysclk	= mmp_sspa_set_dai_sysclk,
-	.set_pll	= mmp_sspa_set_dai_pll,
-	.set_fmt	= mmp_sspa_set_dai_fmt,
+static const struct snd_soc_dai_ops i2s_sspa_dai_ops = {
+	.startup	= i2s_sspa_startup,
+	.shutdown	= i2s_sspa_shutdown,
+	.trigger	= i2s_sspa_trigger,
+	.hw_params	= i2s_sspa_hw_params,
+	.set_sysclk	= i2s_sspa_set_dai_sysclk,
+	.set_pll	= i2s_sspa_set_dai_pll,
+	.set_fmt	= i2s_sspa_set_dai_fmt,
 };
 
-static struct snd_soc_dai_driver mmp_sspa_dai[] = {
+static struct snd_soc_dai_driver i2s_sspa_dai[] = {
 	{
 		.name = "i2s-dai0",
-		.probe = mmp_sspa_probe,
+		.probe = i2s_sspa_probe,
 		.id = 0,
 		.playback = {
 			.channels_min = 1,
 			.channels_max = 128,
-			.rates = MMP_SSPA_RATES,
-			.formats = MMP_SSPA_FORMATS,
+			.rates = I2S_SSPA_RATES,
+			.formats = I2S_SSPA_FORMATS,
 		},
 		.capture = {
 			.channels_min = 1,
 			.channels_max = 2,
-			.rates = MMP_SSPA_RATES,
-			.formats = MMP_SSPA_FORMATS,
+			.rates = I2S_SSPA_RATES,
+			.formats = I2S_SSPA_FORMATS,
 		},
-		.ops = &mmp_sspa_dai_ops,
+		.ops = &i2s_sspa_dai_ops,
 	},
 	{
 		.name = "i2s-dai1",
-		.probe = mmp_sspa_probe,
+		.probe = i2s_sspa_probe,
 		.id = 1,
 		.playback = {
 			.channels_min = 1,
 			.channels_max = 128,
-			.rates = MMP_SSPA_RATES,
-			.formats = MMP_SSPA_FORMATS,
+			.rates = I2S_SSPA_RATES,
+			.formats = I2S_SSPA_FORMATS,
 		},
 		.capture = {
 			.channels_min = 1,
 			.channels_max = 2,
-			.rates = MMP_SSPA_RATES,
-			.formats = MMP_SSPA_FORMATS,
+			.rates = I2S_SSPA_RATES,
+			.formats = I2S_SSPA_FORMATS,
 		},
-		.ops = &mmp_sspa_dai_ops,
+		.ops = &i2s_sspa_dai_ops,
 	}
 };
 
@@ -361,16 +360,17 @@ static int i2s_sspa_resume(struct snd_soc_component *component)
 	/*to-do */
 	return 0;
 }
-static const struct snd_soc_component_driver mmp_sspa_component = {
+static const struct snd_soc_component_driver i2s_sspa_component = {
 	.name 			= "spacemit-dmasspa-dai",
 	.resume 		= i2s_sspa_resume,
 	.suspend 		= i2s_sspa_suspend,
 };
 
-static int asoc_mmp_sspa_probe(struct platform_device *pdev)
+static int asoc_i2s_sspa_probe(struct platform_device *pdev)
 {
 	struct sspa_priv *priv;
 	struct resource *res;
+	u8 dai_id = 0;
 
 	printk("enter %s\n", __FUNCTION__);
 	priv = devm_kzalloc(&pdev->dev,
@@ -396,20 +396,13 @@ static int asoc_mmp_sspa_probe(struct platform_device *pdev)
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	pr_debug("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)res->start, (unsigned long)res->end);
-	priv->sspa->mmio_base[0] = devm_ioremap_resource(&pdev->dev, res);
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	pr_debug("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)res->start, (unsigned long)res->end);
-	priv->sspa->mmio_base[1] = devm_ioremap_resource(&pdev->dev, res);
+	priv->sspa->mmio_base = devm_ioremap_resource(&pdev->dev, res);
 
-	if (IS_ERR(priv->sspa->mmio_base[0])) {
-		pr_err("%s mmio_base[0] alloc failed\n", __FUNCTION__);
-		return PTR_ERR(priv->sspa->mmio_base[0]);
-	}
-	if (IS_ERR(priv->sspa->mmio_base[1])) {
-		pr_err("%s mmio_base[1] alloc failed\n", __FUNCTION__);
-		return PTR_ERR(priv->sspa->mmio_base[1]);
+	if (IS_ERR(priv->sspa->mmio_base)) {
+		pr_err("%s mmio_base alloc failed\n", __FUNCTION__);
+		return PTR_ERR(priv->sspa->mmio_base);
 	}
+
 	if ((priv->sspa->apb_clk_base = ioremap(APB_CLK_BASE, 0x100)) == NULL) {
 		pr_err("sspa ioremap err\n");
 		return -1;
@@ -419,63 +412,65 @@ static int asoc_mmp_sspa_probe(struct platform_device *pdev)
 		return -1;
 	}
 	//get reset
-	priv->sspa0_rst = devm_reset_control_get(&pdev->dev, "sspa0-rst");
-	if (IS_ERR(priv->sspa0_rst))
-		return PTR_ERR(priv->sspa0_rst);
-
-	priv->sspa1_rst = devm_reset_control_get(&pdev->dev, "sspa1-rst");
-	if (IS_ERR(priv->sspa1_rst))
-		return PTR_ERR(priv->sspa1_rst);
+	priv->sspa_rst = devm_reset_control_get(&pdev->dev, "sspa-rst");
+	if (IS_ERR(priv->sspa_rst))
+		return PTR_ERR(priv->sspa_rst);
 
 	pm_runtime_enable(&pdev->dev);
-	i2splatdev = pdev;
+	priv->i2splatdev = pdev;
 
 	priv->dai_fmt = (unsigned int) -1;
 	platform_set_drvdata(pdev, priv);
 	pr_debug("exit %s\n", __FUNCTION__);
-	return devm_snd_soc_register_component(&pdev->dev, &mmp_sspa_component,
-					       mmp_sspa_dai, ARRAY_SIZE(mmp_sspa_dai));
+	if (of_device_is_compatible(pdev->dev.of_node, "spacemit,spacemit-i2s0")) {
+		dai_id = 0;
+	} else {
+		dai_id = 1;
+	}
+	return devm_snd_soc_register_component(&pdev->dev, &i2s_sspa_component,
+					       &i2s_sspa_dai[dai_id], 1);
 }
 
-static int asoc_mmp_sspa_remove(struct platform_device *pdev)
+static int asoc_i2s_sspa_remove(struct platform_device *pdev)
 {
 	return 0;
 }
 
 #ifdef CONFIG_OF
-static const struct of_device_id spacemit_dmasspa_ids[] = {
-	{ .compatible = "spacemit,spacemit-i2s-dai", },
+static const struct of_device_id spacemit_i2s_ids[] = {
+	{ .compatible = "spacemit,spacemit-i2s0", },
+	{ .compatible = "spacemit,spacemit-i2s1", },
 	{ /* sentinel */ }
 };
 #endif
 
-static struct platform_driver asoc_mmp_sspa_driver = {
+static struct platform_driver asoc_i2s_sspa_driver = {
 	.driver = {
-		.name = "dma-sspa-dai",
-		.of_match_table = of_match_ptr(spacemit_dmasspa_ids),
+		.name = "spacemit-snd-i2s",
+		.of_match_table = of_match_ptr(spacemit_i2s_ids),
 	},
-	.probe = asoc_mmp_sspa_probe,
-	.remove = asoc_mmp_sspa_remove,
+	.probe = asoc_i2s_sspa_probe,
+	.remove = asoc_i2s_sspa_remove,
 };
 
 #if IS_MODULE(CONFIG_SND_SOC_SPACEMIT)
 int spacemit_snd_register_i2s_pdrv(void)
 {
 	printk("%s\n", __FUNCTION__);
-	return platform_driver_register(&asoc_mmp_sspa_driver);
+	return platform_driver_register(&asoc_i2s_sspa_driver);
 }
 
 EXPORT_SYMBOL(spacemit_snd_register_i2s_pdrv);
 
 void spacemit_snd_unregister_i2s_pdrv(void)
 {
-	platform_driver_unregister(&asoc_mmp_sspa_driver);
+	platform_driver_unregister(&asoc_i2s_sspa_driver);
 }
 EXPORT_SYMBOL(spacemit_snd_unregister_i2s_pdrv);
 
 #else
 
-module_platform_driver(asoc_mmp_sspa_driver);
+module_platform_driver(asoc_i2s_sspa_driver);
 
 #endif
 
diff --git a/sound/soc/spacemit/spacemit-snd-spi.h b/sound/soc/spacemit/spacemit-snd-i2s.h
similarity index 100%
rename from sound/soc/spacemit/spacemit-snd-spi.h
rename to sound/soc/spacemit/spacemit-snd-i2s.h
-- 
2.47.0

