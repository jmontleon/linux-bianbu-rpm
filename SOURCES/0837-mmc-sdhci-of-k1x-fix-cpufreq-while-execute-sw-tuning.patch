From 38e451154914250356f8c40a80ed42aa048a0d2e Mon Sep 17 00:00:00 2001
From: wanlong <long.wan@spacemit.com>
Date: Wed, 24 Jul 2024 11:53:15 +0800
Subject: [PATCH 0837/1204] mmc: sdhci-of-k1x: fix cpufreq while execute sw
 tuning

Change-Id: I4030f004b07d173ad64ed5b910c6be820f978952
---
 drivers/mmc/host/sdhci-of-k1x.c         | 38 +++++++++++++++++++++++--
 include/linux/platform_data/k1x_sdhci.h |  1 +
 2 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/drivers/mmc/host/sdhci-of-k1x.c b/drivers/mmc/host/sdhci-of-k1x.c
index 6fc6555b4c75..fc9d388d637b 100644
--- a/drivers/mmc/host/sdhci-of-k1x.c
+++ b/drivers/mmc/host/sdhci-of-k1x.c
@@ -31,6 +31,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/slab.h>
 #include <linux/reset.h>
+#include <linux/cpufreq.h>
 
 #include "sdhci.h"
 #include "sdhci-pltfm.h"
@@ -1181,6 +1182,8 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 	struct mmc_ios ios = mmc->ios;
 	struct k1x_sdhci_platdata *pdata = mmc->parent->platform_data;
 	struct rx_tuning *rxtuning = &pdata->rxtuning;
+	struct cpufreq_policy *policy;
+	unsigned int clk_rate;
 
 	/*
 	 * Tuning is required for SDR50/SDR104, HS200/HS400 cards and
@@ -1229,6 +1232,22 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 		return 0;
 	}
 
+	/* specify cpu freq during tuning rx windows if current cpufreq exceed 1.6G */
+	if (pdata->rx_tuning_freq) {
+		clk_rate= cpufreq_generic_get(0);
+		if (clk_rate && (clk_rate != pdata->rx_tuning_freq)) {
+			policy = cpufreq_cpu_get(0);
+			if (policy) {
+				ret = cpufreq_driver_target(policy, pdata->rx_tuning_freq, 0);
+				pr_info("%s: change cpu frequency from %d to %d before tuning\n", mmc_hostname(mmc),
+					clk_rate, pdata->rx_tuning_freq);
+				if (ret)
+					pr_err("%s: failed to change cpu frequency before tuning, err: %d\n",
+						mmc_hostname(mmc), ret);
+			}
+		}
+	}
+
 	rxtuning->select_delay_num = 0;
 	rxtuning->current_delay_index = 0;
 	memset(rxtuning->windows, 0, sizeof(rxtuning->windows));
@@ -1242,13 +1261,14 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 	if (ret) {
 		pr_warn("%s: abort tuning, err:%d\n", mmc_hostname(mmc), ret);
 		rxtuning->tuning_fail = 1;
-		return ret;
+		goto restore_freq;
 	}
 
 	if (!spacemit_sw_rx_select_delay(host)) {
 		pr_warn("%s: fail to get delaycode\n", mmc_hostname(mmc));
 		rxtuning->tuning_fail = 1;
-		return -EIO;
+		ret = -EIO;
+		goto restore_freq;
 	}
 
 	/* step 3: set the delay code and store card cid */
@@ -1257,7 +1277,15 @@ static int spacemit_sdhci_execute_sw_tuning(struct sdhci_host *host, u32 opcode)
 	rxtuning->tuning_fail = 0;
 	pr_info("%s: tuning done, use the firstly delay_code:%d\n",
 		mmc_hostname(mmc), rxtuning->select_delay[0]);
-	return 0;
+
+restore_freq:
+	if (pdata->rx_tuning_freq) {
+		if (clk_rate)
+			cpufreq_driver_target(policy, clk_rate, 0);
+		if (policy)
+			cpufreq_cpu_put(policy);
+	}
+	return ret;
 }
 
 static unsigned int spacemit_sdhci_clk_get_max_clock(struct sdhci_host *host)
@@ -1477,6 +1505,10 @@ static void spacemit_get_of_property(struct sdhci_host *host,
 	else
 		pdata->phy_driver_sel = PHY_DRIVE_SEL_DEFAULT;
 
+	/* read rx tuning cpufreq, unit 1000Hz */
+	if (!of_property_read_u32(np, "spacemit,rx_tuning_freq", &property))
+		pdata->rx_tuning_freq = property;
+
 	return;
 }
 
diff --git a/include/linux/platform_data/k1x_sdhci.h b/include/linux/platform_data/k1x_sdhci.h
index 96ba444ada34..043b3d732089 100644
--- a/include/linux/platform_data/k1x_sdhci.h
+++ b/include/linux/platform_data/k1x_sdhci.h
@@ -90,6 +90,7 @@ struct k1x_sdhci_platdata {
 	u32 curr_dllcfg1;
 	u32 new_dllcfg1;
 	u8 dllcfg1_odd_reset;
+	u32 rx_tuning_freq;
 };
 
 #endif /* _K1X_SDHCI_H_ */
-- 
2.47.0

