From 95966e39ca8fd27aae5b5c3bb447912daff71f44 Mon Sep 17 00:00:00 2001
From: yanhaodong <haodong.yan@spacemit.com>
Date: Fri, 2 Feb 2024 11:28:26 +0800
Subject: [PATCH 0410/1206] k1x-uart:add uart parent clk gate function

Change-Id: I2d597678c53d70fbe9841d646fb4c35c1a0957a9
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi | 24 ++++++----
 drivers/tty/serial/pxa_k1x.c           | 64 +++++++++++++++++---------
 2 files changed, 58 insertions(+), 30 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index c92a1ef36f57..86abba08b019 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -777,7 +777,8 @@ uart0: serial@d4017000 {
 			reg = <0x0 0xd4017000 0x0 0x100>;
 			interrupt-parent = <&intc>;
 			interrupts = <42>;
-			clocks = <&ccu CLK_UART1>;
+			clocks = <&ccu CLK_UART1>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART1>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -793,7 +794,8 @@ uart2: uart@d4017100 {
 			reg = <0x0 0xd4017100 0x0 0x100>;
 			interrupt-parent = <&intc>;
 			interrupts = <44>;
-			clocks = <&ccu CLK_UART2>;
+			clocks = <&ccu CLK_UART2>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART2>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -809,7 +811,8 @@ uart3: uart@d4017200 {
 			reg = <0x0 0xd4017200 0x0 0x100>;
 			interrupt-parent = <&intc>;
 			interrupts = <45>;
-			clocks = <&ccu CLK_UART3>;
+			clocks = <&ccu CLK_UART3>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
  			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART3>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -825,7 +828,8 @@ uart4: uart@d4017300 {
 			interrupt-parent = <&intc>;
 			reg = <0x0 0xd4017300 0x0 0x100>;
 			interrupts = <46>;
-			clocks = <&ccu CLK_UART4>;
+			clocks = <&ccu CLK_UART4>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART4>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -841,7 +845,8 @@ uart5: uart@d4017400 {
 			interrupt-parent = <&intc>;
 			reg = <0x0 0xd4017400 0x0 0x100>;
 			interrupts = <47>;
-			clocks = <&ccu CLK_UART5>;
+			clocks = <&ccu CLK_UART5>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART5>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -857,7 +862,8 @@ uart6: uart@d4017500 {
 			interrupt-parent = <&intc>;
 			reg = <0x0 0xd4017500 0x0 0x100>;
 			interrupts = <48>;
-			clocks = <&ccu CLK_UART6>;
+			clocks = <&ccu CLK_UART6>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART6>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -873,7 +879,8 @@ uart7: uart@d4017600 {
 			interrupt-parent = <&intc>;
 			reg = <0x0 0xd4017600 0x0 0x100>;
 			interrupts = <49>;
-			clocks = <&ccu CLK_UART7>;
+			clocks = <&ccu CLK_UART7>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART7>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
@@ -889,7 +896,8 @@ uart8: uart@d4017700 {
 			interrupt-parent = <&intc>;
 			reg = <0x0 0xd4017700 0x0 0x100>;
 			interrupts = <50>;
-			clocks = <&ccu CLK_UART8>;
+			clocks = <&ccu CLK_UART8>, <&ccu CLK_SLOW_UART>;
+			clock-names = "func", "gate";
 			clk-fpga = <14750000>;
 			resets = <&reset RESET_UART8>;
 			power-domains = <&power K1X_PMU_BUS_PWR_DOMAIN>;
diff --git a/drivers/tty/serial/pxa_k1x.c b/drivers/tty/serial/pxa_k1x.c
index cbfd854be05b..1737ea7e8d35 100644
--- a/drivers/tty/serial/pxa_k1x.c
+++ b/drivers/tty/serial/pxa_k1x.c
@@ -57,7 +57,7 @@
 
 #define UARTCLK_FPGA		(14750000)
 
-#define NUM_UART_PORTS		(4)
+#define NUM_UART_PORTS		(9)
 #define BT_UART_PORT		(2)
 
 #define UART_FCR_PXA_BUS32	(0x20)	/* 32-Bit Peripheral Bus */
@@ -118,7 +118,8 @@ struct uart_pxa_port {
 	unsigned char		lcr;
 	unsigned char		mcr;
 	unsigned int		lsr_break_flag;
-	struct clk		*clk;
+	struct clk		*fclk;
+	struct clk		*gclk;
 	struct reset_control    *resets;
 	char			name[PXA_NAME_LEN];
 
@@ -151,7 +152,7 @@ static int uart_dma;
 
 static int __init uart_dma_setup(char *__unused)
 {
-#ifdef CONFIG_MMP_PDMA
+#ifdef CONFIG_MMP_PDMA_SPACEMIT_K1X
 	uart_dma = 1;
 #endif
 	return 1;
@@ -1155,7 +1156,7 @@ static int serial_pxa_startup(struct uart_port *port)
 		up->port.uartclk = UARTCLK_FPGA;
 	}
 	#else
-	up->port.uartclk = clk_get_rate(up->clk);
+	up->port.uartclk = clk_get_rate(up->fclk);
 	#endif
 
 	/*
@@ -1308,14 +1309,14 @@ static int pxa_set_baudrate_clk(struct uart_port *port, unsigned int baud)
 	 * choose the closest integral value above zero.
 	 * So for different clk source, the real baudrate is
 	 * baudrate = clk_rate / 16 / [quot]. */
-	ret = clk_set_rate(up->clk, rate);
+	ret = clk_set_rate(up->fclk, rate);
 	if (ret < 0) {
 		dev_err(port->dev,
 			"Failed to set clk rate %lu\n", rate);
 		return ret;
 	}
 
-	up->port.uartclk = clk_get_rate(up->clk);
+	up->port.uartclk = clk_get_rate(up->fclk);
 	up->current_baud = baud;
 
 	return 0;
@@ -1500,9 +1501,11 @@ static void serial_pxa_pm(struct uart_port *port, unsigned int state, unsigned i
 	struct uart_pxa_port *up = (struct uart_pxa_port *)port;
 
 	if (!state) {
-		clk_prepare_enable(up->clk);
+		clk_prepare_enable(up->gclk);
+		clk_prepare_enable(up->fclk);
 	} else {
-		clk_disable_unprepare(up->clk);
+		clk_disable_unprepare(up->fclk);
+		clk_disable_unprepare(up->gclk);
 	}
 }
 
@@ -1693,7 +1696,8 @@ serial_pxa_console_write(struct console *co, const char *s, unsigned int count)
 	unsigned long flags;
 	int locked = 1;
 
-	clk_enable(up->clk);
+	clk_enable(up->gclk);
+	clk_enable(up->fclk);
 
 	local_irq_save(flags);
 	if (up->port.sysrq)
@@ -1721,8 +1725,8 @@ serial_pxa_console_write(struct console *co, const char *s, unsigned int count)
 	if (locked)
 		spin_unlock(&up->port.lock);
 	local_irq_restore(flags);
-	clk_disable(up->clk);
-
+	clk_disable(up->fclk);
+	clk_disable(up->gclk);
 }
 
 #ifdef CONFIG_CONSOLE_POLL
@@ -2125,15 +2129,27 @@ static int serial_pxa_probe(struct platform_device *dev)
 		return -ENOMEM;
 	}
 #endif
-	sport->clk = clk_get(&dev->dev, NULL);
-	if (IS_ERR(sport->clk)) {
-		ret = PTR_ERR(sport->clk);
+	sport->gclk = devm_clk_get(&dev->dev, "gate");
+	if (IS_ERR(sport->gclk)) {
+		ret = PTR_ERR(sport->gclk);
+		goto err_free;
+	}
+
+	sport->fclk = devm_clk_get(&dev->dev, "func");
+	if (IS_ERR(sport->fclk)) {
+		ret = PTR_ERR(sport->fclk);
+		goto err_free;
+	}
+
+	ret = clk_prepare(sport->gclk);
+	if (ret) {
+		clk_put(sport->gclk);
 		goto err_free;
 	}
 
-	ret = clk_prepare(sport->clk);
+	ret = clk_prepare(sport->fclk);
 	if (ret) {
-		clk_put(sport->clk);
+		clk_put(sport->fclk);
 		goto err_free;
 	}
 
@@ -2154,7 +2170,7 @@ static int serial_pxa_probe(struct platform_device *dev)
 		sport->port.uartclk = UARTCLK_FPGA;
 	}
 #else
-	sport->port.uartclk = clk_get_rate(sport->clk);
+	sport->port.uartclk = clk_get_rate(sport->fclk);
 #endif
 	sport->resets = devm_reset_control_get_optional(&dev->dev, NULL);
 	if(IS_ERR(sport->resets)) {
@@ -2236,7 +2252,7 @@ static int serial_pxa_probe(struct platform_device *dev)
 
 	serial_pxa_ports[sport->port.line] = sport;
 	uart_add_one_port(&serial_pxa_reg, &sport->port);
-	dev_info(&dev->dev, "uart clk_rate: %lu\n", clk_get_rate(sport->clk));
+	dev_info(&dev->dev, "uart clk_rate: %lu\n", clk_get_rate(sport->fclk));
 	platform_set_drvdata(dev, sport);
 
 #ifdef CONFIG_PM
@@ -2267,8 +2283,10 @@ static int serial_pxa_probe(struct platform_device *dev)
 err_rst:
 	reset_control_assert(sport->resets);
 err_clk:
-	clk_unprepare(sport->clk);
-	clk_put(sport->clk);
+	clk_unprepare(sport->fclk);
+	clk_unprepare(sport->gclk);
+	clk_put(sport->fclk);
+	clk_put(sport->gclk);
 err_free:
 	kfree(sport);
 	return ret;
@@ -2286,8 +2304,10 @@ static int serial_pxa_remove(struct platform_device *dev)
 
 	reset_control_assert(sport->resets);
 	free_irq(sport->port.irq, sport);
-	clk_unprepare(sport->clk);
-	clk_put(sport->clk);
+	clk_unprepare(sport->fclk);
+	clk_unprepare(sport->gclk);
+	clk_put(sport->fclk);
+	clk_put(sport->gclk);
 
 #ifdef CONFIG_PM
 /*	if (sport->edge_wakeup_gpio >= 0) {
-- 
2.47.0

