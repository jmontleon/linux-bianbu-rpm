From 85f9c42b29e8b93ef9ec7784787bf858a821e6b2 Mon Sep 17 00:00:00 2001
From: lilijun <lijun.li@spacemit.com>
Date: Fri, 9 Aug 2024 15:38:55 +0800
Subject: [PATCH 0905/1204] display: fix the issue of bootlogo flashing screen

Change-Id: I5975e3353e1ae874045c8dc3324a15282c0fc076
---
 .../boot/dts/spacemit/k1-x_MUSE-Book.dts      |  2 +-
 drivers/gpu/drm/spacemit/dpu/dpu_saturn.c     |  9 +++---
 drivers/gpu/drm/spacemit/lt8911exb.c          | 28 ++++++++++++-------
 drivers/gpu/drm/spacemit/spacemit_dpu.c       | 22 +++++++++++++--
 drivers/gpu/drm/spacemit/spacemit_dpu.h       |  4 +++
 5 files changed, 47 insertions(+), 18 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
index a5e295049122..570987cc8527 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
+++ b/arch/riscv/boot/dts/spacemit/k1-x_MUSE-Book.dts
@@ -198,6 +198,7 @@ &dpu_online2_dsi {
 	spacemit-dpu-bitclk = <933000000>;
 	dsi_1v2-supply = <&ldo_5>;
 	vin-supply-names = "dsi_1v2";
+	enable-gpio = <&gpio 83 0>;
 	status = "okay";
 };
 
@@ -322,7 +323,6 @@ lt8911exb_i2c@29 {
 		reg = <0x29>;
 
 		reset-gpio = <&gpio 114 0>;
-		enable-gpio = <&gpio 83 0>;
 		bl-gpio = <&gpio 75 0>;
 		standby-gpio = <&gpio 92 0>;
 
diff --git a/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c b/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
index 9cd2d1a917b9..a77ad3d2837d 100644
--- a/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
+++ b/drivers/gpu/drm/spacemit/dpu/dpu_saturn.c
@@ -572,7 +572,8 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 			clk_prepare_enable(clk_ctx->escclk);
 			clk_prepare_enable(clk_ctx->bitclk);
 		}
-		udelay(100);
+		udelay(10);
+
 		return 0;
 	}
 
@@ -595,7 +596,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 		clk_val = clk_get_rate(clk_ctx->hmclk);
 		DRM_DEBUG("get hdmi mclk=%lld\n", clk_val);
 
-		udelay(100);
+		udelay(10);
 	} else {
 		clk_prepare_enable(clk_ctx->pxclk);
 		clk_prepare_enable(clk_ctx->mclk);
@@ -652,7 +653,7 @@ static int dpu_enable_clocks(struct spacemit_dpu *dpu)
 		clk_val = clk_get_rate(clk_ctx->bitclk);
 		DRM_DEBUG("get bitclk=%lld\n", clk_val);
 
-		udelay(100);
+		udelay(10);
 	}
 
 	trace_dpu_enable_clocks(dpu->dev_id);
@@ -671,9 +672,7 @@ static int dpu_disable_clocks(struct spacemit_dpu *dpu)
 	trace_dpu_disable_clocks(dpu->dev_id);
 
 	if (dpu->logo_booton) {
-
 		dpu_finish_uboot(dpu);
-
 		if (dpu->type == HDMI) {
 			clk_disable_unprepare(clk_ctx->hmclk);
 		} else if (dpu->type == DSI) {
diff --git a/drivers/gpu/drm/spacemit/lt8911exb.c b/drivers/gpu/drm/spacemit/lt8911exb.c
index 06c042fd3ffe..6065698ece85 100644
--- a/drivers/gpu/drm/spacemit/lt8911exb.c
+++ b/drivers/gpu/drm/spacemit/lt8911exb.c
@@ -1167,10 +1167,13 @@ static int lt8911exb_panel_disable(struct drm_panel *panel)
 	DRM_INFO("%s()\n", __func__);
 
 	gpiod_direction_output(lt8911exb->bl_gpio, 0);
-	gpiod_direction_output(lt8911exb->standby_gpio, 0);
-	gpiod_direction_output(lt8911exb->enable_gpio, 0);
+	if (!IS_ERR_OR_NULL(lt8911exb->enable_gpio)) {
+		gpiod_direction_output(lt8911exb->enable_gpio, 0);
+	}
 	usleep_range(50*1000, 100*1000); //100ms
 
+	gpiod_direction_output(lt8911exb->standby_gpio, 0);
+
 	if (lt8911exb->init_work_pending) {
 		cancel_delayed_work_sync(&lt8911exb->init_work);
 		lt8911exb->init_work_pending = false;
@@ -1262,7 +1265,9 @@ static void init_work_func(struct work_struct *work)
 
 	PCR_Status(lt8911exb);
 
-	gpiod_direction_output(lt8911exb->enable_gpio, 1);
+	if (!IS_ERR_OR_NULL(lt8911exb->enable_gpio)) {
+		gpiod_direction_output(lt8911exb->enable_gpio, 1);
+	}
 	gpiod_direction_output(lt8911exb->bl_gpio, 1);
 }
 static int lt8911exb_probe(struct i2c_client *client)
@@ -1309,15 +1314,15 @@ static int lt8911exb_probe(struct i2c_client *client)
 
 	lt8911exb->enable_gpio = devm_gpiod_get_optional(dev, "enable",
 						GPIOD_IN);
-	if (IS_ERR(lt8911exb->enable_gpio)) {
-		dev_err(&client->dev, "Failed get enable gpio\n");
-		return PTR_ERR(lt8911exb->enable_gpio);
+	if (IS_ERR_OR_NULL(lt8911exb->enable_gpio)) {
+		DRM_DEBUG("%s() failed get enable gpio\n", __func__);
+		// return PTR_ERR(lt8911exb->enable_gpio);
 	}
 
 	lt8911exb->standby_gpio = devm_gpiod_get_optional(dev, "standby",
 						GPIOD_IN);
 	if (IS_ERR(lt8911exb->standby_gpio)) {
-		dev_err(&client->dev, "Failed get enable gpio\n");
+		dev_err(&client->dev, "Failed get standby gpio\n");
 		return PTR_ERR(lt8911exb->standby_gpio);
 	}
 
@@ -1328,7 +1333,10 @@ static int lt8911exb_probe(struct i2c_client *client)
 		return PTR_ERR(lt8911exb->bl_gpio);
 	}
 	gpiod_direction_output(lt8911exb->bl_gpio, 0);
-	gpiod_direction_output(lt8911exb->enable_gpio, 0);
+	if (!IS_ERR_OR_NULL(lt8911exb->enable_gpio)) {
+		gpiod_direction_output(lt8911exb->enable_gpio, 0);
+	}
+	usleep_range(50*1000, 100*1000); //100ms
 
 	//disable firstly
 	gpiod_direction_output(lt8911exb->standby_gpio, 0);
@@ -1487,7 +1495,7 @@ static int __init init_lt8911exb(void)
 {
 	int err;
 
-	DRM_INFO("%s()\n", __func__);
+	DRM_DEBUG("%s()\n", __func__);
 	mipi_dsi_driver_register(&lt8911exb_dsi_driver);
 	err = i2c_add_driver(&lt8911exb_driver);
 
@@ -1498,7 +1506,7 @@ module_init(init_lt8911exb);
 
 static void __exit exit_lt8911exb(void)
 {
-	DRM_INFO("%s()\n", __func__);
+	DRM_DEBUG("%s()\n", __func__);
 	i2c_del_driver(&lt8911exb_driver);
 	mipi_dsi_driver_unregister(&lt8911exb_dsi_driver);
 }
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.c b/drivers/gpu/drm/spacemit/spacemit_dpu.c
index 2db7d090c9b9..752e26eab725 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.c
@@ -308,6 +308,10 @@ static void spacemit_crtc_atomic_enable(struct drm_crtc *crtc,
 	drm_crtc_vblank_on(&dpu->crtc);
 
 	spacemit_dpu_init(dpu);
+
+	if (!IS_ERR_OR_NULL(dpu->enable_gpio)) {
+		gpiod_direction_output(dpu->enable_gpio, 1);
+	}
 }
 
 static void spacemit_crtc_atomic_disable(struct drm_crtc *crtc,
@@ -319,6 +323,10 @@ static void spacemit_crtc_atomic_disable(struct drm_crtc *crtc,
 	DRM_INFO("%s(power off)\n", __func__);
 	trace_spacemit_crtc_atomic_disable(dpu->dev_id);
 
+	if (!IS_ERR_OR_NULL(dpu->enable_gpio)) {
+		gpiod_direction_output(dpu->enable_gpio, 0);
+	}
+
 	spacemit_dpu_uninit(dpu);
 
 	drm_crtc_vblank_off(&dpu->crtc);
@@ -872,6 +880,7 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	const char *str;
 	u32 dpu_id;
 	u32 dpu_type;
+	static int dpu_num = 0;
 
 	DRM_DEBUG("%s()\n", __func__);
 
@@ -906,6 +915,15 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 
 	DRM_DEBUG("%s() type %d\n", __func__, dpu->type);
 
+	dpu->enable_gpio = devm_gpiod_get_optional(dev, "enable",
+						GPIOD_IN);
+	if (!IS_ERR_OR_NULL(dpu->enable_gpio)) {
+		gpiod_direction_output(dpu->enable_gpio, 0);
+		msleep(50);
+	} else {
+		DRM_DEV_DEBUG(dev, "not found enable gpio\n");
+	}
+
 	if (dpu->type == DSI) {
 		dpu->dsi_reset = devm_reset_control_get_optional_shared(&pdev->dev, "dsi_reset");
 		if (IS_ERR_OR_NULL(dpu->dsi_reset)) {
@@ -933,6 +951,7 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
+	dpu_num++;
 	pm_runtime_enable(&pdev->dev);
 	/*
 	 * To keep bootloader logo on, below operations must be
@@ -949,9 +968,8 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	}
 
 	rmem_np = of_find_node_by_name(NULL, "reserved-memory");
-	if (rmem_np) {
+	if (rmem_np && (dpu_num >= 2)) {
 		fb_np = of_find_node_by_name(rmem_np, "framebuffer");
-
 		if (fb_np) {
 			ret = of_address_to_resource(fb_np, 0, &rsrv_mem);
 			if (ret < 0) {
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.h b/drivers/gpu/drm/spacemit/spacemit_dpu.h
index aea9efa76135..5f2a4998d14b 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.h
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.h
@@ -16,6 +16,8 @@
 #include <video/videomode.h>
 #include <linux/workqueue.h>
 #include <linux/reset.h>
+#include <linux/gpio/consumer.h>
+#include <linux/gpio/driver.h>
 #include <drm/drm_atomic_uapi.h>
 #include <drm/drm_print.h>
 #include <drm/drm_crtc.h>
@@ -147,6 +149,8 @@ struct spacemit_dpu {
 	struct reset_control *lcd_reset;
 	struct reset_control *esc_reset;
 	struct reset_control *hdmi_reset;
+	struct gpio_desc *enable_gpio;
+
 #ifdef CONFIG_SPACEMIT_DEBUG
 	bool (*is_dpu_running)(struct spacemit_dpu* dpu);
 	struct notifier_block nb;
-- 
2.47.0

