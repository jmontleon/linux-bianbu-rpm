From 576cafa61102d20baacd91c56ad1b2c48c334b29 Mon Sep 17 00:00:00 2001
From: huzhen <george.hu@spacemit.com>
Date: Thu, 23 Nov 2023 18:03:09 +0800
Subject: [PATCH 0163/1204] ethernet: update driver of k1x emac driver

  1. update the operations of clk and reset
  2. adding the operations of phy reset gpio
  3. change the config for pmu_ap base

Change-Id: I88d7e02943e312299fec0c719062d3ae3c403330
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi   | 43 ++++++++++++++----------
 drivers/net/ethernet/spacemit/k1x-emac.c | 38 +++++++++++++--------
 drivers/net/ethernet/spacemit/k1x-emac.h |  3 +-
 3 files changed, 51 insertions(+), 33 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index 0327cc6cdc05..480d9573d0bc 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -283,20 +283,6 @@ pll_clk_i2c: clock-pll_clk_i2c {
 			clock-output-names = "pll_clk_i2c";
 		};
 
-		pll_clk_emac: clock-pll_clk_emac {
-			#clock-cells = <0>;
-			compatible = "fixed-clock";
-			clock-frequency = <50000000>;
-			clock-output-names = "pll_clk_emac";
-		};
-
-		pll_clk_emac_ptp: clock-pll_clk_emac_ptp {
-			#clock-cells = <0>;
-			compatible = "fixed-clock";
-			clock-frequency = <50000000>;
-			clock-output-names = "pll_clk_emac_ptp";
-		};
-
 		pll_clk_pwm: clock-pll_clk_pwm {
 			#clock-cells = <0>;
 			compatible = "fixed-clock";
@@ -671,13 +657,34 @@ gcb3: gpio3 {
 
 		eth0: ethernet@cac80000 {
 			compatible = "spacemit,k1x-emac";
-			reg = <0x00000000 0xCAC80000 0x00000000 0x00000420>,
-				<0x00000000 0xD4282800 0x00000000 0x000003ec>;
+			reg = <0x00000000 0xCAC80000 0x00000000 0x00000420>;
+			k1x,apmu-base-reg = <0xD4282800>;
 			ctrl-reg = <0x3e4>;
 			dline-reg = <0x3e8>;
-			clocks = <&pll_clk_emac
-				&pll_clk_emac_ptp>;
+			clocks = <&ccu CLK_EMAC0_BUS>,
+				<&ccu CLK_EMAC0_PTP>;
+			clock-names = "emac-clk", "ptp-clk";
+			resets = <&reset RESET_EMAC0>;
+			reset-names = "emac-reset";
+			interrupts = <131>;
+			interrupt-parent = <&intc>;
+			ptp-support;
+			ptp-clk-rate = <10000000>;
+			lpm-qos = <7>;
+			status = "disabled";
+		};
+
+		eth1: ethernet@cac81000 {
+			compatible = "spacemit,k1x-emac";
+			reg = <0x00000000 0xCAC81000 0x00000000 0x00000420>;
+			k1x,apmu-base-reg = <0xD4282800>;
+			ctrl-reg = <0x3ec>;
+			dline-reg = <0x3f0>;
+			clocks = <&ccu CLK_EMAC1_BUS>,
+				<&ccu CLK_EMAC1_PTP>;
 			clock-names = "emac-clk", "ptp-clk";
+			resets = <&reset RESET_EMAC1>;
+			reset-names = "emac-reset";
 			interrupts = <131>;
 			interrupt-parent = <&intc>;
 			ptp-support;
diff --git a/drivers/net/ethernet/spacemit/k1x-emac.c b/drivers/net/ethernet/spacemit/k1x-emac.c
index b98f30d5853f..2c92ce5c460c 100755
--- a/drivers/net/ethernet/spacemit/k1x-emac.c
+++ b/drivers/net/ethernet/spacemit/k1x-emac.c
@@ -35,6 +35,7 @@
 #include <linux/types.h>
 #include <linux/udp.h>
 #include <linux/workqueue.h>
+#include <linux/reset.h>
 
 #ifdef CONFIG_DEBUG_FS
 #include <linux/debugfs.h>
@@ -45,6 +46,9 @@
 
 #define DRIVER_NAME				"k1x_emac"
 
+/* k1x PMUap base */
+#define PMUA_BASE_REG		0xd4282800
+
 #define TUNING_CMD_LEN				50
 #define CLK_PHASE_CNT				256
 #define CLK_PHASE_REVERT			180
@@ -2091,16 +2095,16 @@ static int emac_mii_reset(struct mii_bus *bus)
 		}
 
 		rst_gpio = of_get_named_gpio(np, "emac,reset-gpio", 0);
-		//if (rst_gpio < 0)
-		//	return 0;
+		if (rst_gpio < 0)
+			return 0;
 
 		active_state = of_property_read_bool(np,
 						     "emac,reset-active-low");
 		of_property_read_u32_array(np,
 					   "emac,reset-delays-us", delays, 3);
 
-		//if (gpio_request(rst_gpio, "mdio-reset"))
-		//	return 0;
+		if (gpio_request(rst_gpio, "mdio-reset"))
+			return 0;
 
 		gpio_direction_output(rst_gpio,
 		                      active_state ? 1 : 0);
@@ -2516,11 +2520,8 @@ static int emac_config_dt(struct platform_device *pdev, struct emac_priv *priv)
 		return -ENOMEM;
 	}
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	priv->apmu_base = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(priv->apmu_base)) {
-		dev_err(&pdev->dev, "failed to io remap res reg 1\n");
-		return -ENOMEM;
+	if (of_property_read_u32(np, "k1x,apmu-base-reg", &priv->apmu_base)) {
+		priv->apmu_base = PMUA_BASE_REG;
 	}
 
 	priv->irq = irq_of_parse_and_map(np, 0);
@@ -2542,8 +2543,7 @@ static int emac_config_dt(struct platform_device *pdev, struct emac_priv *priv)
 		return -EINVAL;
 	}
 
-	//priv->ctrl_reg = regs_addr_get_va(REGS_ADDR_APMU) + ctrl_reg;
-	priv->ctrl_reg = priv->apmu_base + ctrl_reg;
+	priv->ctrl_reg = ioremap(priv->apmu_base + ctrl_reg, 4);
 
 	if (of_property_read_u32(np, "tx-threshold",
 				 &priv->tx_threshold)) {
@@ -2630,8 +2630,7 @@ static int emac_config_dt(struct platform_device *pdev, struct emac_priv *priv)
 				dev_err(&pdev->dev, "cannot find delayline register in device tree\n");
 				return -EINVAL;
 			}
-			//priv->dline_reg = regs_addr_get_va(REGS_ADDR_APMU) + ctrl_reg;
-			priv->ctrl_reg = priv->apmu_base + ctrl_reg;
+			priv->dline_reg = ioremap(priv->apmu_base + ctrl_reg, 4);
 		} else
 			priv->clk_tuning_way = CLK_TUNING_BY_REG;
 
@@ -2748,12 +2747,20 @@ static int emac_probe(struct platform_device *pdev)
 		}
 	}
 
+	priv->reset = devm_reset_control_get_optional(&pdev->dev, NULL);
+	if (IS_ERR(priv->reset)) {
+		dev_err(&pdev->dev, "Failed to get emac's resets\n");
+		goto ptp_clk_disable;
+	}
+
+	reset_control_deassert(priv->reset);
+
 	emac_sw_init(priv);
 
 	ret = emac_mdio_init(priv);
 	if (ret) {
 		dev_err(&pdev->dev, "failed to init mdio.\n");
-		goto ptp_clk_disable;
+		goto reset_assert;
 	}
 
 	SET_NETDEV_DEV(ndev, &pdev->dev);
@@ -2774,6 +2781,8 @@ static int emac_probe(struct platform_device *pdev)
 	return 0;
 err_mdio_deinit:
 	emac_mdio_deinit(priv);
+reset_assert:
+	reset_control_assert(priv->reset);
 ptp_clk_disable:
 	if (priv->ptp_support)
 		clk_disable_unprepare(priv->ptp_clk);
@@ -2800,6 +2809,7 @@ static int emac_remove(struct platform_device *pdev)
 	emac_reset_hw(priv);
 	free_netdev(priv->ndev);
 	emac_mdio_deinit(priv);
+	reset_control_assert(priv->reset);
 	clk_disable_unprepare(priv->mac_clk);
 	if (priv->ref_clk_frm_soc)
 		clk_disable_unprepare(priv->phy_clk);
diff --git a/drivers/net/ethernet/spacemit/k1x-emac.h b/drivers/net/ethernet/spacemit/k1x-emac.h
index 002f685f8ce8..41232ce1730d 100755
--- a/drivers/net/ethernet/spacemit/k1x-emac.h
+++ b/drivers/net/ethernet/spacemit/k1x-emac.h
@@ -654,8 +654,9 @@ struct emac_priv {
 	struct clk *mac_clk;
 	struct clk *phy_clk;
 	struct clk *ptp_clk;
+	struct reset_control *reset;
 	void __iomem *iobase;
-	void __iomem *apmu_base;
+	u32 apmu_base;
 	int irq;
 	int link;
 	int duplex;
-- 
2.47.0

