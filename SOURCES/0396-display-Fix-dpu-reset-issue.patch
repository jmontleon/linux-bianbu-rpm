From ddf6102e16dd3f85d271306fcaf71bccc4d02e94 Mon Sep 17 00:00:00 2001
From: lilijun <lijun.li@spacemit.com>
Date: Thu, 25 Jan 2024 17:35:45 +0800
Subject: [PATCH 0396/1206] display: Fix dpu reset issue

Change-Id: Iddd2d878625eb83f779daf36546dd965bab711a9
---
 drivers/gpu/drm/spacemit/spacemit_dpu.c | 50 ++++++++++++++++++++++++-
 drivers/gpu/drm/spacemit/spacemit_dpu.h |  1 +
 2 files changed, 50 insertions(+), 1 deletion(-)

diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.c b/drivers/gpu/drm/spacemit/spacemit_dpu.c
index 0b067bb4cbf1..521d2cb521fc 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.c
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.c
@@ -916,6 +916,7 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 	if (!dpu)
 		return -ENOMEM;
 	dpu->dev = dev;
+	dpu->is_probed = false;
 	dev_set_drvdata(dev, dpu);
 
 	if (of_property_read_u32(np, "pipeline-id", &dpu_id))
@@ -966,15 +967,54 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 		DRM_DEV_DEBUG(dev, "not found hdmi_reset\n");
 	}
 
+	// reset dpu
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_get_sync(&pdev->dev);
+
+	pm_runtime_put_sync(dpu->dev);
+	msleep(10);
+
 	/*
 	 * To keep bootloader logo on, below operations must be
 	 * done in probe func as power domain framework will turn
 	 * on/off lcd power domain before/after probe func.
 	 */
-	pm_runtime_enable(&pdev->dev);
 	if (spacemit_dpu_logo_booton)
 		pm_runtime_get_sync(&pdev->dev);
 
+	if (!IS_ERR_OR_NULL(dpu->esc_reset)) {
+		result = reset_control_assert(dpu->esc_reset);
+		if (result < 0) {
+			DRM_DEV_INFO(dev, "Failed to assert esc_reset: %d\n", result);
+		}
+	}
+	if (!IS_ERR_OR_NULL(dpu->lcd_reset)) {
+		result = reset_control_assert(dpu->lcd_reset);
+		if (result < 0) {
+			DRM_DEV_INFO(dev, "Failed to assert lcd_reset: %d\n", result);
+		}
+	}
+	if (!IS_ERR_OR_NULL(dpu->mclk_reset)) {
+		result = reset_control_assert(dpu->mclk_reset);
+		if (result < 0) {
+			DRM_DEV_INFO(dev, "Failed to assert mclk_reset: %d\n", result);
+		}
+	}
+	if (!IS_ERR_OR_NULL(dpu->dsi_reset)) {
+		result = reset_control_assert(dpu->dsi_reset);
+		if (result < 0) {
+			DRM_DEV_INFO(dev, "Failed to assert dsi_reset: %d\n", result);
+		}
+	}
+	if (!IS_ERR_OR_NULL(dpu->hdmi_reset)) {
+		result = reset_control_assert(dpu->hdmi_reset);
+		if (result < 0) {
+			DRM_DEV_INFO(dev, "Failed to assert hdmi_reset: %d\n", result);
+		}
+	}
+
+	msleep(1);
+
 	if (!IS_ERR_OR_NULL(dpu->dsi_reset)) {
 		result = reset_control_deassert(dpu->dsi_reset);
 		if (result < 0) {
@@ -1006,6 +1046,8 @@ static int spacemit_dpu_probe(struct platform_device *pdev)
 		}
 	}
 
+	dpu->is_probed = true;
+
 	return component_add(dev, &dpu_component_ops);
 }
 
@@ -1019,6 +1061,9 @@ static int dpu_rt_pm_suspend(struct device *dev)
 {
 	struct spacemit_dpu *dpu = dev_get_drvdata(dev);
 
+	if (!dpu->is_probed)
+		return 0;
+
 	if (dpu->core && dpu->core->disable_clk)
 		dpu->core->disable_clk(dpu);
 
@@ -1029,6 +1074,9 @@ static int dpu_rt_pm_resume(struct device *dev)
 {
 	struct spacemit_dpu *dpu = dev_get_drvdata(dev);
 
+	if (!dpu->is_probed)
+		return 0;
+
 	if (dpu->core && dpu->core->enable_clk)
 		dpu->core->enable_clk(dpu);
 
diff --git a/drivers/gpu/drm/spacemit/spacemit_dpu.h b/drivers/gpu/drm/spacemit/spacemit_dpu.h
index c1772f0c494b..cee729b84120 100644
--- a/drivers/gpu/drm/spacemit/spacemit_dpu.h
+++ b/drivers/gpu/drm/spacemit/spacemit_dpu.h
@@ -130,6 +130,7 @@ struct spacemit_dpu {
 	struct timespec64 last_tm;
 
 	bool is_1st_f;
+	bool is_probed;
 	struct dpu_clk_context clk_ctx;
 	uint64_t new_mclk;		/* new frame mclk */
 	uint64_t cur_mclk;		/* current frame mclk */
-- 
2.47.0

