From 455ebf8479671488350307113b12985020fb8b38 Mon Sep 17 00:00:00 2001
From: weijinmei <jinmei.wei@spacemit.com>
Date: Wed, 12 Jun 2024 14:26:39 +0800
Subject: [PATCH 0703/1206] es8326: support hp/mic detect process

Change-Id: I1048c0cb3211fb0015937e8bb373ae6317a9aa48
---
 sound/soc/codecs/es8326.c | 248 +++++++++++++++++++++++++++++++++++++-
 sound/soc/codecs/es8326.h |   4 +
 2 files changed, 249 insertions(+), 3 deletions(-)

diff --git a/sound/soc/codecs/es8326.c b/sound/soc/codecs/es8326.c
index b06eead7e0f6..ff9254dc69cb 100644
--- a/sound/soc/codecs/es8326.c
+++ b/sound/soc/codecs/es8326.c
@@ -16,6 +16,8 @@
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
 #include <sound/tlv.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
 #include "es8326.h"
 
 struct es8326_priv {
@@ -43,6 +45,15 @@ struct es8326_priv {
 	int version;
 	int hp;
 	int jack_remove_retry;
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	int spk_ctl_gpio;
+	int hp_gpio;
+	int hp_irq;
+	int mic_gpio;
+	int mic_irq;
+	struct delayed_work hpmic_detect_work;
+	unsigned int coeff;
+#endif
 };
 
 static int es8326_crosstalk1_get(struct snd_kcontrol *kcontrol,
@@ -466,6 +477,9 @@ static const struct _coeff_div coeff_div_v3[] = {
 	{3072, 8000, 24576000, 0x60, 0x02, 0x10, 0x35, 0x8A, 0x1B, 0x1F, 0x7F},
 	{3250, 8000, 26000000, 0x0C, 0x18, 0x0F, 0x2D, 0x8A, 0x0A, 0x27, 0x27},
 };
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+static void es8326_enable_spk(struct es8326_priv *es8326, bool enable);
+#endif
 
 static inline int get_coeff(int mclk, int rate, int array,
 				const struct _coeff_div *coeff_div)
@@ -503,6 +517,10 @@ static int es8326_set_dai_fmt(struct snd_soc_dai *codec_dai, unsigned int fmt)
 		break;
 	case SND_SOC_DAIFMT_CBC_CFC:
 		break;
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	case SND_SOC_DAIFMT_CBP_CFP:
+		break;
+#endif
 	default:
 		return -EINVAL;
 	}
@@ -549,7 +567,11 @@ static int es8326_pcm_hw_params(struct snd_pcm_substream *substream,
 		coeff_div =  coeff_div_v3;
 		array = ARRAY_SIZE(coeff_div_v3);
 	}
+
 	coeff = get_coeff(es8326->sysclk, params_rate(params), array, coeff_div);
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	es8326->coeff = coeff;
+#endif
 	/* bit size */
 	switch (params_format(params)) {
 	case SNDRV_PCM_FORMAT_S16_LE:
@@ -598,6 +620,44 @@ static int es8326_pcm_hw_params(struct snd_pcm_substream *substream,
 	return 0;
 }
 
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+static int es8326_reset_clk(struct snd_soc_component *component)
+{
+	const struct _coeff_div *coeff_div;
+	struct es8326_priv *es8326 = snd_soc_component_get_drvdata(component);
+	int coeff;
+
+	if (es8326->version == 0) {
+		coeff_div =  coeff_div_v0;
+	} else {
+		coeff_div =  coeff_div_v3;
+	}
+	coeff = es8326->coeff;
+	if (coeff >= 0) {
+		regmap_write(es8326->regmap,  ES8326_CLK_DIV1,
+			     coeff_div[coeff].reg4);
+		regmap_write(es8326->regmap,  ES8326_CLK_DIV2,
+			     coeff_div[coeff].reg5);
+		regmap_write(es8326->regmap,  ES8326_CLK_DLL,
+			     coeff_div[coeff].reg6);
+		regmap_write(es8326->regmap,  ES8326_CLK_MUX,
+			     coeff_div[coeff].reg7);
+		regmap_write(es8326->regmap,  ES8326_CLK_ADC_SEL,
+			     coeff_div[coeff].reg8);
+		regmap_write(es8326->regmap,  ES8326_CLK_DAC_SEL,
+			     coeff_div[coeff].reg9);
+		regmap_write(es8326->regmap,  ES8326_CLK_ADC_OSR,
+			     coeff_div[coeff].rega);
+		regmap_write(es8326->regmap,  ES8326_CLK_DAC_OSR,
+			     coeff_div[coeff].regb);
+	} else {
+		dev_warn(component->dev, "Clock coefficients do not match");
+	}
+
+	return 0;
+}
+#endif
+
 static int es8326_mute(struct snd_soc_dai *dai, int mute, int direction)
 {
 	struct snd_soc_component *component = dai->component;
@@ -611,6 +671,10 @@ static int es8326_mute(struct snd_soc_dai *dai, int mute, int direction)
 					ES8326_MUTE_MASK, ES8326_MUTE);
 			regmap_update_bits(es8326->regmap, ES8326_HP_DRIVER_REF,
 					0x30, 0x00);
+			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+			if (!es8326->hp)
+				es8326_enable_spk(es8326, false);
+			#endif
 		} else {
 			regmap_update_bits(es8326->regmap,  ES8326_ADC_MUTE,
 					0x0F, 0x0F);
@@ -644,6 +708,10 @@ static int es8326_mute(struct snd_soc_dai *dai, int mute, int direction)
 			regmap_write(es8326->regmap, ES8326_HP_CAL, ES8326_HP_ON);
 			regmap_update_bits(es8326->regmap, ES8326_DAC_MUTE,
 					ES8326_MUTE_MASK, ~(ES8326_MUTE));
+			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+			if (!es8326->hp)
+				es8326_enable_spk(es8326, true);
+			#endif
 		} else {
 			msleep(300);
 			if (es8326->version > ES8326_VERSION_B) {
@@ -756,7 +824,14 @@ static void es8326_disable_micbias(struct snd_soc_component *component)
 	snd_soc_dapm_sync_unlocked(dapm);
 	snd_soc_dapm_mutex_unlock(dapm);
 }
-
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+static void es8326_enable_spk(struct es8326_priv *es8326, bool enable)
+{
+	if (es8326->spk_ctl_gpio < 0)
+		return;
+	gpio_set_value(es8326->spk_ctl_gpio, enable);
+}
+#endif
 /*
  *	For button detection, set the following in soundcard
  *	snd_jack_set_key(jack->jack, SND_JACK_BTN_0, KEY_PLAYPAUSE);
@@ -781,6 +856,7 @@ static void es8326_jack_button_handler(struct work_struct *work)
 	case 0x93:
 		/* pause button detected */
 		cur_button = SND_JACK_BTN_0;
+		dev_dbg(comp->dev, "%s 0x%x pause \n", __func__, iface);
 		break;
 	case 0x6f:
 	case 0x4b:
@@ -789,10 +865,12 @@ static void es8326_jack_button_handler(struct work_struct *work)
 			cur_button = SND_JACK_BTN_0;
 		else
 			cur_button = SND_JACK_BTN_1;
+		dev_dbg(comp->dev, "%s 0x%x volume+ \n", __func__, iface);
 		break;
 	case 0x27:
 		/* button volume down */
 		cur_button = SND_JACK_BTN_2;
+		dev_dbg(comp->dev, "%s 0x%x volume- \n", __func__, iface);
 		break;
 	case 0x1e:
 	case 0xe2:
@@ -867,12 +945,20 @@ static void es8326_jack_detect_handler(struct work_struct *work)
 		es8326_disable_micbias(es8326->component);
 		if (es8326->jack->status & SND_JACK_HEADPHONE) {
 			dev_dbg(comp->dev, "Report hp remove event\n");
+			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+			es8326_enable_spk(es8326, true);
+			#endif
 			snd_soc_jack_report(es8326->jack, 0,
 				    SND_JACK_BTN_0 | SND_JACK_BTN_1 | SND_JACK_BTN_2);
 			snd_soc_jack_report(es8326->jack, 0, SND_JACK_HEADSET);
 			/* mute adc when mic path switch */
+			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+			regmap_write(es8326->regmap, ES8326_ADC1_SRC, es8326->mic1_src);
+			regmap_write(es8326->regmap, ES8326_ADC2_SRC, es8326->mic2_src);
+			#else
 			regmap_write(es8326->regmap, ES8326_ADC1_SRC, 0x44);
 			regmap_write(es8326->regmap, ES8326_ADC2_SRC, 0x66);
+			#endif
 		}
 		es8326->hp = 0;
 		regmap_update_bits(es8326->regmap, ES8326_HPDET_TYPE, 0x03, 0x01);
@@ -915,9 +1001,16 @@ static void es8326_jack_detect_handler(struct work_struct *work)
 			queue_delayed_work(system_wq, &es8326->jack_detect_work,
 					msecs_to_jiffies(400));
 			es8326->hp = 1;
+			#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+			es8326_enable_spk(es8326, false);
+			#endif
 			goto exit;
 		}
-		if (es8326->jack->status & SND_JACK_HEADSET) {
+		#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+		if ((es8326->jack->status & SND_JACK_HEADSET) == SND_JACK_HEADSET) {
+		#else
+ 		if (es8326->jack->status & SND_JACK_HEADSET) {
+		#endif
 			/* detect button */
 			dev_dbg(comp->dev, "button pressed\n");
 			regmap_write(es8326->regmap, ES8326_INT_SOURCE,
@@ -968,6 +1061,71 @@ static irqreturn_t es8326_irq(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+static void es8326_hpmic_detect_handler(struct work_struct *work)
+{
+	struct es8326_priv *es8326 =
+		container_of(work, struct es8326_priv, hpmic_detect_work.work);
+	struct snd_soc_component *comp = es8326->component;
+	bool hp_status = 0, mic_status = 0;
+	u8 jack_status;
+
+	if (es8326->hp_gpio >= 0) {
+		hp_status = !gpio_get_value(es8326->hp_gpio);
+	}
+	if (es8326->mic_gpio >= 0) {
+		mic_status = !gpio_get_value(es8326->mic_gpio);
+	}
+	jack_status = hp_status | (mic_status << 1);
+	dev_dbg(comp->dev, "jack_status:%d\n", jack_status);
+	if ((jack_status & SND_JACK_HEADSET) == 0) {
+		/* Jack unplugged or spurious IRQ */
+		es8326_disable_micbias(es8326->component);
+		es8326->hp = 0;
+		regmap_update_bits(es8326->regmap, ES8326_HPDET_TYPE, 0x03, 0x01);
+		regmap_write(es8326->regmap, ES8326_SYS_BIAS, 0x0a);
+		regmap_update_bits(es8326->regmap, ES8326_HP_DRIVER_REF, 0x0f, 0x03);
+
+	} else {
+		if (es8326->hp == 0) {
+			regmap_update_bits(es8326->regmap, ES8326_HPDET_TYPE, 0x03, 0x01);
+			usleep_range(50000, 70000);
+			regmap_update_bits(es8326->regmap, ES8326_HPDET_TYPE, 0x03, 0x00);
+			regmap_write(es8326->regmap, ES8326_SYS_BIAS, 0x1f);
+			regmap_update_bits(es8326->regmap, ES8326_HP_DRIVER_REF, 0x0f, 0x08);
+			usleep_range(10000, 15000);
+			es8326->hp = 1;
+			regmap_write(es8326->regmap, ES8326_ADC_SCALE, 0x33);
+			regmap_update_bits(es8326->regmap, ES8326_PGA_PDN,
+					0x08, 0x08);
+			regmap_update_bits(es8326->regmap, ES8326_PGAGAIN,
+					0x80, 0x80);
+			regmap_write(es8326->regmap, ES8326_ADC1_SRC, 0x00);
+			regmap_write(es8326->regmap, ES8326_ADC2_SRC, 0x00);
+			regmap_update_bits(es8326->regmap, ES8326_PGA_PDN,
+					0x08, 0x00);
+			usleep_range(10000, 15000);
+		}
+	}
+	snd_soc_jack_report(es8326->jack,
+		jack_status,
+		SND_JACK_HEADSET);
+	return;
+}
+
+static irqreturn_t es8326_irq_hpmic(int irq, void *dev_id)
+{
+	struct es8326_priv *es8326 = dev_id;
+
+	if (!es8326->jack)
+		goto out;
+	queue_delayed_work(system_wq, &es8326->hpmic_detect_work,
+		msecs_to_jiffies(100));
+out:
+	return IRQ_HANDLED;
+}
+#endif
+
 static int es8326_calibrate(struct snd_soc_component *component)
 {
 	struct es8326_priv *es8326 = snd_soc_component_get_drvdata(component);
@@ -1122,7 +1280,26 @@ static int es8326_resume(struct snd_soc_component *component)
 
 	regcache_sync(es8326->regmap);
 
-	es8326_irq(es8326->irq, es8326);
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	regmap_write(es8326->regmap, ES8326_ADC1_SRC, es8326->mic1_src);
+	regmap_write(es8326->regmap, ES8326_ADC2_SRC, es8326->mic2_src);
+#endif
+
+	es8326_init(component);
+	es8326_reset_clk(component);
+	if (es8326->jack) {
+		snd_soc_jack_report(es8326->jack, 0, SND_JACK_HEADSET);
+		if (es8326->jd_inverted) {
+			snd_soc_component_update_bits(component, ES8326_HPDET_TYPE,
+					      ES8326_HP_DET_JACK_POL, ~es8326->jack_pol);
+		}
+		es8326_disable_micbias(component);
+		if (es8326->irq > 0)
+			es8326_irq(es8326->irq, es8326);
+		else
+			es8326_irq_hpmic(es8326->irq, es8326);
+	}
+
 	return 0;
 }
 
@@ -1133,6 +1310,7 @@ static int es8326_suspend(struct snd_soc_component *component)
 	cancel_delayed_work_sync(&es8326->jack_detect_work);
 	es8326_disable_micbias(component);
 	es8326->calibrated = false;
+
 	regmap_write(es8326->regmap, ES8326_CLK_MUX, 0x2d);
 	regmap_write(es8326->regmap, ES8326_DAC2HPMIX, 0x00);
 	regmap_write(es8326->regmap, ES8326_ANA_PDN, 0x3b);
@@ -1145,6 +1323,12 @@ static int es8326_suspend(struct snd_soc_component *component)
 	regmap_write(es8326->regmap, ES8326_CSM_I2C_STA, 0x00);
 
 	regcache_mark_dirty(es8326->regmap);
+
+	/* reset register value to default */
+	regmap_write(es8326->regmap, ES8326_CSM_I2C_STA, 0x01);
+	usleep_range(1000, 3000);
+	regmap_write(es8326->regmap, ES8326_CSM_I2C_STA, 0x00);
+
 	return 0;
 }
 
@@ -1196,7 +1380,14 @@ static void es8326_enable_jack_detect(struct snd_soc_component *component,
 	es8326->jack = jack;
 
 	mutex_unlock(&es8326->lock);
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	if (es8326->irq > 0)
+		es8326_irq(es8326->irq, es8326);
+	else
+		es8326_irq_hpmic(es8326->irq, es8326);
+#else
 	es8326_irq(es8326->irq, es8326);
+#endif
 }
 
 static void es8326_disable_jack_detect(struct snd_soc_component *component)
@@ -1284,6 +1475,10 @@ static int es8326_i2c_probe(struct i2c_client *i2c)
 			  es8326_jack_detect_handler);
 	INIT_DELAYED_WORK(&es8326->button_press_work,
 			  es8326_jack_button_handler);
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	INIT_DELAYED_WORK(&es8326->hpmic_detect_work,
+			  es8326_hpmic_detect_handler);
+#endif
 	/* ES8316 is level-based while ES8326 is edge-based */
 	ret = devm_request_threaded_irq(&i2c->dev, es8326->irq, NULL, es8326_irq,
 					IRQF_TRIGGER_RISING | IRQF_ONESHOT,
@@ -1294,6 +1489,53 @@ static int es8326_i2c_probe(struct i2c_client *i2c)
 		es8326->irq = -ENXIO;
 	}
 
+#ifdef SPACEMIT_CONFIG_CODEC_ES8326
+	es8326->spk_ctl_gpio = of_get_named_gpio(i2c->dev.of_node,
+						       "spk-ctl-gpio",
+						       0);
+	if (es8326->spk_ctl_gpio < 0) {
+		dev_info(&i2c->dev, "Can not read property spk_ctl_gpio\n");
+		es8326->spk_ctl_gpio = -1;
+	} else {
+		ret = devm_gpio_request_one(&i2c->dev, es8326->spk_ctl_gpio,
+					    GPIOF_DIR_OUT, NULL);
+		if (ret) {
+			dev_err(&i2c->dev, "Failed to request spk_ctl_gpio\n");
+			return ret;
+		}
+		es8326_enable_spk(es8326, false);
+	}
+	es8326->hp_gpio = of_get_named_gpio(i2c->dev.of_node,
+					"hp-detect-gpio", 0);
+	if (es8326->hp_gpio < 0) {
+		dev_info(&i2c->dev, "Can not read property hp-detect-gpio\n");
+		es8326->hp_gpio = -1;
+	} else {
+		es8326->hp_irq = gpio_to_irq(es8326->hp_gpio);
+		ret = request_irq(es8326->hp_irq, es8326_irq_hpmic,
+					IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
+					"es8326-hp-irq", es8326);
+		if (ret) {
+			dev_err(&i2c->dev, "Failed to request hp-irq\n");
+			return ret;
+		}
+	}
+	es8326->mic_gpio = of_get_named_gpio(i2c->dev.of_node,
+					"mic-detect-gpio", 0);
+	if (es8326->mic_gpio < 0) {
+		dev_info(&i2c->dev, "Can not read property mic-detect-gpio\n");
+		es8326->mic_gpio = -1;
+	} else {
+		es8326->mic_irq = gpio_to_irq(es8326->mic_gpio);
+		ret = request_irq(es8326->mic_irq, es8326_irq_hpmic,
+					IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
+					"es8326-mic-irq", es8326);
+		if (ret) {
+			dev_err(&i2c->dev, "Failed to request mic-irq\n");
+			return ret;
+		}
+	}
+#endif
 	es8326->mclk = devm_clk_get_optional(&i2c->dev, "mclk");
 	if (IS_ERR(es8326->mclk)) {
 		dev_err(&i2c->dev, "unable to get mclk\n");
diff --git a/sound/soc/codecs/es8326.h b/sound/soc/codecs/es8326.h
index c3e52e7bdef5..5f538ee7ed1d 100644
--- a/sound/soc/codecs/es8326.h
+++ b/sound/soc/codecs/es8326.h
@@ -197,4 +197,8 @@
 #define ES8326_VERSION (1 << 0)
 #define ES8326_VERSION_B (3 << 0)
 
+#if IS_ENABLED(CONFIG_SND_SOC_SPACEMIT)
+#define SPACEMIT_CONFIG_CODEC_ES8326 1
+#endif
+
 #endif
-- 
2.47.0

