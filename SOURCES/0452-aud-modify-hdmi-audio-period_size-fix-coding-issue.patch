From 08877fd9826f38a4f8bb3769fe77d35f0b2d9b11 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E2=80=9Cweijinmei=E2=80=9D?= <jinmei.wei@spacemit.com>
Date: Fri, 1 Mar 2024 09:15:14 +0800
Subject: [PATCH 0452/1204] aud: modify hdmi audio period_size, fix coding
 issue

Change-Id: I89ff3f3d098861cb1d4adc3962d70208f727cb5e
---
 sound/soc/spacemit/spacemit-snd-card.c    |   4 +-
 sound/soc/spacemit/spacemit-snd-pcm-dma.c |  90 ++++++++----------
 sound/soc/spacemit/spacemit-snd-sspa.c    | 109 +++++++++++++---------
 sound/soc/spacemit/spacemit-snd-sspa.h    |   2 +-
 sound/soc/spacemit/spacemit-snd.h         |  16 ----
 5 files changed, 106 insertions(+), 115 deletions(-)
 delete mode 100644 sound/soc/spacemit/spacemit-snd.h

diff --git a/sound/soc/spacemit/spacemit-snd-card.c b/sound/soc/spacemit/spacemit-snd-card.c
index 2aa12dd3af9b..a8ff6a72f6e7 100644
--- a/sound/soc/spacemit/spacemit-snd-card.c
+++ b/sound/soc/spacemit/spacemit-snd-card.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (C) 2022 SPACEMIT Micro Limited
+ * Copyright (C) 2024 SPACEMIT
  */
 
 #include <linux/module.h>
@@ -18,8 +18,6 @@
 #include <linux/uaccess.h>
 #include <linux/input.h>
 
-//#include "spacemit-snd.h"
-
 __maybe_unused SND_SOC_DAILINK_DEF(dummy,
 	DAILINK_COMP_ARRAY(COMP_DUMMY()));
 
diff --git a/sound/soc/spacemit/spacemit-snd-pcm-dma.c b/sound/soc/spacemit/spacemit-snd-pcm-dma.c
index a7588fe9099a..b82908733c4d 100755
--- a/sound/soc/spacemit/spacemit-snd-pcm-dma.c
+++ b/sound/soc/spacemit/spacemit-snd-pcm-dma.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (C) 2022 SPACEMIT Micro Limited
+ * Copyright (C) 2023 SPACEMIT
  */
 
 #include <linux/module.h>
@@ -23,9 +23,14 @@
 #define I2S1_REG_BASE            0xD4026800
 #define DATAR                    0x10    /* SSP Data Register */
 
-#define I2S_HDMI_REG_BASE        0xC0883900
+#define DMA_I2S0 0
+#define DMA_I2S1 1
+#define DMA_HDMI 2
 
 #define HDMI_REFORMAT_ENABLE
+#define I2S_HDMI_REG_BASE        0xC0883900
+#define HDMI_TXDATA              0x80
+#define HDMI_PERIOD_SIZE         480
 
 #define L_CH                            0
 #define R_CH                            1
@@ -76,11 +81,8 @@ struct spacemit_snd_soc_device {
 };
 
 struct hdmi_priv {
-	struct gen_pool *pool;
-	struct resource *buf_res;
 	dma_addr_t phy_addr;
 	void __iomem	*buf_base;
-
 };
 
 /* HDMI initalization data */
@@ -109,7 +111,6 @@ static int spacemit_snd_dma_init(struct device *paraent, struct spacemit_snd_soc
 			     struct spacemit_snd_dmadata *dmadata);
 
 static const struct snd_pcm_hardware spacemit_snd_pcm_hardware = {
-
 	.info		  = SNDRV_PCM_INFO_INTERLEAVED |
 			    SNDRV_PCM_INFO_BATCH |
 			    SNDRV_PCM_INFO_PAUSE,
@@ -121,7 +122,6 @@ static const struct snd_pcm_hardware spacemit_snd_pcm_hardware = {
 };
 
 static const struct snd_pcm_hardware spacemit_snd_pcm_hardware_hdmi = {
-
 	.info		  = SNDRV_PCM_INFO_INTERLEAVED |
 			    SNDRV_PCM_INFO_BATCH |
 			    SNDRV_PCM_INFO_PAUSE,
@@ -131,9 +131,9 @@ static const struct snd_pcm_hardware spacemit_snd_pcm_hardware_hdmi = {
 	.rate_max	  = SNDRV_PCM_RATE_48000,
 	.channels_min	  = 2,
 	.channels_max	  = 2,
-	.buffer_bytes_max = 256 * 4 * 4,
-	.period_bytes_min = 256 * 4,
-	.period_bytes_max = 256 * 4,
+	.buffer_bytes_max = HDMI_PERIOD_SIZE * 4 * 4,
+	.period_bytes_min = HDMI_PERIOD_SIZE * 4,
+	.period_bytes_max = HDMI_PERIOD_SIZE * 4,
 	.periods_min	  = 4,
 	.periods_max	  = 4,
 };
@@ -175,7 +175,7 @@ static int spacemit_dma_slave_config(struct snd_pcm_substream *substream,
 	} else if (dma_id == 2) {
 		pr_debug("i2s_hdmi_datar\n");
 		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-			slave_config->dst_addr = I2S_HDMI_REG_BASE + 0x80;
+			slave_config->dst_addr = I2S_HDMI_REG_BASE + HDMI_TXDATA;
 			slave_config->src_addr = 0;
 			#ifdef HDMI_REFORMAT_ENABLE
 			slave_config->src_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
@@ -203,28 +203,19 @@ static int spacemit_snd_pcm_hw_params(struct snd_soc_component *component, struc
 				  struct snd_pcm_hw_params *params)
 {
 	int ret;
-	int dma_id;
 	struct dma_slave_config slave_config;
-
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct spacemit_snd_dmadata *dmadata = runtime->private_data;
-	const char *name = dev_name(component->dev);
 
 	pr_debug("enter %s!! allocbytes=%d, dmadata=0x%lx\n",
 		__FUNCTION__, params_buffer_bytes(params), (unsigned long)dmadata);
 
 	memset(&slave_config, 0, sizeof(slave_config));
-	if (!strcmp(name, "spacemit-snd-dma0")) {
-		dma_id = 0;
-		dmadata->dma_id = dma_id;
-	} else if (!strcmp(name, "spacemit-snd-dma1")) {
-		dma_id = 1;
-		dmadata->dma_id = dma_id;
-	} else {
+	if (dmadata->dma_id != DMA_I2S0 && dmadata->dma_id != DMA_I2S1) {
 		pr_err("unsupport dma platform\n");
 		return -1;
 	}
-	spacemit_dma_slave_config(substream, params, &slave_config, dma_id);
+	spacemit_dma_slave_config(substream, params, &slave_config, dmadata->dma_id);
 
 	ret = dmaengine_slave_config(dmadata->dma_chan, &slave_config);
 	if (ret)
@@ -252,25 +243,20 @@ static int spacemit_snd_pcm_hdmi_hw_params(struct snd_soc_component *component,
 {
 	//config hdmi and callback
 	int ret;
-	int dma_id;
 	struct dma_slave_config slave_config;
 
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct spacemit_snd_dmadata *dmadata = runtime->private_data;
-	const char *name = dev_name(component->dev);
 
 	pr_debug("enter %s!! allocbytes=%d, dmadata=0x%lx\n",
 		__FUNCTION__, params_buffer_bytes(params), (unsigned long)dmadata);
 
 	memset(&slave_config, 0, sizeof(slave_config));
-	if (!strcmp(name, "c08d0400.spacemit-snd-dma-hdmi")) {
-		dma_id = 2;
-		dmadata->dma_id = dma_id;
-	} else {
-		pr_err("unsupport dma platform\n");
+	if (dmadata->dma_id != DMA_HDMI) {
+		pr_err("unsupport adma platform\n");
 		return -1;
 	}
-	spacemit_dma_slave_config(substream, params, &slave_config, dma_id);
+	spacemit_dma_slave_config(substream, params, &slave_config, dmadata->dma_id);
 
 	ret = dmaengine_slave_config(dmadata->dma_chan, &slave_config);
 	if (ret)
@@ -436,7 +422,6 @@ static int spacemit_snd_pcm_open(struct snd_soc_component *component, struct snd
 	struct spacemit_snd_soc_device *dev;
 	struct spacemit_snd_dmadata *dmadata;
 	struct snd_soc_pcm_runtime *rtd = snd_pcm_substream_chip(substream);
-	const char *name = dev_name(component->dev);
 
 	pr_debug("%s enter, rtd->dev=%s,dir=%d\n", __FUNCTION__, dev_name(rtd->dev),substream->stream);
 
@@ -452,7 +437,7 @@ static int spacemit_snd_pcm_open(struct snd_soc_component *component, struct snd
 	}
 
 	dmadata = &dev->dmadata[substream->stream];
-	if (!strcmp(name, "c08d0400.spacemit-snd-dma-hdmi")) {
+	if (dmadata->dma_id == DMA_HDMI) {
 		ret = snd_soc_set_runtime_hwparams(substream, &spacemit_snd_pcm_hardware_hdmi);
 	} else {
 		ret = snd_soc_set_runtime_hwparams(substream, &spacemit_snd_pcm_hardware);
@@ -468,7 +453,7 @@ static int spacemit_snd_pcm_open(struct snd_soc_component *component, struct snd
 	}
 	substream->runtime->private_data = dmadata;
 
-	if (!strcmp(name, "c08d0400.spacemit-snd-dma-hdmi")) {
+	if (dmadata->dma_id == DMA_HDMI) {
 		hdmi_ptr.ch_sn = L_CH;
         hdmi_ptr.iec_offset = 0;
         hdmi_ptr.srate = 48000;
@@ -524,7 +509,7 @@ static int spacemit_snd_pcm_new(struct snd_soc_component *component, struct snd_
 		pr_err("%s: get dev error\n", __FUNCTION__);
 		return -1;
 	}
-	if (!strcmp(dev_name(rtd->dev), "ADSP SSPA2 PCM")) {
+	if (dev->dmadata->dma_id == DMA_HDMI) {
 		chan_num = 1;
 		printk("%s playback_only, dev=%s\n", __FUNCTION__, dev_name(rtd->dev));
 	}else{
@@ -577,16 +562,7 @@ static int spacemit_snd_dma_init(struct device *paraent, struct spacemit_snd_soc
 
 static int spacemit_snd_pcm_probe(struct snd_soc_component *component)
 {
-	const char *name = dev_name(component->dev);
-	struct spacemit_snd_soc_device *spacemit_snd_device = kzalloc(sizeof(struct spacemit_snd_soc_device), GFP_KERNEL);
-	if (!spacemit_snd_device) {
-		pr_err("%s: alloc memoery failed\n", __FUNCTION__);
-		return -ENOMEM;
-	}
-
-	pr_info("%s enter: dev=%s\n", __FUNCTION__, name);
-
-	snd_soc_component_set_drvdata(component, spacemit_snd_device);
+	struct spacemit_snd_soc_device *spacemit_snd_device = snd_soc_component_get_drvdata(component);
 
 	spacemit_snd_device->dmadata[0].private_data = spacemit_snd_device;
 	spacemit_snd_device->dmadata[1].private_data = spacemit_snd_device;
@@ -611,8 +587,6 @@ static void spacemit_snd_pcm_remove(struct snd_soc_component *component)
 		}
 		dev->dmadata[i].dma_chan = NULL;
 	}
-
-	kfree(dev);
 }
 static void hdmi_set_cs_channel_sn(struct hdmi_codec_priv *hdmi_priv)
 {
@@ -653,7 +627,6 @@ static uint32_t parity_even(uint32_t sample)
 
 static void hdmi_reformat(void *dst, void *src, int len)
 {
-
     uint32_t *dst32 = (uint32_t *)dst;
     uint16_t *src16 = (uint16_t *)src;
     struct hdmi_codec_priv *dw = &hdmi_ptr;
@@ -748,17 +721,33 @@ static int spacemit_snd_dma_pdev_probe(struct platform_device *pdev)
 	int ret;
 	struct device_node *np = pdev->dev.of_node;
 	struct resource *res;
+	struct spacemit_snd_soc_device *device;
+
+	device = devm_kzalloc(&pdev->dev, sizeof(*device), GFP_KERNEL);
+	if (!device) {
+		pr_err("%s: alloc memoery failed\n", __FUNCTION__);
+		return -ENOMEM;
+	}
 
 	printk("%s enter: dev name %s\n", __func__, dev_name(&pdev->dev));
 
 	if (of_device_is_compatible(np, "spacemit,spacemit-snd-dma-hdmi")){
+		device->dmadata->dma_id = DMA_HDMI;
 		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 		printk("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)res->start, (unsigned long)res->end);
-		priv.buf_res = res;
 		priv.phy_addr = res->start;
 		priv.buf_base = devm_ioremap_resource(&pdev->dev, res);
+		if (IS_ERR(priv.buf_base)) {
+			pr_err("%s audio buf alloc failed\n", __FUNCTION__);
+			return PTR_ERR(priv.buf_base);
+		}
 		ret = snd_soc_register_component(&pdev->dev, &spacemit_snd_dma_component_hdmi, NULL, 0);
-	}else{
+	} else {
+		if (of_device_is_compatible(np, "spacemit,spacemit-snd-dma0")){
+			device->dmadata->dma_id = DMA_I2S0;
+		} else if (of_device_is_compatible(np, "spacemit,spacemit-snd-dma1")) {
+			device->dmadata->dma_id = DMA_I2S1;
+		}
 		ret = snd_soc_register_component(&pdev->dev, &spacemit_snd_dma_component, NULL, 0);
 	}
 
@@ -766,6 +755,7 @@ static int spacemit_snd_dma_pdev_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "failed to register DAI\n");
 		return ret;
 	}
+	dev_set_drvdata(&pdev->dev, device);
 	return 0;
 }
 
@@ -809,5 +799,5 @@ EXPORT_SYMBOL(spacemit_snd_unregister_dmaclient_pdrv);
 module_platform_driver(spacemit_snd_dma_pdrv);
 #endif
 
-MODULE_DESCRIPTION("SPACEMIT Aquila ASoC PCM Platform Driver");
+MODULE_DESCRIPTION("SPACEMIT ASoC PCM Platform Driver");
 MODULE_LICENSE("GPL");
diff --git a/sound/soc/spacemit/spacemit-snd-sspa.c b/sound/soc/spacemit/spacemit-snd-sspa.c
index a6562b2e52b5..4f51c1ba9bab 100644
--- a/sound/soc/spacemit/spacemit-snd-sspa.c
+++ b/sound/soc/spacemit/spacemit-snd-sspa.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (C) 2022 SPACEMIT Micro Limited
+ * Copyright (C) 2024 SPACEMIT
  */
 
 #include <linux/init.h>
@@ -11,7 +11,6 @@
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/of.h>
-
 #include <sound/core.h>
 #include <sound/pcm.h>
 #include <sound/initval.h>
@@ -19,10 +18,7 @@
 #include <sound/soc.h>
 #include <sound/pxa2xx-lib.h>
 #include <sound/dmaengine_pcm.h>
-
 #include "spacemit-snd-sspa.h"
-#include "spacemit-snd.h"
-
 
 struct sspa_priv {
 	struct ssp_device *sspa;
@@ -34,17 +30,43 @@ struct sspa_priv {
 	int running_cnt;
 	void __iomem	*base;
 	void __iomem	*base_clk;
+	void __iomem	*base_hdmi;
 };
 
+static void spacemit_clk_rst_enable(struct sspa_priv *priv)
+{
+	unsigned int value;
+	value = readl_relaxed(priv->base_clk + 0x44);
+
+	value |= PCLK_ENABLE | FCLK_ENABLE;
+	writel(value, priv->base_clk + 0x44);
+	udelay(1);
+	value |= MODULE_ENABLE;
+	writel(value, priv->base_clk + 0x44);
+}
+
+static void spacemit_clk_rst_disable(struct sspa_priv *priv)
+{
+	unsigned int value;
+	value = readl_relaxed(priv->base_clk + 0x44);
+	value |= MODULE_RESET;
+	writel(value, priv->base_clk + 0x44);
+	udelay(1);
+	value &= ~(PCLK_ENABLE | FCLK_ENABLE);
+	writel(value, priv->base_clk + 0x44);
+}
+
 static int mmp_sspa_startup(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
 {
 	u32 value = 0;
-	void __iomem *hdmi_addr = (void __iomem *)ioremap(0xC0400500, 1);
+	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(dai);
 
-	value = readl_relaxed(hdmi_addr + 0x30);
+	value = readl_relaxed(sspa_priv->base_hdmi);
 	value |= BIT(0);
-	writel(value, hdmi_addr + 0x30);
+	writel(value, sspa_priv->base_hdmi);
+
+	spacemit_clk_rst_enable(sspa_priv);
 	return 0;
 }
 
@@ -52,11 +74,12 @@ static void mmp_sspa_shutdown(struct snd_pcm_substream *substream,
 	struct snd_soc_dai *dai)
 {
 	u32 value = 0;
-	void __iomem *hdmi_addr = (void __iomem *)ioremap(0xC0400500, 1);
+	struct sspa_priv *sspa_priv = snd_soc_dai_get_drvdata(dai);
 
-	value = readl_relaxed(hdmi_addr + 0x30);
+	value = readl_relaxed(sspa_priv->base_hdmi);
 	value &= ~BIT(0);
-	writel(value, hdmi_addr + 0x30);
+	writel(value, sspa_priv->base_hdmi);
+	spacemit_clk_rst_disable(sspa_priv);
 }
 
 static int mmp_sspa_set_dai_sysclk(struct snd_soc_dai *cpu_dai,
@@ -115,24 +138,17 @@ static int mmp_sspa_trigger(struct snd_pcm_substream *substream, int cmd,
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_RESUME:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-
 		sspa_priv->running_cnt++;
 		break;
-
 	case SNDRV_PCM_TRIGGER_STOP:
 	case SNDRV_PCM_TRIGGER_SUSPEND:
 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
-	if (sspa_priv->running_cnt > 0)
-		sspa_priv->running_cnt--;
-	if (sspa_priv->running_cnt == 0 ) {
-
-	}
+		if (sspa_priv->running_cnt > 0)
+			sspa_priv->running_cnt--;
 		break;
-
 	default:
 		ret = -EINVAL;
 	}
-
 	return ret;
 }
 
@@ -143,7 +159,6 @@ static int mmp_sspa_probe(struct snd_soc_dai *dai)
 
 	snd_soc_dai_set_drvdata(dai, sspa_priv);
 	return 0;
-
 }
 
 static const struct snd_soc_dai_ops mmp_sspa_dai_ops = {
@@ -156,18 +171,13 @@ static const struct snd_soc_dai_ops mmp_sspa_dai_ops = {
 	.set_fmt	= mmp_sspa_set_dai_fmt,
 };
 
-
-#define SPACEMIT_SND_SSPA_RATES SNDRV_PCM_RATE_8000_192000
-#define SPACEMIT_SND_SSPA_FORMATS (SNDRV_PCM_FMTBIT_S8 | \
-               SNDRV_PCM_FMTBIT_S16_LE | \
-               SNDRV_PCM_FMTBIT_S24_LE | \
-               SNDRV_PCM_FMTBIT_S32_LE)
+#define SPACEMIT_SND_SSPA_RATES SNDRV_PCM_RATE_48000
+#define SPACEMIT_SND_SSPA_FORMATS SNDRV_PCM_FMTBIT_S16_LE
 
 static struct snd_soc_dai_driver spacemit_snd_sspa_dai[] = {
 	{
 		.name = "SSPA2",
 		.probe = mmp_sspa_probe,
-		.id = SPACEMIT_SND_SSPA2,
 		.playback = {
 			.stream_name = "SSPA2 TX",
 			.channels_min = 2,
@@ -185,6 +195,17 @@ static void spacemit_dma_params_init(struct resource *res, struct snd_dmaengine_
 	dma_params->maxburst = 32;
 	dma_params->addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
 }
+
+static void spacemit_clk_init(struct sspa_priv *priv)
+{
+	unsigned int value;
+
+	/*48k 32bit*/
+	value = 0x1ff << 4; //div 512
+	value |=  CLK1_24P576MHZ;
+	writel(value, priv->base_clk + 0x44);
+}
+
 static const struct snd_soc_component_driver spacemit_snd_sspa_component = {
 	.name		= "spacemit-snd-sspa",
 };
@@ -195,7 +216,6 @@ static int spacemit_snd_sspa_pdev_probe(struct platform_device *pdev)
 	struct sspa_priv *priv;
 	struct resource *base_res;
 	struct resource *clk_res;
-	unsigned int value;
 
 	pr_info("enter %s\n", __FUNCTION__);
 	priv = devm_kzalloc(&pdev->dev,
@@ -205,29 +225,30 @@ static int spacemit_snd_sspa_pdev_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 	base_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	pr_info("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)base_res->start, (unsigned long)base_res->end);
 	priv->base = devm_ioremap_resource(&pdev->dev, base_res);
-
+	if (IS_ERR(priv->base)) {
+		pr_err("%s reg base alloc failed\n", __FUNCTION__);
+		return PTR_ERR(priv->base);
+	}
 	clk_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	pr_info("%s, start=0x%lx, end=0x%lx\n", __FUNCTION__, (unsigned long)clk_res->start, (unsigned long)clk_res->end);
 	priv->base_clk = devm_ioremap_resource(&pdev->dev, clk_res);
-
+	if (IS_ERR(priv->base_clk)) {
+		pr_err("%s reg clk base alloc failed\n", __FUNCTION__);
+		return PTR_ERR(priv->base_clk);
+	}
+	priv->base_hdmi = (void __iomem *)ioremap(0xC0400530, 1);
+	if (IS_ERR(priv->base_hdmi)) {
+		pr_err("%s reg hdmi base alloc failed\n", __FUNCTION__);
+		return PTR_ERR(priv->base_hdmi);
+	}
 	priv->dma_params = devm_kzalloc(&pdev->dev, sizeof(struct snd_dmaengine_dai_dma_data),
 			GFP_KERNEL);
-
 	if (priv->dma_params == NULL) {
 		pr_err("%s dma_params alloc failed\n", __FUNCTION__);
 		return -ENOMEM;
 	}
 	spacemit_dma_params_init(base_res, priv->dma_params);
-
-	/*48k 32bit*/
-	value = 0x1ff<<4;
-	value |=  CLK1_24P576MHZ | PCLK_ENABLE | FCLK_ENABLE;
-	writel(value, priv->base_clk + 0x44);
-	udelay(1);
-	value |= MODULE_ENABLE;
-	writel(value, priv->base_clk + 0x44);
+	spacemit_clk_init(priv);
 
 	platform_set_drvdata(pdev, priv);
 	ret = devm_snd_soc_register_component(&pdev->dev, &spacemit_snd_sspa_component,
@@ -236,9 +257,7 @@ static int spacemit_snd_sspa_pdev_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "failed to register DAI\n");
 		return ret;
 	}
-
 	return 0;
-
 }
 
 #ifdef CONFIG_OF
@@ -272,6 +291,6 @@ EXPORT_SYMBOL(spacemit_snd_unregister_sspa_pdrv);
 module_platform_driver(spacemit_snd_sspa_pdrv);
 #endif
 
-MODULE_DESCRIPTION("SPACEMIT Aquila ASoC SSPA Driver");
+MODULE_DESCRIPTION("SPACEMIT ASoC SSPA Driver");
 MODULE_LICENSE("GPL");
 
diff --git a/sound/soc/spacemit/spacemit-snd-sspa.h b/sound/soc/spacemit/spacemit-snd-sspa.h
index e4d226a0898b..d762f62b632a 100644
--- a/sound/soc/spacemit/spacemit-snd-sspa.h
+++ b/sound/soc/spacemit/spacemit-snd-sspa.h
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (C) 2022 SPACEMIT Micro Limited
+ * Copyright (C) 2024 SPACEMIT
  */
 
 #ifndef _SPACEMIT_SND_SSPA_H_
diff --git a/sound/soc/spacemit/spacemit-snd.h b/sound/soc/spacemit/spacemit-snd.h
deleted file mode 100644
index dcec4c65e89a..000000000000
--- a/sound/soc/spacemit/spacemit-snd.h
+++ /dev/null
@@ -1,16 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (C) 2022 SPACEMIT Micro Limited
- */
-
-#ifndef _SPACEMIT_SND_H
-#define _SPACEMIT_SND_H
-
-enum {
-	SPACEMIT_SND_SSPA0 = 0,
-	SPACEMIT_SND_SSPA1,
-	SPACEMIT_SND_SSPA2,
-	SPACEMIT_SND_SSPA3
-};
-
-#endif
-- 
2.47.0

