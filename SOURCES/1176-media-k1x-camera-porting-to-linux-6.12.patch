From 461bc15fba70743d5155cf8e0e57426be2a8f57d Mon Sep 17 00:00:00 2001
From: zhangmeng <zhangmeng.kevin@spacemit.com>
Date: Thu, 5 Dec 2024 21:26:48 +0800
Subject: [PATCH 1176/1206] media: k1x/camera: porting to linux-6.12

Change-Id: I79d44eba0710d966ebc2d6b170b643683da9b43c
---
 .../media/platform/spacemit/camera/cam_ccic/ccic_vdev.c   | 6 +++---
 .../media/platform/spacemit/camera/cam_plat/cam_plat.c    | 2 +-
 drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c  | 2 +-
 drivers/media/platform/spacemit/camera/vi/subdev.c        | 6 +++---
 drivers/media/platform/spacemit/camera/vi/vdev.c          | 8 ++++----
 5 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c
index c60e5cedf46e..40ae02ae184f 100644
--- a/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c
+++ b/drivers/media/platform/spacemit/camera/cam_ccic/ccic_vdev.c
@@ -734,7 +734,7 @@ static int spm_cvdev_vidioc_querycap(struct file *file, void *fh, struct v4l2_ca
 	struct video_device *vnode = video_devdata(file);
 	struct spm_ccic_vnode *ac_vnode = container_of(vnode, struct spm_ccic_vnode, vnode);
 
-	strlcpy(cap->driver, ac_vnode->name, 16);
+	strscpy(cap->driver, ac_vnode->name, 16);
 	cap->capabilities = V4L2_CAP_DEVICE_CAPS | V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
 	cap->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
 	return 0;
@@ -1217,8 +1217,8 @@ struct spm_ccic_vnode* spm_cvdev_create_vnode(const char *name,
 		goto queue_init_fail;
 	}
 
-	strlcpy(ac_vnode->vnode.name, name, 32);
-	strlcpy(ac_vnode->name, name, 32);
+	strscpy(ac_vnode->vnode.name, name, 32);
+	strscpy(ac_vnode->name, name, 32);
 	ac_vnode->ccic_dev = ccic_dev;
 	ac_vnode->vnode.queue = &ac_vnode->buf_queue;
 	ac_vnode->vnode.fops = &spm_ccic_file_operations;
diff --git a/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c b/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c
index cfab6f543e53..eb43f9d44443 100644
--- a/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c
+++ b/drivers/media/platform/spacemit/camera/cam_plat/cam_plat.c
@@ -199,7 +199,7 @@ static int plat_cam_probe(struct platform_device *pdev)
 
 	media_device_init(v4l2_dev->mdev);
 	v4l2_dev->mdev->dev = &(pdev->dev);
-	strlcpy(v4l2_dev->mdev->model, PLAT_CAM_NAME, sizeof(v4l2_dev->mdev->model));
+	strscpy(v4l2_dev->mdev->model, PLAT_CAM_NAME, sizeof(v4l2_dev->mdev->model));
 
 	ret = __media_device_register(v4l2_dev->mdev, NULL);
 	if (ret)
diff --git a/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c b/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c
index a1bd81c30ee5..b4ad8e0e1046 100644
--- a/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c
+++ b/drivers/media/platform/spacemit/camera/vi/k1xvi/fe_isp.c
@@ -4120,7 +4120,7 @@ struct fe_hdr_combine *fe_hdr_combine_create(unsigned int grp_id, void *isp_ctx)
 	for (i = HDR_PAD_F0OUT; i < HDR_COMBINE_PAD_NUM; i++) {
 		hdr_combine->pads[i].flags = MEDIA_PAD_FL_SOURCE;
 	}
-	strlcpy(name, "hdr_combine", SPACEMIT_VI_ENTITY_NAME_LEN);
+	strscpy(name, "hdr_combine", SPACEMIT_VI_ENTITY_NAME_LEN);
 	ret = spm_subdev_init(grp_id, name, 0, &fe_hdr_combine_subdev_ops, HDR_COMBINE_PAD_NUM, hdr_combine->pads, isp_ctx, &hdr_combine->sc_subdev);
 	if (ret) {
 		cam_err("%s spm_subdev_init fail ret=%d.", __func__, ret);
diff --git a/drivers/media/platform/spacemit/camera/vi/subdev.c b/drivers/media/platform/spacemit/camera/vi/subdev.c
index 2280bd21ebe3..2be31223da8c 100644
--- a/drivers/media/platform/spacemit/camera/vi/subdev.c
+++ b/drivers/media/platform/spacemit/camera/vi/subdev.c
@@ -111,7 +111,7 @@ int spm_subdev_init(unsigned int grp_id,
 		cam_err("%s register plat cam(%s) failed ret=%d ", __func__, name, ret);
 		return ret;
 	}
-	strlcpy(sc_subdev->name, name, V4L2_SUBDEV_NAME_SIZE);
+	strscpy(sc_subdev->name, name, V4L2_SUBDEV_NAME_SIZE);
 	sc_subdev->pcsd.sd.grp_id = grp_id;
 	return 0;
 }
@@ -145,11 +145,11 @@ long spm_subdev_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 	case VIDIOC_G_ENTITY_INFO:
 		entity_info = (struct v4l2_vi_entity_info *)arg;
 		entity_info->id = media_entity_id(&sd->entity);
-		strlcpy(entity_info->name, sc_subdev->name, SPACEMIT_VI_ENTITY_NAME_LEN);
+		strscpy(entity_info->name, sc_subdev->name, SPACEMIT_VI_ENTITY_NAME_LEN);
 		return 0;
 	case VIDIOC_QUERYCAP: {
 		struct v4l2_capability *cap = (struct v4l2_capability*)arg;
-		strlcpy(cap->driver, "spacemitisp", 16);
+		strscpy(cap->driver, "spacemitisp", 16);
 		cap->capabilities = V4L2_CAP_DEVICE_CAPS | V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
 		cap->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
 	}
diff --git a/drivers/media/platform/spacemit/camera/vi/vdev.c b/drivers/media/platform/spacemit/camera/vi/vdev.c
index c38658c1bf1c..3581155f94dd 100644
--- a/drivers/media/platform/spacemit/camera/vi/vdev.c
+++ b/drivers/media/platform/spacemit/camera/vi/vdev.c
@@ -1396,7 +1396,7 @@ static int spm_vdev_vidioc_streamoff(struct file *file, void *fn, enum v4l2_buf_
 
 static int spm_vdev_vidioc_querycap(struct file *file, void *fh, struct v4l2_capability *cap)
 {
-	strlcpy(cap->driver, "spacemitisp", 16);
+	strscpy(cap->driver, "spacemitisp", 16);
 	cap->capabilities = V4L2_CAP_DEVICE_CAPS | V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
 	cap->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
 	return 0;
@@ -1555,7 +1555,7 @@ static long spm_vdev_vidioc_default(struct file *file,
 	case VIDIOC_G_ENTITY_INFO:
 		entity_info = (struct v4l2_vi_entity_info *)arg;
 		entity_info->id = media_entity_id(&sc_vnode->vnode.entity);
-		strlcpy(entity_info->name, sc_vnode->name, SPACEMIT_VI_ENTITY_NAME_LEN);
+		strscpy(entity_info->name, sc_vnode->name, SPACEMIT_VI_ENTITY_NAME_LEN);
 		break;
 	case VIDIOC_G_SLICE_MODE:
 		BUG_ON(!pipe);
@@ -2065,8 +2065,8 @@ struct spm_camera_vnode *spm_vdev_create_vnode(const char *name,
 		goto queue_init_fail;
 	}
 
-	strlcpy(sc_vnode->vnode.name, name, 32);
-	strlcpy(sc_vnode->name, name, SPACEMIT_VI_ENTITY_NAME_LEN);
+	strscpy(sc_vnode->vnode.name, name, 32);
+	strscpy(sc_vnode->name, name, SPACEMIT_VI_ENTITY_NAME_LEN);
 	sc_vnode->vnode.queue = &sc_vnode->buf_queue;
 	sc_vnode->vnode.fops = &spm_camera_file_operations;
 	sc_vnode->vnode.ioctl_ops = &spm_camera_v4l2_ioctl_ops;
-- 
2.47.0

