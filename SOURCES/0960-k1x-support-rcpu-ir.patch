From 42ffb565b817863b9d774130616de24857a83537 Mon Sep 17 00:00:00 2001
From: yanhaodong <haodong.yan@spacemit.com>
Date: Sat, 24 Aug 2024 15:45:37 +0800
Subject: [PATCH 0960/1206] k1x:support rcpu ir

Change-Id: Ie0dd8dcf8f1704c9adf025daa1e06d92929c12b4
---
 arch/riscv/boot/dts/spacemit/k1-x.dtsi        |  21 ++
 .../riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi |  12 ++
 drivers/media/rc/ir-spacemit.c                | 193 +++++++++++++-----
 3 files changed, 175 insertions(+), 51 deletions(-)

diff --git a/arch/riscv/boot/dts/spacemit/k1-x.dtsi b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
index 99a1c6301c45..5cf2ba13617f 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x.dtsi
@@ -1624,6 +1624,27 @@ rpwm2: pwm@c0888300 {
 			status = "disabled";
 		};
 
+		ircrx: irc-rx@d4017f00 {
+			compatible = "spacemit,k1x-irc";
+			reg = <0x0 0xd4017f00 0x0 0x100>;
+			interrupts = <69>;
+			interrupt-parent = <&intc>;
+			clocks = <&ccu CLK_IR>;
+			resets = <&reset RESET_IR>;
+			clock-frequency = <102400000>;
+			status = "disabled";
+		};
+
+		r_ircrx: irc-rx@c088e000 {
+			compatible = "spacemit,k1x-rirc";
+			reg = <0x0 0xc088e000 0x0 0x100>;
+			clocks = <&ccu CLK_RCPU_IR>;
+			resets = <&reset RESET_RCPU_IR>;
+			clock-frequency = <30720000>;
+			rcpu-ir;
+			status = "disabled";
+		};
+
 		timer0: timer@d4014000 {
 			compatible = "spacemit,soc-timer";
 			reg = <0x0 0xd4014000 0x0 0xc8>;
diff --git a/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi b/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi
index 0841ddfdab4b..04fc08d016fd 100644
--- a/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi
+++ b/arch/riscv/boot/dts/spacemit/k1-x_pinctrl.dtsi
@@ -391,6 +391,18 @@ K1X_PADCONF(GPIO_58, MUX_MODE4, (EDGE_NONE | PULL_UP | PAD_1V8_DS2))	/* ir_rx */
 		>;
 	};
 
+	pinctrl_r_ir_rx_0: r_ir_rx_0_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(GPIO_48, MUX_MODE3, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* r_ir_rx */
+		>;
+	};
+
+	pinctrl_r_ir_rx_1: r_ir_rx_1_grp {
+		pinctrl-single,pins = <
+			K1X_PADCONF(GPIO_44, MUX_MODE3, (EDGE_NONE | PULL_UP | PAD_1V8_DS2))	/* r_ir_rx */
+		>;
+	};
+
 	pinctrl_pwm0_0: pwm0_0_grp {
 		pinctrl-single,pins = <
 			K1X_PADCONF(MMC1_DAT3, MUX_MODE5, (EDGE_NONE | PULL_UP | PAD_3V_DS4))	/* pwm0 */
diff --git a/drivers/media/rc/ir-spacemit.c b/drivers/media/rc/ir-spacemit.c
index e022603e743c..65572dbb2418 100644
--- a/drivers/media/rc/ir-spacemit.c
+++ b/drivers/media/rc/ir-spacemit.c
@@ -10,8 +10,13 @@
 #include <linux/of_platform.h>
 #include <linux/reset.h>
 #include <media/rc-core.h>
+#include <linux/rpmsg.h>
 
 #define SPACEMIT_IR_DEV "spacemit-ir"
+#define SPACEMIT_RIR_DEV "spacemit-rir"
+#define IRQUP_MSG	"irqon"
+#define STARTUP_MSG		"startup"
+#define STARTUP_OK_MSG		"startup-ok"
 
 /*Registers*/
 #define SPACEMIT_IRC_EN 0x0
@@ -52,22 +57,29 @@
 #define SPACEMIT_IR_TIMEOUT 10000
 #define IRFIFO_DEF_CMP 1
 
+static void *private_data[1];
+static const struct of_device_id spacemit_rir_match[];
+
 struct spacemit_ir {
 	struct rc_dev *rc;
 	void __iomem *base;
 	int irq;
 	int fifo_size;
 	int clkdiv;
-	struct clk *apb_clk;
+	int freq;
 	const char      *map_name;
-#ifndef CONFIG_SOC_SPACEMIT_K1X
 	struct clk *clk;
 	struct reset_control *rst;
-#endif
+};
+
+struct instance_data {
+	struct rpmsg_device *rpdev;
+	struct spacemit_ir *ir;
 };
 
 struct spacemit_ir_data {
 	int fifo_size;
+	void **pdate;
 };
 
 static irqreturn_t spacemit_ir_irq(int irqno,void *dev_id)
@@ -106,11 +118,9 @@ static irqreturn_t spacemit_ir_irq(int irqno,void *dev_id)
 static int spacemit_ir_config(struct rc_dev *rc_dev)
 {
 	struct spacemit_ir *ir = rc_dev->priv;
-	//u32 base_clk = clk_get_rate(ir->apb_clk);
-	u32 base_clk = 50000000;
 
 	/*set clkdiv*/
-	ir->clkdiv = DIV_ROUND_UP(base_clk, IR_FREQ)-1;
+	ir->clkdiv = DIV_ROUND_UP(ir->freq, IR_FREQ) - 1;
 	writel(ir->clkdiv, ir->base + SPACEMIT_IR_CLKDIV);
 
 	writel(IRQ_CLEAR_ALL,ir->base + SPACEMIT_IR_INTSTA);
@@ -136,33 +146,23 @@ static int spacemit_ir_hw_init(struct device *dev)
 	struct spacemit_ir *ir = dev_get_drvdata(dev);
 	int ret;
 
-#if 0
-#ifndef CONFIG_SOC_SPACEMIT_K1X
 	ret = reset_control_deassert(ir->rst);
 	if(ret)
-		goto disable_apb_clk;
-#endif
+		return ret;
 
 	ret = clk_prepare_enable(ir->clk);
 	if(ret){
 		dev_err(dev,"failed to enable ir clk\n");
-#ifdef CONFIG_SOC_SPACEMIT_K1X
 		goto exit;
-#endif
 	}
-#endif
 
 	spacemit_ir_config(ir->rc);
 	writel(IR_IRQ_ENALL, ir->base + SPACEMIT_IR_INTEN);
 	writel(SPACEMIT_IR_ENABLE, ir->base + SPACEMIT_IRC_EN);
 	return 0;
 
-#if 0
 exit:
 	reset_control_assert(ir->rst);
-disable_apb_clk:
-	clk_disable_unprepare(ir->apb_clk);
-#endif
 
 	return ret;
 }
@@ -171,12 +171,8 @@ static void spacemit_ir_hw_exit(struct device *dev)
 {
 	struct spacemit_ir *ir = dev_get_drvdata(dev);
 
-#ifdef CONFIG_SOC_SPACEMIY_K1X
 	clk_disable_unprepare(ir->clk);
 	reset_control_assert(ir->rst);
-#endif
-
-	clk_disable_unprepare(ir->apb_clk);
 }
 
 static int spacemit_ir_probe(struct platform_device *pdev)
@@ -184,37 +180,36 @@ static int spacemit_ir_probe(struct platform_device *pdev)
 	int ret = 0;
 	struct device *dev = &pdev->dev;
 	struct device_node *dn = dev->of_node;
-#if 0
-	u32 ir_clk;
-#endif
+	const struct of_device_id *of_id;
+	struct instance_data *idata;
+	struct rpmsg_device *rpdev;
 	struct spacemit_ir *ir;
 
 	ir = devm_kzalloc(dev, sizeof(struct spacemit_ir), GFP_KERNEL);
 	if (!ir)
 		return -ENOMEM;
 
-#if 0
-	ir->clk = devm_clk_get(dev, "ir");
+	ir->freq = 0;
+	ir->clk = devm_clk_get(dev, NULL);
 	if (IS_ERR(ir->clk)) {
 		dev_err(dev, "failed to get a ir clock.\n");
 		return PTR_ERR(ir->clk);
 	}
-#ifndef CONFIG_SOC_SPACEMIT_K1X
 	ir->rst = devm_reset_control_get_exclusive(dev, NULL);
 	if (IS_ERR(ir->rst))
 		return PTR_ERR(ir->rst);
-#endif
 
 	/* Base clock frequency (optional) */
-	of_property_read_u32(dn, "clock-frequency", &ir_clk);
-
-	ret = clk_set_rate(ir->clk, ir_clk);
-	if(ret){
-		dev_err(dev,"set ir base clock failed!\n");
-		return ret;
+	of_property_read_u32(dn, "clock-frequency", &ir->freq);
+	if(!ir->freq) {
+		ir->freq = clk_get_rate(ir->clk);
+		if(!ir->freq) {
+			dev_err(dev, "failed to get ir function clk-freq\n");
+			return -ENODEV;
+		}
 	}
-	dev_dbg(dev, "set base clock frequency to %d Hz.\n", ir_clk);
-#endif
+
+	dev_dbg(dev, "ir base clock frequency : %d Hz.\n", ir->freq);
 
 	ir->base = devm_platform_ioremap_resource(pdev,0);
 	if(IS_ERR(ir->base)){
@@ -251,16 +246,33 @@ static int spacemit_ir_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, ir);
 
-	ir->irq = platform_get_irq(pdev, 0);
-	if (ir->irq < 0) {
-		ret = ir->irq;
-		goto free_dev;
-	}
+	//ir->irq = platform_get_irq(pdev, 0);
+	if (of_get_property(pdev->dev.of_node, "rcpu-ir", NULL)) {
+		/* rcpu service */
+		of_id = of_match_device(spacemit_rir_match, &pdev->dev);
+		if (!of_id) {
+			pr_err("Unable to match OF ID\n");
+			ret = -ENODEV;
+			goto free_dev;
+		}
 
-	ret = devm_request_irq(dev, ir->irq, spacemit_ir_irq, 0, SPACEMIT_IR_DEV, ir);
-	if (ret) {
-		dev_err(dev, "failed request irq\n");
-		goto free_dev;
+		idata = (struct instance_data *)(((struct spacemit_ir_data *)of_id->data)->pdate)[0];
+		rpdev = idata->rpdev;
+		idata->ir = ir;
+
+		ret = rpmsg_send(rpdev->ept, STARTUP_MSG, strlen(STARTUP_MSG));
+		if (ret) {
+			dev_err(&rpdev->dev, "rpmsg_send failed: %d\n", ret);
+			goto free_dev;
+		}
+
+	} else {
+		ir->irq = platform_get_irq(pdev, 0);
+		ret = devm_request_irq(dev, ir->irq, spacemit_ir_irq, 0, SPACEMIT_IR_DEV, ir);
+		if (ret) {
+			dev_err(dev, "failed request irq\n");
+			goto free_dev;
+		}
 	}
 
 	ret = spacemit_ir_hw_init(dev);
@@ -303,13 +315,9 @@ static const struct spacemit_ir_data spacemit_k1x_ir_data = {
 	.fifo_size = 32,
 };
 
-static const struct spacemit_ir_data spacemit_k1pro_ir_data = {
-	.fifo_size = 32,
-};
-
 static const struct of_device_id spacemit_ir_match[] = {
 	{
-		.compatible = "spacemit,irc",
+		.compatible = "spacemit,k1x-irc",
 		.data = &spacemit_k1x_ir_data,
 	},
 };
@@ -327,5 +335,88 @@ static struct platform_driver spacemit_ir_driver = {
 
 module_platform_driver(spacemit_ir_driver);
 
+static struct spacemit_ir_data spacemit_k1x_rir_data = {
+	.fifo_size = 32,
+	.pdate = &private_data[0],
+};
+
+static const struct of_device_id spacemit_rir_match[] = {
+	{
+		.compatible = "spacemit,k1x-rirc",
+		.data = &spacemit_k1x_rir_data,
+	},
+};
+
+static struct platform_driver spacemit_rir_driver = {
+	.probe = spacemit_ir_probe,
+	.remove = spacemit_ir_remove,
+	.shutdown = spacemit_ir_shutdown,
+	.driver = {
+		.name = SPACEMIT_RIR_DEV,
+		.of_match_table = spacemit_rir_match,
+		.pm = &spacemit_ir_pm_ops,
+	},
+};
+
+static struct rpmsg_device_id rpmsg_driver_rir_id_table[] = {
+	{ .name	= "rir-service", .driver_data = 0, },
+	{ },
+};
+MODULE_DEVICE_TABLE(rpmsg, rpmsg_driver_rir_id_table);
+
+static int rpmsg_rir_client_cb(struct rpmsg_device *rpdev, void *data,
+		int len, void *priv, u32 src)
+{
+	struct instance_data *idata = dev_get_drvdata(&rpdev->dev);
+	struct spacemit_ir *dev = idata->ir;
+	int ret;
+
+	spacemit_ir_irq(0, (void *)dev);
+
+	ret = rpmsg_send(rpdev->ept, IRQUP_MSG, strlen(IRQUP_MSG));
+	if (ret) {
+		dev_err(&rpdev->dev, "rpmsg_send failed: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int rpmsg_rir_client_probe(struct rpmsg_device *rpdev)
+{
+	struct instance_data *idata;
+
+	dev_info(&rpdev->dev, "new channel: 0x%x -> 0x%x!\n",
+					rpdev->src, rpdev->dst);
+
+	idata = devm_kzalloc(&rpdev->dev, sizeof(*idata), GFP_KERNEL);
+	if (!idata)
+		return -ENOMEM;
+
+	dev_set_drvdata(&rpdev->dev, idata);
+	idata->rpdev = rpdev;
+
+	private_data[0] = (void *)idata;
+
+	platform_driver_register(&spacemit_rir_driver);
+
+	return 0;
+}
+
+static void rpmsg_rir_client_remove(struct rpmsg_device *rpdev)
+{
+	dev_info(&rpdev->dev, "rpmsg rcan client driver is removed\n");
+	platform_driver_unregister(&spacemit_rir_driver);
+}
+
+static struct rpmsg_driver rpmsg_rir_client = {
+	.drv.name	= KBUILD_MODNAME,
+	.id_table	= rpmsg_driver_rir_id_table,
+	.probe		= rpmsg_rir_client_probe,
+	.callback	= rpmsg_rir_client_cb,
+	.remove		= rpmsg_rir_client_remove,
+};
+module_rpmsg_driver(rpmsg_rir_client);
+
 MODULE_LICENSE("GPL");
-MODULE_AUTHOR("Spacemit");
\ No newline at end of file
+MODULE_AUTHOR("Spacemit");
-- 
2.47.0

