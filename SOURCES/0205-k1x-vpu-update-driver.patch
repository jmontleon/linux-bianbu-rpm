From f3fc02f7d33029c0fed27874778fdedce4b5c4bd Mon Sep 17 00:00:00 2001
From: fuqiang <qiang.fu@spacemit.com>
Date: Wed, 20 Dec 2023 20:02:47 +0800
Subject: [PATCH 0205/1203] k1x:vpu: update driver

1.support reset
2.support power-domain(include clock)

Change-Id: I82b7d75b1a57cff1185d0f65b344f255f133ce12
Signed-off-by: fuqiang <qiang.fu@spacemit.com>
---
 .../platform/spacemit/vpu_k1x/dev/mvx_dev.c   | 37 +++++++++++++------
 .../platform/spacemit/vpu_k1x/dev/mvx_dev.h   |  2 +
 2 files changed, 28 insertions(+), 11 deletions(-)

diff --git a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
index c3fc1254c4f9..30270aa54476 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
+++ b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.c
@@ -40,10 +40,13 @@
 #include <linux/interrupt.h>
 #include <linux/pm_runtime.h>
 #include <linux/of_address.h>
+#include <linux/of_device.h>
 #include <linux/of_irq.h>
 #include <linux/module.h>
 #include <linux/pci.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/pm.h>
 #include <linux/printk.h>
 #include <linux/workqueue.h>
 #include <linux/clk.h>
@@ -321,6 +324,13 @@ static int mvx_dev_probe(struct device *dev,
 	if (ret < 0)
 		goto free_ctx;
 
+	/*handle reset for k1x*/
+	ctx->rst = devm_reset_control_get_optional_exclusive(dev, NULL);
+	if (IS_ERR(ctx->rst))
+		goto exit_reset;
+
+	reset_control_deassert(ctx->rst);
+
 	/* Setup client ops callbacks. */
 	ctx->client_ops.get_hw_ver = get_hw_ver;
 	ctx->client_ops.get_formats = get_formats;
@@ -422,6 +432,9 @@ static int mvx_dev_probe(struct device *dev,
 runtime_put:
 	pm_runtime_put_sync(ctx->dev);
 
+exit_reset:
+    reset_control_assert(ctx->rst);
+
 free_ctx:
 	devm_kfree(dev, ctx);
 
@@ -443,6 +456,8 @@ static int mvx_dev_remove(struct mvx_dev_ctx *ctx)
 	if (IS_ENABLED(CONFIG_DEBUG_FS))
 		debugfs_remove_recursive(ctx->dentry);
 
+	reset_control_assert(ctx->rst);
+
 	devm_kfree(ctx->dev, ctx);
 
 	return 0;
@@ -558,7 +573,7 @@ static int mvx_pm_poweron(struct device *dev)
 {
     struct mvx_dev_ctx *ctx = dev_get_drvdata(dev);
 
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_poweron");
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_poweron");
     mvx_pm_enable_clk(dev);
     reset_hw(dev);
     mvx_sched_resume(&ctx->scheduler);
@@ -579,7 +594,7 @@ static int mvx_pm_poweroff(struct device *dev)
 
 static int mvx_pm_suspend(struct device *dev)
 {
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_suspend start. b_backto_active=%d", b_backto_active);
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_suspend start. b_backto_active=%d", b_backto_active);
 
     if (!pm_runtime_status_suspended(dev)) {
         mvx_pm_poweroff(dev);
@@ -588,14 +603,14 @@ static int mvx_pm_suspend(struct device *dev)
         b_backto_active = false;
     }
 
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_suspend exit. b_backto_active=%d", b_backto_active);
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_suspend exit. b_backto_active=%d", b_backto_active);
 
-    return 0;
+	return 0;
 }
 
 static int mvx_pm_resume(struct device *dev)
 {
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_resume start. b_backto_active=%d", b_backto_active);
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_resume start. b_backto_active=%d", b_backto_active);
 
     if (b_backto_active) {
         mvx_pm_poweron(dev);
@@ -606,16 +621,16 @@ static int mvx_pm_resume(struct device *dev)
 
 static int mvx_pm_runtime_suspend(struct device *dev)
 {
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_runtime_suspend");
-    mvx_pm_disable_clk(dev);
-    return 0;
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_runtime_suspend");
+	//mvx_pm_disable_clk(dev);
+	return 0;
 }
 
 static int mvx_pm_runtime_resume(struct device *dev)
 {
-    MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_runtime_resume");
-    mvx_pm_enable_clk(dev);
-    reset_hw(dev);
+	MVX_LOG_PRINT(&mvx_log_dev, MVX_LOG_INFO, "mvx_pm_runtime_resume");
+	//mvx_pm_enable_clk(dev);
+	//reset_hw(dev);
 
     return 0;
 }
diff --git a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.h b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.h
index db156f9d6d0e..984369c7592b 100644
--- a/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.h
+++ b/drivers/media/platform/spacemit/vpu_k1x/dev/mvx_dev.h
@@ -32,6 +32,7 @@
 #ifndef _MVX_DEV_H_
 #define _MVX_DEV_H_
 
+#include <linux/reset.h>
 #include "mvx_hwreg.h"
 #include "mvx_scheduler.h"
 
@@ -56,6 +57,7 @@ struct mvx_dev_ctx {
 	enum mvx_hw_id hw_id;
 	uint32_t hw_revision;
 	uint32_t hw_patch;
+	struct reset_control *rst;
 };
 
 /****************************************************************************
-- 
2.47.0

